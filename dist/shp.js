(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.shp = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';
const Promise = require('lie');
const combine = require('./combine');
const Buffer = require('buffer').Buffer;
module.exports = binaryAjax;
function binaryAjax (_url, type) {
  return new Promise(function (resolve, reject) {
    const url = combine(_url, type);
    const ajax = new XMLHttpRequest();
    ajax.open('GET', url, true);
    if (type !== 'prj' && type !== 'cpg') {
      ajax.responseType = 'arraybuffer';
    }
    ajax.addEventListener('load', function () {
      if (ajax.status > 399) {
        if (type === 'prj' || type === 'cpg') {
          return resolve(false);
        } else {
          return reject(new Error(ajax.status));
        }
      }
      if (type !== 'prj' && type !== 'cpg') {
        return resolve(Buffer.from(ajax.response));
      } else {
        return resolve(ajax.response);
      }
    }, false);
    ajax.send();
  });
}

},{"./combine":4,"buffer":11,"lie":15}],2:[function(require,module,exports){
(function (global){(function (){
'use strict';
const fallback = require('./binaryajax-browser');
const combine = require('./combine');
const Buffer = require('buffer').Buffer;
module.exports = async function binaryAjax (_url, type) {
  if (!global.fetch) {
    return fallback(_url, type);
  }
  const url = combine(_url, type);
  const isOptionalTxt = type === 'prj' || type === 'cpg';
  try {
    const resp = await fetch(url);
    if (resp.status > 399) {
      throw new Error(resp.statusText);
    }
    if (isOptionalTxt) {
      return resp.text();
    }
    const parsed = await resp.arrayBuffer();
    return Buffer.from(parsed);
  } catch (e) {
    console.log('ERROR', e, type);
    if (isOptionalTxt || type === 'dbf') {
      return false;
    }
    throw e;
  }
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./binaryajax-browser":1,"./combine":4,"buffer":11}],3:[function(require,module,exports){

module.exports = clientReadFile;
function clientReadFile(file, type = 'binary', cpg = 'utf-8') {
  return new Promise(function (resolve, reject) {
    try {
      const fileReader = new FileReader();
      fileReader.onload = function (e) {
        const contents = e.target.result;
        return resolve(contents);
      };
      if (type === 'text') {
        fileReader.readAsText(file, cpg);
      } else if (type === 'blob') {
        fileReader.readAsDataURL(file);
      } else {
        fileReader.readAsArrayBuffer(file, cpg);
      }
    } catch (err) {
      return reject(err);
    }
  });
}

},{}],4:[function(require,module,exports){
(function (global){(function (){
const URL = global.URL;

module.exports = (base, type) => {
  if (!type) {
    return base;
  }
  const url = new URL(base);
  url.pathname = `${url.pathname}.${type}`;
  return url.href;
};

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],5:[function(require,module,exports){

const obj = {
    'GCS_Abidjan_1987': 4143,
    'GCS_Accra': 4168,
    'GCS_Adindan': 4201,
    'GCS_Afgooye': 4205,
    'GCS_Agadez': 4206,
    'GCS_Ain_el_Abd_1970': 4204,
    'GCS_Arc_1950': 4209,
    'GCS_Arc_1960': 4210,
    'GCS_Ayabelle': 4713,
    'GCS_Beduaram': 4213,
    'GCS_Bissau': 4165,
    'GCS_Cadastre_1997': 4475,
    'GCS_Camacupa': 4220,
    'GCS_Cape': 4222,
    'GCS_Carthage': 4223,
    'GCS_Carthage_Grad': 37225,
    'GCS_Carthage_Paris': 4816,
    'GCS_Conakry_1905': 4315,
    'GCS_Cote_d_Ivoire': 4226,
    'GCS_Dabola_1981': 4155,
    'GCS_Douala': 4228,
    'GCS_Douala_1948': 4192,
    'GCS_Egypt_1907': 4229,
    'GCS_Egypt_1930': 4199,
    'GCS_Egypt_Gulf_of_Suez_S-650_TL': 4706,
    'GCS_European_1950': 4230,
    'GCS_European_Libyan_Datum_1979': 4159,
    'GCS_Garoua': 4197,
    'GCS_Hartebeesthoek_1994': 4148,
    'GCS_IGC_1962_6th_Parallel_South': 4697,
    'GCS_IGCB_1955': 4701,
    'GCS_IGN_Astro_1960': 4700,
    'GCS_Jouik_1961': 4679,
    'GCS_Kasai_1953': 4696,
    'GCS_Katanga_1955': 4695,
    'GCS_Kousseri': 4198,
    'GCS_Kuwait_Oil_Company': 4246,
    'GCS_KUDAMS': 4319,
    'GCS_Le_Pouce_1934': 4699,
    'GCS_Leigon': 4250,
    'GCS_LGD2006': 4754,
    'GCS_Liberia_1964': 4251,
    'GCS_Locodjo_1965': 4142,
    'GCS_Lome': 4252,
    'GCS_Mporaloko': 4266,
    'GCS_Madzansua': 4128,
    'GCS_Mahe_1971': 4256,
    'GCS_Malongo_1987': 4259,
    'GCS_Manoca': 4260,
    'GCS_Manoca_1962': 4193,
    'GCS_Massawa': 4262,
    'GCS_Mauritania_1999': 4702,
    'GCS_Merchich': 4261,
    'GCS_Merchich_Degree': 104261,
    'GCS_Mhast_Offshore': 4705,
    'GCS_Mhast_Onshore': 4704,
    'GCS_Mhast_1951': 4703,
    'GCS_Minna': 4263,
    'GCS_Moznet': 4130,
    'GCS_Nahrwan_1967': 4270,
    'GCS_NGN': 4318,
    'GCS_Nord_Sahara_1959': 4307,
    'GCS_Nord_Sahara_1959_Paris': 4819,
    'GCS_Nouakchott_1965': 4680,
    'GCS_Observatario': 4129,
    'GCS_Palestine_1923': 4281,
    'GCS_Point_58': 4620,
    'GCS_Pointe_Noire': 4282,
    'GCS_Qatar_1948': 4286,
    'GCS_Qatar_1974': 4285,
    'GCS_RGM_2004': 4470,
    'GCS_RGRDC_2005': 4046,
    'GCS_Schwarzeck': 4293,
    'GCS_Sierra_Leone_1924': 4174,
    'GCS_Sierra_Leone_1960': 104103,
    'GCS_Sierra_Leone_1968': 4175,
    'GCS_South_Yemen': 4164,
    'GCS_Sudan': 4296,
    'GCS_Tananarive_1925': 4297,
    'GCS_Tananarive_1925_Paris': 4810,
    'GCS_Tete': 4127,
    'GCS_Trucial_Coast_1948': 4303,
    'GCS_Voirol_1875': 4304,
    'GCS_Voirol_1875_Grad': 104139,
    'GCS_Voirol_1875_Paris': 4811,
    'GCS_Voirol_1879': 4671,
    'GCS_Voirol_1879_Grad': 104140,
    'GCS_Voirol_1879_Paris': 4821,
    'GCS_Voirol_Unifie_1960': 4305,
    'GCS_Voirol_Unifie_1960_Degree': 104305,
    'GCS_Voirol_Unifie_1960_Paris': 4812,
    'GCS_Yemen_NGN_1996': 4163,
    'GCS_Yoff': 4310,
    'GCS_Australian_Antarctic_1998': 4176,
    'GCS_Camp_Area': 4715,
    'GCS_Deception_Island': 4736,
    'GCS_Petrels_1972': 4636,
    'GCS_Pointe_Geologie_Perroud_1950': 4637,
    'GCS_RSRGD2000': 4764,
    'GCS_Ain_el_Abd_1970': 4204,
    'GCS_Batavia': 4211,
    'GCS_Batavia_Jakarta': 4813,
    'GCS_Beijing_1954': 4214,
    'GCS_Bukit_Rimpah': 4219,
    'GCS_China_Geodetic_Coordinate_System_2000': 4490,
    'GCS_Deir_ez_Zor': 4227,
    'GCS_DGN_1995': 4755,
    'GCS_DRUKREF_03': 5264,
    'GCS_European_1950_ED77': 4154,
    'GCS_European_1950': 4230,
    'GCS_Everest_Bangladesh': 37202,
    'GCS_Everest_India_Nepal': 37203,
    'GCS_Fahud': 4232,
    'GCS_FD_1958': 4132,
    'GCS_GDBD2009': 5246,
    'GCS_GDM_2000': 4742,
    'GCS_Gulshan_303': 4682,
    'GCS_Gunung_Segara': 4613,
    'GCS_Gunung_Segara_Jakarta': 4820,
    'GCS_Hanoi_1972': 4147,
    'GCS_Herat_North': 4255,
    'GCS_Hong_Kong_1963': 4738,
    'GCS_Hong_Kong_1963_67': 4739,
    'GCS_Hong_Kong_1980': 4611,
    'GCS_Hu_Tzu_Shan': 4236,
    'GCS_IGM_1995': 4670,
    'GCS_IGRS': 3889,
    'GCS_IKBD_1992': 4667,
    'GCS_Indian_1954': 4239,
    'GCS_Indian_1960': 4131,
    'GCS_Indian_1975': 4240,
    'GCS_Indonesian_1974': 4238,
    'GCS_Israel': 4141,
    'GCS_JGD_2000': 4612,
    'GCS_JGD_2011': 104020,
    'GCS_Jordan': 104130,
    'GCS_Kalianpur_1880': 4243,
    'GCS_Kalianpur_1937': 4144,
    'GCS_Kalianpur_1962': 4145,
    'GCS_Kalianpur_1975': 4146,
    'GCS_Kandawala': 4244,
    'GCS_Karbala_1979_Polservice': 4743,
    'GCS_Kertau': 4245,
    'GCS_Kertau_RSO': 4751,
    'GCS_Korea_2000': 4737,
    'GCS_Korean_Datum_1985': 4162,
    'GCS_Korean_Datum_1995': 4166,
    'GCS_Kuwait_Oil_Company': 4246,
    'GCS_KUDAMS': 4319,
    'GCS_Lao_1993': 4677,
    'GCS_Lao_1997': 4678,
    'GCS_Luzon_1911': 4253,
    'GCS_Makassar': 4257,
    'GCS_Makassar_Jakarta': 4804,
    'GCS_MONREF_1997': 104134,
    'GCS_MSK_1942': 104135,
    'GCS_Nahrwan_1934': 4744,
    'GCS_Nahrwan_1967': 4270,
    'GCS_Nakhl-e_Ghanem': 4693,
    'GCS_NGN': 4318,
    'GCS_Nepal_Nagarkot': 6207,
    'GCS_New_Beijing': 4555,
    'GCS_Observatorio_Meteorologico_1965': 104126,
    'GCS_Oman': 37206,
    'GCS_Padang_1884': 4280,
    'GCS_Padang_1884_Jakarta': 4808,
    'GCS_Palestine_1923': 4281,
    'GCS_PDO_1993': 4134,
    'GCS_PNG94': 5546,
    'GCS_PRS_1992': 4683,
    'GCS_Pulkovo_1942': 4284,
    'GCS_Pulkovo_1995': 4200,
    'GCS_Qatar_1948': 4286,
    'GCS_Qatar_1974': 4285,
    'GCS_QND_1995': 4614,
    'GCS_Rassadiran': 4153,
    'GCS_Samboja': 4125,
    'GCS_Segora': 4294,
    'GCS_Serindung': 4295,
    'GCS_SLD99': 5233,
    'GCS_South_Asia_Singapore': 37207,
    'GCS_SVY21': 4757,
    'GCS_TWD_1967': 3821,
    'GCS_TWD_1997': 3824,
    'GCS_Timbalai_1948': 4298,
    'GCS_Tokyo': 4301,
    'GCS_Trucial_Coast_1948': 4303,
    'GCS_Vientiane_1982': 4676,
    'GCS_VN_2000': 4756,
    'GCS_Xian_1980': 4610,
    'GCS_Ascension_Island_1958': 4712,
    'GCS_DOS_71_4': 4710,
    'GCS_Azores_Central_1948': 4183,
    'GCS_Azores_Central_1995': 4665,
    'GCS_Azores_Occidental_1939': 4182,
    'GCS_Azores_Oriental_1940': 4184,
    'GCS_Azores_Oriental_1995': 4664,
    'GCS_Bermuda_1957': 4216,
    'GCS_Bermuda_2000': 4762,
    'GCS_Graciosa_Base_SW_1948': 37241,
    'GCS_Hjorsey_1955': 4658,
    'GCS_ISTS_061_1968': 4722,
    'GCS_Madeira_1936': 4185,
    'GCS_Observatorio_Meteorologico_1939': 37245,
    'GCS_Pico_de_Las_Nieves': 4728,
    'GCS_Porto_Santo_1936': 4615,
    'GCS_Porto_Santo_1995': 4663,
    'GCS_Principe': 4824,
    'GCS_PTRA08': 5013,
    'GCS_REGCAN95': 4081,
    'GCS_RGSPM_2006': 4463,
    'GCS_Sao_Braz': 37249,
    'GCS_Sao_Tome': 4823,
    'GCS_Sapper_Hill_1943': 4292,
    'GCS_Selvagem_Grande_1938': 4616,
    'GCS_Tristan_1968': 4734,
    'GCS_Australian_1966': 4202,
    'GCS_Australian_1984': 4203,
    'GCS_Chatham_Islands_1979': 4673,
    'GCS_GDA_1994': 4283,
    'GCS_New_Zealand_1949': 4272,
    'GCS_NZGD_2000': 4167,
    'GCS_Anguilla_1957': 4600,
    'GCS_Antigua_1943': 4601,
    'GCS_Barbados_1938': 4212,
    'GCS_CIGD11': 6135,
    'GCS_Dominica_1945': 4602,
    'GCS_Fort_Desaix': 4625,
    'GCS_Fort_Marigot': 4621,
    'GCS_Fort_Thomas_1955': 37240,
    'GCS_Grand_Cayman_1959': 4723,
    'GCS_Grenada_1953': 4603,
    'GCS_JAD_2001': 4758,
    'GCS_Jamaica_1875': 4241,
    'GCS_Jamaica_1969': 4242,
    'GCS_LC5_1961': 37243,
    'GCS_Little_Cayman_1961': 4726,
    'GCS_Montserrat_1958': 4604,
    'GCS_Puerto_Rico': 4139,
    'GCS_RRAF_1991': 4558,
    'GCS_Sainte_Anne': 4622,
    'GCS_St_Kitts_1955': 4605,
    'GCS_St_Lucia_1955': 4606,
    'GCS_St_Vincent_1945': 4607,
    'GCS_NAD_1983_HARN_Adj_MN_Anoka': 104700,
    'GCS_NAD_1983_HARN_Adj_MN_Becker': 104701,
    'GCS_NAD_1983_HARN_Adj_MN_Beltrami_North': 104702,
    'GCS_NAD_1983_HARN_Adj_MN_Beltrami_South': 104703,
    'GCS_NAD_1983_HARN_Adj_MN_Benton': 104704,
    'GCS_NAD_1983_HARN_Adj_MN_Big_Stone': 104705,
    'GCS_NAD_1983_HARN_Adj_MN_Blue_Earth': 104706,
    'GCS_NAD_1983_HARN_Adj_MN_Brown': 104707,
    'GCS_NAD_1983_HARN_Adj_MN_Carlton': 104708,
    'GCS_NAD_1983_HARN_Adj_MN_Carver': 104709,
    'GCS_NAD_1983_HARN_Adj_MN_Cass_North': 104710,
    'GCS_NAD_1983_HARN_Adj_MN_Cass_South': 104711,
    'GCS_NAD_1983_HARN_Adj_MN_Chippewa': 104712,
    'GCS_NAD_1983_HARN_Adj_MN_Chisago': 104713,
    'GCS_NAD_1983_HARN_Adj_MN_Cook_North': 104714,
    'GCS_NAD_1983_HARN_Adj_MN_Cook_South': 104715,
    'GCS_NAD_1983_HARN_Adj_MN_Cottonwood': 104716,
    'GCS_NAD_1983_HARN_Adj_MN_Crow_Wing': 104717,
    'GCS_NAD_1983_HARN_Adj_MN_Dakota': 104718,
    'GCS_NAD_1983_HARN_Adj_MN_Dodge': 104719,
    'GCS_NAD_1983_HARN_Adj_MN_Douglas': 104720,
    'GCS_NAD_1983_HARN_Adj_MN_Faribault': 104721,
    'GCS_NAD_1983_HARN_Adj_MN_Fillmore': 104722,
    'GCS_NAD_1983_HARN_Adj_MN_Freeborn': 104723,
    'GCS_NAD_1983_HARN_Adj_MN_Goodhue': 104724,
    'GCS_NAD_1983_HARN_Adj_MN_Grant': 104725,
    'GCS_NAD_1983_HARN_Adj_MN_Hennepin': 104726,
    'GCS_NAD_1983_HARN_Adj_MN_Houston': 104727,
    'GCS_NAD_1983_HARN_Adj_MN_Isanti': 104728,
    'GCS_NAD_1983_HARN_Adj_MN_Itasca_North': 104729,
    'GCS_NAD_1983_HARN_Adj_MN_Itasca_South': 104730,
    'GCS_NAD_1983_HARN_Adj_MN_Jackson': 104731,
    'GCS_NAD_1983_HARN_Adj_MN_Kanabec': 104732,
    'GCS_NAD_1983_HARN_Adj_MN_Kandiyohi': 104733,
    'GCS_NAD_1983_HARN_Adj_MN_Kittson': 104734,
    'GCS_NAD_1983_HARN_Adj_MN_Koochiching': 104735,
    'GCS_NAD_1983_HARN_Adj_MN_Lac_Qui_Parle': 104736,
    'GCS_NAD_1983_HARN_Adj_MN_Lake_of_the_Woods_North': 104737,
    'GCS_NAD_1983_HARN_Adj_MN_Lake_of_the_Woods_South': 104738,
    'GCS_NAD_1983_HARN_Adj_MN_Le_Sueur': 104739,
    'GCS_NAD_1983_HARN_Adj_MN_Lincoln': 104740,
    'GCS_NAD_1983_HARN_Adj_MN_Lyon': 104741,
    'GCS_NAD_1983_HARN_Adj_MN_Mahnomen': 104743,
    'GCS_NAD_1983_HARN_Adj_MN_Marshall': 104744,
    'GCS_NAD_1983_HARN_Adj_MN_Martin': 104745,
    'GCS_NAD_1983_HARN_Adj_MN_McLeod': 104742,
    'GCS_NAD_1983_HARN_Adj_MN_Meeker': 104746,
    'GCS_NAD_1983_HARN_Adj_MN_Morrison': 104747,
    'GCS_NAD_1983_HARN_Adj_MN_Mower': 104748,
    'GCS_NAD_1983_HARN_Adj_MN_Murray': 104749,
    'GCS_NAD_1983_HARN_Adj_MN_Nicollet': 104750,
    'GCS_NAD_1983_HARN_Adj_MN_Nobles': 104751,
    'GCS_NAD_1983_HARN_Adj_MN_Norman': 104752,
    'GCS_NAD_1983_HARN_Adj_MN_Olmsted': 104753,
    'GCS_NAD_1983_HARN_Adj_MN_Ottertail': 104754,
    'GCS_NAD_1983_HARN_Adj_MN_Pennington': 104755,
    'GCS_NAD_1983_HARN_Adj_MN_Pine': 104756,
    'GCS_NAD_1983_HARN_Adj_MN_Pipestone': 104757,
    'GCS_NAD_1983_HARN_Adj_MN_Polk': 104758,
    'GCS_NAD_1983_HARN_Adj_MN_Pope': 104759,
    'GCS_NAD_1983_HARN_Adj_MN_Ramsey': 104760,
    'GCS_NAD_1983_HARN_Adj_MN_Red_Lake': 104761,
    'GCS_NAD_1983_HARN_Adj_MN_Redwood': 104762,
    'GCS_NAD_1983_HARN_Adj_MN_Renville': 104763,
    'GCS_NAD_1983_HARN_Adj_MN_Rice': 104764,
    'GCS_NAD_1983_HARN_Adj_MN_Rock': 104765,
    'GCS_NAD_1983_HARN_Adj_MN_Roseau': 104766,
    'GCS_NAD_1983_HARN_Adj_MN_Scott': 104770,
    'GCS_NAD_1983_HARN_Adj_MN_Sherburne': 104771,
    'GCS_NAD_1983_HARN_Adj_MN_Sibley': 104772,
    'GCS_NAD_1983_HARN_Adj_MN_St_Louis': 104786,
    'GCS_NAD_1983_HARN_Adj_MN_St_Louis_Central': 104768,
    'GCS_NAD_1983_HARN_Adj_MN_St_Louis_North': 104767,
    'GCS_NAD_1983_HARN_Adj_MN_St_Louis_South': 104769,
    'GCS_NAD_1983_HARN_Adj_MN_Stearns': 104773,
    'GCS_NAD_1983_HARN_Adj_MN_Steele': 104774,
    'GCS_NAD_1983_HARN_Adj_MN_Stevens': 104775,
    'GCS_NAD_1983_HARN_Adj_MN_Swift': 104776,
    'GCS_NAD_1983_HARN_Adj_MN_Todd': 104777,
    'GCS_NAD_1983_HARN_Adj_MN_Traverse': 104778,
    'GCS_NAD_1983_HARN_Adj_MN_Wabasha': 104779,
    'GCS_NAD_1983_HARN_Adj_MN_Wadena': 104780,
    'GCS_NAD_1983_HARN_Adj_MN_Waseca': 104781,
    'GCS_NAD_1983_HARN_Adj_MN_Watonwan': 104782,
    'GCS_NAD_1983_HARN_Adj_MN_Winona': 104783,
    'GCS_NAD_1983_HARN_Adj_MN_Wright': 104784,
    'GCS_NAD_1983_HARN_Adj_MN_Yellow_Medicine': 104785,
    'GCS_Albanian_1987': 4191,
    'GCS_Amersfoort': 4289,
    'GCS_ATF_Paris': 4901,
    'GCS_Belge_1950_Brussels': 4809,
    'GCS_Belge_1972': 4313,
    'GCS_Bern_1898_Bern': 4801,
    'GCS_Bern_1938': 4306,
    'GCS_CGRS_1993': 104141,
    'GCS_CH1903': 4149,
    'GCS_CH1903+': 4150,
    'GCS_D48': 104131,
    'GCS_Datum_73': 4274,
    'GCS_Datum_Lisboa_Bessel': 104105,
    'GCS_Datum_Lisboa_Hayford': 104106,
    'GCS_DB_REF': 5681,
    'GCS_Dealul_Piscului_1933': 4316,
    'GCS_Dealul_Piscului_1970': 4317,
    'GCS_Deutsches_Hauptdreiecksnetz': 4314,
    'GCS_Estonia_1937': 104101,
    'GCS_Estonia_1992': 4133,
    'GCS_Estonia_1997': 4180,
    'GCS_ETRF_1989': 104258,
    'GCS_ETRS_1989': 4258,
    'GCS_EUREF_FIN': 104129,
    'GCS_European_1979': 4668,
    'GCS_European_1950': 4230,
    'GCS_European_1987': 4231,
    'GCS_FD_1954': 4741,
    'GCS_FEH2010': 5593,
    'GCS_fk89': 4753,
    'GCS_GGRS_1987': 4121,
    'GCS_Greek': 4120,
    'GCS_Greek_Athens': 4815,
    'GCS_HD1909': 3819,
    'GCS_Hermannskogel': 104102,
    'GCS_Hjorsey_1955': 4658,
    'GCS_HTRS96': 4761,
    'GCS_Hungarian_1972': 4237,
    'GCS_IRENET95': 4173,
    'GCS_ISN_1993': 4659,
    'GCS_ISN_2004': 5324,
    'GCS_KKJ': 4123,
    'GCS_Lisbon': 4207,
    'GCS_Lisbon_Lisbon': 4803,
    'GCS_Lisbon_1890': 4666,
    'GCS_Lisbon_1890_Lisbon': 4904,
    'GCS_LKS_1992': 4661,
    'GCS_LKS_1994': 4669,
    'GCS_Luxembourg_1930': 4181,
    'GCS_Madrid_1870_Madrid': 4903,
    'GCS_MGI_Ferro': 4805,
    'GCS_MGI_1901': 3906,
    'GCS_MGI': 4312,
    'GCS_MOLDREF99': 4023,
    'GCS_Monte_Mario': 4265,
    'GCS_Monte_Mario_Rome': 4806,
    'GCS_NGO_1948': 4273,
    'GCS_NGO_1948_Oslo': 4817,
    'GCS_Nord_de_Guerre_Paris': 4902,
    'GCS_NTF': 4275,
    'GCS_NTF_Paris': 4807,
    'GCS_OS_SN_1980': 4279,
    'GCS_OSGB_1936': 4277,
    'GCS_OSGB_1970_SN': 4278,
    'GCS_OSNI_1952': 4188,
    'GCS_PD/83': 4746,
    'GCS_Pulkovo_1942': 4284,
    'GCS_Pulkovo_1942_Adj_1958': 4179,
    'GCS_Pulkovo_1942_Adj_1983': 4178,
    'GCS_Pulkovo_1995': 4200,
    'GCS_PZ_1990': 4740,
    'GCS_RD/83': 4745,
    'GCS_Belge_1950': 4215,
    'GCS_Reykjavik_1900': 4657,
    'GCS_RGF_1993': 4171,
    'GCS_Roma_1940': 104127,
    'GCS_RT_1990': 4124,
    'GCS_RT38': 4308,
    'GCS_RT38_Stockholm': 4814,
    'GCS_Slovenia_1996': 4765,
    'GCS_SREF98': 4075,
    'GCS_SWEREF99': 4619,
    'GCS_Swiss_TRF_1995': 4151,
    'GCS_S42_Hungary': 37257,
    'GCS_S_JTSK': 4156,
    'GCS_S_JTSK_Ferro': 4818,
    'GCS_S_JTSK/05': 5228,
    'GCS_S_JTSK/05_Ferro': 5229,
    'GCS_TM65': 4299,
    'GCS_TM75': 4300,
    'GCS_TUREF': 5252,
    'GCS_Ukraine_2000': 5561,
    'GCS_Anna_1_1965': 4708,
    'GCS_Combani_1950': 4632,
    'GCS_Gan_1970': 4684,
    'GCS_Grand_Comoros': 4646,
    'GCS_ISTS_073_1969': 4724,
    'GCS_Kerguelen_Island_1949': 4698,
    'GCS_Mahe_1971': 4256,
    'GCS_Reunion_1947': 4626,
    'GCS_RGR_1992': 4627,
    'GCS_Alaskan_Islands': 37260,
    'GCS_American_Samoa_1962': 4169,
    'GCS_Ammassalik_1958': 4196,
    'GCS_ATS_1977': 4122,
    'GCS_Barbados_1938': 4212,
    'GCS_Bermuda_1957': 4216,
    'GCS_Bermuda_2000': 4762,
    'GCS_Cape_Canaveral': 4717,
    'GCS_CR05': 5365,
    'GCS_Greenland_1996': 4747,
    'GCS_Guam_1963': 4675,
    'GCS_Helle_1954': 4660,
    'GCS_MARCARIO_SOLIS': 5371,
    'GCS_Mexican_Datum_of_1993': 4483,
    'GCS_North_American_1927': 4267,
    'GCS_NAD_1927_CGQ77': 4609,
    'GCS_NAD_1927_Definition_1976': 4608,
    'GCS_North_American_1983': 4269,
    'GCS_NAD_1983_2011': 6318,
    'GCS_NAD_1983_CORS96': 104223,
    'GCS_North_American_1983_CSRS': 4617,
    'GCS_NAD_1983_NSRS2007': 4759,
    'GCS_North_American_1983_HARN': 4152,
    'GCS_Ocotepeque_1935': 5451,
    'GCS_Old_Hawaiian': 4135,
    'GCS_Old_Hawaiian_Intl_1924': 104138,
    'GCS_Panama-Colon_1911': 5467,
    'GCS_Puerto_Rico': 4139,
    'GCS_Qornoq_1927': 4194,
    'GCS_RGAF09': 5489,
    'GCS_Saint_Pierre_et_Miquelon_1950': 4638,
    'GCS_Scoresbysund_1952': 4195,
    'GCS_Sibun_Gorge_1922': 5464,
    'GCS_SIRGAS_ES2007.8': 5393,
    'GCS_St_George_Island': 4138,
    'GCS_St_Lawrence_Island': 4136,
    'GCS_St_Paul_Island': 4137,
    'GCS_Alaskan_Islands': 37260,
    'GCS_American_Samoa_1962': 4169,
    'GCS_Beacon_E_1945': 4709,
    'GCS_Astro_1952': 4711,
    'GCS_Bab_South': 104112,
    'GCS_Bellevue_IGN': 4714,
    'GCS_Canton_1966': 4716,
    'GCS_Chatham_Island_1971': 4672,
    'GCS_DOS_1968': 37218,
    'GCS_Easter_Island_1967': 4719,
    'GCS_Fatu_Iva_1972': 4688,
    'GCS_Fiji_1956': 4721,
    'GCS_Fiji_1986': 4720,
    'GCS_Guam_1963': 4675,
    'GCS_GUX_1': 37221,
    'GCS_IGN53_Mare': 4641,
    'GCS_IGN56_Lifou': 4633,
    'GCS_IGN63_Hiva_Oa': 4689,
    'GCS_IGN72_Grande_Terre': 4662,
    'GCS_IGN72_Nuku_Hiva': 4630,
    'GCS_Johnston_Island_1961': 4725,
    'GCS_Kusaie_1951': 4735,
    'GCS_Majuro': 104113,
    'GCS_Maupiti_1983': 4692,
    'GCS_Midway_1961': 4727,
    'GCS_Moorea_1987': 4691,
    'GCS_MOP78': 4639,
    'GCS_NAD_1983_MA11': 6325,
    'GCS_NAD_1983_PA11': 6322,
    'GCS_NAD_1983_MARP00': 104260,
    'GCS_NAD_1983_PACP00': 104259,
    'GCS_NEA74_Noumea': 4644,
    'GCS_Old_Hawaiian': 4135,
    'GCS_Old_Hawaiian_Intl_1924': 104138,
    'GCS_Pitcairn_2006': 4763,
    'GCS_Pitcairn_1967': 4729,
    'GCS_Pohnpei': 104109,
    'GCS_RGNC_1991': 4645,
    'GCS_RGNC_1991-93': 4749,
    'GCS_RGPF': 4687,
    'GCS_Santo_DOS_1965': 4730,
    'GCS_Solomon_1968': 4718,
    'GCS_ST71_Belep': 4643,
    'GCS_ST84_Ile_des_Pins': 4642,
    'GCS_ST87_Ouvea': 4750,
    'GCS_Tahaa_1954': 4629,
    'GCS_Tahiti_1952': 4628,
    'GCS_Tahiti_1979': 4690,
    'GCS_Tern_Island_1961': 4707,
    'GCS_TGD2005': 5886,
    'GCS_Vanua_Levu_1915': 4748,
    'GCS_Viti_Levu_1912': 4752,
    'GCS_Viti_Levu_1916': 4731,
    'GCS_Wake_Island_1952': 4733,
    'GCS_Wake_Eniwetok_1960': 4732,
    'GCS_Moon_2000': 104903,
    'GCS_Adrastea_2000': 104909,
    'GCS_Amalthea_2000': 104910,
    'GCS_Ananke_2000': 104911,
    'GCS_Callisto_2000': 104912,
    'GCS_Carme_2000': 104913,
    'GCS_Elara_2000': 104914,
    'GCS_Europa_2000': 104915,
    'GCS_Ganymede_2000': 104916,
    'GCS_Himalia_2000': 104917,
    'GCS_Io_2000': 104918,
    'GCS_Jupiter_2000': 104908,
    'GCS_Leda_2000': 104919,
    'GCS_Lysithea_2000': 104920,
    'GCS_Metis_2000': 104921,
    'GCS_Pasiphae_2000': 104922,
    'GCS_Sinope_2000': 104923,
    'GCS_Thebe_2000': 104924,
    'GCS_Deimos_2000': 104906,
    'GCS_Mars_1979': 104904,
    'GCS_Mars_2000': 104905,
    'GCS_Phobos_2000': 104907,
    'GCS_Mercury_2000': 104900,
    'GCS_Despina_2000': 104961,
    'GCS_Galatea_2000': 104962,
    'GCS_Larissa_2000': 104963,
    'GCS_Naiad_2000': 104964,
    'GCS_Neptune_2000': 104960,
    'GCS_Nereid_2000': 104965,
    'GCS_Proteus_2000': 104966,
    'GCS_Thalassa_2000': 104967,
    'GCS_Triton_2000': 104968,
    'GCS_Charon_2000': 104970,
    'GCS_Pluto_2000': 104969,
    'GCS_Atlas_2000': 104926,
    'GCS_Calypso_2000': 104927,
    'GCS_Dione_2000': 104928,
    'GCS_Enceladus_2000': 104929,
    'GCS_Epimetheus_2000': 104930,
    'GCS_Helene_2000': 104931,
    'GCS_Hyperion_2000': 104932,
    'GCS_Iapetus_2000': 104933,
    'GCS_Janus_2000': 104934,
    'GCS_Mimas_2000': 104935,
    'GCS_Pan_2000': 104936,
    'GCS_Pandora_2000': 104937,
    'GCS_Phoebe_2000': 104938,
    'GCS_Prometheus_2000': 104939,
    'GCS_Rhea_2000': 104940,
    'GCS_Saturn_2000': 104925,
    'GCS_Telesto_2000': 104941,
    'GCS_Tethys_2000': 104942,
    'GCS_Titan_2000': 104943,
    'GCS_Ariel_2000': 104945,
    'GCS_Belinda_2000': 104946,
    'GCS_Bianca_2000': 104947,
    'GCS_Cordelia_2000': 104948,
    'GCS_Cressida_2000': 104949,
    'GCS_Desdemona_2000': 104950,
    'GCS_Juliet_2000': 104951,
    'GCS_Miranda_2000': 104952,
    'GCS_Oberon_2000': 104953,
    'GCS_Ophelia_2000': 104954,
    'GCS_Portia_2000': 104955,
    'GCS_Puck_2000': 104956,
    'GCS_Rosalind_2000': 104957,
    'GCS_Titania_2000': 104958,
    'GCS_Umbriel_2000': 104959,
    'GCS_Uranus_2000': 104944,
    'GCS_Venus_1985': 104901,
    'GCS_Venus_2000': 104902,
    'GCS_Aratu': 4208,
    'GCS_Bogota': 4218,
    'GCS_Bogota_Bogota': 4802,
    'GCS_Campo_Inchauspe': 4221,
    'GCS_Chos_Malal_1914': 4160,
    'GCS_Chua': 4224,
    'GCS_Corrego_Alegre': 4225,
    'GCS_Corrego_Alegre_1961': 5524,
    'GCS_CSG_1967': 4623,
    'GCS_Guyane_Francaise': 4235,
    'GCS_Hito_XVIII_1963': 4254,
    'GCS_La_Canoa': 4247,
    'GCS_Lake': 4249,
    'GCS_Loma_Quintana': 4288,
    'GCS_MAGNA': 4686,
    'GCS_MARGEN': 5354,
    'GCS_Mount_Dillon': 4157,
    'GCS_Naparima_1955': 4158,
    'GCS_Naparima_1972': 4271,
    'GCS_Pampa_del_Castillo': 4161,
    'GCS_Peru96': 5373,
    'GCS_POSGAR': 4172,
    'GCS_POSGAR_1994': 4694,
    'GCS_POSGAR_1998': 4190,
    'GCS_POSGAR_2007': 5340,
    'GCS_Provisional_S_American_1956': 4248,
    'GCS_REGVEN': 4189,
    'GCS_RGFG_1995': 4624,
    'GCS_SAD_1969_96': 5527,
    'GCS_Sapper_Hill_1943': 4292,
    'GCS_SIRGAS': 4170,
    'GCS_SIRGAS_2000': 4674,
    'GCS_SIRGAS-Chile': 5360,
    'GCS_SIRGAS-ROU98': 5381,
    'GCS_South_American_1969': 4618,
    'GCS_Trinidad_1903': 4302,
    'GCS_Yacare': 4309,
    'GCS_Zanderij': 4311,
    'GCS_Airy_1830': 4001,
    'GCS_Airy_Modified': 4002,
    'GCS_Australian': 4003,
    'GCS_Sphere': 4035,
    'GCS_Sphere_ARC_INFO': 37008,
    'GCS_ATS_1977': 4122,
    'GCS_Bessel_1841': 4004,
    'GCS_Bessel_Modified': 4005,
    'GCS_Bessel_Namibia': 4006,
    'GCS_Clarke_1858': 4007,
    'GCS_Clarke_1866': 4008,
    'GCS_Sphere_Clarke_1866_Authalic': 4052,
    'GCS_Clarke_1866_Michigan': 4009,
    'GCS_Clarke_1880': 4034,
    'GCS_Clarke_1880_Arc': 4013,
    'GCS_Clarke_1880_Benoit': 4010,
    'GCS_Clarke_1880_IGN': 4011,
    'GCS_Clarke_1880_RGS': 4012,
    'GCS_Clarke_1880_SGA': 4014,
    'GCS_Everest_Adj_1937': 4015,
    'GCS_Everest_def_1962': 4044,
    'GCS_Everest_def_1967': 4016,
    'GCS_Everest_def_1975': 4045,
    'GCS_Everest_1830': 4042,
    'GCS_Everest_Modified': 4018,
    'GCS_Everest_Modified_1969': 37006,
    'GCS_Fischer_1960': 37002,
    'GCS_Fischer_1968': 37003,
    'GCS_Fischer_Modified': 37004,
    'GCS_GEM_10C': 4031,
    'GCS_GRS_1967': 4036,
    'GCS_GRS_1980': 4019,
    'GCS_Sphere_GRS_1980_Authalic': 4047,
    'GCS_Helmert_1906': 4020,
    'GCS_Hough_1960': 37005,
    'GCS_Hughes_1980': 4054,
    'GCS_Indonesian': 4021,
    'GCS_International_1924': 4022,
    'GCS_Sphere_International_1924_Authalic': 4053,
    'GCS_Krasovsky_1940': 4024,
    'GCS_OSU_86F': 4032,
    'GCS_OSU_91A': 4033,
    'GCS_Plessis_1817': 4027,
    'GCS_Sphere_EMEP': 104128,
    'GCS_Struve_1860': 4028,
    'GCS_NWL_9D': 4025,
    'GCS_Walbeck': 37007,
    'GCS_War_Office': 4029,
    'GCS_WGS_1966': 4760,
    'GCS_ITRF_1988': 104115,
    'GCS_ITRF_1989': 104116,
    'GCS_ITRF_1990': 104117,
    'GCS_ITRF_1991': 104118,
    'GCS_ITRF_1992': 104119,
    'GCS_ITRF_1993': 104120,
    'GCS_ITRF_1994': 104121,
    'GCS_ITRF_1996': 104122,
    'GCS_ITRF_1997': 104123,
    'GCS_ITRF_2000': 104124,
    'GCS_ITRF_2005': 104896,
    'GCS_ITRF_2008': 104257,
    'GCS_NSWC_9Z_2': 4276,
    'GCS_WGS_1966': 4760,
    'GCS_WGS_1972': 4322,
    'GCS_WGS_1972_BE': 4324,
    'GCS_WGS_1984': 4326,
    'WGS_1984_ARC_System_Zone_01': 102421,
    'WGS_1984_ARC_System_Zone_02': 102422,
    'WGS_1984_ARC_System_Zone_03': 102423,
    'WGS_1984_ARC_System_Zone_04': 102424,
    'WGS_1984_ARC_System_Zone_05': 102425,
    'WGS_1984_ARC_System_Zone_06': 102426,
    'WGS_1984_ARC_System_Zone_07': 102427,
    'WGS_1984_ARC_System_Zone_08': 102428,
    'WGS_1984_ARC_System_Zone_09': 102429,
    'WGS_1984_ARC_System_Zone_10': 102430,
    'WGS_1984_ARC_System_Zone_11': 102431,
    'WGS_1984_ARC_System_Zone_12': 102432,
    'WGS_1984_ARC_System_Zone_13': 102433,
    'WGS_1984_ARC_System_Zone_14': 102434,
    'WGS_1984_ARC_System_Zone_15': 102435,
    'WGS_1984_ARC_System_Zone_16': 102436,
    'WGS_1984_ARC_System_Zone_17': 102437,
    'WGS_1984_ARC_System_Zone_18': 102438,
    'Africa_Albers_Equal_Area_Conic': 102022,
    'Africa_Equidistant_Conic': 102023,
    'Africa_Lambert_Conformal_Conic': 102024,
    'Africa_Sinusoidal': 102011,
    'Asia_Lambert_Conformal_Conic': 102012,
    'Asia_North_Albers_Equal_Area_Conic': 102025,
    'Asia_North_Equidistant_Conic': 102026,
    'Asia_North_Lambert_Conformal_Conic': 102027,
    'Asia_South_Albers_Equal_Area_Conic': 102028,
    'Asia_South_Equidistant_Conic': 102029,
    'Asia_South_Lambert_Conformal_Conic': 102030,
    'ED_1950_Southern_Permian_Basin_Lambert': 5643,
    'EMEP_150_Kilometer_Grid': 102069,
    'EMEP_50_Kilometer_Grid': 102068,
    'ETRS_1989_LAEA': 3035,
    'ETRS_1989_LCC': 3034,
    'Europe_Albers_Equal_Area_Conic': 102013,
    'Europe_Equidistant_Conic': 102031,
    'Europe_Lambert_Conformal_Conic': 102014,
    'NAD_1983_Alaska_Albers': 3338,
    'Canada_Albers_Equal_Area_Conic': 102001,
    'Canada_Lambert_Conformal_Conic': 102002,
    'Hawaii_Albers_Equal_Area_Conic': 102007,
    'NAD_1927_Contiguous_USA_Albers': 5069,
    'NAD_1983_2011_Contiguous_USA_Albers': 6350,
    'NAD_1983_Canada_Atlas_Lambert': 3978,
    'NAD_1983_Contiguous_USA_Albers': 5070,
    'NAD_1983_CSRS_Canada_Atlas_Lambert': 3979,
    'NAD_1983_Great_Lakes_and_St_Lawrence_Albers': 3175,
    'NAD_1983_Great_Lakes_Basin_Albers': 3174,
    'NAD_1983_HARN_Contiguous_USA_Albers': 5071,
    'NAD_1983_NSRS2007_Contiguous_USA_Albers': 5072,
    'North_America_Albers_Equal_Area_Conic': 102008,
    'North_America_Equidistant_Conic': 102010,
    'North_America_Lambert_Conformal_Conic': 102009,
    'Panhandle_Energy_Albers': 102589,
    'US_National_Atlas_Equal_Area': 2163,
    'USA_Contiguous_Albers_Equal_Area_Conic': 102003,
    'USA_Contiguous_Albers_Equal_Area_Conic_USGS_version': 102039,
    'USA_Contiguous_Equidistant_Conic': 102005,
    'USA_Contiguous_Lambert_Conformal_Conic': 102004,
    'WGS_1984_Canada_Atlas_LCC': 102215,
    'South_America_Albers_Equal_Area_Conic': 102033,
    'South_America_Equidistant_Conic': 102032,
    'South_America_Lambert_Conformal_Conic': 102015,
    'NAD_1983_2011_Fargo_Ground_Coordinate_System': 102391,
    'NAD_1983_Fargo_Ground_Coordinate_System': 102389,
    'NAD_1983_HARN_Fargo_Ground_Coordinate_System': 102390,
    'NAD_1983_Nebraska_Lancaster_County_FtUS': 102705,
    'NAD_1983_HARN_Adj_MN_Aitkin_Meters': 103600,
    'NAD_1983_HARN_Adj_MN_Anoka_Meters': 103608,
    'NAD_1983_HARN_Adj_MN_Becker_Meters': 103609,
    'NAD_1983_HARN_Adj_MN_Beltrami_North_Meters': 103610,
    'NAD_1983_HARN_Adj_MN_Beltrami_South_Meters': 103611,
    'NAD_1983_HARN_Adj_MN_Benton_Meters': 103612,
    'NAD_1983_HARN_Adj_MN_Big_Stone_Meters': 103613,
    'NAD_1983_HARN_Adj_MN_Blue_Earth_Meters': 103614,
    'NAD_1983_HARN_Adj_MN_Brown_Meters': 103615,
    'NAD_1983_HARN_Adj_MN_Carlton_Meters': 103616,
    'NAD_1983_HARN_Adj_MN_Carver_Meters': 103617,
    'NAD_1983_HARN_Adj_MN_Cass_North_Meters': 103618,
    'NAD_1983_HARN_Adj_MN_Cass_South_Meters': 103619,
    'NAD_1983_HARN_Adj_MN_Chippewa_Meters': 103620,
    'NAD_1983_HARN_Adj_MN_Chisago_Meters': 103621,
    'NAD_1983_HARN_Adj_MN_Clay_Meters': 103601,
    'NAD_1983_HARN_Adj_MN_Clearwater_Meters': 103602,
    'NAD_1983_HARN_Adj_MN_Cook_North_Meters': 103622,
    'NAD_1983_HARN_Adj_MN_Cook_South_Meters': 103623,
    'NAD_1983_HARN_Adj_MN_Cottonwood_Meters': 103624,
    'NAD_1983_HARN_Adj_MN_Crow_Wing_Meters': 103625,
    'NAD_1983_HARN_Adj_MN_Dakota_Meters': 103626,
    'NAD_1983_HARN_Adj_MN_Dodge_Meters': 103627,
    'NAD_1983_HARN_Adj_MN_Douglas_Meters': 103628,
    'NAD_1983_HARN_Adj_MN_Faribault_Meters': 103629,
    'NAD_1983_HARN_Adj_MN_Fillmore_Meters': 103630,
    'NAD_1983_HARN_Adj_MN_Freeborn_Meters': 103631,
    'NAD_1983_HARN_Adj_MN_Goodhue_Meters': 103632,
    'NAD_1983_HARN_Adj_MN_Grant_Meters': 103633,
    'NAD_1983_HARN_Adj_MN_Hennepin_Meters': 103634,
    'NAD_1983_HARN_Adj_MN_Houston_Meters': 103635,
    'NAD_1983_HARN_Adj_MN_Hubbard_Meters': 103603,
    'NAD_1983_HARN_Adj_MN_Isanti_Meters': 103636,
    'NAD_1983_HARN_Adj_MN_Itasca_North_Meters': 103637,
    'NAD_1983_HARN_Adj_MN_Itasca_South_Meters': 103638,
    'NAD_1983_HARN_Adj_MN_Jackson_Meters': 103639,
    'NAD_1983_HARN_Adj_MN_Kanabec_Meters': 103640,
    'NAD_1983_HARN_Adj_MN_Kandiyohi_Meters': 103641,
    'NAD_1983_HARN_Adj_MN_Kittson_Meters': 103642,
    'NAD_1983_HARN_Adj_MN_Koochiching_Meters': 103643,
    'NAD_1983_HARN_Adj_MN_Lac_Qui_Parle_Meters': 103644,
    'NAD_1983_HARN_Adj_MN_Lake_Meters': 103604,
    'NAD_1983_HARN_Adj_MN_Lake_of_the_Woods_North_Meters': 103645,
    'NAD_1983_HARN_Adj_MN_Lake_of_the_Woods_South_Meters': 103646,
    'NAD_1983_HARN_Adj_MN_Le_Sueur_Meters': 103647,
    'NAD_1983_HARN_Adj_MN_Lincoln_Meters': 103648,
    'NAD_1983_HARN_Adj_MN_Lyon_Meters': 103649,
    'NAD_1983_HARN_Adj_MN_Mahnomen_Meters': 103651,
    'NAD_1983_HARN_Adj_MN_Marshall_Meters': 103652,
    'NAD_1983_HARN_Adj_MN_Martin_Meters': 103653,
    'NAD_1983_HARN_Adj_MN_McLeod_Meters': 103650,
    'NAD_1983_HARN_Adj_MN_Meeker_Meters': 103654,
    'NAD_1983_HARN_Adj_MN_Mille_Lacs_Meters': 103605,
    'NAD_1983_HARN_Adj_MN_Morrison_Meters': 103655,
    'NAD_1983_HARN_Adj_MN_Mower_Meters': 103656,
    'NAD_1983_HARN_Adj_MN_Murray_Meters': 103657,
    'NAD_1983_HARN_Adj_MN_Nicollet_Meters': 103658,
    'NAD_1983_HARN_Adj_MN_Nobles_Meters': 103659,
    'NAD_1983_HARN_Adj_MN_Norman_Meters': 103660,
    'NAD_1983_HARN_Adj_MN_Olmsted_Meters': 103661,
    'NAD_1983_HARN_Adj_MN_Ottertail_Meters': 103662,
    'NAD_1983_HARN_Adj_MN_Pennington_Meters': 103663,
    'NAD_1983_HARN_Adj_MN_Pine_Meters': 103664,
    'NAD_1983_HARN_Adj_MN_Pipestone_Meters': 103665,
    'NAD_1983_HARN_Adj_MN_Polk_Meters': 103666,
    'NAD_1983_HARN_Adj_MN_Pope_Meters': 103667,
    'NAD_1983_HARN_Adj_MN_Ramsey_Meters': 103668,
    'NAD_1983_HARN_Adj_MN_Red_Lake_Meters': 103669,
    'NAD_1983_HARN_Adj_MN_Redwood_Meters': 103670,
    'NAD_1983_HARN_Adj_MN_Renville_Meters': 103671,
    'NAD_1983_HARN_Adj_MN_Rice_Meters': 103672,
    'NAD_1983_HARN_Adj_MN_Rock_Meters': 103673,
    'NAD_1983_HARN_Adj_MN_Roseau_Meters': 103674,
    'NAD_1983_HARN_Adj_MN_Scott_Meters': 103678,
    'NAD_1983_HARN_Adj_MN_Sherburne_Meters': 103679,
    'NAD_1983_HARN_Adj_MN_Sibley_Meters': 103680,
    'NAD_1983_HARN_Adj_MN_St_Louis_CS96_Meters': 103694,
    'NAD_1983_HARN_Adj_MN_St_Louis_Central_Meters': 103676,
    'NAD_1983_HARN_Adj_MN_St_Louis_North_Meters': 103675,
    'NAD_1983_HARN_Adj_MN_St_Louis_South_Meters': 103677,
    'NAD_1983_HARN_Adj_MN_Stearns_Meters': 103681,
    'NAD_1983_HARN_Adj_MN_Steele_Meters': 103682,
    'NAD_1983_HARN_Adj_MN_Stevens_Meters': 103683,
    'NAD_1983_HARN_Adj_MN_Swift_Meters': 103684,
    'NAD_1983_HARN_Adj_MN_Todd_Meters': 103685,
    'NAD_1983_HARN_Adj_MN_Traverse_Meters': 103686,
    'NAD_1983_HARN_Adj_MN_Wabasha_Meters': 103687,
    'NAD_1983_HARN_Adj_MN_Wadena_Meters': 103688,
    'NAD_1983_HARN_Adj_MN_Waseca_Meters': 103689,
    'NAD_1983_HARN_Adj_MN_Washington_Meters': 103606,
    'NAD_1983_HARN_Adj_MN_Watonwan_Meters': 103690,
    'NAD_1983_HARN_Adj_MN_Wilkin_Meters': 103607,
    'NAD_1983_HARN_Adj_MN_Winona_Meters': 103691,
    'NAD_1983_HARN_Adj_MN_Wright_Meters': 103692,
    'NAD_1983_HARN_Adj_MN_Yellow_Medicine_Meters': 103693,
    'NAD_1983_HARN_Adj_MN_Aitkin_Feet': 103700,
    'NAD_1983_HARN_Adj_MN_Anoka_Feet': 103708,
    'NAD_1983_HARN_Adj_MN_Becker_Feet': 103709,
    'NAD_1983_HARN_Adj_MN_Beltrami_North_Feet': 103710,
    'NAD_1983_HARN_Adj_MN_Beltrami_South_Feet': 103711,
    'NAD_1983_HARN_Adj_MN_Benton_Feet': 103712,
    'NAD_1983_HARN_Adj_MN_Big_Stone_Feet': 103713,
    'NAD_1983_HARN_Adj_MN_Blue_Earth_Feet': 103714,
    'NAD_1983_HARN_Adj_MN_Brown_Feet': 103715,
    'NAD_1983_HARN_Adj_MN_Carlton_Feet': 103716,
    'NAD_1983_HARN_Adj_MN_Carver_Feet': 103717,
    'NAD_1983_HARN_Adj_MN_Cass_North_Feet': 103718,
    'NAD_1983_HARN_Adj_MN_Cass_South_Feet': 103719,
    'NAD_1983_HARN_Adj_MN_Chippewa_Feet': 103720,
    'NAD_1983_HARN_Adj_MN_Chisago_Feet': 103721,
    'NAD_1983_HARN_Adj_MN_Clay_Feet': 103701,
    'NAD_1983_HARN_Adj_MN_Clearwater_Feet': 103702,
    'NAD_1983_HARN_Adj_MN_Cook_North_Feet': 103722,
    'NAD_1983_HARN_Adj_MN_Cook_South_Feet': 103723,
    'NAD_1983_HARN_Adj_MN_Cottonwood_Feet': 103724,
    'NAD_1983_HARN_Adj_MN_Crow_Wing_Feet': 103725,
    'NAD_1983_HARN_Adj_MN_Dakota_Feet': 103726,
    'NAD_1983_HARN_Adj_MN_Dodge_Feet': 103727,
    'NAD_1983_HARN_Adj_MN_Douglas_Feet': 103728,
    'NAD_1983_HARN_Adj_MN_Faribault_Feet': 103729,
    'NAD_1983_HARN_Adj_MN_Fillmore_Feet': 103730,
    'NAD_1983_HARN_Adj_MN_Freeborn_Feet': 103731,
    'NAD_1983_HARN_Adj_MN_Goodhue_Feet': 103732,
    'NAD_1983_HARN_Adj_MN_Grant_Feet': 103733,
    'NAD_1983_HARN_Adj_MN_Hennepin_Feet': 103734,
    'NAD_1983_HARN_Adj_MN_Houston_Feet': 103735,
    'NAD_1983_HARN_Adj_MN_Hubbard_Feet': 103703,
    'NAD_1983_HARN_Adj_MN_Isanti_Feet': 103736,
    'NAD_1983_HARN_Adj_MN_Itasca_North_Feet': 103737,
    'NAD_1983_HARN_Adj_MN_Itasca_South_Feet': 103738,
    'NAD_1983_HARN_Adj_MN_Jackson_Feet': 103739,
    'NAD_1983_HARN_Adj_MN_Kanabec_Feet': 103740,
    'NAD_1983_HARN_Adj_MN_Kandiyohi_Feet': 103741,
    'NAD_1983_HARN_Adj_MN_Kittson_Feet': 103742,
    'NAD_1983_HARN_Adj_MN_Koochiching_Feet': 103743,
    'NAD_1983_HARN_Adj_MN_Lac_Qui_Parle_Feet': 103744,
    'NAD_1983_HARN_Adj_MN_Lake_Feet': 103704,
    'NAD_1983_HARN_Adj_MN_Lake_of_the_Woods_North_Feet': 103745,
    'NAD_1983_HARN_Adj_MN_Lake_of_the_Woods_South_Feet': 103746,
    'NAD_1983_HARN_Adj_MN_Le_Sueur_Feet': 103747,
    'NAD_1983_HARN_Adj_MN_Lincoln_Feet': 103748,
    'NAD_1983_HARN_Adj_MN_Lyon_Feet': 103749,
    'NAD_1983_HARN_Adj_MN_Mahnomen_Feet': 103751,
    'NAD_1983_HARN_Adj_MN_Marshall_Feet': 103752,
    'NAD_1983_HARN_Adj_MN_Martin_Feet': 103753,
    'NAD_1983_HARN_Adj_MN_McLeod_Feet': 103750,
    'NAD_1983_HARN_Adj_MN_Meeker_Feet': 103754,
    'NAD_1983_HARN_Adj_MN_Mille_Lacs_Feet': 103705,
    'NAD_1983_HARN_Adj_MN_Morrison_Feet': 103755,
    'NAD_1983_HARN_Adj_MN_Mower_Feet': 103756,
    'NAD_1983_HARN_Adj_MN_Murray_Feet': 103757,
    'NAD_1983_HARN_Adj_MN_Nicollet_Feet': 103758,
    'NAD_1983_HARN_Adj_MN_Nobles_Feet': 103759,
    'NAD_1983_HARN_Adj_MN_Norman_Feet': 103760,
    'NAD_1983_HARN_Adj_MN_Olmsted_Feet': 103761,
    'NAD_1983_HARN_Adj_MN_Ottertail_Feet': 103762,
    'NAD_1983_HARN_Adj_MN_Pennington_Feet': 103763,
    'NAD_1983_HARN_Adj_MN_Pine_Feet': 103764,
    'NAD_1983_HARN_Adj_MN_Pipestone_Feet': 103765,
    'NAD_1983_HARN_Adj_MN_Polk_Feet': 103766,
    'NAD_1983_HARN_Adj_MN_Pope_Feet': 103767,
    'NAD_1983_HARN_Adj_MN_Ramsey_Feet': 103768,
    'NAD_1983_HARN_Adj_MN_Red_Lake_Feet': 103769,
    'NAD_1983_HARN_Adj_MN_Redwood_Feet': 103770,
    'NAD_1983_HARN_Adj_MN_Renville_Feet': 103771,
    'NAD_1983_HARN_Adj_MN_Rice_Feet': 103772,
    'NAD_1983_HARN_Adj_MN_Rock_Feet': 103773,
    'NAD_1983_HARN_Adj_MN_Roseau_Feet': 103774,
    'NAD_1983_HARN_Adj_MN_Scott_Feet': 103778,
    'NAD_1983_HARN_Adj_MN_Sherburne_Feet': 103779,
    'NAD_1983_HARN_Adj_MN_Sibley_Feet': 103780,
    'NAD_1983_HARN_Adj_MN_St_Louis_CS96_Feet': 103695,
    'NAD_1983_HARN_Adj_MN_St_Louis_Central_Feet': 103776,
    'NAD_1983_HARN_Adj_MN_St_Louis_North_Feet': 103775,
    'NAD_1983_HARN_Adj_MN_St_Louis_South_Feet': 103777,
    'NAD_1983_HARN_Adj_MN_Stearns_Feet': 103781,
    'NAD_1983_HARN_Adj_MN_Steele_Feet': 103782,
    'NAD_1983_HARN_Adj_MN_Stevens_Feet': 103783,
    'NAD_1983_HARN_Adj_MN_Swift_Feet': 103784,
    'NAD_1983_HARN_Adj_MN_Todd_Feet': 103785,
    'NAD_1983_HARN_Adj_MN_Traverse_Feet': 103786,
    'NAD_1983_HARN_Adj_MN_Wabasha_Feet': 103787,
    'NAD_1983_HARN_Adj_MN_Wadena_Feet': 103788,
    'NAD_1983_HARN_Adj_MN_Waseca_Feet': 103789,
    'NAD_1983_HARN_Adj_MN_Washington_Feet': 103706,
    'NAD_1983_HARN_Adj_MN_Watonwan_Feet': 103790,
    'NAD_1983_HARN_Adj_MN_Wilkin_Feet': 103707,
    'NAD_1983_HARN_Adj_MN_Winona_Feet': 103791,
    'NAD_1983_HARN_Adj_MN_Wright_Feet': 103792,
    'NAD_1983_HARN_Adj_MN_Yellow_Medicine_Feet': 103793,
    'NAD_1983_HARN_WISCRS_Adams_County_Meters': 103300,
    'NAD_1983_HARN_WISCRS_Ashland_County_Meters': 103301,
    'NAD_1983_HARN_WISCRS_Barron_County_Meters': 103302,
    'NAD_1983_HARN_WISCRS_Bayfield_County_Meters': 103303,
    'NAD_1983_HARN_WISCRS_Brown_County_Meters': 103304,
    'NAD_1983_HARN_WISCRS_Buffalo_County_Meters': 103305,
    'NAD_1983_HARN_WISCRS_Burnett_County_Meters': 103306,
    'NAD_1983_HARN_WISCRS_Calumet_County_Meters': 103307,
    'NAD_1983_HARN_WISCRS_Chippewa_County_Meters': 103308,
    'NAD_1983_HARN_WISCRS_Clark_County_Meters': 103309,
    'NAD_1983_HARN_WISCRS_Columbia_County_Meters': 103310,
    'NAD_1983_HARN_WISCRS_Crawford_County_Meters': 103311,
    'NAD_1983_HARN_WISCRS_Dane_County_Meters': 103312,
    'NAD_1983_HARN_WISCRS_Dodge_County_Meters': 103313,
    'NAD_1983_HARN_WISCRS_Door_County_Meters': 103314,
    'NAD_1983_HARN_WISCRS_Douglas_County_Meters': 103315,
    'NAD_1983_HARN_WISCRS_Dunn_County_Meters': 103316,
    'NAD_1983_HARN_WISCRS_EauClaire_County_Meters': 103317,
    'NAD_1983_HARN_WISCRS_Florence_County_Meters': 103318,
    'NAD_1983_HARN_WISCRS_Fond_du_Lac_County_Meters': 103319,
    'NAD_1983_HARN_WISCRS_Forest_County_Meters': 103320,
    'NAD_1983_HARN_WISCRS_Grant_County_Meters': 103321,
    'NAD_1983_HARN_WISCRS_Green_County_Meters': 103322,
    'NAD_1983_HARN_WISCRS_GreenLake_County_Meters': 103323,
    'NAD_1983_HARN_WISCRS_Iowa_County_Meters': 103324,
    'NAD_1983_HARN_WISCRS_Iron_County_Meters': 103325,
    'NAD_1983_HARN_WISCRS_Jackson_County_Meters': 103326,
    'NAD_1983_HARN_WISCRS_Jefferson_County_Meters': 103327,
    'NAD_1983_HARN_WISCRS_Juneau_County_Meters': 103328,
    'NAD_1983_HARN_WISCRS_Kenosha_County_Meters': 103329,
    'NAD_1983_HARN_WISCRS_Kewaunee_County_Meters': 103330,
    'NAD_1983_HARN_WISCRS_LaCrosse_County_Meters': 103331,
    'NAD_1983_HARN_WISCRS_Lafayette_County_Meters': 103332,
    'NAD_1983_HARN_WISCRS_Langlade_County_Meters': 103333,
    'NAD_1983_HARN_WISCRS_Lincoln_County_Meters': 103334,
    'NAD_1983_HARN_WISCRS_Manitowoc_County_Meters': 103335,
    'NAD_1983_HARN_WISCRS_Marathon_County_Meters': 103336,
    'NAD_1983_HARN_WISCRS_Marinette_County_Meters': 103337,
    'NAD_1983_HARN_WISCRS_Marquette_County_Meters': 103338,
    'NAD_1983_HARN_WISCRS_Menominee_County_Meters': 103339,
    'NAD_1983_HARN_WISCRS_Milwaukee_County_Meters': 103340,
    'NAD_1983_HARN_WISCRS_Monroe_County_Meters': 103341,
    'NAD_1983_HARN_WISCRS_Oconto_County_Meters': 103342,
    'NAD_1983_HARN_WISCRS_Oneida_County_Meters': 103343,
    'NAD_1983_HARN_WISCRS_Outagamie_County_Meters': 103344,
    'NAD_1983_HARN_WISCRS_Ozaukee_County_Meters': 103345,
    'NAD_1983_HARN_WISCRS_Pepin_County_Meters': 103346,
    'NAD_1983_HARN_WISCRS_Pierce_County_Meters': 103347,
    'NAD_1983_HARN_WISCRS_Polk_County_Meters': 103348,
    'NAD_1983_HARN_WISCRS_Portage_County_Meters': 103349,
    'NAD_1983_HARN_WISCRS_Price_County_Meters': 103350,
    'NAD_1983_HARN_WISCRS_Racine_County_Meters': 103351,
    'NAD_1983_HARN_WISCRS_Richland_County_Meters': 103352,
    'NAD_1983_HARN_WISCRS_Rock_County_Meters': 103353,
    'NAD_1983_HARN_WISCRS_Rusk_County_Meters': 103354,
    'NAD_1983_HARN_WISCRS_Sauk_County_Meters': 103355,
    'NAD_1983_HARN_WISCRS_Sawyer_County_Meters': 103356,
    'NAD_1983_HARN_WISCRS_Shawano_County_Meters': 103357,
    'NAD_1983_HARN_WISCRS_Sheboygan_County_Meters': 103358,
    'NAD_1983_HARN_WISCRS_St_Croix_County_Meters': 103359,
    'NAD_1983_HARN_WISCRS_Taylor_County_Meters': 103360,
    'NAD_1983_HARN_WISCRS_Trempealeau_County_Meters': 103361,
    'NAD_1983_HARN_WISCRS_Vernon_County_Meters': 103362,
    'NAD_1983_HARN_WISCRS_Vilas_County_Meters': 103363,
    'NAD_1983_HARN_WISCRS_Walworth_County_Meters': 103364,
    'NAD_1983_HARN_WISCRS_Washburn_County_Meters': 103365,
    'NAD_1983_HARN_WISCRS_Washington_County_Meters': 103366,
    'NAD_1983_HARN_WISCRS_Waukesha_County_Meters': 103367,
    'NAD_1983_HARN_WISCRS_Waupaca_County_Meters': 103368,
    'NAD_1983_HARN_WISCRS_Waushara_County_Meters': 103369,
    'NAD_1983_HARN_WISCRS_Winnebago_County_Meters': 103370,
    'NAD_1983_HARN_WISCRS_Wood_County_Meters': 103371,
    'NAD_1983_HARN_WISCRS_Adams_County_Feet': 103400,
    'NAD_1983_HARN_WISCRS_Ashland_County_Feet': 103401,
    'NAD_1983_HARN_WISCRS_Barron_County_Feet': 103402,
    'NAD_1983_HARN_WISCRS_Bayfield_County_Feet': 103403,
    'NAD_1983_HARN_WISCRS_Brown_County_Feet': 103404,
    'NAD_1983_HARN_WISCRS_Buffalo_County_Feet': 103405,
    'NAD_1983_HARN_WISCRS_Burnett_County_Feet': 103406,
    'NAD_1983_HARN_WISCRS_Calumet_County_Feet': 103407,
    'NAD_1983_HARN_WISCRS_Chippewa_County_Feet': 103408,
    'NAD_1983_HARN_WISCRS_Clark_County_Feet': 103409,
    'NAD_1983_HARN_WISCRS_Columbia_County_Feet': 103410,
    'NAD_1983_HARN_WISCRS_Crawford_County_Feet': 103411,
    'NAD_1983_HARN_WISCRS_Dane_County_Feet': 103412,
    'NAD_1983_HARN_WISCRS_Dodge_County_Feet': 103413,
    'NAD_1983_HARN_WISCRS_Door_County_Feet': 103414,
    'NAD_1983_HARN_WISCRS_Douglas_County_Feet': 103415,
    'NAD_1983_HARN_WISCRS_Dunn_County_Feet': 103416,
    'NAD_1983_HARN_WISCRS_EauClaire_County_Feet': 103417,
    'NAD_1983_HARN_WISCRS_Florence_County_Feet': 103418,
    'NAD_1983_HARN_WISCRS_Fond_du_Lac_County_Feet': 103419,
    'NAD_1983_HARN_WISCRS_Forest_County_Feet': 103420,
    'NAD_1983_HARN_WISCRS_Grant_County_Feet': 103421,
    'NAD_1983_HARN_WISCRS_Green_County_Feet': 103422,
    'NAD_1983_HARN_WISCRS_GreenLake_County_Feet': 103423,
    'NAD_1983_HARN_WISCRS_Iowa_County_Feet': 103424,
    'NAD_1983_HARN_WISCRS_Iron_County_Feet': 103425,
    'NAD_1983_HARN_WISCRS_Jackson_County_Feet': 103426,
    'NAD_1983_HARN_WISCRS_Jefferson_County_Feet': 103427,
    'NAD_1983_HARN_WISCRS_Juneau_County_Feet': 103428,
    'NAD_1983_HARN_WISCRS_Kenosha_County_Feet': 103429,
    'NAD_1983_HARN_WISCRS_Kewaunee_County_Feet': 103430,
    'NAD_1983_HARN_WISCRS_LaCrosse_County_Feet': 103431,
    'NAD_1983_HARN_WISCRS_Lafayette_County_Feet': 103432,
    'NAD_1983_HARN_WISCRS_Langlade_County_Feet': 103433,
    'NAD_1983_HARN_WISCRS_Lincoln_County_Feet': 103434,
    'NAD_1983_HARN_WISCRS_Manitowoc_County_Feet': 103435,
    'NAD_1983_HARN_WISCRS_Marathon_County_Feet': 103436,
    'NAD_1983_HARN_WISCRS_Marinette_County_Feet': 103437,
    'NAD_1983_HARN_WISCRS_Marquette_County_Feet': 103438,
    'NAD_1983_HARN_WISCRS_Menominee_County_Feet': 103439,
    'NAD_1983_HARN_WISCRS_Milwaukee_County_Feet': 103440,
    'NAD_1983_HARN_WISCRS_Monroe_County_Feet': 103441,
    'NAD_1983_HARN_WISCRS_Oconto_County_Feet': 103442,
    'NAD_1983_HARN_WISCRS_Oneida_County_Feet': 103443,
    'NAD_1983_HARN_WISCRS_Outagamie_County_Feet': 103444,
    'NAD_1983_HARN_WISCRS_Ozaukee_County_Feet': 103445,
    'NAD_1983_HARN_WISCRS_Pepin_County_Feet': 103446,
    'NAD_1983_HARN_WISCRS_Pierce_County_Feet': 103447,
    'NAD_1983_HARN_WISCRS_Polk_County_Feet': 103448,
    'NAD_1983_HARN_WISCRS_Portage_County_Feet': 103449,
    'NAD_1983_HARN_WISCRS_Price_County_Feet': 103450,
    'NAD_1983_HARN_WISCRS_Racine_County_Feet': 103451,
    'NAD_1983_HARN_WISCRS_Richland_County_Feet': 103452,
    'NAD_1983_HARN_WISCRS_Rock_County_Feet': 103453,
    'NAD_1983_HARN_WISCRS_Rusk_County_Feet': 103454,
    'NAD_1983_HARN_WISCRS_Sauk_County_Feet': 103455,
    'NAD_1983_HARN_WISCRS_Sawyer_County_Feet': 103456,
    'NAD_1983_HARN_WISCRS_Shawano_County_Feet': 103457,
    'NAD_1983_HARN_WISCRS_Sheboygan_County_Feet': 103458,
    'NAD_1983_HARN_WISCRS_St_Croix_County_Feet': 103459,
    'NAD_1983_HARN_WISCRS_Taylor_County_Feet': 103460,
    'NAD_1983_HARN_WISCRS_Trempealeau_County_Feet': 103461,
    'NAD_1983_HARN_WISCRS_Vernon_County_Feet': 103462,
    'NAD_1983_HARN_WISCRS_Vilas_County_Feet': 103463,
    'NAD_1983_HARN_WISCRS_Walworth_County_Feet': 103464,
    'NAD_1983_HARN_WISCRS_Washburn_County_Feet': 103465,
    'NAD_1983_HARN_WISCRS_Washington_County_Feet': 103466,
    'NAD_1983_HARN_WISCRS_Waukesha_County_Feet': 103467,
    'NAD_1983_HARN_WISCRS_Waupaca_County_Feet': 103468,
    'NAD_1983_HARN_WISCRS_Waushara_County_Feet': 103469,
    'NAD_1983_HARN_WISCRS_Winnebago_County_Feet': 103470,
    'NAD_1983_HARN_WISCRS_Wood_County_Feet': 103471,
    'Hanoi_1972_GK_Zone_18': 2044,
    'Hanoi_1972_GK_Zone_19': 2045,
    'South_Yemen_GK_Zone_8': 2395,
    'South_Yemen_GK_Zone_9': 2396,
    'Beijing_1954_3_Degree_GK_CM_102E': 2431,
    'Beijing_1954_3_Degree_GK_CM_105E': 2432,
    'Beijing_1954_3_Degree_GK_CM_108E': 2433,
    'Beijing_1954_3_Degree_GK_CM_111E': 2434,
    'Beijing_1954_3_Degree_GK_CM_114E': 2435,
    'Beijing_1954_3_Degree_GK_CM_117E': 2436,
    'Beijing_1954_3_Degree_GK_CM_120E': 2437,
    'Beijing_1954_3_Degree_GK_CM_123E': 2438,
    'Beijing_1954_3_Degree_GK_CM_126E': 2439,
    'Beijing_1954_3_Degree_GK_CM_129E': 2440,
    'Beijing_1954_3_Degree_GK_CM_132E': 2441,
    'Beijing_1954_3_Degree_GK_CM_135E': 2442,
    'Beijing_1954_3_Degree_GK_CM_75E': 2422,
    'Beijing_1954_3_Degree_GK_CM_78E': 2423,
    'Beijing_1954_3_Degree_GK_CM_81E': 2424,
    'Beijing_1954_3_Degree_GK_CM_84E': 2425,
    'Beijing_1954_3_Degree_GK_CM_87E': 2426,
    'Beijing_1954_3_Degree_GK_CM_90E': 2427,
    'Beijing_1954_3_Degree_GK_CM_93E': 2428,
    'Beijing_1954_3_Degree_GK_CM_96E': 2429,
    'Beijing_1954_3_Degree_GK_CM_99E': 2430,
    'Beijing_1954_3_Degree_GK_Zone_25': 2401,
    'Beijing_1954_3_Degree_GK_Zone_26': 2402,
    'Beijing_1954_3_Degree_GK_Zone_27': 2403,
    'Beijing_1954_3_Degree_GK_Zone_28': 2404,
    'Beijing_1954_3_Degree_GK_Zone_29': 2405,
    'Beijing_1954_3_Degree_GK_Zone_30': 2406,
    'Beijing_1954_3_Degree_GK_Zone_31': 2407,
    'Beijing_1954_3_Degree_GK_Zone_32': 2408,
    'Beijing_1954_3_Degree_GK_Zone_33': 2409,
    'Beijing_1954_3_Degree_GK_Zone_34': 2410,
    'Beijing_1954_3_Degree_GK_Zone_35': 2411,
    'Beijing_1954_3_Degree_GK_Zone_36': 2412,
    'Beijing_1954_3_Degree_GK_Zone_37': 2413,
    'Beijing_1954_3_Degree_GK_Zone_38': 2414,
    'Beijing_1954_3_Degree_GK_Zone_39': 2415,
    'Beijing_1954_3_Degree_GK_Zone_40': 2416,
    'Beijing_1954_3_Degree_GK_Zone_41': 2417,
    'Beijing_1954_3_Degree_GK_Zone_42': 2418,
    'Beijing_1954_3_Degree_GK_Zone_43': 2419,
    'Beijing_1954_3_Degree_GK_Zone_44': 2420,
    'Beijing_1954_3_Degree_GK_Zone_45': 2421,
    'Beijing_1954_GK_Zone_13': 21413,
    'Beijing_1954_GK_Zone_13N': 21473,
    'Beijing_1954_GK_Zone_14': 21414,
    'Beijing_1954_GK_Zone_14N': 21474,
    'Beijing_1954_GK_Zone_15': 21415,
    'Beijing_1954_GK_Zone_15N': 21475,
    'Beijing_1954_GK_Zone_16': 21416,
    'Beijing_1954_GK_Zone_16N': 21476,
    'Beijing_1954_GK_Zone_17': 21417,
    'Beijing_1954_GK_Zone_17N': 21477,
    'Beijing_1954_GK_Zone_18': 21418,
    'Beijing_1954_GK_Zone_18N': 21478,
    'Beijing_1954_GK_Zone_19': 21419,
    'Beijing_1954_GK_Zone_19N': 21479,
    'Beijing_1954_GK_Zone_20': 21420,
    'Beijing_1954_GK_Zone_20N': 21480,
    'Beijing_1954_GK_Zone_21': 21421,
    'Beijing_1954_GK_Zone_21N': 21481,
    'Beijing_1954_GK_Zone_22': 21422,
    'Beijing_1954_GK_Zone_22N': 21482,
    'Beijing_1954_GK_Zone_23': 21423,
    'Beijing_1954_GK_Zone_23N': 21483,
    'CGCS2000_3_Degree_GK_CM_102E': 4543,
    'CGCS2000_3_Degree_GK_CM_105E': 4544,
    'CGCS2000_3_Degree_GK_CM_108E': 4545,
    'CGCS2000_3_Degree_GK_CM_111E': 4546,
    'CGCS2000_3_Degree_GK_CM_114E': 4547,
    'CGCS2000_3_Degree_GK_CM_117E': 4548,
    'CGCS2000_3_Degree_GK_CM_120E': 4549,
    'CGCS2000_3_Degree_GK_CM_123E': 4550,
    'CGCS2000_3_Degree_GK_CM_126E': 4551,
    'CGCS2000_3_Degree_GK_CM_129E': 4552,
    'CGCS2000_3_Degree_GK_CM_132E': 4553,
    'CGCS2000_3_Degree_GK_CM_135E': 4554,
    'CGCS2000_3_Degree_GK_CM_75E': 4534,
    'CGCS2000_3_Degree_GK_CM_78E': 4535,
    'CGCS2000_3_Degree_GK_CM_81E': 4536,
    'CGCS2000_3_Degree_GK_CM_84E': 4537,
    'CGCS2000_3_Degree_GK_CM_87E': 4538,
    'CGCS2000_3_Degree_GK_CM_90E': 4539,
    'CGCS2000_3_Degree_GK_CM_93E': 4540,
    'CGCS2000_3_Degree_GK_CM_96E': 4541,
    'CGCS2000_3_Degree_GK_CM_99E': 4542,
    'CGCS2000_3_Degree_GK_Zone_25': 4513,
    'CGCS2000_3_Degree_GK_Zone_26': 4514,
    'CGCS2000_3_Degree_GK_Zone_27': 4515,
    'CGCS2000_3_Degree_GK_Zone_28': 4516,
    'CGCS2000_3_Degree_GK_Zone_29': 4517,
    'CGCS2000_3_Degree_GK_Zone_30': 4518,
    'CGCS2000_3_Degree_GK_Zone_31': 4519,
    'CGCS2000_3_Degree_GK_Zone_32': 4520,
    'CGCS2000_3_Degree_GK_Zone_33': 4521,
    'CGCS2000_3_Degree_GK_Zone_34': 4522,
    'CGCS2000_3_Degree_GK_Zone_35': 4523,
    'CGCS2000_3_Degree_GK_Zone_36': 4524,
    'CGCS2000_3_Degree_GK_Zone_37': 4525,
    'CGCS2000_3_Degree_GK_Zone_38': 4526,
    'CGCS2000_3_Degree_GK_Zone_39': 4527,
    'CGCS2000_3_Degree_GK_Zone_40': 4528,
    'CGCS2000_3_Degree_GK_Zone_41': 4529,
    'CGCS2000_3_Degree_GK_Zone_42': 4530,
    'CGCS2000_3_Degree_GK_Zone_43': 4531,
    'CGCS2000_3_Degree_GK_Zone_44': 4532,
    'CGCS2000_3_Degree_GK_Zone_45': 4533,
    'CGCS2000_GK_CM_105E': 4507,
    'CGCS2000_GK_CM_111E': 4508,
    'CGCS2000_GK_CM_117E': 4509,
    'CGCS2000_GK_CM_123E': 4510,
    'CGCS2000_GK_CM_129E': 4511,
    'CGCS2000_GK_CM_135E': 4512,
    'CGCS2000_GK_CM_75E': 4502,
    'CGCS2000_GK_CM_81E': 4503,
    'CGCS2000_GK_CM_87E': 4504,
    'CGCS2000_GK_CM_93E': 4505,
    'CGCS2000_GK_CM_99E': 4506,
    'CGCS2000_GK_Zone_13': 4491,
    'CGCS2000_GK_Zone_14': 4492,
    'CGCS2000_GK_Zone_15': 4493,
    'CGCS2000_GK_Zone_16': 4494,
    'CGCS2000_GK_Zone_17': 4495,
    'CGCS2000_GK_Zone_18': 4496,
    'CGCS2000_GK_Zone_19': 4497,
    'CGCS2000_GK_Zone_20': 4498,
    'CGCS2000_GK_Zone_21': 4499,
    'CGCS2000_GK_Zone_22': 4500,
    'CGCS2000_GK_Zone_23': 4501,
    'Albanian_1987_GK_Zone_4': 2462,
    'PD/83_GK_Zone_3': 3396,
    'PD/83_GK_Zone_4': 3397,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_10': 3840,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_3': 3837,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_4': 3838,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_5': 3329,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_6': 3330,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_8': 3332,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_9': 3839,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_3_E-N': 5670,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_4_E-N': 5671,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_5_E-N': 5672,
    'Pulkovo_1942_Adj_1958_3_Degree_GK_Zone_7': 3331,
    'Pulkovo_1942_Adj_1958_GK_Zone_2': 3833,
    'Pulkovo_1942_Adj_1958_GK_Zone_2_E-N': 5631,
    'Pulkovo_1942_Adj_1958_GK_Zone_3': 3333,
    'Pulkovo_1942_Adj_1958_GK_Zone_3_E-N': 5663,
    'Pulkovo_1942_Adj_1958_GK_Zone_4': 3334,
    'Pulkovo_1942_Adj_1958_GK_Zone_5': 3335,
    'Pulkovo_1942_Adj_1983_3_Degree_GK_Zone_3': 2397,
    'Pulkovo_1942_Adj_1983_3_Degree_GK_Zone_4': 2398,
    'Pulkovo_1942_Adj_1983_3_Degree_GK_Zone_5': 2399,
    'Pulkovo_1942_Adj_1983_3_Degree_GK_Zone_6': 3841,
    'Pulkovo_1942_Adj_1983_3_Degree_GK_Zone_8': 4434,
    'Pulkovo_1942_Adj_1983_3_Degree_GK_Zone_3_E-N': 5673,
    'Pulkovo_1942_Adj_1983_3_Degree_GK_Zone_4_E-N': 5674,
    'Pulkovo_1942_Adj_1983_3_Degree_GK_Zone_5_E-N': 5675,
    'Pulkovo_1942_Adj_1983_3_Degree_GK_Zone_7': 4417,
    'Pulkovo_1942_Adj_1983_GK_Zone_2': 3834,
    'Pulkovo_1942_Adj_1983_GK_Zone_2_E-N': 5664,
    'Pulkovo_1942_Adj_1983_GK_Zone_3': 3835,
    'Pulkovo_1942_Adj_1983_GK_Zone_3_E-N': 5665,
    'Pulkovo_1942_Adj_1983_GK_Zone_4': 3836,
    'RD/83_3_Degree_GK_Zone_4_E-N': 5668,
    'RD/83_3_Degree_GK_Zone_5_E-N': 5669,
    'RD/83_GK_Zone_4': 3398,
    'RD/83_GK_Zone_5': 3399,
    'Ukraine_2000_3_Degree_GK_CM_21E': 5577,
    'Ukraine_2000_3_Degree_GK_CM_24E': 5578,
    'Ukraine_2000_3_Degree_GK_CM_27E': 5579,
    'Ukraine_2000_3_Degree_GK_CM_30E': 5580,
    'Ukraine_2000_3_Degree_GK_CM_33E': 5581,
    'Ukraine_2000_3_Degree_GK_CM_36E': 5582,
    'Ukraine_2000_3_Degree_GK_CM_39E': 5583,
    'Ukraine_2000_3_Degree_GK_Zone_10': 5573,
    'Ukraine_2000_3_Degree_GK_Zone_11': 5574,
    'Ukraine_2000_3_Degree_GK_Zone_12': 5575,
    'Ukraine_2000_3_Degree_GK_Zone_13': 5576,
    'Ukraine_2000_3_Degree_GK_Zone_7': 5570,
    'Ukraine_2000_3_Degree_GK_Zone_8': 5571,
    'Ukraine_2000_3_Degree_GK_Zone_9': 5572,
    'Ukraine_2000_GK_CM_21E': 5566,
    'Ukraine_2000_GK_CM_27E': 5567,
    'Ukraine_2000_GK_CM_33E': 5568,
    'Ukraine_2000_GK_CM_39E': 5569,
    'Ukraine_2000_GK_Zone_4': 5562,
    'Ukraine_2000_GK_Zone_5': 5563,
    'Ukraine_2000_GK_Zone_6': 5564,
    'Ukraine_2000_GK_Zone_7': 5565,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_102E': 4791,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_105E': 4792,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_108E': 4793,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_111E': 4794,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_114E': 4795,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_117E': 4796,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_120E': 4797,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_123E': 4798,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_126E': 4799,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_129E': 4800,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_135E': 4822,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_75E': 4782,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_78E': 4783,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_81E': 4784,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_84E': 4785,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_87E': 4786,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_90E': 4787,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_93E': 4788,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_96E': 4789,
    'New_Beijing_3_Degree_Gauss_Kruger_CM_99E': 4790,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_25': 4652,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_26': 4653,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_27': 4654,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_28': 4655,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_29': 4656,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_30': 4766,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_31': 4767,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_32': 4768,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_33': 4769,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_34': 4770,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_35': 4771,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_36': 4772,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_37': 4773,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_38': 4774,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_39': 4775,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_40': 4776,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_41': 4777,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_42': 4778,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_43': 4779,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_44': 4780,
    'New_Beijing_3_Degree_Gauss_Kruger_Zone_45': 4781,
    'New_Beijing_Gauss_Kruger_CM_105E': 4584,
    'New_Beijing_Gauss_Kruger_CM_111E': 4585,
    'New_Beijing_Gauss_Kruger_CM_117E': 4586,
    'New_Beijing_Gauss_Kruger_CM_123E': 4587,
    'New_Beijing_Gauss_Kruger_CM_129E': 4588,
    'New_Beijing_Gauss_Kruger_CM_135E': 4589,
    'New_Beijing_Gauss_Kruger_CM_75E': 4579,
    'New_Beijing_Gauss_Kruger_CM_81E': 4580,
    'New_Beijing_Gauss_Kruger_CM_87E': 4581,
    'New_Beijing_Gauss_Kruger_CM_93E': 4582,
    'New_Beijing_Gauss_Kruger_CM_99E': 4583,
    'New_Beijing_Gauss_Kruger_Zone_13': 4568,
    'New_Beijing_Gauss_Kruger_Zone_14': 4569,
    'New_Beijing_Gauss_Kruger_Zone_15': 4570,
    'New_Beijing_Gauss_Kruger_Zone_16': 4571,
    'New_Beijing_Gauss_Kruger_Zone_17': 4572,
    'New_Beijing_Gauss_Kruger_Zone_18': 4573,
    'New_Beijing_Gauss_Kruger_Zone_19': 4574,
    'New_Beijing_Gauss_Kruger_Zone_20': 4575,
    'New_Beijing_Gauss_Kruger_Zone_21': 4576,
    'New_Beijing_Gauss_Kruger_Zone_22': 4577,
    'New_Beijing_Gauss_Kruger_Zone_23': 4578,
    'Pulkovo_1942_3_Degree_GK_CM_102E': 2610,
    'Pulkovo_1942_3_Degree_GK_CM_105E': 2611,
    'Pulkovo_1942_3_Degree_GK_CM_108E': 2612,
    'Pulkovo_1942_3_Degree_GK_CM_111E': 2613,
    'Pulkovo_1942_3_Degree_GK_CM_114E': 2614,
    'Pulkovo_1942_3_Degree_GK_CM_117E': 2615,
    'Pulkovo_1942_3_Degree_GK_CM_120E': 2616,
    'Pulkovo_1942_3_Degree_GK_CM_123E': 2617,
    'Pulkovo_1942_3_Degree_GK_CM_126E': 2618,
    'Pulkovo_1942_3_Degree_GK_CM_129E': 2619,
    'Pulkovo_1942_3_Degree_GK_CM_132E': 2620,
    'Pulkovo_1942_3_Degree_GK_CM_135E': 2621,
    'Pulkovo_1942_3_Degree_GK_CM_138E': 2622,
    'Pulkovo_1942_3_Degree_GK_CM_141E': 2623,
    'Pulkovo_1942_3_Degree_GK_CM_144E': 2624,
    'Pulkovo_1942_3_Degree_GK_CM_147E': 2625,
    'Pulkovo_1942_3_Degree_GK_CM_150E': 2626,
    'Pulkovo_1942_3_Degree_GK_CM_153E': 2627,
    'Pulkovo_1942_3_Degree_GK_CM_156E': 2628,
    'Pulkovo_1942_3_Degree_GK_CM_159E': 2629,
    'Pulkovo_1942_3_Degree_GK_CM_162E': 2630,
    'Pulkovo_1942_3_Degree_GK_CM_165E': 2631,
    'Pulkovo_1942_3_Degree_GK_CM_168E': 2632,
    'Pulkovo_1942_3_Degree_GK_CM_168W': 2640,
    'Pulkovo_1942_3_Degree_GK_CM_171E': 2633,
    'Pulkovo_1942_3_Degree_GK_CM_171W': 2639,
    'Pulkovo_1942_3_Degree_GK_CM_174E': 2634,
    'Pulkovo_1942_3_Degree_GK_CM_174W': 2638,
    'Pulkovo_1942_3_Degree_GK_CM_177E': 2635,
    'Pulkovo_1942_3_Degree_GK_CM_177W': 2637,
    'Pulkovo_1942_3_Degree_GK_CM_180E': 2636,
    'Pulkovo_1942_3_Degree_GK_CM_18E': 3147,
    'Pulkovo_1942_3_Degree_GK_CM_21E': 2582,
    'Pulkovo_1942_3_Degree_GK_CM_24E': 2583,
    'Pulkovo_1942_3_Degree_GK_CM_27E': 2584,
    'Pulkovo_1942_3_Degree_GK_CM_30E': 2585,
    'Pulkovo_1942_3_Degree_GK_CM_33E': 2586,
    'Pulkovo_1942_3_Degree_GK_CM_36E': 2587,
    'Pulkovo_1942_3_Degree_GK_CM_39E': 2588,
    'Pulkovo_1942_3_Degree_GK_CM_42E': 2589,
    'Pulkovo_1942_3_Degree_GK_CM_45E': 2590,
    'Pulkovo_1942_3_Degree_GK_CM_48E': 2591,
    'Pulkovo_1942_3_Degree_GK_CM_51E': 2592,
    'Pulkovo_1942_3_Degree_GK_CM_54E': 2593,
    'Pulkovo_1942_3_Degree_GK_CM_57E': 2594,
    'Pulkovo_1942_3_Degree_GK_Zone_6': 3146,
    'Pulkovo_1942_3_Degree_GK_Zone_60': 3389,
    'Pulkovo_1942_3_Degree_GK_CM_60E': 2595,
    'Pulkovo_1942_3_Degree_GK_CM_63E': 2596,
    'Pulkovo_1942_3_Degree_GK_CM_66E': 2597,
    'Pulkovo_1942_3_Degree_GK_CM_69E': 2598,
    'Pulkovo_1942_3_Degree_GK_CM_72E': 2599,
    'Pulkovo_1942_3_Degree_GK_CM_75E': 2601,
    'Pulkovo_1942_3_Degree_GK_CM_78E': 2602,
    'Pulkovo_1942_3_Degree_GK_CM_81E': 2603,
    'Pulkovo_1942_3_Degree_GK_CM_84E': 2604,
    'Pulkovo_1942_3_Degree_GK_CM_87E': 2605,
    'Pulkovo_1942_3_Degree_GK_CM_90E': 2606,
    'Pulkovo_1942_3_Degree_GK_CM_93E': 2607,
    'Pulkovo_1942_3_Degree_GK_CM_96E': 2608,
    'Pulkovo_1942_3_Degree_GK_CM_99E': 2609,
    'Pulkovo_1942_3_Degree_GK_Zone_10': 2526,
    'Pulkovo_1942_3_Degree_GK_Zone_11': 2527,
    'Pulkovo_1942_3_Degree_GK_Zone_12': 2528,
    'Pulkovo_1942_3_Degree_GK_Zone_13': 2529,
    'Pulkovo_1942_3_Degree_GK_Zone_14': 2530,
    'Pulkovo_1942_3_Degree_GK_Zone_15': 2531,
    'Pulkovo_1942_3_Degree_GK_Zone_16': 2532,
    'Pulkovo_1942_3_Degree_GK_Zone_17': 2533,
    'Pulkovo_1942_3_Degree_GK_Zone_18': 2534,
    'Pulkovo_1942_3_Degree_GK_Zone_19': 2535,
    'Pulkovo_1942_3_Degree_GK_Zone_20': 2536,
    'Pulkovo_1942_3_Degree_GK_Zone_21': 2537,
    'Pulkovo_1942_3_Degree_GK_Zone_22': 2538,
    'Pulkovo_1942_3_Degree_GK_Zone_23': 2539,
    'Pulkovo_1942_3_Degree_GK_Zone_24': 2540,
    'Pulkovo_1942_3_Degree_GK_Zone_25': 2541,
    'Pulkovo_1942_3_Degree_GK_Zone_26': 2542,
    'Pulkovo_1942_3_Degree_GK_Zone_27': 2543,
    'Pulkovo_1942_3_Degree_GK_Zone_28': 2544,
    'Pulkovo_1942_3_Degree_GK_Zone_29': 2545,
    'Pulkovo_1942_3_Degree_GK_Zone_30': 2546,
    'Pulkovo_1942_3_Degree_GK_Zone_31': 2547,
    'Pulkovo_1942_3_Degree_GK_Zone_32': 2548,
    'Pulkovo_1942_3_Degree_GK_Zone_33': 2549,
    'Pulkovo_1942_3_Degree_GK_Zone_34': 2551,
    'Pulkovo_1942_3_Degree_GK_Zone_35': 2552,
    'Pulkovo_1942_3_Degree_GK_Zone_36': 2553,
    'Pulkovo_1942_3_Degree_GK_Zone_37': 2554,
    'Pulkovo_1942_3_Degree_GK_Zone_38': 2555,
    'Pulkovo_1942_3_Degree_GK_Zone_39': 2556,
    'Pulkovo_1942_3_Degree_GK_Zone_40': 2557,
    'Pulkovo_1942_3_Degree_GK_Zone_41': 2558,
    'Pulkovo_1942_3_Degree_GK_Zone_42': 2559,
    'Pulkovo_1942_3_Degree_GK_Zone_43': 2560,
    'Pulkovo_1942_3_Degree_GK_Zone_44': 2561,
    'Pulkovo_1942_3_Degree_GK_Zone_45': 2562,
    'Pulkovo_1942_3_Degree_GK_Zone_46': 2563,
    'Pulkovo_1942_3_Degree_GK_Zone_47': 2564,
    'Pulkovo_1942_3_Degree_GK_Zone_48': 2565,
    'Pulkovo_1942_3_Degree_GK_Zone_49': 2566,
    'Pulkovo_1942_3_Degree_GK_Zone_50': 2567,
    'Pulkovo_1942_3_Degree_GK_Zone_51': 2568,
    'Pulkovo_1942_3_Degree_GK_Zone_52': 2569,
    'Pulkovo_1942_3_Degree_GK_Zone_53': 2570,
    'Pulkovo_1942_3_Degree_GK_Zone_54': 2571,
    'Pulkovo_1942_3_Degree_GK_Zone_55': 2572,
    'Pulkovo_1942_3_Degree_GK_Zone_56': 2573,
    'Pulkovo_1942_3_Degree_GK_Zone_57': 2574,
    'Pulkovo_1942_3_Degree_GK_Zone_58': 2575,
    'Pulkovo_1942_3_Degree_GK_Zone_59': 2576,
    'Pulkovo_1942_3_Degree_GK_Zone_60': 3389,
    'Pulkovo_1942_3_Degree_GK_Zone_61': 2578,
    'Pulkovo_1942_3_Degree_GK_Zone_62': 2579,
    'Pulkovo_1942_3_Degree_GK_Zone_63': 2580,
    'Pulkovo_1942_3_Degree_GK_Zone_64': 2581,
    'Pulkovo_1942_3_Degree_GK_Zone_7': 2523,
    'Pulkovo_1942_3_Degree_GK_Zone_8': 2524,
    'Pulkovo_1942_3_Degree_GK_Zone_9': 2525,
    'Pulkovo_1942_CS63_Zone_A1': 2935,
    'Pulkovo_1942_CS63_Zone_A2': 2936,
    'Pulkovo_1942_CS63_Zone_A3': 2937,
    'Pulkovo_1942_CS63_Zone_A4': 2938,
    'Pulkovo_1942_CS63_Zone_C0': 3350,
    'Pulkovo_1942_CS63_Zone_C1': 3351,
    'Pulkovo_1942_CS63_Zone_C2': 3352,
    'Pulkovo_1942_CS63_Zone_K2': 2939,
    'Pulkovo_1942_CS63_Zone_K3': 2940,
    'Pulkovo_1942_CS63_Zone_K4': 2941,
    'Pulkovo_1942_GK_Zone_10': 28410,
    'Pulkovo_1942_GK_Zone_10N': 28470,
    'Pulkovo_1942_GK_Zone_11': 28411,
    'Pulkovo_1942_GK_Zone_11N': 28471,
    'Pulkovo_1942_GK_Zone_12': 28412,
    'Pulkovo_1942_GK_Zone_12N': 28472,
    'Pulkovo_1942_GK_Zone_13': 28413,
    'Pulkovo_1942_GK_Zone_13N': 28473,
    'Pulkovo_1942_GK_Zone_14': 28414,
    'Pulkovo_1942_GK_Zone_14N': 28474,
    'Pulkovo_1942_GK_Zone_15': 28415,
    'Pulkovo_1942_GK_Zone_15N': 28475,
    'Pulkovo_1942_GK_Zone_16': 28416,
    'Pulkovo_1942_GK_Zone_16N': 28476,
    'Pulkovo_1942_GK_Zone_17': 28417,
    'Pulkovo_1942_GK_Zone_17N': 28477,
    'Pulkovo_1942_GK_Zone_18': 28418,
    'Pulkovo_1942_GK_Zone_18N': 28478,
    'Pulkovo_1942_GK_Zone_19': 28419,
    'Pulkovo_1942_GK_Zone_19N': 28479,
    'Pulkovo_1942_GK_Zone_2': 28402,
    'Pulkovo_1942_GK_Zone_20': 28420,
    'Pulkovo_1942_GK_Zone_20N': 28480,
    'Pulkovo_1942_GK_Zone_21': 28421,
    'Pulkovo_1942_GK_Zone_21N': 28481,
    'Pulkovo_1942_GK_Zone_22': 28422,
    'Pulkovo_1942_GK_Zone_22N': 28482,
    'Pulkovo_1942_GK_Zone_23': 28423,
    'Pulkovo_1942_GK_Zone_23N': 28483,
    'Pulkovo_1942_GK_Zone_24': 28424,
    'Pulkovo_1942_GK_Zone_24N': 28484,
    'Pulkovo_1942_GK_Zone_25': 28425,
    'Pulkovo_1942_GK_Zone_25N': 28485,
    'Pulkovo_1942_GK_Zone_26': 28426,
    'Pulkovo_1942_GK_Zone_26N': 28486,
    'Pulkovo_1942_GK_Zone_27': 28427,
    'Pulkovo_1942_GK_Zone_27N': 28487,
    'Pulkovo_1942_GK_Zone_28': 28428,
    'Pulkovo_1942_GK_Zone_28N': 28488,
    'Pulkovo_1942_GK_Zone_29': 28429,
    'Pulkovo_1942_GK_Zone_29N': 28489,
    'Pulkovo_1942_GK_Zone_2N': 28462,
    'Pulkovo_1942_GK_Zone_3': 28403,
    'Pulkovo_1942_GK_Zone_30': 28430,
    'Pulkovo_1942_GK_Zone_30N': 28490,
    'Pulkovo_1942_GK_Zone_31': 28431,
    'Pulkovo_1942_GK_Zone_31N': 28491,
    'Pulkovo_1942_GK_Zone_32': 28432,
    'Pulkovo_1942_GK_Zone_32N': 28492,
    'Pulkovo_1942_GK_Zone_3N': 28463,
    'Pulkovo_1942_GK_Zone_4': 28404,
    'Pulkovo_1942_GK_Zone_4N': 28464,
    'Pulkovo_1942_GK_Zone_5': 28405,
    'Pulkovo_1942_GK_Zone_5N': 28465,
    'Pulkovo_1942_GK_Zone_6': 28406,
    'Pulkovo_1942_GK_Zone_6N': 28466,
    'Pulkovo_1942_GK_Zone_7': 28407,
    'Pulkovo_1942_GK_Zone_7N': 28467,
    'Pulkovo_1942_GK_Zone_8': 28408,
    'Pulkovo_1942_GK_Zone_8N': 28468,
    'Pulkovo_1942_GK_Zone_9': 28409,
    'Pulkovo_1942_GK_Zone_9N': 28469,
    'Pulkovo_1995_3_Degree_GK_CM_102E': 2726,
    'Pulkovo_1995_3_Degree_GK_CM_105E': 2727,
    'Pulkovo_1995_3_Degree_GK_CM_108E': 2728,
    'Pulkovo_1995_3_Degree_GK_CM_111E': 2729,
    'Pulkovo_1995_3_Degree_GK_CM_114E': 2730,
    'Pulkovo_1995_3_Degree_GK_CM_117E': 2731,
    'Pulkovo_1995_3_Degree_GK_CM_120E': 2732,
    'Pulkovo_1995_3_Degree_GK_CM_123E': 2733,
    'Pulkovo_1995_3_Degree_GK_CM_126E': 2734,
    'Pulkovo_1995_3_Degree_GK_CM_129E': 2735,
    'Pulkovo_1995_3_Degree_GK_CM_132E': 2738,
    'Pulkovo_1995_3_Degree_GK_CM_135E': 2739,
    'Pulkovo_1995_3_Degree_GK_CM_138E': 2740,
    'Pulkovo_1995_3_Degree_GK_CM_141E': 2741,
    'Pulkovo_1995_3_Degree_GK_CM_144E': 2742,
    'Pulkovo_1995_3_Degree_GK_CM_147E': 2743,
    'Pulkovo_1995_3_Degree_GK_CM_150E': 2744,
    'Pulkovo_1995_3_Degree_GK_CM_153E': 2745,
    'Pulkovo_1995_3_Degree_GK_CM_156E': 2746,
    'Pulkovo_1995_3_Degree_GK_CM_159E': 2747,
    'Pulkovo_1995_3_Degree_GK_CM_162E': 2748,
    'Pulkovo_1995_3_Degree_GK_CM_165E': 2749,
    'Pulkovo_1995_3_Degree_GK_CM_168E': 2750,
    'Pulkovo_1995_3_Degree_GK_CM_168W': 2758,
    'Pulkovo_1995_3_Degree_GK_CM_171E': 2751,
    'Pulkovo_1995_3_Degree_GK_CM_171W': 2757,
    'Pulkovo_1995_3_Degree_GK_CM_174E': 2752,
    'Pulkovo_1995_3_Degree_GK_CM_174W': 2756,
    'Pulkovo_1995_3_Degree_GK_CM_177E': 2753,
    'Pulkovo_1995_3_Degree_GK_CM_177W': 2755,
    'Pulkovo_1995_3_Degree_GK_CM_180E': 2754,
    'Pulkovo_1995_3_Degree_GK_CM_18E': 3151,
    'Pulkovo_1995_3_Degree_GK_CM_21E': 2699,
    'Pulkovo_1995_3_Degree_GK_CM_24E': 2700,
    'Pulkovo_1995_3_Degree_GK_CM_27E': 2701,
    'Pulkovo_1995_3_Degree_GK_CM_30E': 2702,
    'Pulkovo_1995_3_Degree_GK_CM_33E': 2703,
    'Pulkovo_1995_3_Degree_GK_CM_36E': 2704,
    'Pulkovo_1995_3_Degree_GK_CM_39E': 2705,
    'Pulkovo_1995_3_Degree_GK_CM_42E': 2706,
    'Pulkovo_1995_3_Degree_GK_CM_45E': 2707,
    'Pulkovo_1995_3_Degree_GK_CM_48E': 2708,
    'Pulkovo_1995_3_Degree_GK_CM_51E': 2709,
    'Pulkovo_1995_3_Degree_GK_CM_54E': 2710,
    'Pulkovo_1995_3_Degree_GK_CM_57E': 2711,
    'Pulkovo_1995_3_Degree_GK_Zone_6': 3150,
    'Pulkovo_1995_3_Degree_GK_Zone_60': 3390,
    'Pulkovo_1995_3_Degree_GK_CM_60E': 2712,
    'Pulkovo_1995_3_Degree_GK_CM_63E': 2713,
    'Pulkovo_1995_3_Degree_GK_CM_66E': 2714,
    'Pulkovo_1995_3_Degree_GK_CM_69E': 2715,
    'Pulkovo_1995_3_Degree_GK_CM_72E': 2716,
    'Pulkovo_1995_3_Degree_GK_CM_75E': 2717,
    'Pulkovo_1995_3_Degree_GK_CM_78E': 2718,
    'Pulkovo_1995_3_Degree_GK_CM_81E': 2719,
    'Pulkovo_1995_3_Degree_GK_CM_84E': 2720,
    'Pulkovo_1995_3_Degree_GK_CM_87E': 2721,
    'Pulkovo_1995_3_Degree_GK_CM_90E': 2722,
    'Pulkovo_1995_3_Degree_GK_CM_93E': 2723,
    'Pulkovo_1995_3_Degree_GK_CM_96E': 2724,
    'Pulkovo_1995_3_Degree_GK_CM_99E': 2725,
    'Pulkovo_1995_3_Degree_GK_Zone_10': 2644,
    'Pulkovo_1995_3_Degree_GK_Zone_11': 2645,
    'Pulkovo_1995_3_Degree_GK_Zone_12': 2646,
    'Pulkovo_1995_3_Degree_GK_Zone_13': 2647,
    'Pulkovo_1995_3_Degree_GK_Zone_14': 2648,
    'Pulkovo_1995_3_Degree_GK_Zone_15': 2649,
    'Pulkovo_1995_3_Degree_GK_Zone_16': 2650,
    'Pulkovo_1995_3_Degree_GK_Zone_17': 2651,
    'Pulkovo_1995_3_Degree_GK_Zone_18': 2652,
    'Pulkovo_1995_3_Degree_GK_Zone_19': 2653,
    'Pulkovo_1995_3_Degree_GK_Zone_20': 2654,
    'Pulkovo_1995_3_Degree_GK_Zone_21': 2655,
    'Pulkovo_1995_3_Degree_GK_Zone_22': 2656,
    'Pulkovo_1995_3_Degree_GK_Zone_23': 2657,
    'Pulkovo_1995_3_Degree_GK_Zone_24': 2658,
    'Pulkovo_1995_3_Degree_GK_Zone_25': 2659,
    'Pulkovo_1995_3_Degree_GK_Zone_26': 2660,
    'Pulkovo_1995_3_Degree_GK_Zone_27': 2661,
    'Pulkovo_1995_3_Degree_GK_Zone_28': 2662,
    'Pulkovo_1995_3_Degree_GK_Zone_29': 2663,
    'Pulkovo_1995_3_Degree_GK_Zone_30': 2664,
    'Pulkovo_1995_3_Degree_GK_Zone_31': 2665,
    'Pulkovo_1995_3_Degree_GK_Zone_32': 2666,
    'Pulkovo_1995_3_Degree_GK_Zone_33': 2667,
    'Pulkovo_1995_3_Degree_GK_Zone_34': 2668,
    'Pulkovo_1995_3_Degree_GK_Zone_35': 2669,
    'Pulkovo_1995_3_Degree_GK_Zone_36': 2670,
    'Pulkovo_1995_3_Degree_GK_Zone_37': 2671,
    'Pulkovo_1995_3_Degree_GK_Zone_38': 2672,
    'Pulkovo_1995_3_Degree_GK_Zone_39': 2673,
    'Pulkovo_1995_3_Degree_GK_Zone_40': 2674,
    'Pulkovo_1995_3_Degree_GK_Zone_41': 2675,
    'Pulkovo_1995_3_Degree_GK_Zone_42': 2676,
    'Pulkovo_1995_3_Degree_GK_Zone_43': 2677,
    'Pulkovo_1995_3_Degree_GK_Zone_44': 2678,
    'Pulkovo_1995_3_Degree_GK_Zone_45': 2679,
    'Pulkovo_1995_3_Degree_GK_Zone_46': 2680,
    'Pulkovo_1995_3_Degree_GK_Zone_47': 2681,
    'Pulkovo_1995_3_Degree_GK_Zone_48': 2682,
    'Pulkovo_1995_3_Degree_GK_Zone_49': 2683,
    'Pulkovo_1995_3_Degree_GK_Zone_50': 2684,
    'Pulkovo_1995_3_Degree_GK_Zone_51': 2685,
    'Pulkovo_1995_3_Degree_GK_Zone_52': 2686,
    'Pulkovo_1995_3_Degree_GK_Zone_53': 2687,
    'Pulkovo_1995_3_Degree_GK_Zone_54': 2688,
    'Pulkovo_1995_3_Degree_GK_Zone_55': 2689,
    'Pulkovo_1995_3_Degree_GK_Zone_56': 2690,
    'Pulkovo_1995_3_Degree_GK_Zone_57': 2691,
    'Pulkovo_1995_3_Degree_GK_Zone_58': 2692,
    'Pulkovo_1995_3_Degree_GK_Zone_59': 2693,
    'Pulkovo_1995_3_Degree_GK_Zone_60': 3390,
    'Pulkovo_1995_3_Degree_GK_Zone_61': 2695,
    'Pulkovo_1995_3_Degree_GK_Zone_62': 2696,
    'Pulkovo_1995_3_Degree_GK_Zone_63': 2697,
    'Pulkovo_1995_3_Degree_GK_Zone_64': 2698,
    'Pulkovo_1995_3_Degree_GK_Zone_7': 2641,
    'Pulkovo_1995_3_Degree_GK_Zone_8': 2642,
    'Pulkovo_1995_3_Degree_GK_Zone_9': 2643,
    'Pulkovo_1995_GK_Zone_10': 20010,
    'Pulkovo_1995_GK_Zone_10N': 20070,
    'Pulkovo_1995_GK_Zone_11': 20011,
    'Pulkovo_1995_GK_Zone_11N': 20071,
    'Pulkovo_1995_GK_Zone_12': 20012,
    'Pulkovo_1995_GK_Zone_12N': 20072,
    'Pulkovo_1995_GK_Zone_13': 20013,
    'Pulkovo_1995_GK_Zone_13N': 20073,
    'Pulkovo_1995_GK_Zone_14': 20014,
    'Pulkovo_1995_GK_Zone_14N': 20074,
    'Pulkovo_1995_GK_Zone_15': 20015,
    'Pulkovo_1995_GK_Zone_15N': 20075,
    'Pulkovo_1995_GK_Zone_16': 20016,
    'Pulkovo_1995_GK_Zone_16N': 20076,
    'Pulkovo_1995_GK_Zone_17': 20017,
    'Pulkovo_1995_GK_Zone_17N': 20077,
    'Pulkovo_1995_GK_Zone_18': 20018,
    'Pulkovo_1995_GK_Zone_18N': 20078,
    'Pulkovo_1995_GK_Zone_19': 20019,
    'Pulkovo_1995_GK_Zone_19N': 20079,
    'Pulkovo_1995_GK_Zone_2': 20002,
    'Pulkovo_1995_GK_Zone_20': 20020,
    'Pulkovo_1995_GK_Zone_20N': 20080,
    'Pulkovo_1995_GK_Zone_21': 20021,
    'Pulkovo_1995_GK_Zone_21N': 20081,
    'Pulkovo_1995_GK_Zone_22': 20022,
    'Pulkovo_1995_GK_Zone_22N': 20082,
    'Pulkovo_1995_GK_Zone_23': 20023,
    'Pulkovo_1995_GK_Zone_23N': 20083,
    'Pulkovo_1995_GK_Zone_24': 20024,
    'Pulkovo_1995_GK_Zone_24N': 20084,
    'Pulkovo_1995_GK_Zone_25': 20025,
    'Pulkovo_1995_GK_Zone_25N': 20085,
    'Pulkovo_1995_GK_Zone_26': 20026,
    'Pulkovo_1995_GK_Zone_26N': 20086,
    'Pulkovo_1995_GK_Zone_27': 20027,
    'Pulkovo_1995_GK_Zone_27N': 20087,
    'Pulkovo_1995_GK_Zone_28': 20028,
    'Pulkovo_1995_GK_Zone_28N': 20088,
    'Pulkovo_1995_GK_Zone_29': 20029,
    'Pulkovo_1995_GK_Zone_29N': 20089,
    'Pulkovo_1995_GK_Zone_2N': 20062,
    'Pulkovo_1995_GK_Zone_3': 20003,
    'Pulkovo_1995_GK_Zone_30': 20030,
    'Pulkovo_1995_GK_Zone_30N': 20090,
    'Pulkovo_1995_GK_Zone_31': 20031,
    'Pulkovo_1995_GK_Zone_31N': 20091,
    'Pulkovo_1995_GK_Zone_32': 20032,
    'Pulkovo_1995_GK_Zone_32N': 20092,
    'Pulkovo_1995_GK_Zone_3N': 20063,
    'Pulkovo_1995_GK_Zone_4': 20004,
    'Pulkovo_1995_GK_Zone_4N': 20064,
    'Pulkovo_1995_GK_Zone_5': 20005,
    'Pulkovo_1995_GK_Zone_5N': 20065,
    'Pulkovo_1995_GK_Zone_6': 20006,
    'Pulkovo_1995_GK_Zone_6N': 20066,
    'Pulkovo_1995_GK_Zone_7': 20007,
    'Pulkovo_1995_GK_Zone_7N': 20067,
    'Pulkovo_1995_GK_Zone_8': 20008,
    'Pulkovo_1995_GK_Zone_8N': 20068,
    'Pulkovo_1995_GK_Zone_9': 20009,
    'Pulkovo_1995_GK_Zone_9N': 20069,
    'ED_1950_3_Degree_GK_Zone_10': 2207,
    'ED_1950_3_Degree_GK_Zone_11': 2208,
    'ED_1950_3_Degree_GK_Zone_12': 2209,
    'ED_1950_3_Degree_GK_Zone_13': 2210,
    'ED_1950_3_Degree_GK_Zone_14': 2211,
    'ED_1950_3_Degree_GK_Zone_15': 2212,
    'ED_1950_3_Degree_GK_Zone_9': 2206,
    'Xian_1980_3_Degree_GK_CM_102E': 2379,
    'Xian_1980_3_Degree_GK_CM_105E': 2380,
    'Xian_1980_3_Degree_GK_CM_108E': 2381,
    'Xian_1980_3_Degree_GK_CM_111E': 2382,
    'Xian_1980_3_Degree_GK_CM_114E': 2383,
    'Xian_1980_3_Degree_GK_CM_117E': 2384,
    'Xian_1980_3_Degree_GK_CM_120E': 2385,
    'Xian_1980_3_Degree_GK_CM_123E': 2386,
    'Xian_1980_3_Degree_GK_CM_126E': 2387,
    'Xian_1980_3_Degree_GK_CM_129E': 2388,
    'Xian_1980_3_Degree_GK_CM_132E': 2389,
    'Xian_1980_3_Degree_GK_CM_135E': 2390,
    'Xian_1980_3_Degree_GK_CM_75E': 2370,
    'Xian_1980_3_Degree_GK_CM_78E': 2371,
    'Xian_1980_3_Degree_GK_CM_81E': 2372,
    'Xian_1980_3_Degree_GK_CM_84E': 2373,
    'Xian_1980_3_Degree_GK_CM_87E': 2374,
    'Xian_1980_3_Degree_GK_CM_90E': 2375,
    'Xian_1980_3_Degree_GK_CM_93E': 2376,
    'Xian_1980_3_Degree_GK_CM_96E': 2377,
    'Xian_1980_3_Degree_GK_CM_99E': 2378,
    'Xian_1980_3_Degree_GK_Zone_25': 2349,
    'Xian_1980_3_Degree_GK_Zone_26': 2350,
    'Xian_1980_3_Degree_GK_Zone_27': 2351,
    'Xian_1980_3_Degree_GK_Zone_28': 2352,
    'Xian_1980_3_Degree_GK_Zone_29': 2353,
    'Xian_1980_3_Degree_GK_Zone_30': 2354,
    'Xian_1980_3_Degree_GK_Zone_31': 2355,
    'Xian_1980_3_Degree_GK_Zone_32': 2356,
    'Xian_1980_3_Degree_GK_Zone_33': 2357,
    'Xian_1980_3_Degree_GK_Zone_34': 2358,
    'Xian_1980_3_Degree_GK_Zone_35': 2359,
    'Xian_1980_3_Degree_GK_Zone_36': 2360,
    'Xian_1980_3_Degree_GK_Zone_37': 2361,
    'Xian_1980_3_Degree_GK_Zone_38': 2362,
    'Xian_1980_3_Degree_GK_Zone_39': 2363,
    'Xian_1980_3_Degree_GK_Zone_40': 2364,
    'Xian_1980_3_Degree_GK_Zone_41': 2365,
    'Xian_1980_3_Degree_GK_Zone_42': 2366,
    'Xian_1980_3_Degree_GK_Zone_43': 2367,
    'Xian_1980_3_Degree_GK_Zone_44': 2368,
    'Xian_1980_3_Degree_GK_Zone_45': 2369,
    'Xian_1980_GK_CM_105E': 2343,
    'Xian_1980_GK_CM_111E': 2344,
    'Xian_1980_GK_CM_117E': 2345,
    'Xian_1980_GK_CM_123E': 2346,
    'Xian_1980_GK_CM_129E': 2347,
    'Xian_1980_GK_CM_135E': 2348,
    'Xian_1980_GK_CM_75E': 2338,
    'Xian_1980_GK_CM_81E': 2339,
    'Xian_1980_GK_CM_87E': 2340,
    'Xian_1980_GK_CM_93E': 2341,
    'Xian_1980_GK_CM_99E': 2342,
    'Xian_1980_GK_Zone_13': 2327,
    'Xian_1980_GK_Zone_14': 2328,
    'Xian_1980_GK_Zone_15': 2329,
    'Xian_1980_GK_Zone_16': 2330,
    'Xian_1980_GK_Zone_17': 2331,
    'Xian_1980_GK_Zone_18': 2332,
    'Xian_1980_GK_Zone_19': 2333,
    'Xian_1980_GK_Zone_20': 2334,
    'Xian_1980_GK_Zone_21': 2335,
    'Xian_1980_GK_Zone_22': 2336,
    'Xian_1980_GK_Zone_23': 2337,
    'Abidjan_1987_TM_5_NW': 2165,
    'Accra_Ghana_Grid': 2136,
    'Accra_TM_1_NW': 2137,
    'Beduaram_TM_13_NE': 2931,
    'Camacupa_TM_11_30_SE': 22091,
    'Camacupa_TM_12_SE': 22092,
    'Carthage_TM_11_NE': 2088,
    'Douala_1948_AEF_West': 3119,
    'Egypt_Blue_Belt': 22991,
    'Egypt_Extended_Purple_Belt': 22994,
    'Egypt_Gulf_of_Suez_S-650_TL_Red_Belt': 3355,
    'Egypt_Purple_Belt': 22993,
    'Egypt_Red_Belt': 22992,
    'Ghana_Metre_Grid': 25000,
    'IGC_1962_Congo_TM_Zone_12': 3318,
    'IGC_1962_Congo_TM_Zone_14': 3319,
    'IGC_1962_Congo_TM_Zone_16': 3320,
    'IGC_1962_Congo_TM_Zone_18': 3321,
    'IGC_1962_Congo_TM_Zone_20': 3322,
    'IGC_1962_Congo_TM_Zone_22': 3323,
    'IGC_1962_Congo_TM_Zone_24': 3324,
    'IGC_1962_Congo_TM_Zone_26': 3325,
    'IGC_1962_Congo_TM_Zone_28': 3326,
    'IGC_1962_Congo_TM_Zone_30': 3327,
    'IGCB_1955_Congo_TM_Zone_12': 3339,
    'IGCB_1955_Congo_TM_Zone_14': 3340,
    'IGCB_1955_Congo_TM_Zone_16': 3341,
    'Kasai_1953_Congo_TM_Zone_22': 3316,
    'Kasai_1953_Congo_TM_Zone_24': 3317,
    'Katanga_1955_Katanga_Gauss_Zone_A': 3986,
    'Katanga_1955_Katanga_Gauss_Zone_B': 3987,
    'Katanga_1955_Katanga_Gauss_Zone_C': 3988,
    'Katanga_1955_Katanga_Gauss_Zone_D': 3989,
    'Katanga_1955_Katanga_Lambert': 4415,
    'Katanga_1955_Katanga_TM': 3315,
    'Locodjo_1965_TM_5_NW': 2164,
    'Merchich_Sahara_Nord': 26194,
    'Merchich_Sahara_Sud': 26195,
    'Nigeria_East_Belt': 26393,
    'Nigeria_Mid_Belt': 26392,
    'Nigeria_West_Belt': 26391,
    'Nord_Algerie': 30591,
    'Nord_Algerie_Degree': 102591,
    'Nord_Algerie_Ancienne': 30491,
    'Nord_Algerie_Ancienne_Degree': 102491,
    'Nord_Maroc': 26191,
    'Nord_Maroc_Degree': 102191,
    'Nord_Sahara_1959_Voirol_Unifie_Nord': 30791,
    'Nord_Sahara_1959_Voirol_Unifie_Sud': 30792,
    'Nord_Tunisie': 22391,
    'RGRDC_2005_Congo_TM_Zone_12': 4048,
    'RGRDC_2005_Congo_TM_Zone_14': 4049,
    'RGRDC_2005_Congo_TM_Zone_16': 4050,
    'RGRDC_2005_Congo_TM_Zone_18': 4051,
    'RGRDC_2005_Congo_TM_Zone_20': 4056,
    'RGRDC_2005_Congo_TM_Zone_22': 4057,
    'RGRDC_2005_Congo_TM_Zone_24': 4058,
    'RGRDC_2005_Congo_TM_Zone_26': 4059,
    'RGRDC_2005_Congo_TM_Zone_28': 4060,
    'RGRDC_2005_Congo_TM_Zone_30': 5844,
    'Sahara': 26193,
    'Sahara_Degree': 102193,
    'Sierra_Leone_1924_New_Colony_Grid': 2159,
    'Sierra_Leone_1924_New_War_Office_Grid': 2160,
    'Sud_Algerie': 30592,
    'Sud_Algerie_Degree': 102592,
    'Sud_Algerie_Ancienne': 30492,
    'Sud_Algerie_Ancienne_Degree': 102492,
    'Sud_Maroc': 26192,
    'Sud_Maroc_Degree': 102192,
    'Sud_Tunisie': 22392,
    'Tananarive_1925_Paris_Laborde_Grid': 29701,
    'Tananarive_1925_Laborde_Grid': 102590,
    'Voirol_1879_Nord_Algerie_Ancienne': 30493,
    'Voirol_1879_Sud_Algerie_Ancienne': 30494,
    'WGS_1984_UTM_Gabon_TM': 5223,
    'WGS_1984_UTM_Gabon_TM_2011': 5523,
    'WGS_1984_TM_12_SE': 5842,
    'WGS_1984_TM_36_SE': 32766,
    'WGS_1984_TM_6_NE': 2311,
    'Argentina_Zone_1': 22191,
    'Argentina_Zone_2': 22192,
    'Argentina_Zone_3': 22193,
    'Argentina_Zone_4': 22194,
    'Argentina_Zone_5': 22195,
    'Argentina_Zone_6': 22196,
    'Argentina_Zone_7': 22197,
    'Chos_Malal_1914_Argentina_2': 2081,
    'Hito_XVIII_1963_Argentina_2': 2083,
    'Pampa_del_Castillo_Argentina_2': 2082,
    'POSGAR_1994_Argentina_Zone_1': 22181,
    'POSGAR_1994_Argentina_Zone_2': 22182,
    'POSGAR_1994_Argentina_Zone_3': 22183,
    'POSGAR_1994_Argentina_Zone_4': 22184,
    'POSGAR_1994_Argentina_Zone_5': 22185,
    'POSGAR_1994_Argentina_Zone_6': 22186,
    'POSGAR_1994_Argentina_Zone_7': 22187,
    'POSGAR_1998_Argentina_Zone_1': 22171,
    'POSGAR_1998_Argentina_Zone_2': 22172,
    'POSGAR_1998_Argentina_Zone_3': 22173,
    'POSGAR_1998_Argentina_Zone_4': 22174,
    'POSGAR_1998_Argentina_Zone_5': 22175,
    'POSGAR_1998_Argentina_Zone_6': 22176,
    'POSGAR_1998_Argentina_Zone_7': 22177,
    'POSGAR_2007_Argentina_Zone_1': 5343,
    'POSGAR_2007_Argentina_Zone_2': 5344,
    'POSGAR_2007_Argentina_Zone_3': 5345,
    'POSGAR_2007_Argentina_Zone_4': 5346,
    'POSGAR_2007_Argentina_Zone_5': 5347,
    'POSGAR_2007_Argentina_Zone_6': 5348,
    'POSGAR_2007_Argentina_Zone_7': 5349,
    'Ain_el_Abd_1970_Aramco_Lambert_2': 102204,
    'Ain_el_Abd_Aramco_Lambert': 2318,
    'Bahrain_State_Grid': 20499,
    'Deir_ez_Zor_Levant_Stereographic': 22780,
    'Deir_ez_Zor_Levant_Zone': 22700,
    'Deir_ez_Zor_Syria_Lambert': 22770,
    'DRUKREF_03_Bhutan_National_Grid': 5266,
    'ED_1950_Iraq_National_Grid': 3893,
    'ED_1950_Jordan_TM': 3066,
    'Everest_Modified_1969_RSO_Malaya_Meters': 102061,
    'FD_1958_Iraq': 3200,
    'Gulshan_303_Bangladesh_TM': 3106,
    'Hanoi_1972_GK_106_NE': 2093,
    'Hong_Kong_1963_Grid_System': 3407,
    'Hong_Kong_1980_Grid': 2326,
    'Indian_1960_TM_106NE': 3176,
    'Israel_TM_Grid': 2039,
    'Jordan_JTM': 102158,
    'Kandawala_Ceylon_Belt_Indian_Yards_1937': 102064,
    'Kandawala_Ceylon_Belt_Meters': 102063,
    'Kandawala_Sri_Lanka_Grid': 5234,
    'KUDAMS_KTM': 31901,
    'KOC_Lambert': 24600,
    'Nahrwan_1934_Iraq_Zone': 3394,
    'Nepal_Nagarkot_TM': 102306,
    'Observatorio_Meteorologico_1965_Macau_Grid': 102159,
    'Palestine_1923_Israel_CS_Grid': 28193,
    'Palestine_1923_Palestine_Belt': 28192,
    'Palestine_1923_Palestine_Grid': 28191,
    'Philippines_Zone_I': 25391,
    'Philippines_Zone_II': 25392,
    'Philippines_Zone_III': 25393,
    'Philippines_Zone_IV': 25394,
    'Philippines_Zone_V': 25395,
    'PNG94_PNGMG94_Zone_54': 5550,
    'PNG94_PNGMG94_Zone_55': 5551,
    'PNG94_PNGMG94_Zone_56': 5552,
    'PRS_1992_Philippines_Zone_I': 3121,
    'PRS_1992_Philippines_Zone_II': 3122,
    'PRS_1992_Philippines_Zone_III': 3123,
    'PRS_1992_Philippines_Zone_IV': 3124,
    'PRS_1992_Philippines_Zone_V': 3125,
    'Pulkovo_1942_Caspian_Sea_Mercator': 3388,
    'Qatar_1948_Qatar_Grid': 2099,
    'Qatar_National_Grid': 28600,
    'QND_1995_Qatar_National_Grid': 2932,
    'Rassadiran_Nakhl_e_Taqi': 2057,
    'SLD99_Sri_Lanka_Grid_1999': 5235,
    'TWD_1967_TM_Penghu': 3827,
    'TWD_1967_TM_Taiwan': 3828,
    'TWD_1997_TM_Penghu': 3825,
    'TWD_1997_TM_Taiwan': 3826,
    'WGS_1972_BE_South_China_Sea_Lambert': 3415,
    'WGS_1972_BE_TM_106_NE': 2094,
    'WGS_1984_Dubai_Local_TM': 3997,
    'AGD_1966_ACT_Grid_AGC_Zone': 102071,
    'AGD_1966_ACT_Standard_Grid': 5825,
    'AGD_1966_AMG_Zone_48': 20248,
    'AGD_1966_AMG_Zone_49': 20249,
    'AGD_1966_AMG_Zone_50': 20250,
    'AGD_1966_AMG_Zone_51': 20251,
    'AGD_1966_AMG_Zone_52': 20252,
    'AGD_1966_AMG_Zone_53': 20253,
    'AGD_1966_AMG_Zone_54': 20254,
    'AGD_1966_AMG_Zone_55': 20255,
    'AGD_1966_AMG_Zone_56': 20256,
    'AGD_1966_AMG_Zone_57': 20257,
    'AGD_1966_AMG_Zone_58': 20258,
    'AGD_1966_ISG_54_2': 102072,
    'AGD_1966_ISG_54_3': 102073,
    'AGD_1966_ISG_55_1': 102074,
    'AGD_1966_ISG_55_2': 102075,
    'AGD_1966_ISG_55_3': 102076,
    'AGD_1966_ISG_56_1': 102077,
    'AGD_1966_ISG_56_2': 102078,
    'AGD_1966_ISG_56_3': 102079,
    'AGD_1966_VICGRID': 3110,
    'AGD_1984_AMG_Zone_48': 20348,
    'AGD_1984_AMG_Zone_49': 20349,
    'AGD_1984_AMG_Zone_50': 20350,
    'AGD_1984_AMG_Zone_51': 20351,
    'AGD_1984_AMG_Zone_52': 20352,
    'AGD_1984_AMG_Zone_53': 20353,
    'AGD_1984_AMG_Zone_54': 20354,
    'AGD_1984_AMG_Zone_55': 20355,
    'AGD_1984_AMG_Zone_56': 20356,
    'AGD_1984_AMG_Zone_57': 20357,
    'AGD_1984_AMG_Zone_58': 20358,
    'GDA_1994_Australia_Albers': 3577,
    'GDA_1994_BCSG02': 3113,
    'GDA_1994_Geoscience_Australia_Lambert': 3112,
    'GDA_1994_MGA_Zone_48': 28348,
    'GDA_1994_MGA_Zone_49': 28349,
    'GDA_1994_MGA_Zone_50': 28350,
    'GDA_1994_MGA_Zone_51': 28351,
    'GDA_1994_MGA_Zone_52': 28352,
    'GDA_1994_MGA_Zone_53': 28353,
    'GDA_1994_MGA_Zone_54': 28354,
    'GDA_1994_MGA_Zone_55': 28355,
    'GDA_1994_MGA_Zone_56': 28356,
    'GDA_1994_MGA_Zone_57': 28357,
    'GDA_1994_MGA_Zone_58': 28358,
    'GDA_1994_NSW_Lambert': 3308,
    'GDA_1994_Perth_Coastal_Grid_1994': 102216,
    'GDA_1994_South_Australia_Lambert': 3107,
    'GDA_1994_VICGRID94': 3111,
    'WGS_1984_Australian_Centre_for_Remote_Sensing_Lambert': 4462,
    'Austria_Central_Zone': 31282,
    'Austria_East_Zone': 31283,
    'Austria_West_Zone': 31281,
    'ETRS_1989_Austria_Lambert': 3416,
    'MGI_Ferro_Austria_GK_Central': 31252,
    'MGI_Ferro_Austria_GK_East': 31253,
    'MGI_Ferro_Austria_GK_West': 31251,
    'MGI_Ferro_M28': 31288,
    'MGI_Ferro_M31': 31289,
    'MGI_Ferro_M34': 31290,
    'MGI_Austria_GK_Central': 31255,
    'MGI_Austria_GK_East': 31256,
    'MGI_Austria_GK_M28': 31257,
    'MGI_Austria_GK_M31': 31258,
    'MGI_Austria_GK_M34': 31259,
    'MGI_Austria_GK_West': 31254,
    'MGI_Austria_Lambert': 31287,
    'MGI_M28': 31284,
    'MGI_M31': 31285,
    'MGI_M34': 31286,
    'DRUKREF_03_Bumthang_TM': 5292,
    'DRUKREF_03_Chhukha_TM': 5293,
    'DRUKREF_03_Dagana_TM': 5294,
    'DRUKREF_03_Gasa_TM': 5295,
    'DRUKREF_03_Ha_TM': 5296,
    'DRUKREF_03_Lhuentse_TM': 5297,
    'DRUKREF_03_Mongar_TM': 5298,
    'DRUKREF_03_Paro_TM': 5299,
    'DRUKREF_03_Pemagatshel_TM': 5300,
    'DRUKREF_03_Punakha_TM': 5301,
    'DRUKREF_03_Samdrup_Jongkhar_TM': 5302,
    'DRUKREF_03_Samtse_TM': 5303,
    'DRUKREF_03_Sarpang_TM': 5304,
    'DRUKREF_03_Thimphu_TM': 5305,
    'DRUKREF_03_Trashigang_TM': 5306,
    'DRUKREF_03_Trongsa_TM': 5307,
    'DRUKREF_03_Tsirang_TM': 5308,
    'DRUKREF_03_Wangdue_Phodrang_TM': 5309,
    'DRUKREF_03_Yangtse_TM': 5310,
    'DRUKREF_03_Zhemgang_TM': 5311,
    'ATS_1977_MTM_4_Nova_Scotia': 2294,
    'ATS_1977_MTM_5_Nova_Scotia': 2295,
    'ATS_1977_New_Brunswick_Stereographic': 2200,
    'NAD_1927_10TM_AEP_Forest': 102178,
    'NAD_1927_10TM_AEP_Resource': 102179,
    'NAD_1927_3TM_111': 3771,
    'NAD_1927_3TM_114': 3772,
    'NAD_1927_3TM_117': 3773,
    'NAD_1927_3TM_120': 3800,
    'NAD_1927_CGQ77_MTM_10_SCoPQ': 2016,
    'NAD_1927_CGQ77_MTM_2_SCoPQ': 2008,
    'NAD_1927_CGQ77_MTM_3_SCoPQ': 2009,
    'NAD_1927_CGQ77_MTM_4_SCoPQ': 2010,
    'NAD_1927_CGQ77_MTM_5_SCoPQ': 2011,
    'NAD_1927_CGQ77_MTM_6_SCoPQ': 2012,
    'NAD_1927_CGQ77_MTM_7_SCoPQ': 2013,
    'NAD_1927_CGQ77_MTM_8_SCoPQ': 2014,
    'NAD_1927_CGQ77_MTM_9_SCoPQ': 2015,
    'NAD_1927_CGQ77_Quebec_Lambert': 2138,
    'NAD_1927_CGQ77_UTM_Zone_17N': 2031,
    'NAD_1927_CGQ77_UTM_Zone_18N': 2032,
    'NAD_1927_CGQ77_UTM_Zone_19N': 2033,
    'NAD_1927_CGQ77_UTM_Zone_20N': 2034,
    'NAD_1927_CGQ77_UTM_Zone_21N': 2035,
    'NAD_1927_DEF_1976_MTM_10': 2019,
    'NAD_1927_DEF_1976_MTM_11': 2020,
    'NAD_1927_DEF_1976_MTM_12': 2021,
    'NAD_1927_DEF_1976_MTM_13': 2022,
    'NAD_1927_DEF_1976_MTM_14': 2023,
    'NAD_1927_DEF_1976_MTM_15': 2024,
    'NAD_1927_DEF_1976_MTM_16': 2025,
    'NAD_1927_DEF_1976_MTM_17': 2026,
    'NAD_1927_DEF_1976_MTM_8': 2017,
    'NAD_1927_DEF_1976_MTM_9': 2018,
    'NAD_1927_DEF_1976_UTM_Zone_15N': 2027,
    'NAD_1927_DEF_1976_UTM_Zone_16N': 2028,
    'NAD_1927_DEF_1976_UTM_Zone_17N': 2029,
    'NAD_1927_DEF_1976_UTM_Zone_18N': 2030,
    'NAD_1927_MTM_1': 32081,
    'NAD_1927_MTM_2': 32082,
    'NAD_1927_MTM_3': 32083,
    'NAD_1927_MTM_4': 32084,
    'NAD_1927_MTM_5': 32085,
    'NAD_1927_MTM_6': 32086,
    'NAD_1927_MTQ_Lambert': 3797,
    'NAD_1927_New_Brunswick_Stereographic': 5588,
    'NAD_1927_Quebec_Lambert': 32098,
    'NAD_1983_10TM_AEP_Forest': 3400,
    'NAD_1983_10TM_AEP_Resource': 3401,
    'NAD_1983_3TM_111': 3775,
    'NAD_1983_3TM_114': 3776,
    'NAD_1983_3TM_117': 3777,
    'NAD_1983_3TM_120': 3801,
    'NAD_1983_BC_Environment_Albers': 3005,
    'NAD_1983_CSRS_10TM_AEP_Forest': 3402,
    'NAD_1983_CSRS_10TM_AEP_Resource': 3403,
    'NAD_1983_CSRS_3TM_111': 3779,
    'NAD_1983_CSRS_3TM_114': 3780,
    'NAD_1983_CSRS_3TM_117': 3781,
    'NAD_1983_CSRS_3TM_120': 3802,
    'NAD_1983_CSRS_BC_Environment_Albers': 3153,
    'NAD_1983_CSRS_MTM_1': 26898,
    'NAD_1983_CSRS_MTM_2': 26899,
    'NAD_1983_CSRS_MTM_2_SCoPQ': 2944,
    'NAD_1983_CSRS_MTM_3': 2945,
    'NAD_1983_CSRS_MTM_4': 2946,
    'NAD_1983_CSRS_MTM_5': 2947,
    'NAD_1983_CSRS_MTM_6': 2948,
    'NAD_1983_CSRS_MTM_7': 2949,
    'NAD_1983_CSRS_MTM_8': 2950,
    'NAD_1983_CSRS_MTM_9': 2951,
    'NAD_1983_CSRS_MTM_10': 2952,
    'NAD_1983_CSRS_MTM_11': 26891,
    'NAD_1983_CSRS_MTM_12': 26892,
    'NAD_1983_CSRS_MTM_13': 26893,
    'NAD_1983_CSRS_MTM_14': 26894,
    'NAD_1983_CSRS_MTM_15': 26895,
    'NAD_1983_CSRS_MTM_16': 26896,
    'NAD_1983_CSRS_MTM_17': 26897,
    'NAD_1983_CSRS_MTQ_Lambert': 3799,
    'NAD_1983_CSRS_New_Brunswick_Stereographic': 2953,
    'NAD_1983_CSRS_Northwest_Territories_Lambert': 3581,
    'NAD_1983_CSRS_Ontario_MNR_Lambert': 3162,
    'NAD_1983_CSRS_Prince_Edward_Island': 2954,
    'NAD_1983_CSRS_Statistics_Canada_Lambert': 3348,
    'NAD_1983_CSRS_Teranet_Ontario_Lambert': 5321,
    'NAD_1983_CSRS_UTM_Zone_10N': 3157,
    'NAD_1983_CSRS_UTM_Zone_11N': 2955,
    'NAD_1983_CSRS_UTM_Zone_12N': 2956,
    'NAD_1983_CSRS_UTM_Zone_13N': 2957,
    'NAD_1983_CSRS_UTM_Zone_14N': 3158,
    'NAD_1983_CSRS_UTM_Zone_15N': 3159,
    'NAD_1983_CSRS_UTM_Zone_16N': 3160,
    'NAD_1983_CSRS_UTM_Zone_17N': 2958,
    'NAD_1983_CSRS_UTM_Zone_18N': 2959,
    'NAD_1983_CSRS_UTM_Zone_19N': 2960,
    'NAD_1983_CSRS_UTM_Zone_20N': 2961,
    'NAD_1983_CSRS_UTM_Zone_21N': 2962,
    'NAD_1983_CSRS_UTM_Zone_22N': 3761,
    'NAD_1983_CSRS_UTM_Zone_7N': 3154,
    'NAD_1983_CSRS_UTM_Zone_8N': 3155,
    'NAD_1983_CSRS_UTM_Zone_9N': 3156,
    'NAD_1983_CSRS_Yukon_Albers': 3579,
    'NAD_1983_MTM_1': 32181,
    'NAD_1983_MTM_2': 32182,
    'NAD_1983_MTM_2_SCoPQ': 32180,
    'NAD_1983_MTM_3': 32183,
    'NAD_1983_MTM_4': 32184,
    'NAD_1983_MTM_5': 32185,
    'NAD_1983_MTM_6': 32186,
    'NAD_1983_MTM_7': 32187,
    'NAD_1983_MTM_8': 32188,
    'NAD_1983_MTM_9': 32189,
    'NAD_1983_MTM_10': 32190,
    'NAD_1983_MTM_11': 32191,
    'NAD_1983_MTM_12': 32192,
    'NAD_1983_MTM_13': 32193,
    'NAD_1983_MTM_14': 32194,
    'NAD_1983_MTM_15': 32195,
    'NAD_1983_MTM_16': 32196,
    'NAD_1983_MTM_17': 32197,
    'NAD_1983_MTQ_Lambert': 3798,
    'NAD_1983_Northwest_Territories_Lambert': 3580,
    'NAD_1983_Ontario_MNR_Lambert': 3161,
    'NAD_1983_Quebec_Lambert': 32198,
    'NAD_1983_Statistics_Canada_Lambert': 3347,
    'NAD_1983_Teranet_Ontario_Lambert': 5320,
    'NAD_1983_Yukon_Albers': 3578,
    'Prince_Edward_Island_Stereographic': 2290,
    'Belge_Lambert_1950': 21500,
    'Belge_Lambert_1972': 31370,
    'Belge_Lambert_2005': 3447,
    'Belge_Lambert_2008': 3812,
    'Bern_1898_Bern_LV03C': 21780,
    'British_National_Grid': 27700,
    'CGRS_1993_LTM': 102319,
    'CH1903_LV03': 21781,
    'CH1903_LV03C-G': 21782,
    'CH1903+_LV95': 2056,
    'D48_Slovenia_TM': 102060,
    'Datum_73_Hayford_Gauss_IGeoE': 102160,
    'Datum_73_Hayford_Gauss_IPCC': 102161,
    'Datum_73_Modified_Portuguese_Grid': 27493,
    'ED_1950_TM_0_N': 23090,
    'ED_1950_TM_5_NE': 23095,
    'ED_1950_TM_6_NE': 5627,
    'Estonia_1997_Estonia_National_Grid': 3301,
    'Estonian_Coordinate_System_of_1992': 3300,
    'ETRS_1989_DKTM1': 4093,
    'ETRS_1989_DKTM2': 4094,
    'ETRS_1989_DKTM3': 4095,
    'ETRS_1989_DKTM4': 4096,
    'ETRS_1989_FAROE_TM': 5316,
    'ETRS_1989_Guernsey_Grid': 3108,
    'ETRS_1989_Jersey_Transverse_Mercator': 3109,
    'ETRS_1989_Kosovo_Grid': 102157,
    'ETRS_1989_Kp2000_Bornholm': 2198,
    'ETRS_1989_Kp2000_Jutland': 2196,
    'ETRS_1989_Kp2000_Zealand': 2197,
    'ETRS_1989_Poland_CS2000_Zone_5': 2176,
    'ETRS_1989_Poland_CS2000_Zone_6': 2177,
    'ETRS_1989_Poland_CS2000_Zone_7': 2178,
    'ETRS_1989_Poland_CS2000_Zone_8': 2179,
    'ETRS_1989_Poland_CS92': 2180,
    'ETRS_1989_Portugal_TM06': 3763,
    'ETRS_1989_Slovenia_TM': 102109,
    'ETRS_1989_TM_30_NE': 2213,
    'ETRS_1989_TM_Baltic_1993': 25884,
    'ETRS_1989_UWPP_1992': 102173,
    'ETRS_1989_UWPP_2000_PAS_5': 102174,
    'ETRS_1989_UWPP_2000_PAS_6': 102175,
    'ETRS_1989_UWPP_2000_PAS_7': 102176,
    'ETRS_1989_UWPP_2000_PAS_8': 102177,
    'FEH2010_Fehmarnbelt_TM': 5596,
    'Greek_Grid': 2100,
    'Guernsey_Grid': 102070,
    'Hungarian_1972_Egyseges_Orszagos_Vetuleti': 23700,
    'Helle_1954_Jan_Mayen_Grid': 3058,
    'HTRS96_Croatia_LCC': 3766,
    'HTRS96_Croatia_TM': 3765,
    'IRENET95_Irish_Transverse_Mercator': 2157,
    'TM65_Irish_Grid': 29902,
    'ISN_1993_Lambert_1993': 3057,
    'ISN_2004_LAEA_Europe': 5638,
    'ISN_2004_Lambert_2004': 5325,
    'ISN_2004_LCC_Europe': 5639,
    'Lisboa_Bessel_Bonne': 102163,
    'Lisboa_Hayford_Gauss_IGeoE': 102164,
    'Lisboa_Hayford_Gauss_IPCC': 102165,
    'Lisbon_Portuguese_Grid_New': 5018,
    'Lisbon_Lisbon_Portuguese_Grid': 20791,
    'Portuguese_National_Grid': 20790,
    'LKS_1992_Latvia_TM': 3059,
    'LKS_1992_Latvia_TM_0': 102440,
    'LKS_1994_Lithuania_TM': 3346,
    'Luxembourg_1930_Gauss': 2169,
    'Macedonia_State_Coordinate_System_zone_7': 6316,
    'Madrid_1870_Madrid_Spain': 2062,
    'MGI_1901_Balkans_5': 3907,
    'MGI_1901_Balkans_6': 3908,
    'MGI_1901_Balkans_7': 3909,
    'MGI_1901_Balkans_8': 3910,
    'MGI_1901_Slovene_National_Grid': 3912,
    'MGI_1901_Slovenia_Grid': 3911,
    'MGI_3_Degree_Gauss_Zone_5': 31265,
    'MGI_3_Degree_Gauss_Zone_6': 31266,
    'MGI_3_Degree_Gauss_Zone_7': 31267,
    'MGI_3_Degree_Gauss_Zone_8': 31268,
    'MGI_Balkans_5': 31275,
    'MGI_Balkans_6': 31276,
    'MGI_Balkans_7': 31277,
    'MGI_Balkans_8': 31279,
    'MGI_Slovenia_Grid': 2170,
    'MOLDREF99_Moldova_TM': 4026,
    'Monte_Mario_Rome_Italy_1': 26591,
    'Monte_Mario_Rome_Italy_2': 26592,
    'Monte_Mario_Italy_1': 3003,
    'Monte_Mario_Italy_2': 3004,
    'Monte_Mario_TM_Emilia-Romagna': 5659,
    'OSNI_1952_Irish_National_Grid': 29901,
    'PTRA08_LAEA_Europe': 5633,
    'PTRA08_LCC_Europe': 5632,
    'Pulkovo_1942_Adj_1958_Poland_Zone_I': 3120,
    'Pulkovo_1942_Adj_1958_Poland_Zone_II': 2172,
    'Pulkovo_1942_Adj_1958_Poland_Zone_III': 2173,
    'Pulkovo_1942_Adj_1958_Poland_Zone_IV': 2174,
    'Pulkovo_1942_Adj_1958_Poland_Zone_V': 2175,
    'Pulkovo_1942_Adj_58_Stereo_70': 3844,
    'Pulkovo_1942_Adj_1958_GUGiK-80': 3328,
    'RD_New': 28992,
    'RD_Old': 28991,
    'REGCAN95_LAEA_Europe': 5635,
    'REGCAN95_LCC_Europe': 5634,
    'Roma_1940_Gauss_Boaga_Est': 102093,
    'Roma_1940_Gauss_Boaga_Ovest': 102094,
    'RT90_25_gon_W': 2400,
    'Slovenia_1996_Slovene_National_Grid': 3794,
    'Stereo_33': 31600,
    'Stereo_70': 31700,
    'S-JTSK_Ferro_Krovak': 2065,
    'S-JTSK_Ferro_Krovak_East_North': 5221,
    'S-JTSK_Krovak': 5513,
    'S-JTSK_Krovak_East_North': 5514,
    'TM75_Irish_Grid': 29903,
    'UWPP_1992': 102194,
    'UWPP_2000_PAS_5': 102195,
    'UWPP_2000_PAS_6': 102196,
    'UWPP_2000_PAS_7': 102197,
    'UWPP_2000_PAS_8': 102198,
    'WGS_1984_TMzn35N': 4037,
    'WGS_1984_TMzn36N': 4038,
    'ETRS_1989_GK19FIN': 3873,
    'ETRS_1989_GK20FIN': 3874,
    'ETRS_1989_GK21FIN': 3875,
    'ETRS_1989_GK22FIN': 3876,
    'ETRS_1989_GK23FIN': 3877,
    'ETRS_1989_GK24FIN': 3878,
    'ETRS_1989_GK25FIN': 3879,
    'ETRS_1989_GK26FIN': 3880,
    'ETRS_1989_GK27FIN': 3881,
    'ETRS_1989_GK28FIN': 3882,
    'ETRS_1989_GK29FIN': 3883,
    'ETRS_1989_GK30FIN': 3884,
    'ETRS_1989_GK31FIN': 3885,
    'ETRS_1989_TM35FIN_NE': 5048,
    'EUREF_FIN_TM35FIN': 3067,
    'Finland_Zone_1': 2391,
    'Finland_Zone_2': 2392,
    'Finland_Zone_3': 2393,
    'Finland_Zone_4': 2394,
    'KKJ_Finland_Zone_0': 3386,
    'KKJ_Finland_Zone_5': 3387,
    'ETRS_1989_ETRS-GK19FIN': 3126,
    'ETRS_1989_ETRS-GK20FIN': 3127,
    'ETRS_1989_ETRS-GK21FIN': 3128,
    'ETRS_1989_ETRS-GK22FIN': 3129,
    'ETRS_1989_ETRS-GK23FIN': 3130,
    'ETRS_1989_ETRS-GK24FIN': 3131,
    'ETRS_1989_ETRS-GK25FIN': 3132,
    'ETRS_1989_ETRS-GK26FIN': 3133,
    'ETRS_1989_ETRS-GK27FIN': 3134,
    'ETRS_1989_ETRS-GK28FIN': 3135,
    'ETRS_1989_ETRS-GK29FIN': 3136,
    'ETRS_1989_ETRS-GK30FIN': 3137,
    'ETRS_1989_ETRS-GK31FIN': 3138,
    'ED_1950_France_EuroLambert': 2192,
    'NTF_Paris_France_I': 27581,
    'NTF_Paris_France_II': 27582,
    'NTF_Paris_France_III': 27583,
    'NTF_Paris_France_IV': 27584,
    'Nord_de_Guerre': 27500,
    'NTF_Paris_Centre_France': 27592,
    'NTF_Paris_Corse': 27594,
    'NTF_Paris_Lambert_Centre_France': 27562,
    'NTF_Paris_Lambert_Corse': 27564,
    'NTF_Paris_Lambert_Nord_France': 27561,
    'NTF_Paris_Lambert_Sud_France': 27563,
    'NTF_Paris_Lambert_Zone_I': 27571,
    'NTF_Paris_Lambert_Zone_II': 27572,
    'NTF_Paris_Lambert_Zone_III': 27573,
    'NTF_Paris_Lambert_Zone_IV': 27574,
    'NTF_Paris_Nord_France': 27591,
    'NTF_Paris_Sud_France': 27593,
    'NTF_France_I_degrees': 102581,
    'NTF_France_II_degrees': 102582,
    'NTF_France_III_degrees': 102583,
    'NTF_France_IV_degrees': 102584,
    'NTF_Lambert_Zone_I': 102585,
    'NTF_Lambert_Zone_II': 102586,
    'NTF_Lambert_Zone_III': 102587,
    'NTF_Lambert_Zone_IV': 102588,
    'RGF_1993_CC42': 3942,
    'RGF_1993_CC43': 3943,
    'RGF_1993_CC44': 3944,
    'RGF_1993_CC45': 3945,
    'RGF_1993_CC46': 3946,
    'RGF_1993_CC47': 3947,
    'RGF_1993_CC48': 3948,
    'RGF_1993_CC49': 3949,
    'RGF_1993_CC50': 3950,
    'RGF_1993_Lambert_93': 2154,
    'DB_REF_3-Degree_GK_Zone_2_(E-N)': 5682,
    'DB_REF_3-Degree_GK_Zone_3_(E-N)': 5683,
    'DB_REF_3-Degree_GK_Zone_4_(E-N)': 5684,
    'DB_REF_3-Degree_GK_Zone_5_(E-N)': 5685,
    'DHDN_3_Degree_Gauss_Zone_1': 5520,
    'DHDN_3_Degree_Gauss_Zone_2': 31466,
    'DHDN_3_Degree_Gauss_Zone_3': 31467,
    'DHDN_3_Degree_Gauss_Zone_4': 31468,
    'DHDN_3_Degree_Gauss_Zone_5': 31469,
    'DHDN_3_Degree_GK_Zone_1_E-N': 5680,
    'DHDN_3_Degree_GK_Zone_2_E-N': 5676,
    'DHDN_3_Degree_GK_Zone_3_E-N': 5677,
    'DHDN_3_Degree_GK_Zone_4_E-N': 5678,
    'DHDN_3_Degree_GK_Zone_5_E-N': 5679,
    'DHDN_Soldner_Berlin': 3068,
    'ETRS_1989_LCC_Germany_E-N': 5243,
    'ETRS_1989_LCC_Germany_N-E': 4839,
    'ETRS_1989_UTM_Zone_31N_N-zE': 5651,
    'ETRS_1989_UTM_Zone_31N_zE-N': 5649,
    'ETRS_1989_UTM_Zone_32N_N-zE': 5652,
    'ETRS_1989_UTM_Zone_32N_7stellen': 102328,
    'ETRS_1989_UTM_Zone_32N_8stellen': 102329,
    'ETRS_1989_UTM_Zone_33N_N-zE': 5653,
    'ETRS_1989_UTM_Zone_33N_zE-N': 5650,
    'ETRS_1989_UTM_Zone_33N_7stellen': 102359,
    'ETRS_1989_UTM_Zone_33N_8stellen': 102360,
    'ETRS_1989_UTM_Zone_N32': 4647,
    'Germany_Zone_1': 31491,
    'Germany_Zone_2': 31492,
    'Germany_Zone_3': 31493,
    'Germany_Zone_4': 31494,
    'Germany_Zone_5': 31495,
    'PD/83_GK_Zone_3': 3396,
    'PD/83_GK_Zone_4': 3397,
    'PD/83_3_Degree_GK_Zone_3_E-N': 5666,
    'PD/83_3_Degree_GK_Zone_4_E-N': 5667,
    'RD/83_GK_Zone_4': 3398,
    'RD/83_3_Degree_GK_Zone_4_E-N': 5668,
    'RD/83_GK_Zone_5': 3399,
    'RD/83_3_Degree_GK_Zone_5_E-N': 5669,
    'Kalianpur_1880_India_Zone_0': 24370,
    'Kalianpur_1880_India_Zone_I': 24371,
    'Kalianpur_1880_India_Zone_IIa': 24372,
    'Kalianpur_1880_India_Zone_IIb': 24382,
    'Kalianpur_1880_India_Zone_III': 24373,
    'Kalianpur_1880_India_Zone_IV': 24374,
    'Kalianpur_1937_India_Zone_IIb': 24375,
    'Kalianpur_1937_UTM_Zone_45N': 24305,
    'Kalianpur_1937_UTM_Zone_46N': 24306,
    'Kalianpur_1962_India_Zone_I': 24376,
    'Kalianpur_1962_India_Zone_IIa': 24377,
    'Kalianpur_1962_UTM_Zone_41N': 24311,
    'Kalianpur_1962_UTM_Zone_42N': 24312,
    'Kalianpur_1962_UTM_Zone_43N': 24313,
    'Kalianpur_1975_India_Zone_I': 24378,
    'Kalianpur_1975_India_Zone_IIa': 24379,
    'Kalianpur_1975_India_Zone_IIb': 24380,
    'Kalianpur_1975_India_Zone_III': 24381,
    'Kalianpur_1975_India_Zone_IV': 24383,
    'Kalianpur_1975_UTM_Zone_42N': 24342,
    'Kalianpur_1975_UTM_Zone_43N': 24343,
    'Kalianpur_1975_UTM_Zone_44N': 24344,
    'Kalianpur_1975_UTM_Zone_45N': 24345,
    'Kalianpur_1975_UTM_Zone_46N': 24346,
    'Kalianpur_1975_UTM_Zone_47N': 24347,
    'Batavia_Jakarta_NEIEZ': 5330,
    'Batavia_NEIEZ': 3001,
    'Batavia_TM_109_SE': 2308,
    'DGN_1995_Indonesia_TM-3_Zone_46.2': 23830,
    'DGN_1995_Indonesia_TM-3_Zone_47.1': 23831,
    'DGN_1995_Indonesia_TM-3_Zone_47.2': 23832,
    'DGN_1995_Indonesia_TM-3_Zone_48.1': 23833,
    'DGN_1995_Indonesia_TM-3_Zone_48.2': 23834,
    'DGN_1995_Indonesia_TM-3_Zone_49.1': 23835,
    'DGN_1995_Indonesia_TM-3_Zone_49.2': 23836,
    'DGN_1995_Indonesia_TM-3_Zone_50.1': 23837,
    'DGN_1995_Indonesia_TM-3_Zone_50.2': 23838,
    'DGN_1995_Indonesia_TM-3_Zone_51.1': 23839,
    'DGN_1995_Indonesia_TM-3_Zone_51.2': 23840,
    'DGN_1995_Indonesia_TM-3_Zone_52.1': 23841,
    'DGN_1995_Indonesia_TM-3_Zone_52.2': 23842,
    'DGN_1995_Indonesia_TM-3_Zone_53.1': 23843,
    'DGN_1995_Indonesia_TM-3_Zone_53.2': 23844,
    'DGN_1995_Indonesia_TM-3_Zone_54.1': 23845,
    'Gunung_Segara_NEIEZ': 3000,
    'Makassar_Jakarta_NEIEZ': 5331,
    'Makassar_NEIEZ': 3002,
    'Gunung_Segara_Jakarta_NEIEZ': 5329,
    'WGS_1984_TM_116_SE': 2309,
    'WGS_1984_TM_132_SE': 2310,
    'Japan_Zone_1': 30161,
    'Japan_Zone_2': 30162,
    'Japan_Zone_3': 30163,
    'Japan_Zone_4': 30164,
    'Japan_Zone_5': 30165,
    'Japan_Zone_6': 30166,
    'Japan_Zone_7': 30167,
    'Japan_Zone_8': 30168,
    'Japan_Zone_9': 30169,
    'Japan_Zone_10': 30170,
    'Japan_Zone_11': 30171,
    'Japan_Zone_12': 30172,
    'Japan_Zone_13': 30173,
    'Japan_Zone_14': 30174,
    'Japan_Zone_15': 30175,
    'Japan_Zone_16': 30176,
    'Japan_Zone_17': 30177,
    'Japan_Zone_18': 30178,
    'Japan_Zone_19': 30179,
    'JGD_2000_Japan_Zone_1': 2443,
    'JGD_2000_Japan_Zone_2': 2444,
    'JGD_2000_Japan_Zone_3': 2445,
    'JGD_2000_Japan_Zone_4': 2446,
    'JGD_2000_Japan_Zone_5': 2447,
    'JGD_2000_Japan_Zone_6': 2448,
    'JGD_2000_Japan_Zone_7': 2449,
    'JGD_2000_Japan_Zone_8': 2450,
    'JGD_2000_Japan_Zone_9': 2451,
    'JGD_2000_Japan_Zone_10': 2452,
    'JGD_2000_Japan_Zone_11': 2453,
    'JGD_2000_Japan_Zone_12': 2454,
    'JGD_2000_Japan_Zone_13': 2455,
    'JGD_2000_Japan_Zone_14': 2456,
    'JGD_2000_Japan_Zone_15': 2457,
    'JGD_2000_Japan_Zone_16': 2458,
    'JGD_2000_Japan_Zone_17': 2459,
    'JGD_2000_Japan_Zone_18': 2460,
    'JGD_2000_Japan_Zone_19': 2461,
    'JGD_2011_Japan_Zone_1': 102610,
    'JGD_2011_Japan_Zone_2': 102611,
    'JGD_2011_Japan_Zone_3': 102612,
    'JGD_2011_Japan_Zone_4': 102613,
    'JGD_2011_Japan_Zone_5': 102614,
    'JGD_2011_Japan_Zone_6': 102615,
    'JGD_2011_Japan_Zone_7': 102616,
    'JGD_2011_Japan_Zone_8': 102617,
    'JGD_2011_Japan_Zone_9': 102618,
    'JGD_2011_Japan_Zone_10': 102619,
    'JGD_2011_Japan_Zone_11': 102620,
    'JGD_2011_Japan_Zone_12': 102621,
    'JGD_2011_Japan_Zone_13': 102622,
    'JGD_2011_Japan_Zone_14': 102623,
    'JGD_2011_Japan_Zone_15': 102624,
    'JGD_2011_Japan_Zone_16': 102625,
    'JGD_2011_Japan_Zone_17': 102626,
    'JGD_2011_Japan_Zone_18': 102627,
    'JGD_2011_Japan_Zone_19': 102628,
    'ELD_1979_Libya_5': 2068,
    'ELD_1979_Libya_6': 2069,
    'ELD_1979_Libya_7': 2070,
    'ELD_1979_Libya_8': 2071,
    'ELD_1979_Libya_9': 2072,
    'ELD_1979_Libya_10': 2073,
    'ELD_1979_Libya_11': 2074,
    'ELD_1979_Libya_12': 2075,
    'ELD_1979_Libya_13': 2076,
    'ELD_1979_TM_12_NE': 2087,
    'LGD2006_Libya_TM': 3177,
    'LGD2006_Libya_TM_Zone_5': 3190,
    'LGD2006_Libya_TM_Zone_6': 3191,
    'LGD2006_Libya_TM_Zone_7': 3192,
    'LGD2006_Libya_TM_Zone_8': 3193,
    'LGD2006_Libya_TM_Zone_9': 3194,
    'LGD2006_Libya_TM_Zone_10': 3195,
    'LGD2006_Libya_TM_Zone_11': 3196,
    'LGD2006_Libya_TM_Zone_12': 3197,
    'LGD2006_Libya_TM_Zone_13': 3198,
    'GDBD2009_GEORSO': 5247,
    'GDM_2000_BRSO_East_Malaysia': 3376,
    'GDM_2000_State_Cassini_Johor': 3377,
    'GDM_2000_State_Cassini_Perlis': 3383,
    'GDM_2000_State_Cassini_Kelantan': 3385,
    'GDM_2000_MRSO_Peninsular_Malaysia': 3375,
    'GDM_2000_State_Cassini_Negeri_Sembilan_and_Melaka': 3378,
    'GDM_2000_State_Cassini_Pahang': 3379,
    'GDM_2000_State_Cassini_Perak': 3384,
    'GDM_2000_State_Cassini_Pulau_Pinang_and_Seberang_Perai': 3382,
    'GDM_2000_State_Cassini_Selangor': 3380,
    'GDM_2000_State_Cassini_Terengganu': 3381,
    'Kertau_RSO_RSO_Malaya_ChSears1922trunc': 3167,
    'Kertau_RSO_RSO_Malaya': 3168,
    'Kertau_RSO_Malaya_Chains': 24571,
    'Kertau_RSO_Malaya_Meters': 102062,
    'Kertau_Singapore_Grid': 24500,
    'SVY21_Singapore_TM': 3414,
    'Timbalai_1948_RSO_Borneo_Meters': 29873,
    'Timbalai_1948_RSO_Borneo_Chains': 29871,
    'Timbalai_1948_RSO_Borneo_Feet': 29872,
    'Chatham_Island_1971_Map_Grid': 5518,
    'Chatham_Islands_1979_Map_Grid': 5519,
    'GD_1949_New_Zealand_Map_Grid': 27200,
    'New_Zealand_North_Island': 27291,
    'New_Zealand_South_Island': 27292,
    'NZGD_1949_Amuri_Circuit': 27219,
    'NZGD_1949_Bay_of_Plenty_Circuit': 27206,
    'NZGD_1949_Bluff_Circuit': 27232,
    'NZGD_1949_Buller_Circuit': 27217,
    'NZGD_1949_Collingwood_Circuit': 27214,
    'NZGD_1949_Gawler_Circuit': 27225,
    'NZGD_1949_Grey_Circuit': 27218,
    'NZGD_1949_Hawkes_Bay_Circuit': 27208,
    'NZGD_1949_Hokitika_Circuit': 27221,
    'NZGD_1949_Jacksons_Bay_Circuit': 27223,
    'NZGD_1949_Karamea_Circuit': 27216,
    'NZGD_1949_Lindis_Peak_Circuit': 27227,
    'NZGD_1949_Marlborough_Circuit': 27220,
    'NZGD_1949_Mount_Eden_Circuit': 27205,
    'NZGD_1949_Mount_Nicholas_Circuit': 27228,
    'NZGD_1949_Mount_Pleasant_Circuit': 27224,
    'NZGD_1949_Mount_York_Circuit': 27229,
    'NZGD_1949_Nelson_Circuit': 27215,
    'NZGD_1949_North_Taieri_Circuit': 27231,
    'NZGD_1949_Observation_Point_Circuit': 27230,
    'NZGD_1949_Okarito_Circuit': 27222,
    'NZGD_1949_Poverty_Bay_Circuit': 27207,
    'NZGD_1949_Taranaki_Circuit': 27209,
    'NZGD_1949_Timaru_Circuit': 27226,
    'NZGD_1949_Tuhirangi_Circuit': 27210,
    'NZGD_1949_UTM_Zone_58S': 27258,
    'NZGD_1949_UTM_Zone_59S': 27259,
    'NZGD_1949_UTM_Zone_60S': 27260,
    'NZGD_1949_Wairarapa_Circuit': 27212,
    'NZGD_1949_Wanganui_Circuit': 27211,
    'NZGD_1949_Wellington_Circuit': 27213,
    'NZGD_2000_Amuri_Circuit': 2119,
    'NZGD_2000_Antipodes_Islands_TM_2000': 3790,
    'NZGD_2000_Auckland_Islands_TM_2000': 3788,
    'NZGD_2000_Bay_of_Plenty_Circuit': 2106,
    'NZGD_2000_Bluff_Circuit': 2132,
    'NZGD_2000_Buller_Circuit': 2117,
    'NZGD_2000_Campbell_Island_TM_2000': 3789,
    'NZGD_2000_Chatham_Island_Circuit': 3764,
    'NZGD_2000_Chatham_Islands_TM_2000': 3793,
    'NZGD_2000_Collingwood_Circuit': 2114,
    'NZGD_2000_Gawler_Circuit': 2125,
    'NZGD_2000_Grey_Circuit': 2118,
    'NZGD_2000_Hawkes_Bay_Circuit': 2108,
    'NZGD_2000_Hokitika_Circuit': 2121,
    'NZGD_2000_Jacksons_Bay_Circuit': 2123,
    'NZGD_2000_Karamea_Circuit': 2116,
    'NZGD_2000_Lindis_Peak_Circuit': 2127,
    'NZGD_2000_Marlborough_Circuit': 2120,
    'NZGD_2000_Mount_Eden_Circuit': 2105,
    'NZGD_2000_Mount_Nicholas_Circuit': 2128,
    'NZGD_2000_Mount_Pleasant_Circuit': 2124,
    'NZGD_2000_Mount_York_Circuit': 2129,
    'NZGD_2000_Nelson_Circuit': 2115,
    'NZGD_2000_New_Zealand_Transverse_Mercator': 2193,
    'NZGD_2000_North_Taieri_Circuit': 2131,
    'NZGD_2000_NZ_Continental_Shelf_2000': 3851,
    'NZGD_2000_Observation_Point_Circuit': 2130,
    'NZGD_2000_Okarito_Circuit': 2122,
    'NZGD_2000_Poverty_Bay_Circuit': 2107,
    'NZGD_2000_Raoul_Island_TM_2000': 3791,
    'NZGD_2000_Taranaki_Circuit': 2109,
    'NZGD_2000_Timaru_Circuit': 2126,
    'NZGD_2000_Tuhirangi_Circuit': 2110,
    'NZGD_2000_UTM_Zone_1S': 5700,
    'NZGD_2000_UTM_Zone_58S': 2133,
    'NZGD_2000_UTM_Zone_59S': 2134,
    'NZGD_2000_UTM_Zone_60S': 2135,
    'NZGD_2000_Wairarapa_Circuit': 2112,
    'NZGD_2000_Wanganui_Circuit': 2111,
    'NZGD_2000_Wellington_Circuit': 2113,
    'WGS_1984_Mercator_41': 3994,
    'CRTM05': 5367,
    'Mexican_Datum_1993_UTM_Zone_11N': 4484,
    'Mexican_Datum_1993_UTM_Zone_12N': 4485,
    'Mexican_Datum_1993_UTM_Zone_13N': 4486,
    'Mexican_Datum_1993_UTM_Zone_14N': 4487,
    'Mexican_Datum_1993_UTM_Zone_15N': 4488,
    'Mexican_Datum_1993_UTM_Zone_16N': 4489,
    'NAD_1927_Guatemala_Norte': 32061,
    'NAD_1927_Guatemala_Sur': 32062,
    'Ocotepeque_1935_Costa_Rica_Lambert_Norte': 102221,
    'Ocotepeque_1935_Costa_Rica_Lambert_Sur': 102222,
    'Ocotepeque_1935_Costa_Rica_Norte': 5456,
    'Ocotepeque_1935_Costa_Rica_Sur': 5457,
    'Ocotepeque_1935_El_Salvador_Lambert': 5460,
    'Ocotepeque_1935_Guatemala_Norte': 5559,
    'Ocotepeque_1935_Guatemala_Sur': 5459,
    'Ocotepeque_1935_Nicaragua_Norte': 5461,
    'Ocotepeque_1935_Nicaragua_Sur': 5462,
    'Panama-Colon_1911_Panama_Lambert': 5469,
    'Panama-Colon_1911_Panama_Polyconic': 5472,
    'Sibun_Gorge_1922_Colony_Grid': 5589,
    'WGS_1984_Costa_Rica_TM_90': 102223,
    'ETRS_1989_NTM_Zone_10': 5110,
    'ETRS_1989_NTM_Zone_11': 5111,
    'ETRS_1989_NTM_Zone_12': 5112,
    'ETRS_1989_NTM_Zone_13': 5113,
    'ETRS_1989_NTM_Zone_14': 5114,
    'ETRS_1989_NTM_Zone_15': 5115,
    'ETRS_1989_NTM_Zone_16': 5116,
    'ETRS_1989_NTM_Zone_17': 5117,
    'ETRS_1989_NTM_Zone_18': 5118,
    'ETRS_1989_NTM_Zone_19': 5119,
    'ETRS_1989_NTM_Zone_20': 5120,
    'ETRS_1989_NTM_Zone_21': 5121,
    'ETRS_1989_NTM_Zone_22': 5122,
    'ETRS_1989_NTM_Zone_23': 5123,
    'ETRS_1989_NTM_Zone_24': 5124,
    'ETRS_1989_NTM_Zone_25': 5125,
    'ETRS_1989_NTM_Zone_26': 5126,
    'ETRS_1989_NTM_Zone_27': 5127,
    'ETRS_1989_NTM_Zone_28': 5128,
    'ETRS_1989_NTM_Zone_29': 5129,
    'ETRS_1989_NTM_Zone_30': 5130,
    'ETRS_1989_NTM_Zone_5': 5105,
    'ETRS_1989_NTM_Zone_6': 5106,
    'ETRS_1989_NTM_Zone_7': 5107,
    'ETRS_1989_NTM_Zone_8': 5108,
    'ETRS_1989_NTM_Zone_9': 5109,
    'NGO_1948_Oslo_Baerum_Kommune': 102450,
    'NGO_1948_Oslo_Bergenhalvoen': 102451,
    'NGO_1948_Oslo_Oslo_Kommune': 102452,
    'NGO_1948_Oslo_Norway_Zone_1': 27391,
    'NGO_1948_Oslo_Norway_Zone_2': 27392,
    'NGO_1948_Oslo_Norway_Zone_3': 27393,
    'NGO_1948_Oslo_Norway_Zone_4': 27394,
    'NGO_1948_Oslo_Norway_Zone_5': 27395,
    'NGO_1948_Oslo_Norway_Zone_6': 27396,
    'NGO_1948_Oslo_Norway_Zone_7': 27397,
    'NGO_1948_Oslo_Norway_Zone_8': 27398,
    'NGO_1948_Baerum_Kommune': 102136,
    'NGO_1948_Bergenhalvoen': 102137,
    'NGO_1948_Norway_Zone_1': 102101,
    'NGO_1948_Norway_Zone_2': 102102,
    'NGO_1948_Norway_Zone_3': 102103,
    'NGO_1948_Norway_Zone_4': 102104,
    'NGO_1948_Norway_Zone_5': 102105,
    'NGO_1948_Norway_Zone_6': 102106,
    'NGO_1948_Norway_Zone_7': 102107,
    'NGO_1948_Norway_Zone_8': 102108,
    'NGO_1948_Oslo_Kommune': 102138,
    'Samoa_1962_Samoa_Lambert': 3102,
    'Anguilla_1957_British_West_Indies_Grid': 2000,
    'Antigua_1943_British_West_Indies_Grid': 2001,
    'Bab_South_Palau_Azimuthal_Equidistant': 102096,
    'Barbados_1938_Barbados_Grid': 21292,
    'Barbados_1938_British_West_Indies_Grid': 21291,
    'Bermuda_2000_National_Grid': 3770,
    'Cayman_Islands_National_Grid_2011': 6391,
    'Dominica_1945_British_West_Indies_Grid': 2002,
    'Fiji_1986_Fiji_Map_Grid': 3460,
    'Grand_Cayman_National_Grid_1959': 6128,
    'Grenada_1953_British_West_Indies_Grid': 2003,
    'Guam_1963_Yap_Islands': 3295,
    'JAD_2001_Jamaica_Grid': 3448,
    'Jamaica_1875_Old_Grid': 24100,
    'Jamaica_Grid': 24200,
    'Le_Pouce_1934_Mauritius_Grid': 3337,
    'Montserrat_1958_British_West_Indies_Grid': 2004,
    'Mount_Dillon_Tobago_Grid': 2066,
    'NAD_1927_Cuba_Norte': 2085,
    'NAD_1927_Cuba_Sur': 2086,
    'NEA74_Noumea_Lambert': 3165,
    'NEA74_Noumea_Lambert_2': 3166,
    'Pitcairn_2006_Pitcairn_TM_2006': 3783,
    'Pohnpei_Az_Eq_1971': 102237,
    'Reunion_1947_TM_Reunion': 3727,
    'RGNC_1991_Lambert_New_Caledonia': 2984,
    'RGNC_1991_93_Lambert_New_Caledonia': 3163,
    'Saipan_Az_Eq_1969': 102238,
    'Sister_Islands_National_Grid_1961': 6129,
    'St_Kitts_1955_British_West_Indies_Grid': 2005,
    'St_Lucia_1955_British_West_Indies_Grid': 2006,
    'St_Vincent_1945_British_West_Indies_Grid': 2007,
    'TGD2005_Tonga_Map_Grid': 5887,
    'WGS_1984_Cape_Verde_Grid': 4826,
    'WGS_1984_South_Georgia_Lambert': 3762,
    'Cape_Lo15': 102470,
    'Cape_Lo17': 102471,
    'Cape_Lo19': 102472,
    'Cape_Lo21': 102473,
    'Cape_Lo23': 102474,
    'Cape_Lo25': 102475,
    'Cape_Lo27': 102476,
    'Cape_Lo29': 102477,
    'Cape_Lo31': 102478,
    'Cape_Lo33': 102479,
    'Hartebeesthoek94_Lo15': 102480,
    'Hartebeesthoek94_Lo17': 102481,
    'Hartebeesthoek94_Lo19': 102482,
    'Hartebeesthoek94_Lo21': 102483,
    'Hartebeesthoek94_Lo23': 102484,
    'Hartebeesthoek94_Lo25': 102485,
    'Hartebeesthoek94_Lo27': 102486,
    'Hartebeesthoek94_Lo29': 102487,
    'Hartebeesthoek94_Lo31': 102488,
    'Hartebeesthoek94_Lo33': 102489,
    'Lake_Maracaibo_Grid': 2102,
    'Lake_Maracaibo_Grid_M1': 2101,
    'Lake_Maracaibo_Grid_M3': 2103,
    'Lake_Maracaibo_La_Rosa_Grid': 2104,
    'Peru_Central_Zone': 24892,
    'Peru_East_Zone': 24893,
    'Peru_West_Zone': 24891,
    'PSAD_1956_ICN_Regional': 2317,
    'SAD_1969_96_Brazil_Polyconic': 5530,
    'SAD_1969_Brazil_Polyconic': 29101,
    'SIRGAS_2000_Brazil_Mercator': 5641,
    'SIRGAS_2000_Brazil_Polyconic': 5880,
    'Trinidad_1903_Trinidad_Grid_Feet_Clarke': 2314,
    'Trinidad_1903_Trinidad_Grid': 30200,
    'Zanderij_Suriname_Old_TM': 31170,
    'Zanderij_Suriname_TM': 31171,
    'Zanderij_TM_54_NW': 31154,
    'Bogota_Ciudad_Bogota': 102232,
    'Colombia_Bogota_Zone': 21897,
    'Colombia_East_Central_Zone': 21898,
    'Colombia_East_Zone': 21899,
    'Colombia_West_West_Zone': 102231,
    'Colombia_West_Zone': 21896,
    'MAGNA_Arauca_2007': 6244,
    'MAGNA_Armenia_Quindio_2006': 6245,
    'MAGNA_Barranquilla_Atlantico_1997': 6246,
    'MAGNA_Bogota_DC_2005': 6247,
    'MAGNA_Bucaramanga_Santander_2008': 6248,
    'MAGNA_Cali_Valle_del_Cauca_2009': 6249,
    'MAGNA_Cartagena_Bolivar_2005': 6250,
    'MAGNA_Ciudad_Bogota': 102233,
    'MAGNA_Colombia_Bogota': 3116,
    'MAGNA_Colombia_Este': 3117,
    'MAGNA_Colombia_Este_Este': 3118,
    'MAGNA_Colombia_Oeste': 3115,
    'MAGNA_Colombia_Oeste_Oeste': 3114,
    'MAGNA_Cucuta_Norte_de_Santander_2011': 6251,
    'MAGNA_Florencia_Caqueta_2007': 6252,
    'MAGNA_Ibague_Tolima_2007': 6253,
    'MAGNA_Inirida_Guainia_2008': 6254,
    'MAGNA_Leticia_Amazonas_1994': 6255,
    'MAGNA_Manizales_Caldas_2011': 6256,
    'MAGNA_Medellin_Antioquia_2010': 6257,
    'MAGNA_Mitu_Vaupes_2011': 6258,
    'MAGNA_Mocoa_Putumayo_2011': 6259,
    'MAGNA_Monteria_Cordoba_2006': 6260,
    'MAGNA_Neiva_Huila_2006': 6261,
    'MAGNA_Pasto_Narino_2008': 6262,
    'MAGNA_Pereira_Risaralda_2007': 6263,
    'MAGNA_Popayan_Cauca_2006': 6264,
    'MAGNA_Puerto_Carreno_Vichada_2011': 6265,
    'MAGNA_Quibdo_Choco_2011': 6266,
    'MAGNA_Riohacha_La_Guajira_2006': 6267,
    'MAGNA_San_Andres_2007': 6268,
    'MAGNA_San_Jose_del_Guaviare_2011': 6269,
    'MAGNA_Santa_Marta_Magdalena_2007': 6270,
    'MAGNA_Sucre_2006': 6271,
    'MAGNA_Tunja_Boyaca_1997': 6272,
    'MAGNA_Valledupar_Cesar_2011': 6273,
    'MAGNA_Villavicencio_Meta_2011': 6274,
    'MAGNA_Yopal_Casanare_2006': 6275,
    'Korea_2000_Korea_Central_Belt': 5181,
    'Korea_2000_Korea_Central_Belt_2010': 5186,
    'Korea_2000_Korea_Central_Belt_Jeju': 5182,
    'Korea_2000_Korea_East_Belt': 5183,
    'Korea_2000_Korea_East_Belt_2010': 5187,
    'Korea_2000_Korea_East_Sea_Belt': 5184,
    'Korea_2000_Korea_East_Sea_Belt_2010': 5188,
    'Korea_2000_Korea_Unified_Coordinate_System': 5179,
    'Korea_2000_Korea_West_Belt': 5180,
    'Korea_2000_Korea_West_Belt_2010': 5185,
    'Korean_1985_Korea_Central_Belt': 2097,
    'Korean_1985_Korea_Central_Belt_Jeju': 5168,
    'Korean_1985_Korea_East_Belt': 2096,
    'Korean_1985_Korea_East_Sea_Belt': 5167,
    'Korean_1985_Korea_Unified_Coordinate_System': 5178,
    'Korean_1985_Korea_West_Belt': 2098,
    'Korean_1985_Modified_Korea_Central_Belt': 5174,
    'Korean_1985_Modified_Korea_Central_Belt_Jeju': 5175,
    'Korean_1985_Modified_Korea_East_Belt': 5176,
    'Korean_1985_Modified_Korea_East_Sea_Belt': 5177,
    'Korean_1985_Modified_Korea_West_Belt': 5173,
    'RT38_0_gon': 3028,
    'RT38_25_gon_O': 3029,
    'RT38_25_gon_V': 3027,
    'RT38_5_gon_O': 3030,
    'RT38_5_gon_V': 3026,
    'RT38_75_gon_V': 3025,
    'RT90_0_gon': 3022,
    'RT90_25_gon_O': 3023,
    'RT90_25_gon_V': 3021,
    'RT90_5_gon_O': 3024,
    'RT90_5_gon_V': 3020,
    'RT90_75_gon_V': 3019,
    'SWEREF99_RT90_0_gon_emulation': 3848,
    'SWEREF99_12_00': 3007,
    'SWEREF99_13_30': 3008,
    'SWEREF99_14_15': 3012,
    'SWEREF99_15_00': 3009,
    'SWEREF99_15_45': 3013,
    'SWEREF99_16_30': 3010,
    'SWEREF99_17_15': 3014,
    'SWEREF99_18_00': 3011,
    'SWEREF99_18_45': 3015,
    'SWEREF99_RT90_2.5_gon_O_emulation': 3849,
    'SWEREF99_RT90_2.5_gon_V_emulation': 3847,
    'SWEREF99_20_15': 3016,
    'SWEREF99_21_45': 3017,
    'SWEREF99_23_15': 3018,
    'SWEREF99_RT90_5_gon_O_emulation': 3850,
    'SWEREF99_RT90_5_gon_V_emulation': 3846,
    'SWEREF99_RT90_7.5_gon_V_emulation': 3845,
    'SWEREF99_County_ST74': 3854,
    'SWEREF99_TM': 3006,
    'ED_1950_TM27': 2319,
    'ED_1950_TM30': 2320,
    'ED_1950_TM33': 2321,
    'ED_1950_TM36': 2322,
    'ED_1950_TM39': 2323,
    'ED_1950_TM42': 2324,
    'ED_1950_TM45': 2325,
    'ED_1950_Turkey_10': 2182,
    'ED_1950_Turkey_11': 2183,
    'ED_1950_Turkey_12': 2184,
    'ED_1950_Turkey_13': 2185,
    'ED_1950_Turkey_14': 2186,
    'ED_1950_Turkey_15': 2187,
    'ED_1950_Turkey_9': 2181,
    'TUREF_3_Degree_GK_Zone_10': 5270,
    'TUREF_3_Degree_GK_Zone_11': 5271,
    'TUREF_3_Degree_GK_Zone_12': 5272,
    'TUREF_3_Degree_GK_Zone_13': 5273,
    'TUREF_3_Degree_GK_Zone_14': 5274,
    'TUREF_3_Degree_GK_Zone_15': 5275,
    'TUREF_3_Degree_GK_Zone_9': 5269,
    'TUREF_LAEA_Europe': 5636,
    'TUREF_LCC_Europe': 5637,
    'TUREF_TM27': 5253,
    'TUREF_TM30': 5254,
    'TUREF_TM33': 5255,
    'TUREF_TM36': 5256,
    'TUREF_TM39': 5257,
    'TUREF_TM42': 5258,
    'TUREF_TM45': 5259,
    'JAXA_Snow_Depth_Polar_Stereographic_North': 5890,
    'North_Pole_Azimuthal_Equidistant': 102016,
    'North_Pole_Gnomonic': 102034,
    'North_Pole_Lambert_Azimuthal_Equal_Area': 102017,
    'North_Pole_Orthographic': 102035,
    'North_Pole_Stereographic': 102018,
    'NSIDC_EASE_Grid_Global': 3410,
    'NSIDC_EASE_Grid_North': 3408,
    'NSIDC_EASE_Grid_South': 3409,
    'NSIDC_Sea_Ice_Polar_Stereographic_North': 3411,
    'NSIDC_Sea_Ice_Polar_Stereographic_South': 3412,
    'Perroud_1950_Terre_Adelie_Polar_Stereographic': 2986,
    'Petrels_1972_Terre_Adelie_Polar_Stereographic': 2985,
    'RSRGD2000_BCLC2000': 5480,
    'RSRGD2000_DGLC2000': 3852,
    'RSRGD2000_MSLC2000': 5479,
    'RSRGD2000_PCLC2000': 5481,
    'RSRGD2000_RSPS2000': 5482,
    'South_Pole_Azimuthal_Equidistant': 102019,
    'South_Pole_Gnomonic': 102036,
    'South_Pole_Lambert_Azimuthal_Equal_Area': 102020,
    'South_Pole_Orthographic': 102037,
    'South_Pole_Stereographic': 102021,
    'UPS_North': 32661,
    'UPS_South': 32761,
    'WGS_1984_Antarctic_Polar_Stereographic': 3031,
    'WGS_1984_Arctic_Polar_Stereographic': 3995,
    'WGS_1984_Australian_Antarctic_Lambert': 3033,
    'WGS_1984_Australian_Antarctic_Polar_Stereographic': 3032,
    'WGS_1984_EASE_Grid_North': 3973,
    'WGS_1984_EASE_Grid_South': 3974,
    'WGS_1984_IBCAO_Polar_Stereographic': 3996,
    'WGS_1984_North_Pole_LAEA_Alaska': 3572,
    'WGS_1984_North_Pole_LAEA_Atlantic': 3574,
    'WGS_1984_North_Pole_LAEA_Bering_Sea': 3571,
    'WGS_1984_North_Pole_LAEA_Canada': 3573,
    'WGS_1984_North_Pole_LAEA_Europe': 3575,
    'WGS_1984_North_Pole_LAEA_Russia': 3576,
    'WGS_1984_NSIDC_Sea_Ice_Polar_Stereographic_North': 3413,
    'WGS_1984_NSIDC_Sea_Ice_Polar_Stereographic_South': 3976,
    'WGS_1984_USGS_Transantarctic_Mountains': 3294,
    'ETRS_1989_EPSG_Arctic_zone_2-22': 6069,
    'ETRS_1989_EPSG_Arctic_zone_3-11': 6070,
    'ETRS_1989_EPSG_Arctic_zone_4-26': 6071,
    'ETRS_1989_EPSG_Arctic_zone_4-28': 6072,
    'ETRS_1989_EPSG_Arctic_zone_5-11': 6073,
    'ETRS_1989_EPSG_Arctic_zone_5-13': 6074,
    'ETRS_1989_EPSG_Arctic_zone_5-47': 6125,
    'GR96_EPSG_Arctic_zone_1-25': 6050,
    'GR96_EPSG_Arctic_zone_2-18': 6051,
    'GR96_EPSG_Arctic_zone_2-20': 6052,
    'GR96_EPSG_Arctic_zone_3-29': 6053,
    'GR96_EPSG_Arctic_zone_3-31': 6054,
    'GR96_EPSG_Arctic_zone_3-33': 6055,
    'GR96_EPSG_Arctic_zone_4-20': 6056,
    'GR96_EPSG_Arctic_zone_4-22': 6057,
    'GR96_EPSG_Arctic_zone_4-24': 6058,
    'GR96_EPSG_Arctic_zone_5-41': 6059,
    'GR96_EPSG_Arctic_zone_5-43': 6060,
    'GR96_EPSG_Arctic_zone_5-45': 6061,
    'GR96_EPSG_Arctic_zone_6-26': 6062,
    'GR96_EPSG_Arctic_zone_6-28': 6063,
    'GR96_EPSG_Arctic_zone_6-30': 6064,
    'GR96_EPSG_Arctic_zone_7-11': 6065,
    'GR96_EPSG_Arctic_zone_7-13': 6066,
    'GR96_EPSG_Arctic_zone_8-20': 6067,
    'GR96_EPSG_Arctic_zone_8-22': 6068,
    'NAD_1983_2011_EPSG_Arctic_zone_5-29': 6351,
    'NAD_1983_2011_EPSG_Arctic_zone_5-31': 6352,
    'NAD_1983_2011_EPSG_Arctic_zone_6-14': 6353,
    'NAD_1983_2011_EPSG_Arctic_zone_6-16': 6354,
    'NAD_1983_CSRS_EPSG_Arctic_zone_1-23': 6098,
    'NAD_1983_CSRS_EPSG_Arctic_zone_2-14': 6099,
    'NAD_1983_CSRS_EPSG_Arctic_zone_2-16': 6100,
    'NAD_1983_CSRS_EPSG_Arctic_zone_3-25': 6101,
    'NAD_1983_CSRS_EPSG_Arctic_zone_3-27': 6102,
    'NAD_1983_CSRS_EPSG_Arctic_zone_3-29': 6103,
    'NAD_1983_CSRS_EPSG_Arctic_zone_4-14': 6104,
    'NAD_1983_CSRS_EPSG_Arctic_zone_4-16': 6105,
    'NAD_1983_CSRS_EPSG_Arctic_zone_4-18': 6106,
    'NAD_1983_CSRS_EPSG_Arctic_zone_5-33': 6107,
    'NAD_1983_CSRS_EPSG_Arctic_zone_5-35': 6108,
    'NAD_1983_CSRS_EPSG_Arctic_zone_5-37': 6109,
    'NAD_1983_CSRS_EPSG_Arctic_zone_5-39': 6110,
    'NAD_1983_CSRS_EPSG_Arctic_zone_6-18': 6111,
    'NAD_1983_CSRS_EPSG_Arctic_zone_6-20': 6112,
    'NAD_1983_CSRS_EPSG_Arctic_zone_6-22': 6113,
    'NAD_1983_CSRS_EPSG_Arctic_zone_6-24': 6114,
    'NAD_1983_NSRS2007_EPSG_Arctic_zone_5-29': 6094,
    'NAD_1983_NSRS2007_EPSG_Arctic_zone_5-31': 6095,
    'NAD_1983_NSRS2007_EPSG_Arctic_zone_6-14': 6096,
    'NAD_1983_NSRS2007_EPSG_Arctic_zone_6-16': 6097,
    'WGS_1984_EPSG_Alaska_Polar_Stereographic': 5936,
    'WGS_1984_EPSG_Arctic_Regional_zone_A1': 5921,
    'WGS_1984_EPSG_Arctic_Regional_zone_A2': 5922,
    'WGS_1984_EPSG_Arctic_Regional_zone_A3': 5923,
    'WGS_1984_EPSG_Arctic_Regional_zone_A4': 5924,
    'WGS_1984_EPSG_Arctic_Regional_zone_A5': 5925,
    'WGS_1984_EPSG_Arctic_Regional_zone_B1': 5926,
    'WGS_1984_EPSG_Arctic_Regional_zone_B2': 5927,
    'WGS_1984_EPSG_Arctic_Regional_zone_B3': 5928,
    'WGS_1984_EPSG_Arctic_Regional_zone_B4': 5929,
    'WGS_1984_EPSG_Arctic_Regional_zone_B5': 5930,
    'WGS_1984_EPSG_Arctic_Regional_zone_C1': 5931,
    'WGS_1984_EPSG_Arctic_Regional_zone_C2': 5932,
    'WGS_1984_EPSG_Arctic_Regional_zone_C3': 5933,
    'WGS_1984_EPSG_Arctic_Regional_zone_C4': 5934,
    'WGS_1984_EPSG_Arctic_Regional_zone_C5': 5935,
    'WGS_1984_EPSG_Arctic_zone_1-21': 6118,
    'WGS_1984_EPSG_Arctic_zone_1-27': 6115,
    'WGS_1984_EPSG_Arctic_zone_1-29': 6116,
    'WGS_1984_EPSG_Arctic_zone_1-31': 6117,
    'WGS_1984_EPSG_Arctic_zone_2-10': 6120,
    'WGS_1984_EPSG_Arctic_zone_2-12': 6121,
    'WGS_1984_EPSG_Arctic_zone_2-24': 6075,
    'WGS_1984_EPSG_Arctic_zone_2-26': 6076,
    'WGS_1984_EPSG_Arctic_zone_2-28': 6119,
    'WGS_1984_EPSG_Arctic_zone_3-13': 6077,
    'WGS_1984_EPSG_Arctic_zone_3-15': 6078,
    'WGS_1984_EPSG_Arctic_zone_3-17': 6079,
    'WGS_1984_EPSG_Arctic_zone_3-19': 6080,
    'WGS_1984_EPSG_Arctic_zone_3-21': 6122,
    'WGS_1984_EPSG_Arctic_zone_3-23': 6123,
    'WGS_1984_EPSG_Arctic_zone_4-12': 6124,
    'WGS_1984_EPSG_Arctic_zone_4-30': 6081,
    'WGS_1984_EPSG_Arctic_zone_4-32': 6082,
    'WGS_1984_EPSG_Arctic_zone_4-34': 6083,
    'WGS_1984_EPSG_Arctic_zone_4-36': 6084,
    'WGS_1984_EPSG_Arctic_zone_4-38': 6085,
    'WGS_1984_EPSG_Arctic_zone_4-40': 6086,
    'WGS_1984_EPSG_Arctic_zone_5-15': 6087,
    'WGS_1984_EPSG_Arctic_zone_5-17': 6088,
    'WGS_1984_EPSG_Arctic_zone_5-19': 6089,
    'WGS_1984_EPSG_Arctic_zone_5-23': 6091,
    'WGS_1984_EPSG_Arctic_zone_5-25': 6092,
    'WGS_1984_EPSG_Arctic_zone_5-27': 6093,
    'WGS_1984_EPSG_Canada_Polar_Stereographic': 5937,
    'WGS_1984_EPSG_Greenland_Polar_Stereographic': 5938,
    'WGS_1984_EPSG_Norway_Polar_Stereographic': 5939,
    'WGS_1984_EPSG_Russia_Polar_Stereographic': 5940,
    'WGS_1984_EPSG_Arctic_zone_5-21': 6090,
    'NAD_1927_StatePlane_Alabama_East_FIPS_0101': 26729,
    'NAD_1927_StatePlane_Alabama_West_FIPS_0102': 26730,
    'NAD_1927_StatePlane_Alaska_1_FIPS_5001': 26731,
    'NAD_1927_StatePlane_Alaska_2_FIPS_5002': 26732,
    'NAD_1927_StatePlane_Alaska_3_FIPS_5003': 26733,
    'NAD_1927_StatePlane_Alaska_4_FIPS_5004': 26734,
    'NAD_1927_StatePlane_Alaska_5_FIPS_5005': 26735,
    'NAD_1927_StatePlane_Alaska_6_FIPS_5006': 26736,
    'NAD_1927_StatePlane_Alaska_7_FIPS_5007': 26737,
    'NAD_1927_StatePlane_Alaska_8_FIPS_5008': 26738,
    'NAD_1927_StatePlane_Alaska_9_FIPS_5009': 26739,
    'NAD_1927_StatePlane_Alaska_10_FIPS_5010': 26740,
    'NAD_1927_StatePlane_Arizona_Central_FIPS_0202': 26749,
    'NAD_1927_StatePlane_Arizona_East_FIPS_0201': 26748,
    'NAD_1927_StatePlane_Arizona_West_FIPS_0203': 26750,
    'NAD_1927_StatePlane_Arkansas_North_FIPS_0301': 26751,
    'NAD_1927_StatePlane_Arkansas_South_FIPS_0302': 26752,
    'NAD_1927_StatePlane_California_I_FIPS_0401': 26741,
    'NAD_1927_StatePlane_California_II_FIPS_0402': 26742,
    'NAD_1927_StatePlane_California_III_FIPS_0403': 26743,
    'NAD_1927_StatePlane_California_IV_FIPS_0404': 26744,
    'NAD_1927_StatePlane_California_V_FIPS_0405': 26745,
    'NAD_1927_StatePlane_California_V_Ventura': 102699,
    'NAD_1927_StatePlane_California_VI_FIPS_0406': 26746,
    'NAD_1927_StatePlane_California_VII_FIPS_0407': 26799,
    'NAD_1927_StatePlane_Colorado_Central_FIPS_0502': 26754,
    'NAD_1927_StatePlane_Colorado_North_FIPS_0501': 26753,
    'NAD_1927_StatePlane_Colorado_South_FIPS_0503': 26755,
    'NAD_1927_StatePlane_Connecticut_FIPS_0600': 26756,
    'NAD_1927_StatePlane_Delaware_FIPS_0700': 26757,
    'NAD_1927_StatePlane_Florida_East_FIPS_0901': 26758,
    'NAD_1927_StatePlane_Florida_North_FIPS_0903': 26760,
    'NAD_1927_StatePlane_Florida_West_FIPS_0902': 26759,
    'NAD_1927_StatePlane_Georgia_East_FIPS_1001': 26766,
    'NAD_1927_StatePlane_Georgia_West_FIPS_1002': 26767,
    'NAD_1927_StatePlane_Guam_FIPS_5400': 65061,
    'NAD_1927_StatePlane_Idaho_Central_FIPS_1102': 26769,
    'NAD_1927_StatePlane_Idaho_East_FIPS_1101': 26768,
    'NAD_1927_StatePlane_Idaho_West_FIPS_1103': 26770,
    'NAD_1927_StatePlane_Illinois_East_FIPS_1201': 26771,
    'NAD_1927_StatePlane_Illinois_West_FIPS_1202': 26772,
    'NAD_1927_StatePlane_Indiana_East_FIPS_1301': 26773,
    'NAD_1927_StatePlane_Indiana_West_FIPS_1302': 26774,
    'NAD_1927_StatePlane_Iowa_North_FIPS_1401': 26775,
    'NAD_1927_StatePlane_Iowa_South_FIPS_1402': 26776,
    'NAD_1927_StatePlane_Kansas_North_FIPS_1501': 26777,
    'NAD_1927_StatePlane_Kansas_South_FIPS_1502': 26778,
    'NAD_1927_StatePlane_Kentucky_North_FIPS_1601': 26779,
    'NAD_1927_StatePlane_Kentucky_South_FIPS_1602': 26780,
    'NAD_1927_StatePlane_Louisiana_North_FIPS_1701': 26781,
    'NAD_1927_StatePlane_Louisiana_Offshore_FIPS_1703': 32099,
    'NAD_1927_StatePlane_Louisiana_South_FIPS_1702': 26782,
    'NAD_1927_StatePlane_Maine_East_FIPS_1801': 26783,
    'NAD_1927_StatePlane_Maine_West_FIPS_1802': 26784,
    'NAD_1927_StatePlane_Maryland_FIPS_1900': 26785,
    'NAD_1927_StatePlane_Massachusetts_Mainland_FIPS_2001': 26786,
    'NAD_1927_StatePlane_Massachusetts_Island_FIPS_2002': 26787,
    'NAD_1927_StatePlane_Michigan_Central_FIPS_2112': 26789,
    'NAD_1927_StatePlane_Michigan_Central_Old_FIPS_2102': 5624,
    'NAD_1927_StatePlane_Michigan_East_Old_FIPS_2101': 5623,
    'NAD_1927_StatePlane_Michigan_North_FIPS_2111': 26788,
    'NAD_1927_StatePlane_Michigan_South_FIPS_2113': 26790,
    'NAD_1927_StatePlane_Michigan_West_Old_FIPS_2103': 5625,
    'NAD_1927_StatePlane_Minnesota_Central_FIPS_2202': 26792,
    'NAD_1927_StatePlane_Minnesota_North_FIPS_2201': 26791,
    'NAD_1927_StatePlane_Minnesota_South_FIPS_2203': 26793,
    'NAD_1927_StatePlane_Mississippi_East_FIPS_2301': 26794,
    'NAD_1927_StatePlane_Mississippi_West_FIPS_2302': 26795,
    'NAD_1927_StatePlane_Missouri_Central_FIPS_2402': 26797,
    'NAD_1927_StatePlane_Missouri_East_FIPS_2401': 26796,
    'NAD_1927_StatePlane_Missouri_West_FIPS_2403': 26798,
    'NAD_1927_StatePlane_Montana_Central_FIPS_2502': 32002,
    'NAD_1927_StatePlane_Montana_North_FIPS_2501': 32001,
    'NAD_1927_StatePlane_Montana_South_FIPS_2503': 32003,
    'NAD_1927_StatePlane_Nebraska_North_FIPS_2601': 32005,
    'NAD_1927_StatePlane_Nebraska_South_FIPS_2602': 32006,
    'NAD_1927_StatePlane_Nevada_Central_FIPS_2702': 32008,
    'NAD_1927_StatePlane_Nevada_East_FIPS_2701': 32007,
    'NAD_1927_StatePlane_Nevada_West_FIPS_2703': 32009,
    'NAD_1927_StatePlane_New_Hampshire_FIPS_2800': 32010,
    'NAD_1927_StatePlane_New_Jersey_FIPS_2900': 32011,
    'NAD_1927_StatePlane_New_Mexico_Central_FIPS_3002': 32013,
    'NAD_1927_StatePlane_New_Mexico_East_FIPS_3001': 32012,
    'NAD_1927_StatePlane_New_Mexico_West_FIPS_3003': 32014,
    'NAD_1927_StatePlane_New_York_Central_FIPS_3102': 32016,
    'NAD_1927_StatePlane_New_York_East_FIPS_3101': 32015,
    'NAD_1927_StatePlane_New_York_Long_Island_FIPS_3104': 4456,
    'NAD_1927_StatePlane_New_York_West_FIPS_3103': 32017,
    'NAD_1927_StatePlane_North_Carolina_FIPS_3200': 32019,
    'NAD_1927_StatePlane_North_Dakota_North_FIPS_3301': 32020,
    'NAD_1927_StatePlane_North_Dakota_South_FIPS_3302': 32021,
    'NAD_1927_StatePlane_Ohio_North_FIPS_3401': 32022,
    'NAD_1927_StatePlane_Ohio_South_FIPS_3402': 32023,
    'NAD_1927_StatePlane_Oklahoma_North_FIPS_3501': 32024,
    'NAD_1927_StatePlane_Oklahoma_South_FIPS_3502': 32025,
    'NAD_1927_StatePlane_Oregon_North_FIPS_3601': 32026,
    'NAD_1927_StatePlane_Oregon_South_FIPS_3602': 32027,
    'NAD_1927_StatePlane_Pennsylvania_North_FIPS_3701': 32028,
    'NAD_1927_StatePlane_Pennsylvania_South_FIPS_3702': 4455,
    'NAD_1927_StatePlane_Puerto_Rico_FIPS_5201': 32059,
    'NAD_1927_StatePlane_Rhode_Island_FIPS_3800': 32030,
    'NAD_1927_StatePlane_South_Carolina_North_FIPS_3901': 32031,
    'NAD_1927_StatePlane_South_Carolina_South_FIPS_3902': 32033,
    'NAD_1927_StatePlane_South_Dakota_North_FIPS_4001': 32034,
    'NAD_1927_StatePlane_South_Dakota_South_FIPS_4002': 32035,
    'NAD_1927_StatePlane_Tennessee_FIPS_4100': 2204,
    'NAD_1927_StatePlane_Texas_Central_FIPS_4203': 32039,
    'NAD_1927_StatePlane_Texas_North_Central_FIPS_4202': 32038,
    'NAD_1927_StatePlane_Texas_North_FIPS_4201': 32037,
    'NAD_1927_StatePlane_Texas_South_Central_FIPS_4204': 32040,
    'NAD_1927_StatePlane_Texas_South_FIPS_4205': 32041,
    'NAD_1927_StatePlane_Utah_Central_FIPS_4302': 32043,
    'NAD_1927_StatePlane_Utah_North_FIPS_4301': 32042,
    'NAD_1927_StatePlane_Utah_South_FIPS_4303': 32044,
    'NAD_1927_StatePlane_Vermont_FIPS_4400': 32045,
    'NAD_1927_StatePlane_Virgin_Islands_St_Croix_FIPS_5202': 32060,
    'NAD_1927_StatePlane_Virginia_North_FIPS_4501': 32046,
    'NAD_1927_StatePlane_Virginia_South_FIPS_4502': 32047,
    'NAD_1927_StatePlane_Washington_North_FIPS_4601': 32048,
    'NAD_1927_StatePlane_Washington_South_FIPS_4602': 32049,
    'NAD_1927_StatePlane_West_Virginia_North_FIPS_4701': 32050,
    'NAD_1927_StatePlane_West_Virginia_South_FIPS_4702': 32051,
    'NAD_1927_StatePlane_Wisconsin_Central_FIPS_4802': 32053,
    'NAD_1927_StatePlane_Wisconsin_North_FIPS_4801': 32052,
    'NAD_1927_StatePlane_Wisconsin_South_FIPS_4803': 32054,
    'NAD_1927_StatePlane_Wyoming_East_Central_FIPS_4902': 32056,
    'NAD_1927_StatePlane_Wyoming_East_FIPS_4901': 32055,
    'NAD_1927_StatePlane_Wyoming_West_Central_FIPS_4903': 32057,
    'NAD_1927_StatePlane_Wyoming_West_FIPS_4904': 32058,
    'NAD_1983_2011_StatePlane_Arizona_Central_FIPS_0202_Ft_Intl': 102991,
    'NAD_1983_2011_StatePlane_Arizona_East_FIPS_0201_Ft_Intl': 102990,
    'NAD_1983_2011_StatePlane_Arizona_West_FIPS_0203_Ft_Intl': 102992,
    'NAD_1983_2011_StatePlane_Michigan_Central_FIPS_2112_Ft_Intl': 103078,
    'NAD_1983_2011_StatePlane_Michigan_North_FIPS_2111_Ft_Intl': 103077,
    'NAD_1983_2011_StatePlane_Michigan_South_FIPS_2113_Ft_Intl': 103079,
    'NAD_1983_2011_StatePlane_Montana_FIPS_2500_Ft_Intl': 103094,
    'NAD_1983_2011_StatePlane_North_Dakota_North_FIPS_3301_FtI': 103125,
    'NAD_1983_2011_StatePlane_North_Dakota_South_FIPS_3302_FtI': 103126,
    'NAD_1983_2011_StatePlane_Oregon_North_FIPS_3601_Ft_Intl': 103137,
    'NAD_1983_2011_StatePlane_Oregon_South_FIPS_3602_Ft_Intl': 103138,
    'NAD_1983_2011_StatePlane_South_Carolina_FIPS_3900_Ft_Intl': 103146,
    'NAD_1983_2011_StatePlane_Utah_Central_FIPS_4302_Ft_Intl': 103167,
    'NAD_1983_2011_StatePlane_Utah_North_FIPS_4301_Ft_Intl': 103166,
    'NAD_1983_2011_StatePlane_Utah_South_FIPS_4303_Ft_Intl': 103168,
    'NAD_1983_2011_Maine_2000_Central_Zone': 103066,
    'NAD_1983_2011_Maine_2000_East_Zone': 103065,
    'NAD_1983_2011_Maine_2000_West_Zone': 103067,
    'NAD_1983_2011_StatePlane_Alabama_East_FIPS_0101': 102975,
    'NAD_1983_2011_StatePlane_Alabama_West_FIPS_0102': 102976,
    'NAD_1983_2011_StatePlane_Alaska_1_FIPS_5001': 102977,
    'NAD_1983_2011_StatePlane_Alaska_2_FIPS_5002': 102978,
    'NAD_1983_2011_StatePlane_Alaska_3_FIPS_5003': 102979,
    'NAD_1983_2011_StatePlane_Alaska_4_FIPS_5004': 102980,
    'NAD_1983_2011_StatePlane_Alaska_5_FIPS_5005': 102981,
    'NAD_1983_2011_StatePlane_Alaska_6_FIPS_5006': 102982,
    'NAD_1983_2011_StatePlane_Alaska_7_FIPS_5007': 102983,
    'NAD_1983_2011_StatePlane_Alaska_8_FIPS_5008': 102984,
    'NAD_1983_2011_StatePlane_Alaska_9_FIPS_5009': 102985,
    'NAD_1983_2011_StatePlane_Alaska_10_FIPS_5010': 102986,
    'NAD_1983_2011_StatePlane_Arizona_Central_FIPS_0202': 102988,
    'NAD_1983_2011_StatePlane_Arizona_East_FIPS_0201': 102987,
    'NAD_1983_2011_StatePlane_Arizona_West_FIPS_0203': 102989,
    'NAD_1983_2011_StatePlane_Arkansas_North_FIPS_0301': 102993,
    'NAD_1983_2011_StatePlane_Arkansas_South_FIPS_0302': 102994,
    'NAD_1983_2011_StatePlane_California_I_FIPS_0401': 102997,
    'NAD_1983_2011_StatePlane_California_II_FIPS_0402': 102998,
    'NAD_1983_2011_StatePlane_California_III_FIPS_0403': 102999,
    'NAD_1983_2011_StatePlane_California_IV_FIPS_0404': 103000,
    'NAD_1983_2011_StatePlane_California_V_FIPS_0405': 103001,
    'NAD_1983_2011_StatePlane_California_VI_FIPS_0406': 103002,
    'NAD_1983_2011_StatePlane_Colorado_Central_FIPS_0502': 103010,
    'NAD_1983_2011_StatePlane_Colorado_North_FIPS_0501': 103009,
    'NAD_1983_2011_StatePlane_Colorado_South_FIPS_0503': 103011,
    'NAD_1983_2011_StatePlane_Connecticut_FIPS_0600': 103015,
    'NAD_1983_2011_StatePlane_Delaware_FIPS_0700': 103017,
    'NAD_1983_2011_StatePlane_Florida_East_FIPS_0901': 103019,
    'NAD_1983_2011_StatePlane_Florida_North_FIPS_0903': 103021,
    'NAD_1983_2011_StatePlane_Florida_West_FIPS_0902': 103020,
    'NAD_1983_2011_StatePlane_Georgia_East_FIPS_1001': 103025,
    'NAD_1983_2011_StatePlane_Georgia_West_FIPS_1002': 103026,
    'NAD_1983_2011_StatePlane_Idaho_Central_FIPS_1102': 103030,
    'NAD_1983_2011_StatePlane_Idaho_East_FIPS_1101': 103029,
    'NAD_1983_2011_StatePlane_Idaho_West_FIPS_1103': 103031,
    'NAD_1983_2011_StatePlane_Illinois_East_FIPS_1201': 103035,
    'NAD_1983_2011_StatePlane_Illinois_West_FIPS_1202': 103036,
    'NAD_1983_2011_StatePlane_Indiana_East_FIPS_1301': 103039,
    'NAD_1983_2011_StatePlane_Indiana_West_FIPS_1302': 103040,
    'NAD_1983_2011_StatePlane_Iowa_North_FIPS_1401': 103043,
    'NAD_1983_2011_StatePlane_Iowa_South_FIPS_1402': 103044,
    'NAD_1983_2011_StatePlane_Kansas_North_FIPS_1501': 103047,
    'NAD_1983_2011_StatePlane_Kansas_South_FIPS_1502': 103048,
    'NAD_1983_2011_StatePlane_Kentucky_FIPS_1600': 103053,
    'NAD_1983_2011_StatePlane_Kentucky_North_FIPS_1601': 103051,
    'NAD_1983_2011_StatePlane_Kentucky_South_FIPS_1602': 103055,
    'NAD_1983_2011_StatePlane_Louisiana_North_FIPS_1701': 103057,
    'NAD_1983_2011_StatePlane_Louisiana_South_FIPS_1702': 103058,
    'NAD_1983_2011_StatePlane_Maine_East_FIPS_1801': 103061,
    'NAD_1983_2011_StatePlane_Maine_West_FIPS_1802': 103062,
    'NAD_1983_2011_StatePlane_Maryland_FIPS_1900': 103068,
    'NAD_1983_2011_StatePlane_Massachusetts_Mainland_FIPS_2001': 103070,
    'NAD_1983_2011_StatePlane_Massachusetts_Island_FIPS_2002': 103071,
    'NAD_1983_2011_StatePlane_Michigan_Central_FIPS_2112': 103075,
    'NAD_1983_2011_StatePlane_Michigan_North_FIPS_2111': 103074,
    'NAD_1983_2011_StatePlane_Michigan_South_FIPS_2113': 103076,
    'NAD_1983_2011_StatePlane_Minnesota_Central_FIPS_2202': 103081,
    'NAD_1983_2011_StatePlane_Minnesota_North_FIPS_2201': 103080,
    'NAD_1983_2011_StatePlane_Minnesota_South_FIPS_2203': 103082,
    'NAD_1983_2011_StatePlane_Mississippi_East_FIPS_2301': 103086,
    'NAD_1983_2011_StatePlane_Mississippi_West_FIPS_2302': 103087,
    'NAD_1983_2011_StatePlane_Missouri_Central_FIPS_2402': 103091,
    'NAD_1983_2011_StatePlane_Missouri_East_FIPS_2401': 103090,
    'NAD_1983_2011_StatePlane_Missouri_West_FIPS_2403': 103092,
    'NAD_1983_2011_StatePlane_Montana_FIPS_2500': 103093,
    'NAD_1983_2011_StatePlane_Nebraska_FIPS_2600': 103095,
    'NAD_1983_2011_StatePlane_Nevada_Central_FIPS_2702': 103098,
    'NAD_1983_2011_StatePlane_Nevada_East_FIPS_2701': 103097,
    'NAD_1983_2011_StatePlane_Nevada_West_FIPS_2703': 103099,
    'NAD_1983_2011_StatePlane_New_Hampshire_FIPS_2800': 103103,
    'NAD_1983_2011_StatePlane_New_Jersey_FIPS_2900': 103105,
    'NAD_1983_2011_StatePlane_New_Mexico_Central_FIPS_3002': 103108,
    'NAD_1983_2011_StatePlane_New_Mexico_East_FIPS_3001': 103107,
    'NAD_1983_2011_StatePlane_New_Mexico_West_FIPS_3003': 103109,
    'NAD_1983_2011_StatePlane_New_York_Central_FIPS_3102': 103114,
    'NAD_1983_2011_StatePlane_New_York_East_FIPS_3101': 103113,
    'NAD_1983_2011_StatePlane_New_York_Long_Island_FIPS_3104': 103116,
    'NAD_1983_2011_StatePlane_New_York_West_FIPS_3103': 103115,
    'NAD_1983_2011_StatePlane_North_Carolina_FIPS_3200': 103121,
    'NAD_1983_2011_StatePlane_North_Dakota_North_FIPS_3301': 103123,
    'NAD_1983_2011_StatePlane_North_Dakota_South_FIPS_3302': 103124,
    'NAD_1983_2011_StatePlane_Ohio_North_FIPS_3401': 103127,
    'NAD_1983_2011_StatePlane_Ohio_South_FIPS_3402': 103128,
    'NAD_1983_2011_StatePlane_Oklahoma_North_FIPS_3501': 103131,
    'NAD_1983_2011_StatePlane_Oklahoma_South_FIPS_3502': 103132,
    'NAD_1983_2011_StatePlane_Oregon_North_FIPS_3601': 103135,
    'NAD_1983_2011_StatePlane_Oregon_South_FIPS_3602': 103136,
    'NAD_1983_2011_StatePlane_Pennsylvania_North_FIPS_3701': 103139,
    'NAD_1983_2011_StatePlane_Pennsylvania_South_FIPS_3702': 103141,
    'NAD_1983_2011_StatePlane_Puerto_Rico_Virgin_Isls_FIPS_5200': 103200,
    'NAD_1983_2011_StatePlane_Rhode_Island_FIPS_3800': 103143,
    'NAD_1983_2011_StatePlane_South_Carolina_FIPS_3900': 103145,
    'NAD_1983_2011_StatePlane_South_Dakota_North_FIPS_4001': 103147,
    'NAD_1983_2011_StatePlane_South_Dakota_South_FIPS_4002': 103148,
    'NAD_1983_2011_StatePlane_Tennessee_FIPS_4100': 103151,
    'NAD_1983_2011_StatePlane_Texas_Central_FIPS_4203': 103155,
    'NAD_1983_2011_StatePlane_Texas_North_Central_FIPS_4202': 103154,
    'NAD_1983_2011_StatePlane_Texas_North_FIPS_4201': 103153,
    'NAD_1983_2011_StatePlane_Texas_South_Central_FIPS_4204': 103156,
    'NAD_1983_2011_StatePlane_Texas_South_FIPS_4205': 103157,
    'NAD_1983_2011_StatePlane_Utah_Central_FIPS_4302': 103164,
    'NAD_1983_2011_StatePlane_Utah_North_FIPS_4301': 103163,
    'NAD_1983_2011_StatePlane_Utah_South_FIPS_4303': 103165,
    'NAD_1983_2011_StatePlane_Vermont_FIPS_4400': 103172,
    'NAD_1983_2011_StatePlane_Virginia_North_FIPS_4501': 103174,
    'NAD_1983_2011_StatePlane_Virginia_South_FIPS_4502': 103175,
    'NAD_1983_2011_StatePlane_Washington_North_FIPS_4601': 103178,
    'NAD_1983_2011_StatePlane_Washington_South_FIPS_4602': 103179,
    'NAD_1983_2011_StatePlane_West_Virginia_North_FIPS_4701': 103182,
    'NAD_1983_2011_StatePlane_West_Virginia_South_FIPS_4702': 103183,
    'NAD_1983_2011_StatePlane_Wisconsin_Central_FIPS_4802': 103187,
    'NAD_1983_2011_StatePlane_Wisconsin_North_FIPS_4801': 103186,
    'NAD_1983_2011_StatePlane_Wisconsin_South_FIPS_4803': 103188,
    'NAD_1983_2011_StatePlane_Wyoming_East_Central_FIPS_4902': 103193,
    'NAD_1983_2011_StatePlane_Wyoming_East_FIPS_4901': 103192,
    'NAD_1983_2011_StatePlane_Wyoming_West_Central_FIPS_4903': 103194,
    'NAD_1983_2011_StatePlane_Wyoming_West_FIPS_4904': 103195,
    'NAD_1983_2011_StatePlane_Alaska_1_FIPS_5001_Feet': 102445,
    'NAD_1983_2011_StatePlane_Alaska_2_FIPS_5002_Feet': 102446,
    'NAD_1983_2011_StatePlane_Alaska_3_FIPS_5003_Feet': 102447,
    'NAD_1983_2011_StatePlane_Alaska_4_FIPS_5004_Feet': 102392,
    'NAD_1983_2011_StatePlane_Alaska_5_FIPS_5005_Feet': 102393,
    'NAD_1983_2011_StatePlane_Alaska_6_FIPS_5006_Feet': 102394,
    'NAD_1983_2011_StatePlane_Alaska_7_FIPS_5007_Feet': 102395,
    'NAD_1983_2011_StatePlane_Alaska_8_FIPS_5008_Feet': 102396,
    'NAD_1983_2011_StatePlane_Alaska_9_FIPS_5009_Feet': 102397,
    'NAD_1983_2011_StatePlane_Alaska_10_FIPS_5010_Feet': 102398,
    'NAD_1983_2011_StatePlane_Arkansas_North_FIPS_0301_Ft_US': 102995,
    'NAD_1983_2011_StatePlane_Arkansas_South_FIPS_0302_Ft_US': 102996,
    'NAD_1983_2011_StatePlane_California_I_FIPS_0401_Ft_US': 103003,
    'NAD_1983_2011_StatePlane_California_II_FIPS_0402_Ft_US': 103004,
    'NAD_1983_2011_StatePlane_California_III_FIPS_0403_Ft_US': 103005,
    'NAD_1983_2011_StatePlane_California_IV_FIPS_0404_Ft_US': 103006,
    'NAD_1983_2011_StatePlane_California_V_FIPS_0405_Ft_US': 103007,
    'NAD_1983_2011_StatePlane_California_VI_FIPS_0406_Ft_US': 103008,
    'NAD_1983_2011_StatePlane_Colorado_Central_FIPS_0502_Ft_US': 103013,
    'NAD_1983_2011_StatePlane_Colorado_North_FIPS_0501_Ft_US': 103012,
    'NAD_1983_2011_StatePlane_Colorado_South_FIPS_0503_Ft_US': 103014,
    'NAD_1983_2011_StatePlane_Connecticut_FIPS_0600_Ft_US': 103016,
    'NAD_1983_2011_StatePlane_Delaware_FIPS_0700_Ft_US': 103018,
    'NAD_1983_2011_StatePlane_Florida_East_FIPS_0901_Ft_US': 103022,
    'NAD_1983_2011_StatePlane_Florida_North_FIPS_0903_Ft_US': 103024,
    'NAD_1983_2011_StatePlane_Florida_West_FIPS_0902_Ft_US': 103023,
    'NAD_1983_2011_StatePlane_Georgia_East_FIPS_1001_Ft_US': 103027,
    'NAD_1983_2011_StatePlane_Georgia_West_FIPS_1002_Ft_US': 103028,
    'NAD_1983_2011_StatePlane_Idaho_Central_FIPS_1102_Ft_US': 103033,
    'NAD_1983_2011_StatePlane_Idaho_East_FIPS_1101_Ft_US': 103032,
    'NAD_1983_2011_StatePlane_Idaho_West_FIPS_1103_Ft_US': 103034,
    'NAD_1983_2011_StatePlane_Illinois_East_FIPS_1201_Ft_US': 103037,
    'NAD_1983_2011_StatePlane_Illinois_West_FIPS_1202_Ft_US': 103038,
    'NAD_1983_2011_StatePlane_Indiana_East_FIPS_1301_Ft_US': 103041,
    'NAD_1983_2011_StatePlane_Indiana_West_FIPS_1302_Ft_US': 103042,
    'NAD_1983_2011_StatePlane_Iowa_North_FIPS_1401_Ft_US': 103045,
    'NAD_1983_2011_StatePlane_Iowa_South_FIPS_1402_Ft_US': 103046,
    'NAD_1983_2011_StatePlane_Kansas_North_FIPS_1501_Ft_US': 103049,
    'NAD_1983_2011_StatePlane_Kansas_South_FIPS_1502_Ft_US': 103050,
    'NAD_1983_2011_StatePlane_Kentucky_FIPS_1600_Ft_US': 103054,
    'NAD_1983_2011_StatePlane_Kentucky_North_FIPS_1601_Ft_US': 103052,
    'NAD_1983_2011_StatePlane_Kentucky_South_FIPS_1602_Ft_US': 103056,
    'NAD_1983_2011_StatePlane_Louisiana_North_FIPS_1701_Ft_US': 103059,
    'NAD_1983_2011_StatePlane_Louisiana_South_FIPS_1702_Ft_US': 103060,
    'NAD_1983_2011_StatePlane_Maine_East_FIPS_1801_Ft_US': 103063,
    'NAD_1983_2011_StatePlane_Maine_West_FIPS_1802_Ft_US': 103064,
    'NAD_1983_2011_StatePlane_Maryland_FIPS_1900_Ft_US': 103069,
    'NAD_1983_2011_StatePlane_Massachusetts_Mnld_FIPS_2001_FtUS': 103072,
    'NAD_1983_2011_StatePlane_Massachusetts_Isl_FIPS_2002_FtUS': 103073,
    'NAD_1983_2011_StatePlane_Minnesota_Central_FIPS_2202_Ft_US': 103084,
    'NAD_1983_2011_StatePlane_Minnesota_North_FIPS_2201_Ft_US': 103083,
    'NAD_1983_2011_StatePlane_Minnesota_South_FIPS_2203_Ft_US': 103085,
    'NAD_1983_2011_StatePlane_Mississippi_East_FIPS_2301_Ft_US': 103088,
    'NAD_1983_2011_StatePlane_Mississippi_West_FIPS_2302_Ft_US': 103089,
    'NAD_1983_2011_StatePlane_Nebraska_FIPS_2600_Ft_US': 103096,
    'NAD_1983_2011_StatePlane_Nevada_Central_FIPS_2702_Ft_US': 103101,
    'NAD_1983_2011_StatePlane_Nevada_East_FIPS_2701_Ft_US': 103100,
    'NAD_1983_2011_StatePlane_Nevada_West_FIPS_2703_Ft_US': 103102,
    'NAD_1983_2011_StatePlane_New_Hampshire_FIPS_2800_Ft_US': 103104,
    'NAD_1983_2011_StatePlane_New_Jersey_FIPS_2900_Ft_US': 103106,
    'NAD_1983_2011_StatePlane_New_Mexico_Central_FIPS_3002_Ft_US': 103111,
    'NAD_1983_2011_StatePlane_New_Mexico_East_FIPS_3001_Ft_US': 103110,
    'NAD_1983_2011_StatePlane_New_Mexico_West_FIPS_3003_Ft_US': 103112,
    'NAD_1983_2011_StatePlane_New_York_Central_FIPS_3102_Ft_US': 103118,
    'NAD_1983_2011_StatePlane_New_York_East_FIPS_3101_Ft_US': 103117,
    'NAD_1983_2011_StatePlane_New_York_Long_Isl_FIPS_3104_Ft_US': 103120,
    'NAD_1983_2011_StatePlane_New_York_West_FIPS_3103_Ft_US': 103119,
    'NAD_1983_2011_StatePlane_North_Carolina_FIPS_3200_Ft_US': 103122,
    'NAD_1983_2011_StatePlane_Ohio_North_FIPS_3401_Ft_US': 103129,
    'NAD_1983_2011_StatePlane_Ohio_South_FIPS_3402_Ft_US': 103130,
    'NAD_1983_2011_StatePlane_Oklahoma_North_FIPS_3501_Ft_US': 103133,
    'NAD_1983_2011_StatePlane_Oklahoma_South_FIPS_3502_Ft_US': 103134,
    'NAD_1983_2011_StatePlane_Pennsylvania_North_FIPS_3701_Ft_US': 103140,
    'NAD_1983_2011_StatePlane_Pennsylvania_South_FIPS_3702_Ft_US': 103142,
    'NAD_1983_2011_StatePlane_Rhode_Island_FIPS_3800_Ft_US': 103144,
    'NAD_1983_2011_StatePlane_South_Dakota_North_FIPS_4001_Ft_US': 103149,
    'NAD_1983_2011_StatePlane_South_Dakota_South_FIPS_4002_Ft_US': 103150,
    'NAD_1983_2011_StatePlane_Tennessee_FIPS_4100_Ft_US': 103152,
    'NAD_1983_2011_StatePlane_Texas_Central_FIPS_4203_Ft_US': 103160,
    'NAD_1983_2011_StatePlane_Texas_North_Central_FIPS_4202_FtUS': 103159,
    'NAD_1983_2011_StatePlane_Texas_North_FIPS_4201_Ft_US': 103158,
    'NAD_1983_2011_StatePlane_Texas_South_Central_FIPS_4204_FtUS': 103161,
    'NAD_1983_2011_StatePlane_Texas_South_FIPS_4205_Ft_US': 103162,
    'NAD_1983_2011_StatePlane_Utah_Central_FIPS_4302_Ft_US': 103170,
    'NAD_1983_2011_StatePlane_Utah_North_FIPS_4301_Ft_US': 103169,
    'NAD_1983_2011_StatePlane_Utah_South_FIPS_4303_Ft_US': 103171,
    'NAD_1983_2011_StatePlane_Vermont_FIPS_4400_Ft_US': 103173,
    'NAD_1983_2011_StatePlane_Virginia_North_FIPS_4501_Ft_US': 103176,
    'NAD_1983_2011_StatePlane_Virginia_South_FIPS_4502_Ft_US': 103177,
    'NAD_1983_2011_StatePlane_Washington_North_FIPS_4601_Ft_US': 103180,
    'NAD_1983_2011_StatePlane_Washington_South_FIPS_4602_Ft_US': 103181,
    'NAD_1983_2011_StatePlane_West_Virginia_North_FIPS_4701_FtUS': 103184,
    'NAD_1983_2011_StatePlane_West_Virginia_South_FIPS_4702_FtUS': 103185,
    'NAD_1983_2011_StatePlane_Wisconsin_Central_FIPS_4802_Ft_US': 103190,
    'NAD_1983_2011_StatePlane_Wisconsin_North_FIPS_4801_Ft_US': 103189,
    'NAD_1983_2011_StatePlane_Wisconsin_South_FIPS_4803_Ft_US': 103191,
    'NAD_1983_2011_StatePlane_Wyoming_E_Central_FIPS_4902_Ft_US': 103197,
    'NAD_1983_2011_StatePlane_Wyoming_East_FIPS_4901_Ft_US': 103196,
    'NAD_1983_2011_StatePlane_Wyoming_W_Central_FIPS_4903_Ft_US': 103198,
    'NAD_1983_2011_StatePlane_Wyoming_West_FIPS_4904_Ft_US': 103199,
    'NAD_1983_CORS96_StatePlane_Arizona_Central_FIPS_0202_Ft_Intl': 103226,
    'NAD_1983_CORS96_StatePlane_Arizona_East_FIPS_0201_Ft_Intl': 103225,
    'NAD_1983_CORS96_StatePlane_Arizona_West_FIPS_0203_Ft_Intl': 103227,
    'NAD_1983_CORS96_StatePlane_Michigan_Central_FIPS_2112_Ft_Intl': 103385,
    'NAD_1983_CORS96_StatePlane_Michigan_North_FIPS_2111_Ft_Intl': 103384,
    'NAD_1983_CORS96_StatePlane_Michigan_South_FIPS_2113_Ft_Intl': 103386,
    'NAD_1983_CORS96_StatePlane_Montana_FIPS_2500_Ft_Intl': 103473,
    'NAD_1983_CORS96_StatePlane_North_Dakota_North_FIPS_3301_FtI': 103504,
    'NAD_1983_CORS96_StatePlane_North_Dakota_South_FIPS_3302_FtI': 103505,
    'NAD_1983_CORS96_StatePlane_Oregon_North_FIPS_3601_Ft_Intl': 102378,
    'NAD_1983_CORS96_StatePlane_Oregon_South_FIPS_3602_Ft_Intl': 102379,
    'NAD_1983_CORS96_StatePlane_South_Carolina_FIPS_3900_Ft_Intl': 103521,
    'NAD_1983_CORS96_StatePlane_Utah_Central_FIPS_4302_Ft_Intl': 103553,
    'NAD_1983_CORS96_StatePlane_Utah_North_FIPS_4301_Ft_Intl': 103552,
    'NAD_1983_CORS96_StatePlane_Utah_South_FIPS_4303_Ft_Intl': 103554,
    'NAD_1983_CORS96_Maine_2000_Central_Zone': 103373,
    'NAD_1983_CORS96_Maine_2000_East_Zone': 103372,
    'NAD_1983_CORS96_Maine_2000_West_Zone': 103374,
    'NAD_1983_CORS96_StatePlane_Alabama_East_FIPS_0101': 103220,
    'NAD_1983_CORS96_StatePlane_Alabama_West_FIPS_0102': 103221,
    'NAD_1983_CORS96_StatePlane_Alaska_1_FIPS_5001': 102366,
    'NAD_1983_CORS96_StatePlane_Alaska_2_FIPS_5002': 102367,
    'NAD_1983_CORS96_StatePlane_Alaska_3_FIPS_5003': 102368,
    'NAD_1983_CORS96_StatePlane_Alaska_4_FIPS_5004': 102369,
    'NAD_1983_CORS96_StatePlane_Alaska_5_FIPS_5005': 102370,
    'NAD_1983_CORS96_StatePlane_Alaska_6_FIPS_5006': 102371,
    'NAD_1983_CORS96_StatePlane_Alaska_7_FIPS_5007': 102372,
    'NAD_1983_CORS96_StatePlane_Alaska_8_FIPS_5008': 102373,
    'NAD_1983_CORS96_StatePlane_Alaska_9_FIPS_5009': 102374,
    'NAD_1983_CORS96_StatePlane_Alaska_10_FIPS_5010': 102375,
    'NAD_1983_CORS96_StatePlane_Arizona_Central_FIPS_0202': 103223,
    'NAD_1983_CORS96_StatePlane_Arizona_East_FIPS_0201': 103222,
    'NAD_1983_CORS96_StatePlane_Arizona_West_FIPS_0203': 103224,
    'NAD_1983_CORS96_StatePlane_Arkansas_North_FIPS_0301': 103228,
    'NAD_1983_CORS96_StatePlane_Arkansas_South_FIPS_0302': 103229,
    'NAD_1983_CORS96_StatePlane_California_I_FIPS_0401': 103232,
    'NAD_1983_CORS96_StatePlane_California_II_FIPS_0402': 103233,
    'NAD_1983_CORS96_StatePlane_California_III_FIPS_0403': 103234,
    'NAD_1983_CORS96_StatePlane_California_IV_FIPS_0404': 103235,
    'NAD_1983_CORS96_StatePlane_California_V_FIPS_0405': 103236,
    'NAD_1983_CORS96_StatePlane_California_VI_FIPS_0406': 103237,
    'NAD_1983_CORS96_StatePlane_Colorado_Central_FIPS_0502': 103245,
    'NAD_1983_CORS96_StatePlane_Colorado_North_FIPS_0501': 103244,
    'NAD_1983_CORS96_StatePlane_Colorado_South_FIPS_0503': 103246,
    'NAD_1983_CORS96_StatePlane_Connecticut_FIPS_0600': 103250,
    'NAD_1983_CORS96_StatePlane_Delaware_FIPS_0700': 103252,
    'NAD_1983_CORS96_StatePlane_Florida_East_FIPS_0901': 103254,
    'NAD_1983_CORS96_StatePlane_Florida_North_FIPS_0903': 103256,
    'NAD_1983_CORS96_StatePlane_Florida_West_FIPS_0902': 103255,
    'NAD_1983_CORS96_StatePlane_Georgia_East_FIPS_1001': 103260,
    'NAD_1983_CORS96_StatePlane_Georgia_West_FIPS_1002': 103261,
    'NAD_1983_CORS96_StatePlane_Idaho_Central_FIPS_1102': 103265,
    'NAD_1983_CORS96_StatePlane_Idaho_East_FIPS_1101': 103264,
    'NAD_1983_CORS96_StatePlane_Idaho_West_FIPS_1103': 103266,
    'NAD_1983_CORS96_StatePlane_Illinois_East_FIPS_1201': 103270,
    'NAD_1983_CORS96_StatePlane_Illinois_West_FIPS_1202': 103271,
    'NAD_1983_CORS96_StatePlane_Indiana_East_FIPS_1301': 103274,
    'NAD_1983_CORS96_StatePlane_Indiana_West_FIPS_1302': 103275,
    'NAD_1983_CORS96_StatePlane_Iowa_North_FIPS_1401': 103278,
    'NAD_1983_CORS96_StatePlane_Iowa_South_FIPS_1402': 103279,
    'NAD_1983_CORS96_StatePlane_Kansas_North_FIPS_1501': 103282,
    'NAD_1983_CORS96_StatePlane_Kansas_South_FIPS_1502': 103283,
    'NAD_1983_CORS96_StatePlane_Kentucky_FIPS_1600': 103288,
    'NAD_1983_CORS96_StatePlane_Kentucky_North_FIPS_1601': 103286,
    'NAD_1983_CORS96_StatePlane_Kentucky_South_FIPS_1602': 103290,
    'NAD_1983_CORS96_StatePlane_Louisiana_North_FIPS_1701': 103292,
    'NAD_1983_CORS96_StatePlane_Louisiana_South_FIPS_1702': 103293,
    'NAD_1983_CORS96_StatePlane_Maine_East_FIPS_1801': 103296,
    'NAD_1983_CORS96_StatePlane_Maine_West_FIPS_1802': 103297,
    'NAD_1983_CORS96_StatePlane_Maryland_FIPS_1900': 103375,
    'NAD_1983_CORS96_StatePlane_Massachusetts_Mainland_FIPS_2001': 103377,
    'NAD_1983_CORS96_StatePlane_Massachusetts_Island_FIPS_2002': 103378,
    'NAD_1983_CORS96_StatePlane_Michigan_Central_FIPS_2112': 103382,
    'NAD_1983_CORS96_StatePlane_Michigan_North_FIPS_2111': 103381,
    'NAD_1983_CORS96_StatePlane_Michigan_South_FIPS_2113': 103383,
    'NAD_1983_CORS96_StatePlane_Minnesota_Central_FIPS_2202': 103388,
    'NAD_1983_CORS96_StatePlane_Minnesota_North_FIPS_2201': 103387,
    'NAD_1983_CORS96_StatePlane_Minnesota_South_FIPS_2203': 103389,
    'NAD_1983_CORS96_StatePlane_Mississippi_East_FIPS_2301': 103393,
    'NAD_1983_CORS96_StatePlane_Mississippi_West_FIPS_2302': 103394,
    'NAD_1983_CORS96_StatePlane_Missouri_Central_FIPS_2402': 103398,
    'NAD_1983_CORS96_StatePlane_Missouri_East_FIPS_2401': 103397,
    'NAD_1983_CORS96_StatePlane_Missouri_West_FIPS_2403': 103399,
    'NAD_1983_CORS96_StatePlane_Montana_FIPS_2500': 103472,
    'NAD_1983_CORS96_StatePlane_Nebraska_FIPS_2600': 103474,
    'NAD_1983_CORS96_StatePlane_Nevada_Central_FIPS_2702': 103477,
    'NAD_1983_CORS96_StatePlane_Nevada_East_FIPS_2701': 103476,
    'NAD_1983_CORS96_StatePlane_Nevada_West_FIPS_2703': 103478,
    'NAD_1983_CORS96_StatePlane_New_Hampshire_FIPS_2800': 103482,
    'NAD_1983_CORS96_StatePlane_New_Jersey_FIPS_2900': 103484,
    'NAD_1983_CORS96_StatePlane_New_Mexico_Central_FIPS_3002': 103487,
    'NAD_1983_CORS96_StatePlane_New_Mexico_East_FIPS_3001': 103486,
    'NAD_1983_CORS96_StatePlane_New_Mexico_West_FIPS_3003': 103488,
    'NAD_1983_CORS96_StatePlane_New_York_Central_FIPS_3102': 103493,
    'NAD_1983_CORS96_StatePlane_New_York_East_FIPS_3101': 103492,
    'NAD_1983_CORS96_StatePlane_New_York_Long_Island_FIPS_3104': 103495,
    'NAD_1983_CORS96_StatePlane_New_York_West_FIPS_3103': 103494,
    'NAD_1983_CORS96_StatePlane_North_Carolina_FIPS_3200': 103500,
    'NAD_1983_CORS96_StatePlane_North_Dakota_North_FIPS_3301': 103502,
    'NAD_1983_CORS96_StatePlane_North_Dakota_South_FIPS_3302': 103503,
    'NAD_1983_CORS96_StatePlane_Ohio_North_FIPS_3401': 103506,
    'NAD_1983_CORS96_StatePlane_Ohio_South_FIPS_3402': 103507,
    'NAD_1983_CORS96_StatePlane_Oklahoma_North_FIPS_3501': 103510,
    'NAD_1983_CORS96_StatePlane_Oklahoma_South_FIPS_3502': 103511,
    'NAD_1983_CORS96_StatePlane_Oregon_North_FIPS_3601': 102376,
    'NAD_1983_CORS96_StatePlane_Oregon_South_FIPS_3602': 102377,
    'NAD_1983_CORS96_StatePlane_Pennsylvania_North_FIPS_3701': 103514,
    'NAD_1983_CORS96_StatePlane_Pennsylvania_South_FIPS_3702': 103516,
    'NAD_1983_CORS96_StatePlane_Rhode_Island_FIPS_3800': 103518,
    'NAD_1983_CORS96_StatePlane_South_Carolina_FIPS_3900': 103520,
    'NAD_1983_CORS96_StatePlane_South_Dakota_North_FIPS_4001': 103522,
    'NAD_1983_CORS96_StatePlane_South_Dakota_South_FIPS_4002': 103523,
    'NAD_1983_CORS96_StatePlane_Tennessee_FIPS_4100': 103526,
    'NAD_1983_CORS96_StatePlane_Texas_Central_FIPS_4203': 103541,
    'NAD_1983_CORS96_StatePlane_Texas_North_Central_FIPS_4202': 103540,
    'NAD_1983_CORS96_StatePlane_Texas_North_FIPS_4201': 103539,
    'NAD_1983_CORS96_StatePlane_Texas_South_Central_FIPS_4204': 103542,
    'NAD_1983_CORS96_StatePlane_Texas_South_FIPS_4205': 103543,
    'NAD_1983_CORS96_StatePlane_Utah_Central_FIPS_4302': 103550,
    'NAD_1983_CORS96_StatePlane_Utah_North_FIPS_4301': 103549,
    'NAD_1983_CORS96_StatePlane_Utah_South_FIPS_4303': 103551,
    'NAD_1983_CORS96_StatePlane_Vermont_FIPS_4400': 103558,
    'NAD_1983_CORS96_StatePlane_Virginia_North_FIPS_4501': 103559,
    'NAD_1983_CORS96_StatePlane_Virginia_South_FIPS_4502': 103560,
    'NAD_1983_CORS96_StatePlane_Washington_North_FIPS_4601': 103563,
    'NAD_1983_CORS96_StatePlane_Washington_South_FIPS_4602': 103564,
    'NAD_1983_CORS96_StatePlane_West_Virginia_North_FIPS_4701': 103567,
    'NAD_1983_CORS96_StatePlane_West_Virginia_South_FIPS_4702': 103568,
    'NAD_1983_CORS96_StatePlane_Wisconsin_Central_FIPS_4802': 103572,
    'NAD_1983_CORS96_StatePlane_Wisconsin_North_FIPS_4801': 103571,
    'NAD_1983_CORS96_StatePlane_Wisconsin_South_FIPS_4803': 103573,
    'NAD_1983_CORS96_StatePlane_Wyoming_East_Central_FIPS_4902': 103578,
    'NAD_1983_CORS96_StatePlane_Wyoming_East_FIPS_4901': 103577,
    'NAD_1983_CORS96_StatePlane_Wyoming_West_Central_FIPS_4903': 103579,
    'NAD_1983_CORS96_StatePlane_Wyoming_West_FIPS_4904': 103580,
    'NAD_1983_CORS96_StatePlane_Arkansas_North_FIPS_0301_Ft_US': 103230,
    'NAD_1983_CORS96_StatePlane_Arkansas_South_FIPS_0302_Ft_US': 103231,
    'NAD_1983_CORS96_StatePlane_California_I_FIPS_0401_Ft_US': 103238,
    'NAD_1983_CORS96_StatePlane_California_II_FIPS_0402_Ft_US': 103239,
    'NAD_1983_CORS96_StatePlane_California_III_FIPS_0403_Ft_US': 103240,
    'NAD_1983_CORS96_StatePlane_California_IV_FIPS_0404_Ft_US': 103241,
    'NAD_1983_CORS96_StatePlane_California_V_FIPS_0405_Ft_US': 103242,
    'NAD_1983_CORS96_StatePlane_California_VI_FIPS_0406_Ft_US': 103243,
    'NAD_1983_CORS96_StatePlane_Colorado_Central_FIPS_0502_Ft_US': 103248,
    'NAD_1983_CORS96_StatePlane_Colorado_North_FIPS_0501_Ft_US': 103247,
    'NAD_1983_CORS96_StatePlane_Colorado_South_FIPS_0503_Ft_US': 103249,
    'NAD_1983_CORS96_StatePlane_Connecticut_FIPS_0600_Ft_US': 103251,
    'NAD_1983_CORS96_StatePlane_Delaware_FIPS_0700_Ft_US': 103253,
    'NAD_1983_CORS96_StatePlane_Florida_East_FIPS_0901_Ft_US': 103257,
    'NAD_1983_CORS96_StatePlane_Florida_North_FIPS_0903_Ft_US': 103259,
    'NAD_1983_CORS96_StatePlane_Florida_West_FIPS_0902_Ft_US': 103258,
    'NAD_1983_CORS96_StatePlane_Georgia_East_FIPS_1001_Ft_US': 103262,
    'NAD_1983_CORS96_StatePlane_Georgia_West_FIPS_1002_Ft_US': 103263,
    'NAD_1983_CORS96_StatePlane_Idaho_Central_FIPS_1102_Ft_US': 103268,
    'NAD_1983_CORS96_StatePlane_Idaho_East_FIPS_1101_Ft_US': 103267,
    'NAD_1983_CORS96_StatePlane_Idaho_West_FIPS_1103_Ft_US': 103269,
    'NAD_1983_CORS96_StatePlane_Illinois_East_FIPS_1201_Ft_US': 103272,
    'NAD_1983_CORS96_StatePlane_Illinois_West_FIPS_1202_Ft_US': 103273,
    'NAD_1983_CORS96_StatePlane_Indiana_East_FIPS_1301_Ft_US': 103276,
    'NAD_1983_CORS96_StatePlane_Indiana_West_FIPS_1302_Ft_US': 103277,
    'NAD_1983_CORS96_StatePlane_Iowa_North_FIPS_1401_Ft_US': 103280,
    'NAD_1983_CORS96_StatePlane_Iowa_South_FIPS_1402_Ft_US': 103281,
    'NAD_1983_CORS96_StatePlane_Kansas_North_FIPS_1501_Ft_US': 103284,
    'NAD_1983_CORS96_StatePlane_Kansas_South_FIPS_1502_Ft_US': 103285,
    'NAD_1983_CORS96_StatePlane_Kentucky_FIPS_1600_Ft_US': 103289,
    'NAD_1983_CORS96_StatePlane_Kentucky_North_FIPS_1601_Ft_US': 103287,
    'NAD_1983_CORS96_StatePlane_Kentucky_South_FIPS_1602_Ft_US': 103291,
    'NAD_1983_CORS96_StatePlane_Louisiana_North_FIPS_1701_Ft_US': 103294,
    'NAD_1983_CORS96_StatePlane_Louisiana_South_FIPS_1702_Ft_US': 103295,
    'NAD_1983_CORS96_StatePlane_Maine_East_FIPS_1801_Ft_US': 103298,
    'NAD_1983_CORS96_StatePlane_Maine_West_FIPS_1802_Ft_US': 103299,
    'NAD_1983_CORS96_StatePlane_Maryland_FIPS_1900_Ft_US': 103376,
    'NAD_1983_CORS96_StatePlane_Massachusetts_Mnld_FIPS_2001_FtUS': 103379,
    'NAD_1983_CORS96_StatePlane_Massachusetts_Isl_FIPS_2002_FtUS': 103380,
    'NAD_1983_CORS96_StatePlane_Minnesota_Central_FIPS_2202_Ft_US': 103391,
    'NAD_1983_CORS96_StatePlane_Minnesota_North_FIPS_2201_Ft_US': 103390,
    'NAD_1983_CORS96_StatePlane_Minnesota_South_FIPS_2203_Ft_US': 103392,
    'NAD_1983_CORS96_StatePlane_Mississippi_East_FIPS_2301_Ft_US': 103395,
    'NAD_1983_CORS96_StatePlane_Mississippi_West_FIPS_2302_Ft_US': 103396,
    'NAD_1983_CORS96_StatePlane_Nebraska_FIPS_2600_Ft_US': 103475,
    'NAD_1983_CORS96_StatePlane_Nevada_Central_FIPS_2702_Ft_US': 103480,
    'NAD_1983_CORS96_StatePlane_Nevada_East_FIPS_2701_Ft_US': 103479,
    'NAD_1983_CORS96_StatePlane_Nevada_West_FIPS_2703_Ft_US': 103481,
    'NAD_1983_CORS96_StatePlane_New_Hampshire_FIPS_2800_Ft_US': 103483,
    'NAD_1983_CORS96_StatePlane_New_Jersey_FIPS_2900_Ft_US': 103485,
    'NAD_1983_CORS96_StatePlane_New_Mexico_Central_FIPS_3002_Ft_US': 103490,
    'NAD_1983_CORS96_StatePlane_New_Mexico_East_FIPS_3001_Ft_US': 103489,
    'NAD_1983_CORS96_StatePlane_New_Mexico_West_FIPS_3003_Ft_US': 103491,
    'NAD_1983_CORS96_StatePlane_New_York_Central_FIPS_3102_Ft_US': 103497,
    'NAD_1983_CORS96_StatePlane_New_York_East_FIPS_3101_Ft_US': 103496,
    'NAD_1983_CORS96_StatePlane_New_York_Long_Isl_FIPS_3104_Ft_US': 103499,
    'NAD_1983_CORS96_StatePlane_New_York_West_FIPS_3103_Ft_US': 103498,
    'NAD_1983_CORS96_StatePlane_North_Carolina_FIPS_3200_Ft_US': 103501,
    'NAD_1983_CORS96_StatePlane_Ohio_North_FIPS_3401_Ft_US': 103508,
    'NAD_1983_CORS96_StatePlane_Ohio_South_FIPS_3402_Ft_US': 103509,
    'NAD_1983_CORS96_StatePlane_Oklahoma_North_FIPS_3501_Ft_US': 103512,
    'NAD_1983_CORS96_StatePlane_Oklahoma_South_FIPS_3502_Ft_US': 103513,
    'NAD_1983_CORS96_StatePlane_Pennsylvania_North_FIPS_3701_Ft_US': 103515,
    'NAD_1983_CORS96_StatePlane_Pennsylvania_South_FIPS_3702_Ft_US': 103517,
    'NAD_1983_CORS96_StatePlane_Rhode_Island_FIPS_3800_Ft_US': 103519,
    'NAD_1983_CORS96_StatePlane_South_Dakota_North_FIPS_4001_Ft_US': 103524,
    'NAD_1983_CORS96_StatePlane_South_Dakota_South_FIPS_4002_Ft_US': 103525,
    'NAD_1983_CORS96_StatePlane_Tennessee_FIPS_4100_Ft_US': 103527,
    'NAD_1983_CORS96_StatePlane_Texas_Central_FIPS_4203_Ft_US': 103546,
    'NAD_1983_CORS96_StatePlane_Texas_North_Central_FIPS_4202_FtUS': 103545,
    'NAD_1983_CORS96_StatePlane_Texas_North_FIPS_4201_Ft_US': 103544,
    'NAD_1983_CORS96_StatePlane_Texas_South_Central_FIPS_4204_FtUS': 103547,
    'NAD_1983_CORS96_StatePlane_Texas_South_FIPS_4205_Ft_US': 103548,
    'NAD_1983_CORS96_StatePlane_Utah_Central_FIPS_4302_Ft_US': 103556,
    'NAD_1983_CORS96_StatePlane_Utah_North_FIPS_4301_Ft_US': 103555,
    'NAD_1983_CORS96_StatePlane_Utah_South_FIPS_4303_Ft_US': 103557,
    'NAD_1983_CORS96_StatePlane_Virginia_North_FIPS_4501_Ft_US': 103561,
    'NAD_1983_CORS96_StatePlane_Virginia_South_FIPS_4502_Ft_US': 103562,
    'NAD_1983_CORS96_StatePlane_Washington_North_FIPS_4601_Ft_US': 103565,
    'NAD_1983_CORS96_StatePlane_Washington_South_FIPS_4602_Ft_US': 103566,
    'NAD_1983_CORS96_StatePlane_West_Virginia_North_FIPS_4701_FtUS': 103569,
    'NAD_1983_CORS96_StatePlane_West_Virginia_South_FIPS_4702_FtUS': 103570,
    'NAD_1983_CORS96_StatePlane_Wisconsin_Central_FIPS_4802_Ft_US': 103575,
    'NAD_1983_CORS96_StatePlane_Wisconsin_North_FIPS_4801_Ft_US': 103574,
    'NAD_1983_CORS96_StatePlane_Wisconsin_South_FIPS_4803_Ft_US': 103576,
    'NAD_1983_CORS96_StatePlane_Wyoming_E_Central_FIPS_4902_Ft_US': 103582,
    'NAD_1983_CORS96_StatePlane_Wyoming_East_FIPS_4901_Ft_US': 103581,
    'NAD_1983_CORS96_StatePlane_Wyoming_W_Central_FIPS_4903_Ft_US': 103583,
    'NAD_1983_CORS96_StatePlane_Wyoming_West_FIPS_4904_Ft_US': 103585,
    'NAD_1983_StatePlane_Arizona_Central_FIPS_0202_Feet_Intl': 2223,
    'NAD_1983_StatePlane_Arizona_East_FIPS_0201_Feet_Intl': 2222,
    'NAD_1983_StatePlane_Arizona_West_FIPS_0203_Feet_Intl': 2224,
    'NAD_1983_StatePlane_Michigan_Central_FIPS_2112_Feet_Intl': 2252,
    'NAD_1983_StatePlane_Michigan_North_FIPS_2111_Feet_Intl': 2251,
    'NAD_1983_StatePlane_Michigan_South_FIPS_2113_Feet_Intl': 2253,
    'NAD_1983_StatePlane_Montana_FIPS_2500_Feet_Intl': 2256,
    'NAD_1983_StatePlane_North_Dakota_North_FIPS_3301_Feet_Intl': 2265,
    'NAD_1983_StatePlane_North_Dakota_South_FIPS_3302_Feet_Intl': 2266,
    'NAD_1983_StatePlane_Oregon_North_FIPS_3601_Feet_Intl': 2269,
    'NAD_1983_StatePlane_Oregon_South_FIPS_3602_Feet_Intl': 2270,
    'NAD_1983_StatePlane_South_Carolina_FIPS_3900_Feet_Intl': 2273,
    'NAD_1983_StatePlane_Utah_Central_FIPS_4302_Feet_Intl': 2281,
    'NAD_1983_StatePlane_Utah_North_FIPS_4301_Feet_Intl': 2280,
    'NAD_1983_StatePlane_Utah_South_FIPS_4303_Feet_Intl': 2282,
    'NAD_1983_Maine_2000_Central_Zone': 3463,
    'NAD_1983_Maine_2000_East_Zone': 3072,
    'NAD_1983_Maine_2000_West_Zone': 3074,
    'NAD_1983_StatePlane_Alabama_East_FIPS_0101': 26929,
    'NAD_1983_StatePlane_Alabama_West_FIPS_0102': 26930,
    'NAD_1983_StatePlane_Alaska_1_FIPS_5001': 26931,
    'NAD_1983_StatePlane_Alaska_2_FIPS_5002': 26932,
    'NAD_1983_StatePlane_Alaska_3_FIPS_5003': 26933,
    'NAD_1983_StatePlane_Alaska_4_FIPS_5004': 26934,
    'NAD_1983_StatePlane_Alaska_5_FIPS_5005': 26935,
    'NAD_1983_StatePlane_Alaska_6_FIPS_5006': 26936,
    'NAD_1983_StatePlane_Alaska_7_FIPS_5007': 26937,
    'NAD_1983_StatePlane_Alaska_8_FIPS_5008': 26938,
    'NAD_1983_StatePlane_Alaska_9_FIPS_5009': 26939,
    'NAD_1983_StatePlane_Alaska_10_FIPS_5010': 26940,
    'NAD_1983_StatePlane_Arizona_Central_FIPS_0202': 26949,
    'NAD_1983_StatePlane_Arizona_East_FIPS_0201': 26948,
    'NAD_1983_StatePlane_Arizona_West_FIPS_0203': 26950,
    'NAD_1983_StatePlane_Arkansas_North_FIPS_0301': 26951,
    'NAD_1983_StatePlane_Arkansas_South_FIPS_0302': 26952,
    'NAD_1983_StatePlane_California_I_FIPS_0401': 26941,
    'NAD_1983_StatePlane_California_II_FIPS_0402': 26942,
    'NAD_1983_StatePlane_California_III_FIPS_0403': 26943,
    'NAD_1983_StatePlane_California_IV_FIPS_0404': 26944,
    'NAD_1983_StatePlane_California_V_FIPS_0405': 26945,
    'NAD_1983_StatePlane_California_VI_FIPS_0406': 26946,
    'NAD_1983_StatePlane_Colorado_Central_FIPS_0502': 26954,
    'NAD_1983_StatePlane_Colorado_North_FIPS_0501': 26953,
    'NAD_1983_StatePlane_Colorado_South_FIPS_0503': 26955,
    'NAD_1983_StatePlane_Connecticut_FIPS_0600': 26956,
    'NAD_1983_StatePlane_Delaware_FIPS_0700': 26957,
    'NAD_1983_StatePlane_Florida_East_FIPS_0901': 26958,
    'NAD_1983_StatePlane_Florida_North_FIPS_0903': 26960,
    'NAD_1983_StatePlane_Florida_West_FIPS_0902': 26959,
    'NAD_1983_StatePlane_Georgia_East_FIPS_1001': 26966,
    'NAD_1983_StatePlane_Georgia_West_FIPS_1002': 26967,
    'NAD_1983_StatePlane_Guam_FIPS_5400': 65161,
    'NAD_1983_StatePlane_Hawaii_1_FIPS_5101': 26961,
    'NAD_1983_StatePlane_Hawaii_2_FIPS_5102': 26962,
    'NAD_1983_StatePlane_Hawaii_3_FIPS_5103': 26963,
    'NAD_1983_StatePlane_Hawaii_4_FIPS_5104': 26964,
    'NAD_1983_StatePlane_Hawaii_5_FIPS_5105': 26965,
    'NAD_1983_StatePlane_Idaho_Central_FIPS_1102': 26969,
    'NAD_1983_StatePlane_Idaho_East_FIPS_1101': 26968,
    'NAD_1983_StatePlane_Idaho_West_FIPS_1103': 26970,
    'NAD_1983_StatePlane_Illinois_East_FIPS_1201': 26971,
    'NAD_1983_StatePlane_Illinois_West_FIPS_1202': 26972,
    'NAD_1983_StatePlane_Indiana_East_FIPS_1301': 26973,
    'NAD_1983_StatePlane_Indiana_West_FIPS_1302': 26974,
    'NAD_1983_StatePlane_Iowa_North_FIPS_1401': 26975,
    'NAD_1983_StatePlane_Iowa_South_FIPS_1402': 26976,
    'NAD_1983_StatePlane_Kansas_North_FIPS_1501': 26977,
    'NAD_1983_StatePlane_Kansas_South_FIPS_1502': 26978,
    'NAD_1983_StatePlane_Kentucky_FIPS_1600': 3088,
    'NAD_1983_StatePlane_Kentucky_North_FIPS_1601': 2205,
    'NAD_1983_StatePlane_Kentucky_South_FIPS_1602': 26980,
    'NAD_1983_StatePlane_Louisiana_North_FIPS_1701': 26981,
    'NAD_1983_StatePlane_Louisiana_Offshore_FIPS_1703': 32199,
    'NAD_1983_StatePlane_Louisiana_South_FIPS_1702': 26982,
    'NAD_1983_StatePlane_Maine_East_FIPS_1801': 26983,
    'NAD_1983_StatePlane_Maine_West_FIPS_1802': 26984,
    'NAD_1983_StatePlane_Maryland_FIPS_1900': 26985,
    'NAD_1983_StatePlane_Massachusetts_Mainland_FIPS_2001': 26986,
    'NAD_1983_StatePlane_Massachusetts_Island_FIPS_2002': 26987,
    'NAD_1983_StatePlane_Michigan_Central_FIPS_2112': 26989,
    'NAD_1983_StatePlane_Michigan_North_FIPS_2111': 26988,
    'NAD_1983_StatePlane_Michigan_South_FIPS_2113': 26990,
    'NAD_1983_StatePlane_Minnesota_Central_FIPS_2202': 26992,
    'NAD_1983_StatePlane_Minnesota_North_FIPS_2201': 26991,
    'NAD_1983_StatePlane_Minnesota_South_FIPS_2203': 26993,
    'NAD_1983_StatePlane_Mississippi_East_FIPS_2301': 26994,
    'NAD_1983_StatePlane_Mississippi_West_FIPS_2302': 26995,
    'NAD_1983_StatePlane_Missouri_Central_FIPS_2402': 26997,
    'NAD_1983_StatePlane_Missouri_East_FIPS_2401': 26996,
    'NAD_1983_StatePlane_Missouri_West_FIPS_2403': 26998,
    'NAD_1983_StatePlane_Montana_FIPS_2500': 32100,
    'NAD_1983_StatePlane_Nebraska_FIPS_2600': 32104,
    'NAD_1983_StatePlane_Nevada_Central_FIPS_2702': 32108,
    'NAD_1983_StatePlane_Nevada_East_FIPS_2701': 32107,
    'NAD_1983_StatePlane_Nevada_West_FIPS_2703': 32109,
    'NAD_1983_StatePlane_New_Hampshire_FIPS_2800': 32110,
    'NAD_1983_StatePlane_New_Jersey_FIPS_2900': 32111,
    'NAD_1983_StatePlane_New_Mexico_Central_FIPS_3002': 32113,
    'NAD_1983_StatePlane_New_Mexico_East_FIPS_3001': 32112,
    'NAD_1983_StatePlane_New_Mexico_West_FIPS_3003': 32114,
    'NAD_1983_StatePlane_New_York_Central_FIPS_3102': 32116,
    'NAD_1983_StatePlane_New_York_East_FIPS_3101': 32115,
    'NAD_1983_StatePlane_New_York_Long_Island_FIPS_3104': 32118,
    'NAD_1983_StatePlane_New_York_West_FIPS_3103': 32117,
    'NAD_1983_StatePlane_North_Carolina_FIPS_3200': 32119,
    'NAD_1983_StatePlane_North_Dakota_North_FIPS_3301': 32120,
    'NAD_1983_StatePlane_North_Dakota_South_FIPS_3302': 32121,
    'NAD_1983_StatePlane_Ohio_North_FIPS_3401': 32122,
    'NAD_1983_StatePlane_Ohio_South_FIPS_3402': 32123,
    'NAD_1983_StatePlane_Oklahoma_North_FIPS_3501': 32124,
    'NAD_1983_StatePlane_Oklahoma_South_FIPS_3502': 32125,
    'NAD_1983_StatePlane_Oregon_North_FIPS_3601': 32126,
    'NAD_1983_StatePlane_Oregon_South_FIPS_3602': 32127,
    'NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701': 32128,
    'NAD_1983_StatePlane_Pennsylvania_South_FIPS_3702': 32129,
    'NAD_1983_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200': 32161,
    'NAD_1983_StatePlane_Rhode_Island_FIPS_3800': 32130,
    'NAD_1983_StatePlane_South_Carolina_FIPS_3900': 32133,
    'NAD_1983_StatePlane_South_Dakota_North_FIPS_4001': 32134,
    'NAD_1983_StatePlane_South_Dakota_South_FIPS_4002': 32135,
    'NAD_1983_StatePlane_Tennessee_FIPS_4100': 32136,
    'NAD_1983_StatePlane_Texas_Central_FIPS_4203': 32139,
    'NAD_1983_StatePlane_Texas_North_Central_FIPS_4202': 32138,
    'NAD_1983_StatePlane_Texas_North_FIPS_4201': 32137,
    'NAD_1983_StatePlane_Texas_South_Central_FIPS_4204': 32140,
    'NAD_1983_StatePlane_Texas_South_FIPS_4205': 32141,
    'NAD_1983_StatePlane_Utah_Central_FIPS_4302': 32143,
    'NAD_1983_StatePlane_Utah_North_FIPS_4301': 32142,
    'NAD_1983_StatePlane_Utah_South_FIPS_4303': 32144,
    'NAD_1983_StatePlane_Vermont_FIPS_4400': 32145,
    'NAD_1983_StatePlane_Virginia_North_FIPS_4501': 32146,
    'NAD_1983_StatePlane_Virginia_South_FIPS_4502': 32147,
    'NAD_1983_StatePlane_Washington_North_FIPS_4601': 32148,
    'NAD_1983_StatePlane_Washington_South_FIPS_4602': 32149,
    'NAD_1983_StatePlane_West_Virginia_North_FIPS_4701': 32150,
    'NAD_1983_StatePlane_West_Virginia_South_FIPS_4702': 32151,
    'NAD_1983_StatePlane_Wisconsin_Central_FIPS_4802': 32153,
    'NAD_1983_StatePlane_Wisconsin_North_FIPS_4801': 32152,
    'NAD_1983_StatePlane_Wisconsin_South_FIPS_4803': 32154,
    'NAD_1983_StatePlane_Wyoming_East_Central_FIPS_4902': 32156,
    'NAD_1983_StatePlane_Wyoming_East_FIPS_4901': 32155,
    'NAD_1983_StatePlane_Wyoming_West_Central_FIPS_4903': 32157,
    'NAD_1983_StatePlane_Wyoming_West_FIPS_4904': 32158,
    'NAD_1983_PA11_StatePlane_Hawaii_1_FIPS_5101': 102520,
    'NAD_1983_PA11_StatePlane_Hawaii_2_FIPS_5102': 102521,
    'NAD_1983_PA11_StatePlane_Hawaii_3_FIPS_5103': 102522,
    'NAD_1983_PA11_StatePlane_Hawaii_4_FIPS_5104': 102523,
    'NAD_1983_PA11_StatePlane_Hawaii_5_FIPS_5105': 102524,
    'NAD_1983_PA11_StatePlane_Hawaii_1_FIPS_5101_Feet': 102525,
    'NAD_1983_PA11_StatePlane_Hawaii_2_FIPS_5102_Feet': 102526,
    'NAD_1983_PA11_StatePlane_Hawaii_3_FIPS_5103_Feet': 102527,
    'NAD_1983_PA11_StatePlane_Hawaii_4_FIPS_5104_Feet': 102528,
    'NAD_1983_PA11_StatePlane_Hawaii_5_FIPS_5105_Feet': 102529,
    'NAD_1983_StatePlane_Alabama_East_FIPS_0101_Feet': 102629,
    'NAD_1983_StatePlane_Alabama_West_FIPS_0102_Feet': 102630,
    'NAD_1983_StatePlane_Alaska_1_FIPS_5001_Feet': 102631,
    'NAD_1983_StatePlane_Alaska_2_FIPS_5002_Feet': 102632,
    'NAD_1983_StatePlane_Alaska_3_FIPS_5003_Feet': 102633,
    'NAD_1983_StatePlane_Alaska_4_FIPS_5004_Feet': 102634,
    'NAD_1983_StatePlane_Alaska_5_FIPS_5005_Feet': 102635,
    'NAD_1983_StatePlane_Alaska_6_FIPS_5006_Feet': 102636,
    'NAD_1983_StatePlane_Alaska_7_FIPS_5007_Feet': 102637,
    'NAD_1983_StatePlane_Alaska_8_FIPS_5008_Feet': 102638,
    'NAD_1983_StatePlane_Alaska_9_FIPS_5009_Feet': 102639,
    'NAD_1983_StatePlane_Alaska_10_FIPS_5010_Feet': 102640,
    'NAD_1983_StatePlane_Arizona_Central_FIPS_0202_Feet': 102649,
    'NAD_1983_StatePlane_Arizona_East_FIPS_0201_Feet': 102648,
    'NAD_1983_StatePlane_Arizona_West_FIPS_0203_Feet': 102650,
    'NAD_1983_StatePlane_Arkansas_North_FIPS_0301_Feet': 3433,
    'NAD_1983_StatePlane_Arkansas_South_FIPS_0302_Feet': 3434,
    'NAD_1983_StatePlane_California_I_FIPS_0401_Feet': 2225,
    'NAD_1983_StatePlane_California_II_FIPS_0402_Feet': 2226,
    'NAD_1983_StatePlane_California_III_FIPS_0403_Feet': 2227,
    'NAD_1983_StatePlane_California_IV_FIPS_0404_Feet': 2228,
    'NAD_1983_StatePlane_California_V_FIPS_0405_Feet': 2229,
    'NAD_1983_StatePlane_California_VI_FIPS_0406_Feet': 2230,
    'NAD_1983_StatePlane_Colorado_Central_FIPS_0502_Feet': 2232,
    'NAD_1983_StatePlane_Colorado_North_FIPS_0501_Feet': 2231,
    'NAD_1983_StatePlane_Colorado_South_FIPS_0503_Feet': 2233,
    'NAD_1983_StatePlane_Connecticut_FIPS_0600_Feet': 2234,
    'NAD_1983_StatePlane_Delaware_FIPS_0700_Feet': 2235,
    'NAD_1983_StatePlane_Florida_East_FIPS_0901_Feet': 2236,
    'NAD_1983_StatePlane_Florida_North_FIPS_0903_Feet': 2238,
    'NAD_1983_StatePlane_Florida_West_FIPS_0902_Feet': 2237,
    'NAD_1983_StatePlane_Georgia_East_FIPS_1001_Feet': 2239,
    'NAD_1983_StatePlane_Georgia_West_FIPS_1002_Feet': 2240,
    'NAD_1983_StatePlane_Guam_FIPS_5400_Feet': 102766,
    'NAD_1983_StatePlane_Hawaii_1_FIPS_5101_Feet': 102661,
    'NAD_1983_StatePlane_Hawaii_2_FIPS_5102_Feet': 102662,
    'NAD_1983_StatePlane_Hawaii_3_FIPS_5103_Feet': 3759,
    'NAD_1983_StatePlane_Hawaii_4_FIPS_5104_Feet': 102664,
    'NAD_1983_StatePlane_Hawaii_5_FIPS_5105_Feet': 102665,
    'NAD_1983_StatePlane_Idaho_Central_FIPS_1102_Feet': 2242,
    'NAD_1983_StatePlane_Idaho_East_FIPS_1101_Feet': 2241,
    'NAD_1983_StatePlane_Idaho_West_FIPS_1103_Feet': 2243,
    'NAD_1983_StatePlane_Illinois_East_FIPS_1201_Feet': 3435,
    'NAD_1983_StatePlane_Illinois_West_FIPS_1202_Feet': 3436,
    'NAD_1983_StatePlane_Indiana_East_FIPS_1301_Feet': 2965,
    'NAD_1983_StatePlane_Indiana_West_FIPS_1302_Feet': 2966,
    'NAD_1983_StatePlane_Iowa_North_FIPS_1401_Feet': 3417,
    'NAD_1983_StatePlane_Iowa_South_FIPS_1402_Feet': 3418,
    'NAD_1983_StatePlane_Kansas_North_FIPS_1501_Feet': 3419,
    'NAD_1983_StatePlane_Kansas_South_FIPS_1502_Feet': 3420,
    'NAD_1983_StatePlane_Kentucky_FIPS_1600_Feet': 3089,
    'NAD_1983_StatePlane_Kentucky_North_FIPS_1601_Feet': 2246,
    'NAD_1983_StatePlane_Kentucky_South_FIPS_1602_Feet': 2247,
    'NAD_1983_StatePlane_Louisiana_North_FIPS_1701_Feet': 3451,
    'NAD_1983_StatePlane_Louisiana_Offshore_FIPS_1703_Feet': 3453,
    'NAD_1983_StatePlane_Louisiana_South_FIPS_1702_Feet': 3452,
    'NAD_1983_StatePlane_Maine_East_FIPS_1801_Feet': 26847,
    'NAD_1983_StatePlane_Maine_West_FIPS_1802_Feet': 26848,
    'NAD_1983_StatePlane_Maryland_FIPS_1900_Feet': 2248,
    'NAD_1983_StatePlane_Massachusetts_Mainland_FIPS_2001_Feet': 2249,
    'NAD_1983_StatePlane_Massachusetts_Island_FIPS_2002_Feet': 2250,
    'NAD_1983_StatePlane_Michigan_Central_FIPS_2112_Feet': 102689,
    'NAD_1983_StatePlane_Michigan_North_FIPS_2111_Feet': 102688,
    'NAD_1983_StatePlane_Michigan_South_FIPS_2113_Feet': 102690,
    'NAD_1983_StatePlane_Minnesota_Central_FIPS_2202_Feet': 26850,
    'NAD_1983_StatePlane_Minnesota_North_FIPS_2201_Feet': 26849,
    'NAD_1983_StatePlane_Minnesota_South_FIPS_2203_Feet': 26851,
    'NAD_1983_StatePlane_Mississippi_East_FIPS_2301_Feet': 2254,
    'NAD_1983_StatePlane_Mississippi_West_FIPS_2302_Feet': 2255,
    'NAD_1983_StatePlane_Missouri_Central_FIPS_2402_Feet': 102697,
    'NAD_1983_StatePlane_Missouri_East_FIPS_2401_Feet': 102696,
    'NAD_1983_StatePlane_Missouri_West_FIPS_2403_Feet': 102698,
    'NAD_1983_StatePlane_Montana_FIPS_2500_Feet': 102700,
    'NAD_1983_StatePlane_Nebraska_FIPS_2600_Feet': 26852,
    'NAD_1983_StatePlane_Nevada_Central_FIPS_2702_Feet': 3422,
    'NAD_1983_StatePlane_Nevada_East_FIPS_2701_Feet': 3421,
    'NAD_1983_StatePlane_Nevada_West_FIPS_2703_Feet': 3423,
    'NAD_1983_StatePlane_New_Hampshire_FIPS_2800_Feet': 3437,
    'NAD_1983_StatePlane_New_Jersey_FIPS_2900_Feet': 3424,
    'NAD_1983_StatePlane_New_Mexico_Central_FIPS_3002_Feet': 2258,
    'NAD_1983_StatePlane_New_Mexico_East_FIPS_3001_Feet': 2257,
    'NAD_1983_StatePlane_New_Mexico_West_FIPS_3003_Feet': 2259,
    'NAD_1983_StatePlane_New_York_Central_FIPS_3102_Feet': 2261,
    'NAD_1983_StatePlane_New_York_East_FIPS_3101_Feet': 2260,
    'NAD_1983_StatePlane_New_York_Long_Island_FIPS_3104_Feet': 2263,
    'NAD_1983_StatePlane_New_York_West_FIPS_3103_Feet': 2262,
    'NAD_1983_StatePlane_North_Carolina_FIPS_3200_Feet': 2264,
    'NAD_1983_StatePlane_North_Dakota_North_FIPS_3301_Feet': 102720,
    'NAD_1983_StatePlane_North_Dakota_South_FIPS_3302_Feet': 102721,
    'NAD_1983_StatePlane_Ohio_North_FIPS_3401_Feet': 3734,
    'NAD_1983_StatePlane_Ohio_South_FIPS_3402_Feet': 3735,
    'NAD_1983_StatePlane_Oklahoma_North_FIPS_3501_Feet': 2267,
    'NAD_1983_StatePlane_Oklahoma_South_FIPS_3502_Feet': 2268,
    'NAD_1983_StatePlane_Oregon_North_FIPS_3601_Feet': 102726,
    'NAD_1983_StatePlane_Oregon_South_FIPS_3602_Feet': 102727,
    'NAD_1983_StatePlane_Pennsylvania_North_FIPS_3701_Feet': 2271,
    'NAD_1983_StatePlane_Pennsylvania_South_FIPS_3702_Feet': 2272,
    'NAD_1983_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200_Feet': 102761,
    'NAD_1983_StatePlane_Rhode_Island_FIPS_3800_Feet': 3438,
    'NAD_1983_StatePlane_South_Carolina_FIPS_3900_Feet': 102733,
    'NAD_1983_StatePlane_South_Dakota_North_FIPS_4001_Feet': 4457,
    'NAD_1983_StatePlane_South_Dakota_South_FIPS_4002_Feet': 3455,
    'NAD_1983_StatePlane_Tennessee_FIPS_4100_Feet': 2274,
    'NAD_1983_StatePlane_Texas_Central_FIPS_4203_Feet': 2277,
    'NAD_1983_StatePlane_Texas_North_Central_FIPS_4202_Feet': 2276,
    'NAD_1983_StatePlane_Texas_North_FIPS_4201_Feet': 2275,
    'NAD_1983_StatePlane_Texas_South_Central_FIPS_4204_Feet': 2278,
    'NAD_1983_StatePlane_Texas_South_FIPS_4205_Feet': 2279,
    'NAD_1983_StatePlane_Utah_Central_FIPS_4302_Feet': 3566,
    'NAD_1983_StatePlane_Utah_North_FIPS_4301_Feet': 3560,
    'NAD_1983_StatePlane_Utah_South_FIPS_4303_Feet': 3567,
    'NAD_1983_StatePlane_Vermont_FIPS_4400_Feet': 5646,
    'NAD_1983_StatePlane_Virginia_North_FIPS_4501_Feet': 2283,
    'NAD_1983_StatePlane_Virginia_South_FIPS_4502_Feet': 2284,
    'NAD_1983_StatePlane_Washington_North_FIPS_4601_Feet': 2285,
    'NAD_1983_StatePlane_Washington_South_FIPS_4602_Feet': 2286,
    'NAD_1983_StatePlane_West_Virginia_North_FIPS_4701_Feet': 26853,
    'NAD_1983_StatePlane_West_Virginia_South_FIPS_4702_Feet': 26854,
    'NAD_1983_StatePlane_Wisconsin_Central_FIPS_4802_Feet': 2288,
    'NAD_1983_StatePlane_Wisconsin_North_FIPS_4801_Feet': 2287,
    'NAD_1983_StatePlane_Wisconsin_South_FIPS_4803_Feet': 2289,
    'NAD_1983_StatePlane_Wyoming_East_Central_FIPS_4902_Feet': 3737,
    'NAD_1983_StatePlane_Wyoming_East_FIPS_4901_Feet': 3736,
    'NAD_1983_StatePlane_Wyoming_West_Central_FIPS_4903_Feet': 3738,
    'NAD_1983_StatePlane_Wyoming_West_FIPS_4904_Feet': 3739,
    'NAD_1983_HARN_StatePlane_Arizona_Central_FIPS_0202_Feet_Intl': 2868,
    'NAD_1983_HARN_StatePlane_Arizona_East_FIPS_0201_Feet_Intl': 2867,
    'NAD_1983_HARN_StatePlane_Arizona_West_FIPS_0203_Feet_Intl': 2869,
    'NAD_1983_HARN_StatePlane_Michigan_Central_FIPS_2112_Feet_Intl': 2897,
    'NAD_1983_HARN_StatePlane_Michigan_North_FIPS_2111_Feet_Intl': 2896,
    'NAD_1983_HARN_StatePlane_Michigan_South_FIPS_2113_Feet_Intl': 2898,
    'NAD_1983_HARN_StatePlane_Montana_FIPS_2500_Feet_Intl': 2901,
    'NAD_1983_HARN_StatePlane_North_Dakota_North_FIPS_3301_Feet_Intl': 2909,
    'NAD_1983_HARN_StatePlane_North_Dakota_South_FIPS_3302_Feet_Intl': 2910,
    'NAD_1983_HARN_StatePlane_Oregon_North_FIPS_3601_Feet_Intl': 2913,
    'NAD_1983_HARN_StatePlane_Oregon_South_FIPS_3602_Feet_Intl': 2914,
    'NAD_1983_HARN_StatePlane_South_Carolina_FIPS_3900_Feet_Intl': 3361,
    'NAD_1983_HARN_StatePlane_Utah_Central_FIPS_4302_Feet_Intl': 2922,
    'NAD_1983_HARN_StatePlane_Utah_North_FIPS_4301_Feet_Intl': 2921,
    'NAD_1983_HARN_StatePlane_Utah_South_FIPS_4303_Feet_Intl': 2923,
    'NAD_1983_HARN_Maine_2000_Central_Zone': 3464,
    'NAD_1983_HARN_Maine_2000_East_Zone': 3075,
    'NAD_1983_HARN_Maine_2000_West_Zone': 3077,
    'NAD_1983_HARN_StatePlane_Alabama_East_FIPS_0101': 2759,
    'NAD_1983_HARN_StatePlane_Alabama_West_FIPS_0102': 2760,
    'NAD_1983_HARN_StatePlane_Arizona_Central_FIPS_0202': 2762,
    'NAD_1983_HARN_StatePlane_Arizona_East_FIPS_0201': 2761,
    'NAD_1983_HARN_StatePlane_Arizona_West_FIPS_0203': 2763,
    'NAD_1983_HARN_StatePlane_Arkansas_North_FIPS_0301': 2764,
    'NAD_1983_HARN_StatePlane_Arkansas_South_FIPS_0302': 2765,
    'NAD_1983_HARN_StatePlane_California_I_FIPS_0401': 2766,
    'NAD_1983_HARN_StatePlane_California_II_FIPS_0402': 2767,
    'NAD_1983_HARN_StatePlane_California_III_FIPS_0403': 2768,
    'NAD_1983_HARN_StatePlane_California_IV_FIPS_0404': 2769,
    'NAD_1983_HARN_StatePlane_California_V_FIPS_0405': 2770,
    'NAD_1983_HARN_StatePlane_California_VI_FIPS_0406': 2771,
    'NAD_1983_HARN_StatePlane_Colorado_Central_FIPS_0502': 2773,
    'NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501': 2772,
    'NAD_1983_HARN_StatePlane_Colorado_South_FIPS_0503': 2774,
    'NAD_1983_HARN_StatePlane_Connecticut_FIPS_0600': 2775,
    'NAD_1983_HARN_StatePlane_Delaware_FIPS_0700': 2776,
    'NAD_1983_HARN_StatePlane_Florida_East_FIPS_0901': 2777,
    'NAD_1983_HARN_StatePlane_Florida_North_FIPS_0903': 2779,
    'NAD_1983_HARN_StatePlane_Florida_West_FIPS_0902': 2778,
    'NAD_1983_HARN_StatePlane_Georgia_East_FIPS_1001': 2780,
    'NAD_1983_HARN_StatePlane_Georgia_West_FIPS_1002': 2781,
    'NAD_1983_HARN_StatePlane_Hawaii_1_FIPS_5101': 2782,
    'NAD_1983_HARN_StatePlane_Hawaii_2_FIPS_5102': 2783,
    'NAD_1983_HARN_StatePlane_Hawaii_3_FIPS_5103': 2784,
    'NAD_1983_HARN_StatePlane_Hawaii_4_FIPS_5104': 2785,
    'NAD_1983_HARN_StatePlane_Hawaii_5_FIPS_5105': 2786,
    'NAD_1983_HARN_StatePlane_Idaho_Central_FIPS_1102': 2788,
    'NAD_1983_HARN_StatePlane_Idaho_East_FIPS_1101': 2787,
    'NAD_1983_HARN_StatePlane_Idaho_West_FIPS_1103': 2789,
    'NAD_1983_HARN_StatePlane_Illinois_East_FIPS_1201': 2790,
    'NAD_1983_HARN_StatePlane_Illinois_West_FIPS_1202': 2791,
    'NAD_1983_HARN_StatePlane_Indiana_East_FIPS_1301': 2792,
    'NAD_1983_HARN_StatePlane_Indiana_West_FIPS_1302': 2793,
    'NAD_1983_HARN_StatePlane_Iowa_North_FIPS_1401': 2794,
    'NAD_1983_HARN_StatePlane_Iowa_South_FIPS_1402': 2795,
    'NAD_1983_HARN_StatePlane_Kansas_North_FIPS_1501': 2796,
    'NAD_1983_HARN_StatePlane_Kansas_South_FIPS_1502': 2797,
    'NAD_1983_HARN_StatePlane_Kentucky_FIPS_1600': 3090,
    'NAD_1983_HARN_StatePlane_Kentucky_North_FIPS_1601': 2798,
    'NAD_1983_HARN_StatePlane_Kentucky_South_FIPS_1602': 2799,
    'NAD_1983_HARN_StatePlane_Louisiana_North_FIPS_1701': 2800,
    'NAD_1983_HARN_StatePlane_Louisiana_South_FIPS_1702': 2801,
    'NAD_1983_HARN_StatePlane_Maine_East_FIPS_1801': 2802,
    'NAD_1983_HARN_StatePlane_Maine_West_FIPS_1802': 2803,
    'NAD_1983_HARN_StatePlane_Maryland_FIPS_1900': 2804,
    'NAD_1983_HARN_StatePlane_Massachusetts_Mainland_FIPS_2001': 2805,
    'NAD_1983_HARN_StatePlane_Massachusetts_Island_FIPS_2002': 2806,
    'NAD_1983_HARN_StatePlane_Michigan_Central_FIPS_2112': 2808,
    'NAD_1983_HARN_StatePlane_Michigan_North_FIPS_2111': 2807,
    'NAD_1983_HARN_StatePlane_Michigan_South_FIPS_2113': 2809,
    'NAD_1983_HARN_StatePlane_Minnesota_Central_FIPS_2202': 2811,
    'NAD_1983_HARN_StatePlane_Minnesota_North_FIPS_2201': 2810,
    'NAD_1983_HARN_StatePlane_Minnesota_South_FIPS_2203': 2812,
    'NAD_1983_HARN_StatePlane_Mississippi_East_FIPS_2301': 2813,
    'NAD_1983_HARN_StatePlane_Mississippi_West_FIPS_2302': 2814,
    'NAD_1983_HARN_StatePlane_Missouri_Central_FIPS_2402': 2816,
    'NAD_1983_HARN_StatePlane_Missouri_East_FIPS_2401': 2815,
    'NAD_1983_HARN_StatePlane_Missouri_West_FIPS_2403': 2817,
    'NAD_1983_HARN_StatePlane_Montana_FIPS_2500': 2818,
    'NAD_1983_HARN_StatePlane_Nebraska_FIPS_2600': 2819,
    'NAD_1983_HARN_StatePlane_Nevada_Central_FIPS_2702': 2821,
    'NAD_1983_HARN_StatePlane_Nevada_East_FIPS_2701': 2820,
    'NAD_1983_HARN_StatePlane_Nevada_West_FIPS_2703': 2822,
    'NAD_1983_HARN_StatePlane_New_Hampshire_FIPS_2800': 2823,
    'NAD_1983_HARN_StatePlane_New_Jersey_FIPS_2900': 2824,
    'NAD_1983_HARN_StatePlane_New_Mexico_Central_FIPS_3002': 2826,
    'NAD_1983_HARN_StatePlane_New_Mexico_East_FIPS_3001': 2825,
    'NAD_1983_HARN_StatePlane_New_Mexico_West_FIPS_3003': 2827,
    'NAD_1983_HARN_StatePlane_New_York_Central_FIPS_3102': 2829,
    'NAD_1983_HARN_StatePlane_New_York_East_FIPS_3101': 2828,
    'NAD_1983_HARN_StatePlane_New_York_Long_Island_FIPS_3104': 2831,
    'NAD_1983_HARN_StatePlane_New_York_West_FIPS_3103': 2830,
    'NAD_1983_HARN_StatePlane_North_Carolina_FIPS_3200': 3358,
    'NAD_1983_HARN_StatePlane_North_Dakota_North_FIPS_3301': 2832,
    'NAD_1983_HARN_StatePlane_North_Dakota_South_FIPS_3302': 2833,
    'NAD_1983_HARN_StatePlane_Ohio_North_FIPS_3401': 2834,
    'NAD_1983_HARN_StatePlane_Ohio_South_FIPS_3402': 2835,
    'NAD_1983_HARN_StatePlane_Oklahoma_North_FIPS_3501': 2836,
    'NAD_1983_HARN_StatePlane_Oklahoma_South_FIPS_3502': 2837,
    'NAD_1983_HARN_StatePlane_Oregon_North_FIPS_3601': 2838,
    'NAD_1983_HARN_StatePlane_Oregon_South_FIPS_3602': 2839,
    'NAD_1983_HARN_StatePlane_Pennsylvania_North_FIPS_3701': 3362,
    'NAD_1983_HARN_StatePlane_Pennsylvania_South_FIPS_3702': 3364,
    'NAD_1983_HARN_StatePlane_Puerto_Rico_Virgin_Islands_FIPS_5200': 2866,
    'NAD_1983_HARN_StatePlane_Rhode_Island_FIPS_3800': 2840,
    'NAD_1983_HARN_StatePlane_South_Carolina_FIPS_3900': 3360,
    'NAD_1983_HARN_StatePlane_South_Dakota_North_FIPS_4001': 2841,
    'NAD_1983_HARN_StatePlane_South_Dakota_South_FIPS_4002': 2842,
    'NAD_1983_HARN_StatePlane_Tennessee_FIPS_4100': 2843,
    'NAD_1983_HARN_StatePlane_Texas_Central_FIPS_4203': 2846,
    'NAD_1983_HARN_StatePlane_Texas_North_Central_FIPS_4202': 2845,
    'NAD_1983_HARN_StatePlane_Texas_North_FIPS_4201': 2844,
    'NAD_1983_HARN_StatePlane_Texas_South_Central_FIPS_4204': 2847,
    'NAD_1983_HARN_StatePlane_Texas_South_FIPS_4205': 2848,
    'NAD_1983_HARN_StatePlane_Utah_Central_FIPS_4302': 2850,
    'NAD_1983_HARN_StatePlane_Utah_North_FIPS_4301': 2849,
    'NAD_1983_HARN_StatePlane_Utah_South_FIPS_4303': 2851,
    'NAD_1983_HARN_StatePlane_Vermont_FIPS_4400': 2852,
    'NAD_1983_HARN_StatePlane_Virginia_North_FIPS_4501': 2853,
    'NAD_1983_HARN_StatePlane_Virginia_South_FIPS_4502': 2854,
    'NAD_1983_HARN_StatePlane_Washington_North_FIPS_4601': 2855,
    'NAD_1983_HARN_StatePlane_Washington_South_FIPS_4602': 2856,
    'NAD_1983_HARN_StatePlane_West_Virginia_North_FIPS_4701': 2857,
    'NAD_1983_HARN_StatePlane_West_Virginia_South_FIPS_4702': 2858,
    'NAD_1983_HARN_StatePlane_Wisconsin_Central_FIPS_4802': 2860,
    'NAD_1983_HARN_StatePlane_Wisconsin_North_FIPS_4801': 2859,
    'NAD_1983_HARN_StatePlane_Wisconsin_South_FIPS_4803': 2861,
    'NAD_1983_HARN_StatePlane_Wyoming_East_Central_FIPS_4902': 2863,
    'NAD_1983_HARN_StatePlane_Wyoming_East_FIPS_4901': 2862,
    'NAD_1983_HARN_StatePlane_Wyoming_West_Central_FIPS_4903': 2864,
    'NAD_1983_HARN_StatePlane_Wyoming_West_FIPS_4904': 2865,
    'COB_NAD83_2007': 102041,
    'NAD_1983_HARN_StatePlane_Arkansas_North_FIPS_0301_Feet': 3441,
    'NAD_1983_HARN_StatePlane_Arkansas_South_FIPS_0302_Feet': 3442,
    'NAD_1983_HARN_StatePlane_California_I_FIPS_0401_Feet': 2870,
    'NAD_1983_HARN_StatePlane_California_II_FIPS_0402_Feet': 2871,
    'NAD_1983_HARN_StatePlane_California_III_FIPS_0403_Feet': 2872,
    'NAD_1983_HARN_StatePlane_California_IV_FIPS_0404_Feet': 2873,
    'NAD_1983_HARN_StatePlane_California_V_FIPS_0405_Feet': 2874,
    'NAD_1983_HARN_StatePlane_California_VI_FIPS_0406_Feet': 2875,
    'NAD_1983_HARN_StatePlane_Colorado_Central_FIPS_0502_Feet': 2877,
    'NAD_1983_HARN_StatePlane_Colorado_North_FIPS_0501_Feet': 2876,
    'NAD_1983_HARN_StatePlane_Colorado_South_FIPS_0503_Feet': 2878,
    'NAD_1983_HARN_StatePlane_Connecticut_FIPS_0600_Feet': 2879,
    'NAD_1983_HARN_StatePlane_Delaware_FIPS_0700_Feet': 2880,
    'NAD_1983_HARN_StatePlane_Florida_East_FIPS_0901_Feet': 2881,
    'NAD_1983_HARN_StatePlane_Florida_North_FIPS_0903_Feet': 2883,
    'NAD_1983_HARN_StatePlane_Florida_West_FIPS_0902_Feet': 2882,
    'NAD_1983_HARN_StatePlane_Georgia_East_FIPS_1001_Feet': 2884,
    'NAD_1983_HARN_StatePlane_Georgia_West_FIPS_1002_Feet': 2885,
    'NAD_1983_HARN_StatePlane_Hawaii_1_FIPS_5101_Feet': 102461,
    'NAD_1983_HARN_StatePlane_Hawaii_2_FIPS_5102_Feet': 102462,
    'NAD_1983_HARN_StatePlane_Hawaii_3_FIPS_5103_Feet': 3760,
    'NAD_1983_HARN_StatePlane_Hawaii_4_FIPS_5104_Feet': 102464,
    'NAD_1983_HARN_StatePlane_Hawaii_5_FIPS_5105_Feet': 102465,
    'NAD_1983_HARN_StatePlane_Idaho_Central_FIPS_1102_Feet': 2887,
    'NAD_1983_HARN_StatePlane_Idaho_East_FIPS_1101_Feet': 2886,
    'NAD_1983_HARN_StatePlane_Idaho_West_FIPS_1103_Feet': 2888,
    'NAD_1983_HARN_StatePlane_Illinois_East_FIPS_1201_Feet': 3443,
    'NAD_1983_HARN_StatePlane_Illinois_West_FIPS_1202_Feet': 3444,
    'NAD_1983_HARN_StatePlane_Indiana_East_FIPS_1301_Feet': 2967,
    'NAD_1983_HARN_StatePlane_Indiana_West_FIPS_1302_Feet': 2968,
    'NAD_1983_HARN_StatePlane_Iowa_North_FIPS_1401_Feet': 3425,
    'NAD_1983_HARN_StatePlane_Iowa_South_FIPS_1402_Feet': 3426,
    'NAD_1983_HARN_StatePlane_Kansas_North_FIPS_1501_Feet': 3427,
    'NAD_1983_HARN_StatePlane_Kansas_South_FIPS_1502_Feet': 3428,
    'NAD_1983_HARN_StatePlane_Kentucky_FIPS_1600_Feet': 3091,
    'NAD_1983_HARN_StatePlane_Kentucky_North_FIPS_1601_Feet': 2891,
    'NAD_1983_HARN_StatePlane_Kentucky_South_FIPS_1602_Feet': 2892,
    'NAD_1983_HARN_StatePlane_Louisiana_North_FIPS_1701_Feet': 3456,
    'NAD_1983_HARN_StatePlane_Louisiana_South_FIPS_1702_Feet': 3457,
    'NAD_1983_HARN_StatePlane_Maine_East_FIPS_1801_Feet': 26855,
    'NAD_1983_HARN_StatePlane_Maine_West_FIPS_1802_Feet': 26856,
    'NAD_1983_HARN_StatePlane_Maryland_FIPS_1900_Feet': 2893,
    'NAD_1983_HARN_StatePlane_Massachusetts_Mainland_FIPS_2001_Feet': 2894,
    'NAD_1983_HARN_StatePlane_Massachusetts_Island_FIPS_2002_Feet': 2895,
    'NAD_1983_HARN_StatePlane_Minnesota_Central_FIPS_2202_Feet': 26858,
    'NAD_1983_HARN_StatePlane_Minnesota_North_FIPS_2201_Feet': 26857,
    'NAD_1983_HARN_StatePlane_Minnesota_South_FIPS_2203_Feet': 26859,
    'NAD_1983_HARN_StatePlane_Mississippi_East_FIPS_2301_Feet': 2899,
    'NAD_1983_HARN_StatePlane_Mississippi_West_FIPS_2302_Feet': 2900,
    'NAD_1983_HARN_StatePlane_Nebraska_FIPS_2600_Feet': 26860,
    'NAD_1983_HARN_StatePlane_Nevada_Central_FIPS_2702_Feet': 3430,
    'NAD_1983_HARN_StatePlane_Nevada_East_FIPS_2701_Feet': 3429,
    'NAD_1983_HARN_StatePlane_Nevada_West_FIPS_2703_Feet': 3431,
    'NAD_1983_HARN_StatePlane_New_Hampshire_FIPS_2800_Feet': 3445,
    'NAD_1983_HARN_StatePlane_New_Jersey_FIPS_2900_Feet': 3432,
    'NAD_1983_HARN_StatePlane_New_Mexico_Central_FIPS_3002_Feet': 2903,
    'NAD_1983_HARN_StatePlane_New_Mexico_East_FIPS_3001_Feet': 2902,
    'NAD_1983_HARN_StatePlane_New_Mexico_West_FIPS_3003_Feet': 2904,
    'NAD_1983_HARN_StatePlane_New_York_Central_FIPS_3102_Feet': 2906,
    'NAD_1983_HARN_StatePlane_New_York_East_FIPS_3101_Feet': 2905,
    'NAD_1983_HARN_StatePlane_New_York_Long_Island_FIPS_3104_Feet': 2908,
    'NAD_1983_HARN_StatePlane_New_York_West_FIPS_3103_Feet': 2907,
    'NAD_1983_HARN_StatePlane_North_Carolina_FIPS_3200_Feet': 3404,
    'NAD_1983_HARN_StatePlane_Ohio_North_FIPS_3401_Feet': 3753,
    'NAD_1983_HARN_StatePlane_Ohio_South_FIPS_3402_Feet': 3754,
    'NAD_1983_HARN_StatePlane_Oklahoma_North_FIPS_3501_Feet': 2911,
    'NAD_1983_HARN_StatePlane_Oklahoma_South_FIPS_3502_Feet': 2912,
    'NAD_1983_HARN_StatePlane_Pennsylvania_North_FIPS_3701_Feet': 3363,
    'NAD_1983_HARN_StatePlane_Pennsylvania_South_FIPS_3702_Feet': 3365,
    'NAD_1983_HARN_StatePlane_Rhode_Island_FIPS_3800_Feet': 3446,
    'NAD_1983_HARN_StatePlane_South_Dakota_North_FIPS_4001_Feet': 3458,
    'NAD_1983_HARN_StatePlane_South_Dakota_South_FIPS_4002_Feet': 3459,
    'NAD_1983_HARN_StatePlane_Tennessee_FIPS_4100_Feet': 2915,
    'NAD_1983_HARN_StatePlane_Texas_Central_FIPS_4203_Feet': 2918,
    'NAD_1983_HARN_StatePlane_Texas_North_Central_FIPS_4202_Feet': 2917,
    'NAD_1983_HARN_StatePlane_Texas_North_FIPS_4201_Feet': 2916,
    'NAD_1983_HARN_StatePlane_Texas_South_Central_FIPS_4204_Feet': 2919,
    'NAD_1983_HARN_StatePlane_Texas_South_FIPS_4205_Feet': 2920,
    'NAD_1983_HARN_StatePlane_Utah_Central_FIPS_4302_Feet': 3569,
    'NAD_1983_HARN_StatePlane_Utah_North_FIPS_4301_Feet': 3568,
    'NAD_1983_HARN_StatePlane_Utah_South_FIPS_4303_Feet': 3570,
    'NAD_1983_HARN_StatePlane_Vermont_FIPS_4400_Ft_US': 5654,
    'NAD_1983_HARN_StatePlane_Virginia_North_FIPS_4501_Feet': 2924,
    'NAD_1983_HARN_StatePlane_Virginia_South_FIPS_4502_Feet': 2925,
    'NAD_1983_HARN_StatePlane_Washington_North_FIPS_4601_Feet': 2926,
    'NAD_1983_HARN_StatePlane_Washington_South_FIPS_4602_Feet': 2927,
    'NAD_1983_HARN_StatePlane_West_Virginia_North_FIPS_4701_Feet': 26861,
    'NAD_1983_HARN_StatePlane_West_Virginia_South_FIPS_4702_Feet': 26862,
    'NAD_1983_HARN_StatePlane_Wisconsin_Central_FIPS_4802_Feet': 2929,
    'NAD_1983_HARN_StatePlane_Wisconsin_North_FIPS_4801_Feet': 2928,
    'NAD_1983_HARN_StatePlane_Wisconsin_South_FIPS_4803_Feet': 2930,
    'NAD_1983_HARN_StatePlane_Wyoming_East_Central_FIPS_4902_Feet': 3756,
    'NAD_1983_HARN_StatePlane_Wyoming_East_FIPS_4901_Feet': 3755,
    'NAD_1983_HARN_StatePlane_Wyoming_West_Central_FIPS_4903_Feet': 3757,
    'NAD_1983_HARN_StatePlane_Wyoming_West_FIPS_4904_Feet': 3758,
    'NAD_1983_NSRS2007_StatePlane_Arizona_Central_FIPS_0202_Ft_Intl': 3479,
    'NAD_1983_NSRS2007_StatePlane_Arizona_East_FIPS_0201_Ft_Intl': 3481,
    'NAD_1983_NSRS2007_StatePlane_Arizona_West_FIPS_0203_Ft_Intl': 3483,
    'NAD_1983_NSRS2007_StatePlane_Michigan_Central_FIPS_2112_Ft_Intl': 3588,
    'NAD_1983_NSRS2007_StatePlane_Michigan_North_FIPS_2111_Ft_Intl': 3590,
    'NAD_1983_NSRS2007_StatePlane_Michigan_South_FIPS_2113_Ft_Intl': 3593,
    'NAD_1983_NSRS2007_StatePlane_Montana_FIPS_2500_Ft_Intl': 3605,
    'NAD_1983_NSRS2007_StatePlane_North_Dakota_North_FIPS_3301_FtI': 3634,
    'NAD_1983_NSRS2007_StatePlane_North_Dakota_South_FIPS_3302_FtI': 3636,
    'NAD_1983_NSRS2007_StatePlane_Oregon_North_FIPS_3601_Ft_Intl': 3646,
    'NAD_1983_NSRS2007_StatePlane_Oregon_South_FIPS_3602_Ft_Intl': 3648,
    'NAD_1983_NSRS2007_StatePlane_South_Carolina_FIPS_3900_Ft_Intl': 3656,
    'NAD_1983_NSRS2007_StatePlane_Utah_Central_FIPS_4302_Ft_Intl': 3676,
    'NAD_1983_NSRS2007_StatePlane_Utah_North_FIPS_4301_Ft_Intl': 3679,
    'NAD_1983_NSRS2007_StatePlane_Utah_South_FIPS_4303_Ft_Intl': 3682,
    'NAD_1983_NSRS2007_Maine_2000_Central_Zone': 3554,
    'NAD_1983_NSRS2007_Maine_2000_East_Zone': 3555,
    'NAD_1983_NSRS2007_Maine_2000_West_Zone': 3556,
    'NAD_1983_NSRS2007_StatePlane_Alabama_East_FIPS_0101': 3465,
    'NAD_1983_NSRS2007_StatePlane_Alabama_West_FIPS_0102': 3466,
    'NAD_1983_NSRS2007_StatePlane_Alaska_1_FIPS_5001': 3468,
    'NAD_1983_NSRS2007_StatePlane_Alaska_2_FIPS_5002': 3469,
    'NAD_1983_NSRS2007_StatePlane_Alaska_3_FIPS_5003': 3470,
    'NAD_1983_NSRS2007_StatePlane_Alaska_4_FIPS_5004': 3471,
    'NAD_1983_NSRS2007_StatePlane_Alaska_5_FIPS_5005': 3472,
    'NAD_1983_NSRS2007_StatePlane_Alaska_6_FIPS_5006': 3473,
    'NAD_1983_NSRS2007_StatePlane_Alaska_7_FIPS_5007': 3474,
    'NAD_1983_NSRS2007_StatePlane_Alaska_8_FIPS_5008': 3475,
    'NAD_1983_NSRS2007_StatePlane_Alaska_9_FIPS_5009': 3476,
    'NAD_1983_NSRS2007_StatePlane_Alaska_10_FIPS_5010': 3477,
    'NAD_1983_NSRS2007_StatePlane_Arizona_Central_FIPS_0202': 3478,
    'NAD_1983_NSRS2007_StatePlane_Arizona_East_FIPS_0201': 3480,
    'NAD_1983_NSRS2007_StatePlane_Arizona_West_FIPS_0203': 3482,
    'NAD_1983_NSRS2007_StatePlane_Arkansas_North_FIPS_0301': 3484,
    'NAD_1983_NSRS2007_StatePlane_Arkansas_South_FIPS_0302': 3486,
    'NAD_1983_NSRS2007_StatePlane_California_I_FIPS_0401': 3489,
    'NAD_1983_NSRS2007_StatePlane_California_II_FIPS_0402': 3491,
    'NAD_1983_NSRS2007_StatePlane_California_III_FIPS_0403': 3493,
    'NAD_1983_NSRS2007_StatePlane_California_IV_FIPS_0404': 3495,
    'NAD_1983_NSRS2007_StatePlane_California_V_FIPS_0405': 3497,
    'NAD_1983_NSRS2007_StatePlane_California_VI_FIPS_0406': 3499,
    'NAD_1983_NSRS2007_StatePlane_Colorado_Central_FIPS_0502': 3501,
    'NAD_1983_NSRS2007_StatePlane_Colorado_North_FIPS_0501': 3503,
    'NAD_1983_NSRS2007_StatePlane_Colorado_South_FIPS_0503': 3505,
    'NAD_1983_NSRS2007_StatePlane_Connecticut_FIPS_0600': 3507,
    'NAD_1983_NSRS2007_StatePlane_Delaware_FIPS_0700': 3509,
    'NAD_1983_NSRS2007_StatePlane_Florida_East_FIPS_0901': 3511,
    'NAD_1983_NSRS2007_StatePlane_Florida_North_FIPS_0903': 3514,
    'NAD_1983_NSRS2007_StatePlane_Florida_West_FIPS_0902': 3516,
    'NAD_1983_NSRS2007_StatePlane_Georgia_East_FIPS_1001': 3518,
    'NAD_1983_NSRS2007_StatePlane_Georgia_West_FIPS_1002': 3520,
    'NAD_1983_NSRS2007_StatePlane_Idaho_Central_FIPS_1102': 3522,
    'NAD_1983_NSRS2007_StatePlane_Idaho_East_FIPS_1101': 3524,
    'NAD_1983_NSRS2007_StatePlane_Idaho_West_FIPS_1103': 3526,
    'NAD_1983_NSRS2007_StatePlane_Illinois_East_FIPS_1201': 3528,
    'NAD_1983_NSRS2007_StatePlane_Illinois_West_FIPS_1202': 3530,
    'NAD_1983_NSRS2007_StatePlane_Indiana_East_FIPS_1301': 3532,
    'NAD_1983_NSRS2007_StatePlane_Indiana_West_FIPS_1302': 3534,
    'NAD_1983_NSRS2007_StatePlane_Iowa_North_FIPS_1401': 3536,
    'NAD_1983_NSRS2007_StatePlane_Iowa_South_FIPS_1402': 3538,
    'NAD_1983_NSRS2007_StatePlane_Kansas_North_FIPS_1501': 3540,
    'NAD_1983_NSRS2007_StatePlane_Kansas_South_FIPS_1502': 3542,
    'NAD_1983_NSRS2007_StatePlane_Kentucky_FIPS_1600': 3546,
    'NAD_1983_NSRS2007_StatePlane_Kentucky_North_FIPS_1601': 3544,
    'NAD_1983_NSRS2007_StatePlane_Kentucky_South_FIPS_1602': 3548,
    'NAD_1983_NSRS2007_StatePlane_Louisiana_North_FIPS_1701': 3550,
    'NAD_1983_NSRS2007_StatePlane_Louisiana_South_FIPS_1702': 3552,
    'NAD_1983_NSRS2007_StatePlane_Maine_East_FIPS_1801': 3557,
    'NAD_1983_NSRS2007_StatePlane_Maine_West_FIPS_1802': 3558,
    'NAD_1983_NSRS2007_StatePlane_Maryland_FIPS_1900': 3559,
    'NAD_1983_NSRS2007_StatePlane_Massachusetts_Mainland_FIPS_2001': 3585,
    'NAD_1983_NSRS2007_StatePlane_Massachusetts_Island_FIPS_2002': 3583,
    'NAD_1983_NSRS2007_StatePlane_Michigan_Central_FIPS_2112': 3587,
    'NAD_1983_NSRS2007_StatePlane_Michigan_North_FIPS_2111': 3589,
    'NAD_1983_NSRS2007_StatePlane_Michigan_South_FIPS_2113': 3592,
    'NAD_1983_NSRS2007_StatePlane_Minnesota_Central_FIPS_2202': 3594,
    'NAD_1983_NSRS2007_StatePlane_Minnesota_North_FIPS_2201': 3595,
    'NAD_1983_NSRS2007_StatePlane_Minnesota_South_FIPS_2203': 3596,
    'NAD_1983_NSRS2007_StatePlane_Mississippi_East_FIPS_2301': 3597,
    'NAD_1983_NSRS2007_StatePlane_Mississippi_West_FIPS_2302': 3599,
    'NAD_1983_NSRS2007_StatePlane_Missouri_Central_FIPS_2402': 3601,
    'NAD_1983_NSRS2007_StatePlane_Missouri_East_FIPS_2401': 3602,
    'NAD_1983_NSRS2007_StatePlane_Missouri_West_FIPS_2403': 3603,
    'NAD_1983_NSRS2007_StatePlane_Montana_FIPS_2500': 3604,
    'NAD_1983_NSRS2007_StatePlane_Nebraska_FIPS_2600': 3606,
    'NAD_1983_NSRS2007_StatePlane_Nevada_Central_FIPS_2702': 3607,
    'NAD_1983_NSRS2007_StatePlane_Nevada_East_FIPS_2701': 3609,
    'NAD_1983_NSRS2007_StatePlane_Nevada_West_FIPS_2703': 3611,
    'NAD_1983_NSRS2007_StatePlane_New_Hampshire_FIPS_2800': 3613,
    'NAD_1983_NSRS2007_StatePlane_New_Jersey_FIPS_2900': 3615,
    'NAD_1983_NSRS2007_StatePlane_New_Mexico_Central_FIPS_3002': 3617,
    'NAD_1983_NSRS2007_StatePlane_New_Mexico_East_FIPS_3001': 3619,
    'NAD_1983_NSRS2007_StatePlane_New_Mexico_West_FIPS_3003': 3621,
    'NAD_1983_NSRS2007_StatePlane_New_York_Central_FIPS_3102': 3623,
    'NAD_1983_NSRS2007_StatePlane_New_York_East_FIPS_3101': 3625,
    'NAD_1983_NSRS2007_StatePlane_New_York_Long_Island_FIPS_3104': 3627,
    'NAD_1983_NSRS2007_StatePlane_New_York_West_FIPS_3103': 3629,
    'NAD_1983_NSRS2007_StatePlane_North_Carolina_FIPS_3200': 3631,
    'NAD_1983_NSRS2007_StatePlane_North_Dakota_North_FIPS_3301': 3633,
    'NAD_1983_NSRS2007_StatePlane_North_Dakota_South_FIPS_3302': 3635,
    'NAD_1983_NSRS2007_StatePlane_Ohio_North_FIPS_3401': 3637,
    'NAD_1983_NSRS2007_StatePlane_Ohio_South_FIPS_3402': 3638,
    'NAD_1983_NSRS2007_StatePlane_Oklahoma_North_FIPS_3501': 3639,
    'NAD_1983_NSRS2007_StatePlane_Oklahoma_South_FIPS_3502': 3641,
    'NAD_1983_NSRS2007_StatePlane_Oregon_North_FIPS_3601': 3645,
    'NAD_1983_NSRS2007_StatePlane_Oregon_South_FIPS_3602': 3647,
    'NAD_1983_NSRS2007_StatePlane_Pennsylvania_North_FIPS_3701': 3649,
    'NAD_1983_NSRS2007_StatePlane_Pennsylvania_South_FIPS_3702': 3651,
    'NAD_1983_NSRS2007_StatePlane_Puerto_Rico_Virgin_Isls_FIPS_5200': 4437,
    'NAD_1983_NSRS2007_StatePlane_Rhode_Island_FIPS_3800': 3653,
    'NAD_1983_NSRS2007_StatePlane_South_Carolina_FIPS_3900': 3655,
    'NAD_1983_NSRS2007_StatePlane_South_Dakota_North_FIPS_4001': 3657,
    'NAD_1983_NSRS2007_StatePlane_South_Dakota_South_FIPS_4002': 3659,
    'NAD_1983_NSRS2007_StatePlane_Tennessee_FIPS_4100': 3661,
    'NAD_1983_NSRS2007_StatePlane_Texas_Central_FIPS_4203': 3663,
    'NAD_1983_NSRS2007_StatePlane_Texas_North_Central_FIPS_4202': 3669,
    'NAD_1983_NSRS2007_StatePlane_Texas_North_FIPS_4201': 3667,
    'NAD_1983_NSRS2007_StatePlane_Texas_South_Central_FIPS_4204': 3673,
    'NAD_1983_NSRS2007_StatePlane_Texas_South_FIPS_4205': 3671,
    'NAD_1983_NSRS2007_StatePlane_Utah_Central_FIPS_4302': 3675,
    'NAD_1983_NSRS2007_StatePlane_Utah_North_FIPS_4301': 3678,
    'NAD_1983_NSRS2007_StatePlane_Utah_South_FIPS_4303': 3681,
    'NAD_1983_NSRS2007_StatePlane_Vermont_FIPS_4400': 3684,
    'NAD_1983_NSRS2007_StatePlane_Virginia_North_FIPS_4501': 3685,
    'NAD_1983_NSRS2007_StatePlane_Virginia_South_FIPS_4502': 3687,
    'NAD_1983_NSRS2007_StatePlane_Washington_North_FIPS_4601': 3689,
    'NAD_1983_NSRS2007_StatePlane_Washington_South_FIPS_4602': 3691,
    'NAD_1983_NSRS2007_StatePlane_West_Virginia_North_FIPS_4701': 3693,
    'NAD_1983_NSRS2007_StatePlane_West_Virginia_South_FIPS_4702': 3694,
    'NAD_1983_NSRS2007_StatePlane_Wisconsin_Central_FIPS_4802': 3695,
    'NAD_1983_NSRS2007_StatePlane_Wisconsin_North_FIPS_4801': 3697,
    'NAD_1983_NSRS2007_StatePlane_Wisconsin_South_FIPS_4803': 3699,
    'NAD_1983_NSRS2007_StatePlane_Wyoming_East_Central_FIPS_4902': 3703,
    'NAD_1983_NSRS2007_StatePlane_Wyoming_East_FIPS_4901': 3702,
    'NAD_1983_NSRS2007_StatePlane_Wyoming_West_Central_FIPS_4903': 3704,
    'NAD_1983_NSRS2007_StatePlane_Wyoming_West_FIPS_4904': 3705,
    'NAD_1983_NSRS2007_StatePlane_Arkansas_North_FIPS_0301_Ft_US': 3485,
    'NAD_1983_NSRS2007_StatePlane_Arkansas_South_FIPS_0302_Ft_US': 3487,
    'NAD_1983_NSRS2007_StatePlane_California_I_FIPS_0401_Ft_US': 3490,
    'NAD_1983_NSRS2007_StatePlane_California_II_FIPS_0402_Ft_US': 3492,
    'NAD_1983_NSRS2007_StatePlane_California_III_FIPS_0403_Ft_US': 3494,
    'NAD_1983_NSRS2007_StatePlane_California_IV_FIPS_0404_Ft_US': 3496,
    'NAD_1983_NSRS2007_StatePlane_California_V_FIPS_0405_Ft_US': 3498,
    'NAD_1983_NSRS2007_StatePlane_California_VI_FIPS_0406_Ft_US': 3500,
    'NAD_1983_NSRS2007_StatePlane_Colorado_Central_FIPS_0502_Ft_US': 3502,
    'NAD_1983_NSRS2007_StatePlane_Colorado_North_FIPS_0501_Ft_US': 3504,
    'NAD_1983_NSRS2007_StatePlane_Colorado_South_FIPS_0503_Ft_US': 3506,
    'NAD_1983_NSRS2007_StatePlane_Connecticut_FIPS_0600_Ft_US': 3508,
    'NAD_1983_NSRS2007_StatePlane_Delaware_FIPS_0700_Ft_US': 3510,
    'NAD_1983_NSRS2007_StatePlane_Florida_East_FIPS_0901_Ft_US': 3512,
    'NAD_1983_NSRS2007_StatePlane_Florida_North_FIPS_0903_Ft_US': 3515,
    'NAD_1983_NSRS2007_StatePlane_Florida_West_FIPS_0902_Ft_US': 3517,
    'NAD_1983_NSRS2007_StatePlane_Georgia_East_FIPS_1001_Ft_US': 3519,
    'NAD_1983_NSRS2007_StatePlane_Georgia_West_FIPS_1002_Ft_US': 3521,
    'NAD_1983_NSRS2007_StatePlane_Idaho_Central_FIPS_1102_Ft_US': 3523,
    'NAD_1983_NSRS2007_StatePlane_Idaho_East_FIPS_1101_Ft_US': 3525,
    'NAD_1983_NSRS2007_StatePlane_Idaho_West_FIPS_1103_Ft_US': 3527,
    'NAD_1983_NSRS2007_StatePlane_Illinois_East_FIPS_1201_Ft_US': 3529,
    'NAD_1983_NSRS2007_StatePlane_Illinois_West_FIPS_1202_Ft_US': 3531,
    'NAD_1983_NSRS2007_StatePlane_Indiana_East_FIPS_1301_Ft_US': 3533,
    'NAD_1983_NSRS2007_StatePlane_Indiana_West_FIPS_1302_Ft_US': 3535,
    'NAD_1983_NSRS2007_StatePlane_Iowa_North_FIPS_1401_Ft_US': 3537,
    'NAD_1983_NSRS2007_StatePlane_Iowa_South_FIPS_1402_Ft_US': 3539,
    'NAD_1983_NSRS2007_StatePlane_Kansas_North_FIPS_1501_Ft_US': 3541,
    'NAD_1983_NSRS2007_StatePlane_Kansas_South_FIPS_1502_Ft_US': 3543,
    'NAD_1983_NSRS2007_StatePlane_Kentucky_FIPS_1600_Ft_US': 3547,
    'NAD_1983_NSRS2007_StatePlane_Kentucky_North_FIPS_1601_Ft_US': 3545,
    'NAD_1983_NSRS2007_StatePlane_Kentucky_South_FIPS_1602_Ft_US': 3549,
    'NAD_1983_NSRS2007_StatePlane_Louisiana_North_FIPS_1701_Ft_US': 3551,
    'NAD_1983_NSRS2007_StatePlane_Louisiana_South_FIPS_1702_Ft_US': 3553,
    'NAD_1983_NSRS2007_StatePlane_Maine_East_FIPS_1801_Ft_US': 26863,
    'NAD_1983_NSRS2007_StatePlane_Maine_West_FIPS_1802_Ft_US': 26864,
    'NAD_1983_NSRS2007_StatePlane_Maryland_FIPS_1900_Ft_US': 3582,
    'NAD_1983_NSRS2007_StatePlane_Massachusetts_Mnld_FIPS_2001_FtUS': 3586,
    'NAD_1983_NSRS2007_StatePlane_Massachusetts_Isl_FIPS_2002_FtUS': 3584,
    'NAD_1983_NSRS2007_StatePlane_Minnesota_Central_FIPS_2202_Ft_US': 26866,
    'NAD_1983_NSRS2007_StatePlane_Minnesota_North_FIPS_2201_Ft_US': 26865,
    'NAD_1983_NSRS2007_StatePlane_Minnesota_South_FIPS_2203_Ft_US': 26867,
    'NAD_1983_NSRS2007_StatePlane_Mississippi_East_FIPS_2301_Ft_US': 3598,
    'NAD_1983_NSRS2007_StatePlane_Mississippi_West_FIPS_2302_Ft_US': 3600,
    'NAD_1983_NSRS2007_StatePlane_Nebraska_FIPS_2600_Ft_US': 26868,
    'NAD_1983_NSRS2007_StatePlane_Nevada_Central_FIPS_2702_Ft_US': 3608,
    'NAD_1983_NSRS2007_StatePlane_Nevada_East_FIPS_2701_Ft_US': 3610,
    'NAD_1983_NSRS2007_StatePlane_Nevada_West_FIPS_2703_Ft_US': 3612,
    'NAD_1983_NSRS2007_StatePlane_New_Hampshire_FIPS_2800_Ft_US': 3614,
    'NAD_1983_NSRS2007_StatePlane_New_Jersey_FIPS_2900_Ft_US': 3616,
    'NAD_1983_NSRS2007_StatePlane_New_Mexico_Central_FIPS_3002_Ft_US': 3618,
    'NAD_1983_NSRS2007_StatePlane_New_Mexico_East_FIPS_3001_Ft_US': 3620,
    'NAD_1983_NSRS2007_StatePlane_New_Mexico_West_FIPS_3003_Ft_US': 3622,
    'NAD_1983_NSRS2007_StatePlane_New_York_Central_FIPS_3102_Ft_US': 3624,
    'NAD_1983_NSRS2007_StatePlane_New_York_East_FIPS_3101_Ft_US': 3626,
    'NAD_1983_NSRS2007_StatePlane_New_York_Long_Isl_FIPS_3104_Ft_US': 3628,
    'NAD_1983_NSRS2007_StatePlane_New_York_West_FIPS_3103_Ft_US': 3630,
    'NAD_1983_NSRS2007_StatePlane_North_Carolina_FIPS_3200_Ft_US': 3632,
    'NAD_1983_NSRS2007_StatePlane_Ohio_North_FIPS_3401_Ft_US': 3728,
    'NAD_1983_NSRS2007_StatePlane_Ohio_South_FIPS_3402_Ft_US': 3729,
    'NAD_1983_NSRS2007_StatePlane_Oklahoma_North_FIPS_3501_Ft_US': 3640,
    'NAD_1983_NSRS2007_StatePlane_Oklahoma_South_FIPS_3502_Ft_US': 3642,
    'NAD_1983_NSRS2007_StatePlane_Pennsylvania_North_FIPS_3701_Ft_US': 3650,
    'NAD_1983_NSRS2007_StatePlane_Pennsylvania_South_FIPS_3702_Ft_US': 3652,
    'NAD_1983_NSRS2007_StatePlane_Rhode_Island_FIPS_3800_Ft_US': 3654,
    'NAD_1983_NSRS2007_StatePlane_South_Dakota_North_FIPS_4001_Ft_US': 3658,
    'NAD_1983_NSRS2007_StatePlane_South_Dakota_South_FIPS_4002_Ft_US': 3660,
    'NAD_1983_NSRS2007_StatePlane_Tennessee_FIPS_4100_Ft_US': 3662,
    'NAD_1983_NSRS2007_StatePlane_Texas_Central_FIPS_4203_Ft_US': 3664,
    'NAD_1983_NSRS2007_StatePlane_Texas_North_Central_FIPS_4202_FtUS': 3670,
    'NAD_1983_NSRS2007_StatePlane_Texas_North_FIPS_4201_Ft_US': 3668,
    'NAD_1983_NSRS2007_StatePlane_Texas_South_Central_FIPS_4204_FtUS': 3674,
    'NAD_1983_NSRS2007_StatePlane_Texas_South_FIPS_4205_Ft_US': 3672,
    'NAD_1983_NSRS2007_StatePlane_Utah_Central_FIPS_4302_Ft_US': 3677,
    'NAD_1983_NSRS2007_StatePlane_Utah_North_FIPS_4301_Ft_US': 3680,
    'NAD_1983_NSRS2007_StatePlane_Utah_South_FIPS_4303_Ft_US': 3683,
    'NAD_1983_NSRS2007_StatePlane_Vermont_FIPS_4400_Ft_US': 5655,
    'NAD_1983_NSRS2007_StatePlane_Virginia_North_FIPS_4501_Ft_US': 3686,
    'NAD_1983_NSRS2007_StatePlane_Virginia_South_FIPS_4502_Ft_US': 3688,
    'NAD_1983_NSRS2007_StatePlane_Washington_North_FIPS_4601_Ft_US': 3690,
    'NAD_1983_NSRS2007_StatePlane_Washington_South_FIPS_4602_Ft_US': 3692,
    'NAD_1983_NSRS2007_StatePlane_West_Virginia_North_FIPS_4701_FtUS': 26869,
    'NAD_1983_NSRS2007_StatePlane_West_Virginia_South_FIPS_4702_FtUS': 26870,
    'NAD_1983_NSRS2007_StatePlane_Wisconsin_Central_FIPS_4802_Ft_US': 3696,
    'NAD_1983_NSRS2007_StatePlane_Wisconsin_North_FIPS_4801_Ft_US': 3698,
    'NAD_1983_NSRS2007_StatePlane_Wisconsin_South_FIPS_4803_Ft_US': 3700,
    'NAD_1983_NSRS2007_StatePlane_Wyoming_E_Central_FIPS_4902_Ft_US': 3731,
    'NAD_1983_NSRS2007_StatePlane_Wyoming_East_FIPS_4901_Ft_US': 3730,
    'NAD_1983_NSRS2007_StatePlane_Wyoming_W_Central_FIPS_4903_Ft_US': 3732,
    'NAD_1983_NSRS2007_StatePlane_Wyoming_West_FIPS_4904_Ft_US': 3733,
    'American_Samoa_1962_StatePlane_American_Samoa_FIPS_5300': 65062,
    'Guam_Geodetic_Network_1993': 102240,
    'Guam_Geodetic_Triangulation_Network_1963': 102239,
    'NAD_1983_HARN_Guam_Map_Grid': 4414,
    'NAD_1983_MA11_Guam_Map_Grid': 102495,
    'Old_Hawaiian_StatePlane_Hawaii_1_FIPS_5101': 3561,
    'Old_Hawaiian_StatePlane_Hawaii_2_FIPS_5102': 3562,
    'Old_Hawaiian_StatePlane_Hawaii_3_FIPS_5103': 3563,
    'Old_Hawaiian_StatePlane_Hawaii_4_FIPS_5104': 3564,
    'Old_Hawaiian_StatePlane_Hawaii_5_FIPS_5105': 3565,
    'Puerto_Rico_StatePlane_Puerto_Rico_FIPS_5201': 3991,
    'Puerto_Rico_StatePlane_Virgin_Islands_St_Croix_FIPS_5202': 3992,
    'NAD_1927_Alaska_Albers_Meters': 102117,
    'NAD_1927_Alaska_Albers_Feet': 2964,
    'NAD_1927_California_Teale_Albers': 3309,
    'NAD_1927_Georgia_Statewide_Albers': 102118,
    'NAD_1927_Michigan_GeoRef_Meters': 102122,
    'NAD_1927_Michigan_GeoRef_Feet_US': 102120,
    'NAD_1927_Texas_Statewide_Mapping_System': 3080,
    'NAD_1927_Wisconsin_TM': 3069,
    'NAD_1983_2011_Alaska_Albers': 102966,
    'NAD_1983_2011_California_Teale_Albers': 102962,
    'NAD_1983_2011_Florida_GDL_Albers': 102967,
    'NAD_1983_2011_Michigan_GeoRef_Meters': 102968,
    'NAD_1983_2011_Mississippi_TM': 102963,
    'NAD_1983_2011_Texas_Centric_Mapping_System_Albers': 102971,
    'NAD_1983_2011_Texas_Centric_Mapping_System_Lambert': 102972,
    'NAD_1983_2011_Virginia_Lambert': 102964,
    'NAD_1983_2011_Wisconsin_TM': 102973,
    'NAD_1983_2011_Wisconsin_TM_US_Ft': 102974,
    'NAD_1983_CORS96_Alaska_Albers': 102247,
    'NAD_1983_California_Teale_Albers': 3310,
    'NAD_1983_California_Teale_Albers_FtUS': 102600,
    'NAD_1983_Florida_GDL_Albers': 3086,
    'NAD_1983_Georgia_Statewide_Lambert': 102604,
    'NAD_1983_HARN_California_Teale_Albers': 3311,
    'NAD_1983_HARN_Florida_GDL_Albers': 3087,
    'NAD_1983_HARN_Michigan_GeoRef_Meters': 3079,
    'NAD_1983_HARN_Mississippi_TM': 3815,
    'NAD_1983_HARN_Texas_Centric_Mapping_System_Albers': 3085,
    'NAD_1983_HARN_Texas_Centric_Mapping_System_Lambert': 3084,
    'NAD_1983_HARN_Virginia_Lambert': 3969,
    'NAD_1983_HARN_Wisconsin_TM': 3071,
    'NAD_1983_HARN_Wisconsin_TM_US_Ft': 102220,
    'NAD_1983_Idaho_TM': 102605,
    'NAD_1983_Michigan_GeoRef_Meters': 3078,
    'NAD_1983_Michigan_GeoRef_Feet_US': 102121,
    'NAD_1983_Mississippi_TM': 3814,
    'NAD_1983_NSRS2007_Alaska_Albers': 3467,
    'NAD_1983_NSRS2007_California_Teale_Albers': 3488,
    'NAD_1983_NSRS2007_Florida_GDL_Albers': 3513,
    'NAD_1983_NSRS2007_Michigan_GeoRef_Meters': 3591,
    'NAD_1983_NSRS2007_Mississippi_TM': 3816,
    'NAD_1983_NSRS2007_Texas_Centric_Mapping_System_Albers': 3665,
    'NAD_1983_NSRS2007_Texas_Centric_Mapping_System_Lambert': 3666,
    'NAD_1983_NSRS2007_Virginia_Lambert': 3970,
    'NAD_1983_NSRS2007_Wisconsin_TM': 3701,
    'NAD_1983_NSRS2007_Wisconsin_TM_US_Ft': 102217,
    'NAD_1983_Texas_Centric_Mapping_System_Albers': 3083,
    'NAD_1983_Texas_Centric_Mapping_System_Lambert': 3082,
    'NAD_1983_Texas_Statewide_Mapping_System': 3081,
    'NAD_1983_USFS_R6_Albers': 102218,
    'NAD_1983_USFS_R9_Albers': 102042,
    'NAD_1983_Virginia_Lambert': 3968,
    'NAD_1983_Wisconsin_TM': 3070,
    'NAD_1983_Wisconsin_TM_US_Ft': 102219,
    'NAD_1983_WyLAM': 102212,
    'WGS_1984_California_Teale_Albers_FtUS': 102599,
    'NAD_1983_2011_Oregon_Statewide_Lambert_Ft_Intl': 102970,
    'NAD_1983_2011_Oregon_Statewide_Lambert': 102969,
    'NAD_1983_CORS96_Oregon_Statewide_Lambert_Ft_Intl': 102381,
    'NAD_1983_CORS96_Oregon_Statewide_Lambert': 102380,
    'NAD_1983_HARN_Oregon_Statewide_Lambert_Feet_Intl': 2994,
    'NAD_1983_HARN_Oregon_Statewide_Lambert': 2993,
    'NAD_1983_NSRS2007_Oregon_Statewide_Lambert_Ft_Intl': 3644,
    'NAD_1983_NSRS2007_Oregon_Statewide_Lambert': 3643,
    'NAD_1983_Oregon_Statewide_Lambert_Feet_Intl': 2992,
    'NAD_1983_Oregon_Statewide_Lambert': 2991,
    'OCRS_Baker_NAD_1983_CORS96_TM_Feet_Intl': 102500,
    'OCRS_Baker_NAD_1983_CORS96_TM_Meters': 102530,
    'OCRS_Bend-Burns_NAD_1983_CORS96_LCC_Feet_Intl': 102501,
    'OCRS_Bend-Burns_NAD_1983_CORS96_LCC_Meters': 102531,
    'OCRS_Bend-Klamath_Falls_NAD_1983_CORS96_TM_Feet_Intl': 102502,
    'OCRS_Bend-Klamath_Falls_NAD_1983_CORS96_TM_Meters': 102532,
    'OCRS_Bend-Redmond-Prineville_NAD_1983_CORS96_LCC_Feet_Intl': 102503,
    'OCRS_Bend-Redmond-Prineville_NAD_1983_CORS96_LCC_Meters': 102533,
    'OCRS_Canyonville-Grants_Pass_NAD_1983_CORS96_TM_Feet_Intl': 102504,
    'OCRS_Canyonville-Grants_Pass_NAD_1983_CORS96_TM_Meters': 102534,
    'OCRS_Columbia_River_East_NAD_1983_CORS96_LCC_Feet_Intl': 102505,
    'OCRS_Columbia_River_East_NAD_1983_CORS96_LCC_Meters': 102535,
    'OCRS_Columbia_River_West_NAD_1983_CORS96_OM_Feet_Intl': 102506,
    'OCRS_Columbia_River_West_NAD_1983_CORS96_OM_Meters': 102536,
    'OCRS_Cottage_Grove-Canyonville_NAD_1983_CORS96_TM_Feet_Intl': 102507,
    'OCRS_Cottage_Grove-Canyonville_NAD_1983_CORS96_TM_Meters': 102537,
    'OCRS_Dufur-Madras_NAD_1983_CORS96_TM_Feet_Intl': 102508,
    'OCRS_Dufur-Madras_NAD_1983_CORS96_TM_Meters': 102538,
    'OCRS_Eugene_NAD_1983_CORS96_TM_Feet_Intl': 102509,
    'OCRS_Eugene_NAD_1983_CORS96_TM_Meters': 102539,
    'OCRS_Grants_Pass-Ashland_NAD_1983_CORS96_TM_Feet_Intl': 102510,
    'OCRS_Grants_Pass-Ashland_NAD_1983_CORS96_TM_Meters': 102540,
    'OCRS_Gresham-Warm_Springs_NAD_1983_CORS96_TM_Feet_Intl': 102511,
    'OCRS_Gresham-Warm_Springs_NAD_1983_CORS96_TM_Meters': 102541,
    'OCRS_La_Grande_NAD_1983_CORS96_TM_Feet_Intl': 102512,
    'OCRS_La_Grande_NAD_1983_CORS96_TM_Meters': 102542,
    'OCRS_Ontario_NAD_1983_CORS96_TM_Feet_Intl': 102513,
    'OCRS_Ontario_NAD_1983_CORS96_TM_Meters': 102543,
    'OCRS_Oregon_Coast_NAD_1983_CORS96_OM_Feet_Intl': 102514,
    'OCRS_Oregon_Coast_NAD_1983_CORS96_OM_Meters': 102544,
    'OCRS_Pendleton_NAD_1983_CORS96_TM_Feet_Intl': 102516,
    'OCRS_Pendleton_NAD_1983_CORS96_TM_Meters': 102546,
    'OCRS_Pendleton-La_Grande_NAD_1983_CORS96_TM_Feet_Intl': 102515,
    'OCRS_Pendleton-La_Grande_NAD_1983_CORS96_TM_Meters': 102545,
    'OCRS_Portland_NAD_1983_CORS96_LCC_Feet_Intl': 102517,
    'OCRS_Portland_NAD_1983_CORS96_LCC_Meters': 102547,
    'OCRS_Salem_NAD_1983_CORS96_TM_Feet_Intl': 102518,
    'OCRS_Salem_NAD_1983_CORS96_TM_Meters': 102548,
    'OCRS_Santiam_Pass_NAD_1983_CORS96_TM_Feet_Intl': 102519,
    'OCRS_Santiam_Pass_NAD_1983_CORS96_TM_Meters': 102549,
    'Abidjan_1987_UTM_Zone_29N': 2043,
    'Abidjan_1987_UTM_Zone_30N': 2041,
    'Adindan_UTM_Zone_35N': 20135,
    'Adindan_UTM_Zone_36N': 20136,
    'Adindan_UTM_Zone_37N': 20137,
    'Adindan_UTM_Zone_38N': 20138,
    'Arc_1950_UTM_Zone_34S': 20934,
    'Arc_1950_UTM_Zone_35S': 20935,
    'Arc_1950_UTM_Zone_36S': 20936,
    'Arc_1960_UTM_Zone_35N': 21095,
    'Arc_1960_UTM_Zone_35S': 21035,
    'Arc_1960_UTM_Zone_36N': 21096,
    'Arc_1960_UTM_Zone_36S': 21036,
    'Arc_1960_UTM_Zone_37N': 21097,
    'Arc_1960_UTM_Zone_37S': 21037,
    'Bissau_UTM_Zone_28N': 2095,
    'Camacupa_UTM_Zone_32S': 22032,
    'Camacupa_UTM_Zone_33S': 22033,
    'Cape_UTM_Zone_34S': 22234,
    'Cape_UTM_Zone_35S': 22235,
    'Cape_UTM_Zone_36S': 22236,
    'Carthage_UTM_Zone_32N': 22332,
    'Conakry_1905_UTM_Zone_28N': 31528,
    'Conakry_1905_UTM_Zone_29N': 31529,
    'Garoua_UTM_Zone_33N': 2312,
    'IGCB_1955_UTM_Zone_33S': 3342,
    'IGN_Astro_1960_UTM_Zone_28N': 3367,
    'IGN_Astro_1960_UTM_Zone_29N': 3368,
    'IGN_Astro_1960_UTM_Zone_30N': 3369,
    'Kousseri_UTM_Zone_33N': 2313,
    'LGD2006_UTM_Zone_32N': 3199,
    'LGD2006_UTM_Zone_33N': 3201,
    'LGD2006_UTM_Zone_34N': 3202,
    'LGD2006_UTM_Zone_35N': 3203,
    'Locodjo_1965_UTM_Zone_29N': 2042,
    'Locodjo_1965_UTM_Zone_30N': 2040,
    'Lome_UTM_Zone_31N': 25231,
    'Mporaloko_UTM_Zone_32N': 26632,
    'Mporaloko_UTM_Zone_32S': 26692,
    'Malongo_1987_UTM_Zone_32S': 25932,
    'Manoca_1962_UTM_Zone_32N': 2215,
    'Massawa_UTM_Zone_37N': 26237,
    'Mauritania_1999_UTM_Zone_28N': 3343,
    'Mauritania_1999_UTM_Zone_29N': 3344,
    'Mauritania_1999_UTM_Zone_30N': 3345,
    'Merchich_Degree_UTM_Zone_28N': 102144,
    'Mhast_Offshore_UTM_Zone_32S': 3354,
    'Mhast_Onshore_UTM_Zone_32S': 3353,
    'Minna_UTM_Zone_31N': 26331,
    'Minna_UTM_Zone_32N': 26332,
    'Moznet_UTM_Zone_36S': 3036,
    'Moznet_UTM_Zone_37S': 3037,
    'Moznet_UTM_Zone_38S': 5629,
    'NGN_UTM_Zone_38N': 31838,
    'NGN_UTM_Zone_39N': 31839,
    'Nord_Sahara_1959_UTM_Zone_29N': 30729,
    'Nord_Sahara_1959_UTM_Zone_30N': 30730,
    'Nord_Sahara_1959_UTM_Zone_31N': 30731,
    'Nord_Sahara_1959_UTM_Zone_32N': 30732,
    'Pointe_Noire_UTM_Zone_32S': 28232,
    'RGRDC_2005_UTM_Zone_33S': 4061,
    'RGRDC_2005_UTM_Zone_34S': 4062,
    'RGRDC_2005_UTM_Zone_35S': 4063,
    'Schwarzeck_UTM_Zone_33S': 29333,
    'Sierra_Leone_1968_UTM_Zone_28N': 2161,
    'Sierra_Leone_1968_UTM_Zone_29N': 2162,
    'Sudan_UTM_Zone_35N': 29635,
    'Sudan_UTM_Zone_36N': 29636,
    'Tananarive_1925_UTM_Zone_38S': 29738,
    'Tananarive_1925_UTM_Zone_39S': 29739,
    'Tete_UTM_Zone_36S': 2736,
    'Tete_UTM_Zone_37S': 2737,
    'Yoff_1972_UTM_Zone_28N': 31028,
    'Afgooye_UTM_Zone_38N': 20538,
    'Afgooye_UTM_Zone_39N': 20539,
    'Ain_el_Abd_UTM_Zone_36N': 20436,
    'Ain_el_Abd_UTM_Zone_37N': 20437,
    'Ain_el_Abd_UTM_Zone_38N': 20438,
    'Ain_el_Abd_UTM_Zone_39N': 20439,
    'Ain_el_Abd_UTM_Zone_40N': 20440,
    'Dabola_1981_UTM_Zone_28N': 3461,
    'Dabola_1981_UTM_Zone_29N': 3462,
    'Douala_UTM_Zone_32N': 22832,
    'Fahud_UTM_Zone_39N': 23239,
    'Fahud_UTM_Zone_40N': 23240,
    'Hong_Kong_1980_UTM_Zone_49N': 102141,
    'Hong_Kong_1980_UTM_Zone_50N': 102142,
    'Hu_Tzu_Shan_UTM_Zone_51N': 3829,
    'IGM_1995_UTM_Zone_32N': 3064,
    'IGM_1995_UTM_Zone_33N': 3065,
    'IGRS_UTM_Zone_37N': 3890,
    'IGRS_UTM_Zone_38N': 3891,
    'IGRS_UTM_Zone_39N': 3892,
    'Indian_1954_UTM_Zone_46N': 23946,
    'Indian_1954_UTM_Zone_47N': 23947,
    'Indian_1954_UTM_Zone_48N': 23948,
    'Indian_1960_UTM_Zone_48N': 3148,
    'Indian_1960_UTM_Zone_49N': 3149,
    'Indian_1975_UTM_Zone_47N': 24047,
    'Indian_1975_UTM_Zone_48N': 24048,
    'JGD_2000_UTM_Zone_51N': 3097,
    'JGD_2000_UTM_Zone_52N': 3098,
    'JGD_2000_UTM_Zone_53N': 3099,
    'JGD_2000_UTM_Zone_54N': 3100,
    'JGD_2000_UTM_Zone_55N': 3101,
    'JGD_2000_UTM_Zone_56N': 102150,
    'JGD_2011_UTM_Zone_51N': 102593,
    'JGD_2011_UTM_Zone_52N': 102594,
    'JGD_2011_UTM_Zone_53N': 102595,
    'JGD_2011_UTM_Zone_54N': 102596,
    'JGD_2011_UTM_Zone_55N': 102597,
    'JGD_2011_UTM_Zone_56N': 102598,
    'Karbala_1979_Polservice_UTM_Zone_37N': 3391,
    'Karbala_1979_Polservice_UTM_Zone_38N': 3392,
    'Karbala_1979_Polservice_UTM_Zone_39N': 3393,
    'MONREF_1997_UTM_Zone_46N': 102224,
    'MONREF_1997_UTM_Zone_47N': 102225,
    'MONREF_1997_UTM_Zone_48N': 102226,
    'MONREF_1997_UTM_Zone_49N': 102227,
    'MONREF_1997_UTM_Zone_50N': 102228,
    'Nahrwan_1967_UTM_Zone_37N': 27037,
    'Nahrwan_1967_UTM_Zone_38N': 27038,
    'Nahrwan_1967_UTM_Zone_39N': 27039,
    'Nahrwan_1967_UTM_Zone_40N': 27040,
    'Nakhl-e_Ghanem_UTM_Zone_39N': 3307,
    'PDO_1993_UTM_Zone_39N': 3439,
    'PDO_1993_UTM_Zone_40N': 3440,
    'QND_1995_UTM_39N': 102143,
    'Samboja_UTM_Zone_50S': 2550,
    'Tokyo_UTM_Zone_51N': 3092,
    'Tokyo_UTM_Zone_52N': 3093,
    'Tokyo_UTM_Zone_53N': 3094,
    'Tokyo_UTM_Zone_54N': 3095,
    'Tokyo_UTM_Zone_55N': 3096,
    'Tokyo_UTM_Zone_56N': 102156,
    'TC_1948_UTM_Zone_39N': 30339,
    'TC_1948_UTM_Zone_40N': 30340,
    'VN_2000_UTM_Zone_48N': 3405,
    'VN_2000_UTM_Zone_49N': 3406,
    'Yemen_NGN_1996_UTM_Zone_37N': 5836,
    'Yemen_NGN_1996_UTM_Zone_38N': 2089,
    'Yemen_NGN_1996_UTM_Zone_39N': 2090,
    'Yemen_NGN_1996_UTM_Zone_40N': 5837,
    'NAD_1927_BLM_Zone_1N': 4401,
    'NAD_1927_BLM_Zone_2N': 4402,
    'NAD_1927_BLM_Zone_3N': 4403,
    'NAD_1927_BLM_Zone_4N': 4404,
    'NAD_1927_BLM_Zone_5N': 4405,
    'NAD_1927_BLM_Zone_6N': 4406,
    'NAD_1927_BLM_Zone_7N': 4407,
    'NAD_1927_BLM_Zone_8N': 4408,
    'NAD_1927_BLM_Zone_9N': 4409,
    'NAD_1927_BLM_Zone_10N': 4410,
    'NAD_1927_BLM_Zone_11N': 4411,
    'NAD_1927_BLM_Zone_12N': 4412,
    'NAD_1927_BLM_Zone_13N': 4413,
    'NAD_1927_BLM_Zone_14N': 32064,
    'NAD_1927_BLM_Zone_15N': 32065,
    'NAD_1927_BLM_Zone_16N': 32066,
    'NAD_1927_BLM_Zone_18N': 4418,
    'NAD_1927_BLM_Zone_19N': 4419,
    'NAD_1927_BLM_Zone_59N': 4399,
    'NAD_1927_BLM_Zone_60N': 4400,
    'NAD_1983_BLM_Zone_1N': 4421,
    'NAD_1983_BLM_Zone_2N': 4422,
    'NAD_1983_BLM_Zone_3N': 4423,
    'NAD_1983_BLM_Zone_4N': 4424,
    'NAD_1983_BLM_Zone_5N': 4425,
    'NAD_1983_BLM_Zone_6N': 4426,
    'NAD_1983_BLM_Zone_7N': 4427,
    'NAD_1983_BLM_Zone_8N': 4428,
    'NAD_1983_BLM_Zone_9N': 4429,
    'NAD_1983_BLM_Zone_10N': 4430,
    'NAD_1983_BLM_Zone_11N': 4431,
    'NAD_1983_BLM_Zone_12N': 4432,
    'NAD_1983_BLM_Zone_13N': 4433,
    'NAD_1983_BLM_Zone_14N_ftUS': 32164,
    'NAD_1983_BLM_Zone_15N_ftUS': 32165,
    'NAD_1983_BLM_Zone_16N_ftUS': 32166,
    'NAD_1983_BLM_Zone_17N_ftUS': 32167,
    'NAD_1983_BLM_Zone_18N': 4438,
    'NAD_1983_BLM_Zone_19N': 4439,
    'NAD_1983_BLM_Zone_59N': 4217,
    'NAD_1983_BLM_Zone_60N': 4420,
    'WGS_1984_BLM_Zone_14N_ftUS': 32664,
    'WGS_1984_BLM_Zone_15N_ftUS': 32665,
    'WGS_1984_BLM_Zone_16N_ftUS': 32666,
    'WGS_1984_BLM_Zone_17N_ftUS': 32667,
    'Datum_73_UTM_Zone_29N': 27429,
    'ED_1950_ED77_UTM_Zone_38N': 2058,
    'ED_1950_ED77_UTM_Zone_39N': 2059,
    'ED_1950_ED77_UTM_Zone_40N': 2060,
    'ED_1950_ED77_UTM_Zone_41N': 2061,
    'ELD_1979_UTM_Zone_32N': 2077,
    'ELD_1979_UTM_Zone_33N': 2078,
    'ELD_1979_UTM_Zone_34N': 2079,
    'ELD_1979_UTM_Zone_35N': 2080,
    'ETRS_1989_ETRS-TM26': 3038,
    'ETRS_1989_ETRS-TM27': 3039,
    'ETRS_1989_ETRS-TM28': 3040,
    'ETRS_1989_ETRS-TM29': 3041,
    'ETRS_1989_ETRS-TM30': 3042,
    'ETRS_1989_ETRS-TM31': 3043,
    'ETRS_1989_ETRS-TM32': 3044,
    'ETRS_1989_ETRS-TM33': 3045,
    'ETRS_1989_ETRS-TM34': 3046,
    'ETRS_1989_ETRS-TM35': 3047,
    'ETRS_1989_ETRS-TM36': 3048,
    'ETRS_1989_ETRS-TM37': 3049,
    'ETRS_1989_ETRS-TM38': 3050,
    'ETRS_1989_ETRS-TM39': 3051,
    'ETRS_1989_UTM_Zone_26N': 102097,
    'ETRS_1989_UTM_Zone_27N': 102098,
    'ETRS_1989_UTM_Zone_28N': 25828,
    'ETRS_1989_UTM_Zone_29N': 25829,
    'ETRS_1989_UTM_Zone_30N': 25830,
    'ETRS_1989_UTM_Zone_31N': 25831,
    'ETRS_1989_UTM_Zone_32N': 25832,
    'ETRS_1989_UTM_Zone_33N': 25833,
    'ETRS_1989_UTM_Zone_34N': 25834,
    'ETRS_1989_UTM_Zone_35N': 25835,
    'ETRS_1989_UTM_Zone_36N': 25836,
    'ETRS_1989_UTM_Zone_37N': 25837,
    'ETRS_1989_UTM_Zone_38N': 25838,
    'ETRS_1989_UTM_Zone_39N': 102099,
    'ED_1950_UTM_Zone_28N': 23028,
    'ED_1950_UTM_Zone_29N': 23029,
    'ED_1950_UTM_Zone_30N': 23030,
    'ED_1950_UTM_Zone_31N': 23031,
    'ED_1950_UTM_Zone_32N': 23032,
    'ED_1950_UTM_Zone_33N': 23033,
    'ED_1950_UTM_Zone_34N': 23034,
    'ED_1950_UTM_Zone_35N': 23035,
    'ED_1950_UTM_Zone_36N': 23036,
    'ED_1950_UTM_Zone_37N': 23037,
    'ED_1950_UTM_Zone_38N': 23038,
    'FD_1954_UTM_Zone_29N': 3374,
    'Hjorsey_1955_UTM_Zone_26N': 3054,
    'Hjorsey_1955_UTM_Zone_27N': 3055,
    'Hjorsey_1955_UTM_Zone_28N': 3056,
    'HTRS96_UTM_Zone_33N': 3767,
    'HTRS96_UTM_Zone_34N': 3768,
    'IRENET95_UTM_Zone_29N': 2158,
    'NGO_1948_UTM_Zone_32N': 102132,
    'NGO_1948_UTM_Zone_33N': 102133,
    'NGO_1948_UTM_Zone_34N': 102134,
    'NGO_1948_UTM_Zone_35N': 102135,
    'Qornoq_1927_UTM_Zone_22N': 2216,
    'Qornoq_1927_UTM_Zone_23N': 2217,
    'REGCAN95_UTM_Zone_27N': 4082,
    'REGCAN95_UTM_Zone_28N': 4083,
    'Batavia_UTM_Zone_48S': 21148,
    'Batavia_UTM_Zone_49S': 21149,
    'Batavia_UTM_Zone_50S': 21150,
    'DGN_1995_UTM_Zone_46N': 23866,
    'DGN_1995_UTM_Zone_47N': 23867,
    'DGN_1995_UTM_Zone_47S': 23877,
    'DGN_1995_UTM_Zone_48N': 23868,
    'DGN_1995_UTM_Zone_48S': 23878,
    'DGN_1995_UTM_Zone_49N': 23869,
    'DGN_1995_UTM_Zone_49S': 23879,
    'DGN_1995_UTM_Zone_50N': 23870,
    'DGN_1995_UTM_Zone_50S': 23880,
    'DGN_1995_UTM_Zone_51N': 23871,
    'DGN_1995_UTM_Zone_51S': 23881,
    'DGN_1995_UTM_Zone_52N': 23872,
    'DGN_1995_UTM_Zone_52S': 23882,
    'DGN_1995_UTM_Zone_53S': 23883,
    'DGN_1995_UTM_Zone_54S': 23884,
    'Gunung_Segara_UTM_Zone_50S': 2933,
    'Indonesian_1974_UTM_Zone_46N': 23846,
    'Indonesian_1974_UTM_Zone_46S': 23886,
    'Indonesian_1974_UTM_Zone_47N': 23847,
    'Indonesian_1974_UTM_Zone_47S': 23887,
    'Indonesian_1974_UTM_Zone_48N': 23848,
    'Indonesian_1974_UTM_Zone_48S': 23888,
    'Indonesian_1974_UTM_Zone_49N': 23849,
    'Indonesian_1974_UTM_Zone_49S': 23889,
    'Indonesian_1974_UTM_Zone_50N': 23850,
    'Indonesian_1974_UTM_Zone_50S': 23890,
    'Indonesian_1974_UTM_Zone_51N': 23851,
    'Indonesian_1974_UTM_Zone_51S': 23891,
    'Indonesian_1974_UTM_Zone_52N': 23852,
    'Indonesian_1974_UTM_Zone_52S': 23892,
    'Indonesian_1974_UTM_Zone_53N': 23853,
    'Indonesian_1974_UTM_Zone_53S': 23893,
    'Indonesian_1974_UTM_Zone_54S': 23894,
    'Kertau_UTM_Zone_47N': 24547,
    'Kertau_UTM_Zone_48N': 24548,
    'Timbalai_1948_UTM_Zone_49N': 29849,
    'Timbalai_1948_UTM_Zone_50N': 29850,
    'NAD_1927_UTM_Zone_1N': 26701,
    'NAD_1927_UTM_Zone_2N': 26702,
    'NAD_1927_UTM_Zone_3N': 26703,
    'NAD_1927_UTM_Zone_4N': 26704,
    'NAD_1927_UTM_Zone_5N': 26705,
    'NAD_1927_UTM_Zone_6N': 26706,
    'NAD_1927_UTM_Zone_7N': 26707,
    'NAD_1927_UTM_Zone_8N': 26708,
    'NAD_1927_UTM_Zone_9N': 26709,
    'NAD_1927_UTM_Zone_10N': 26710,
    'NAD_1927_UTM_Zone_11N': 26711,
    'NAD_1927_UTM_Zone_12N': 26712,
    'NAD_1927_UTM_Zone_13N': 26713,
    'NAD_1927_UTM_Zone_14N': 26714,
    'NAD_1927_UTM_Zone_15N': 26715,
    'NAD_1927_UTM_Zone_16N': 26716,
    'NAD_1927_UTM_Zone_17N': 26717,
    'NAD_1927_UTM_Zone_18N': 26718,
    'NAD_1927_UTM_Zone_19N': 26719,
    'NAD_1927_UTM_Zone_20N': 26720,
    'NAD_1927_UTM_Zone_21N': 26721,
    'NAD_1927_UTM_Zone_22N': 26722,
    'NAD_1927_UTM_Zone_59N': 3370,
    'NAD_1927_UTM_Zone_60N': 3371,
    'NAD_1983_UTM_Zone_1N': 26901,
    'NAD_1983_UTM_Zone_2N': 26902,
    'NAD_1983_UTM_Zone_3N': 26903,
    'NAD_1983_UTM_Zone_4N': 26904,
    'NAD_1983_UTM_Zone_5N': 26905,
    'NAD_1983_UTM_Zone_6N': 26906,
    'NAD_1983_UTM_Zone_7N': 26907,
    'NAD_1983_UTM_Zone_8N': 26908,
    'NAD_1983_UTM_Zone_9N': 26909,
    'NAD_1983_UTM_Zone_10N': 26910,
    'NAD_1983_UTM_Zone_11N': 26911,
    'NAD_1983_UTM_Zone_12N': 26912,
    'NAD_1983_UTM_Zone_13N': 26913,
    'NAD_1983_UTM_Zone_14N': 26914,
    'NAD_1983_UTM_Zone_15N': 26915,
    'NAD_1983_UTM_Zone_16N': 26916,
    'NAD_1983_UTM_Zone_17N': 26917,
    'NAD_1983_UTM_Zone_18N': 26918,
    'NAD_1983_UTM_Zone_19N': 26919,
    'NAD_1983_UTM_Zone_20N': 26920,
    'NAD_1983_UTM_Zone_21N': 26921,
    'NAD_1983_UTM_Zone_22N': 26922,
    'NAD_1983_UTM_Zone_23N': 26923,
    'NAD_1983_UTM_Zone_58N': 102213,
    'NAD_1983_UTM_Zone_59N': 3372,
    'NAD_1983_UTM_Zone_60N': 3373,
    'NAD_1927_BLM_Zone_17N': 32067,
    'NZGD_1949_UTM_Zone_58S': 27258,
    'NZGD_1949_UTM_Zone_59S': 27259,
    'NZGD_1949_UTM_Zone_60S': 27260,
    'NZGD_2000_UTM_Zone_58S': 2133,
    'NZGD_2000_UTM_Zone_59S': 2134,
    'NZGD_2000_UTM_Zone_60S': 2135,
    'ATS_1977_UTM_Zone_19N': 2219,
    'ATS_1977_UTM_Zone_20N': 2220,
    'Grand_Cayman_1959_UTM_Zone_17N': 3356,
    'Greenland_1996_UTM_Zone_18N': 3178,
    'Greenland_1996_UTM_Zone_19N': 3179,
    'Greenland_1996_UTM_Zone_20N': 3180,
    'Greenland_1996_UTM_Zone_21N': 3181,
    'Greenland_1996_UTM_Zone_22N': 3182,
    'Greenland_1996_UTM_Zone_23N': 3183,
    'Greenland_1996_UTM_Zone_24N': 3184,
    'Greenland_1996_UTM_Zone_25N': 3185,
    'Greenland_1996_UTM_Zone_26N': 3186,
    'Greenland_1996_UTM_Zone_27N': 3187,
    'Greenland_1996_UTM_Zone_28N': 3188,
    'Greenland_1996_UTM_Zone_29N': 3189,
    'JAD_2001_UTM_Zone_17N': 3449,
    'JAD_2001_UTM_Zone_18N': 3450,
    'Little_Cayman_1961_UTM_Zone_17N': 3357,
    'NAD_1983_2011_UTM_Zone_1N': 6330,
    'NAD_1983_2011_UTM_Zone_2N': 6331,
    'NAD_1983_2011_UTM_Zone_3N': 6332,
    'NAD_1983_2011_UTM_Zone_4N': 6333,
    'NAD_1983_2011_UTM_Zone_5N': 6334,
    'NAD_1983_2011_UTM_Zone_6N': 6335,
    'NAD_1983_2011_UTM_Zone_7N': 6336,
    'NAD_1983_2011_UTM_Zone_8N': 6337,
    'NAD_1983_2011_UTM_Zone_9N': 6338,
    'NAD_1983_2011_UTM_Zone_10N': 6339,
    'NAD_1983_2011_UTM_Zone_11N': 6340,
    'NAD_1983_2011_UTM_Zone_12N': 6341,
    'NAD_1983_2011_UTM_Zone_13N': 6342,
    'NAD_1983_2011_UTM_Zone_14N': 6343,
    'NAD_1983_2011_UTM_Zone_15N': 6344,
    'NAD_1983_2011_UTM_Zone_16N': 6345,
    'NAD_1983_2011_UTM_Zone_17N': 6346,
    'NAD_1983_2011_UTM_Zone_18N': 6347,
    'NAD_1983_2011_UTM_Zone_19N': 6348,
    'NAD_1983_2011_UTM_Zone_20N': 102045,
    'NAD_1983_2011_UTM_Zone_59N': 6328,
    'NAD_1983_2011_UTM_Zone_60N': 6329,
    'NAD_1983_CORS96_UTM_Zone_1N': 102401,
    'NAD_1983_CORS96_UTM_Zone_2N': 102402,
    'NAD_1983_CORS96_UTM_Zone_3N': 102403,
    'NAD_1983_CORS96_UTM_Zone_4N': 102404,
    'NAD_1983_CORS96_UTM_Zone_5N': 102405,
    'NAD_1983_CORS96_UTM_Zone_6N': 102406,
    'NAD_1983_CORS96_UTM_Zone_7N': 102407,
    'NAD_1983_CORS96_UTM_Zone_8N': 102408,
    'NAD_1983_CORS96_UTM_Zone_9N': 102409,
    'NAD_1983_CORS96_UTM_Zone_10N': 102410,
    'NAD_1983_CORS96_UTM_Zone_11N': 102411,
    'NAD_1983_CORS96_UTM_Zone_12N': 102412,
    'NAD_1983_CORS96_UTM_Zone_13N': 102413,
    'NAD_1983_CORS96_UTM_Zone_14N': 102414,
    'NAD_1983_CORS96_UTM_Zone_15N': 102415,
    'NAD_1983_CORS96_UTM_Zone_16N': 102416,
    'NAD_1983_CORS96_UTM_Zone_17N': 102417,
    'NAD_1983_CORS96_UTM_Zone_18N': 102418,
    'NAD_1983_CORS96_UTM_Zone_19N': 102419,
    'NAD_1983_CORS96_UTM_Zone_20N': 102043,
    'NAD_1983_CORS96_UTM_Zone_59N': 102364,
    'NAD_1983_CORS96_UTM_Zone_60N': 102365,
    'NAD_1983_NSRS2007_UTM_Zone_1N': 3708,
    'NAD_1983_NSRS2007_UTM_Zone_2N': 3709,
    'NAD_1983_NSRS2007_UTM_Zone_3N': 3710,
    'NAD_1983_NSRS2007_UTM_Zone_4N': 3711,
    'NAD_1983_NSRS2007_UTM_Zone_5N': 3712,
    'NAD_1983_NSRS2007_UTM_Zone_6N': 3713,
    'NAD_1983_NSRS2007_UTM_Zone_7N': 3714,
    'NAD_1983_NSRS2007_UTM_Zone_8N': 3715,
    'NAD_1983_NSRS2007_UTM_Zone_9N': 3716,
    'NAD_1983_NSRS2007_UTM_Zone_10N': 3717,
    'NAD_1983_NSRS2007_UTM_Zone_11N': 3718,
    'NAD_1983_NSRS2007_UTM_Zone_12N': 3719,
    'NAD_1983_NSRS2007_UTM_Zone_13N': 3720,
    'NAD_1983_NSRS2007_UTM_Zone_14N': 3721,
    'NAD_1983_NSRS2007_UTM_Zone_15N': 3722,
    'NAD_1983_NSRS2007_UTM_Zone_16N': 3723,
    'NAD_1983_NSRS2007_UTM_Zone_17N': 3724,
    'NAD_1983_NSRS2007_UTM_Zone_18N': 3725,
    'NAD_1983_NSRS2007_UTM_Zone_19N': 3726,
    'NAD_1983_NSRS2007_UTM_Zone_20N': 102044,
    'NAD_1983_NSRS2007_UTM_Zone_59N': 3706,
    'NAD_1983_NSRS2007_UTM_Zone_60N': 3707,
    'NAD_1983_PA11_UTM_Zone_2S': 102496,
    'NAD_1983_PA11_UTM_Zone_4N': 102493,
    'NAD_1983_PA11_UTM_Zone_5N': 102494,
    'NAD_1983_HARN_UTM_Zone_10N': 3740,
    'NAD_1983_HARN_UTM_Zone_11N': 3741,
    'NAD_1983_HARN_UTM_Zone_12N': 3742,
    'NAD_1983_HARN_UTM_Zone_13N': 3743,
    'NAD_1983_HARN_UTM_Zone_14N': 3744,
    'NAD_1983_HARN_UTM_Zone_15N': 3745,
    'NAD_1983_HARN_UTM_Zone_16N': 3746,
    'NAD_1983_HARN_UTM_Zone_17N': 3747,
    'NAD_1983_HARN_UTM_Zone_18N': 3748,
    'NAD_1983_HARN_UTM_Zone_19N': 3749,
    'NAD_1983_HARN_UTM_Zone_2S': 2195,
    'NAD_1983_HARN_UTM_Zone_4N': 3750,
    'NAD_1983_HARN_UTM_Zone_5N': 3751,
    'NAD_1983_PACP00_UTM_Zone_2S': 102703,
    'NAD_1983_PACP00_UTM_Zone_4N': 102701,
    'NAD_1983_PACP00_UTM_Zone_5N': 102702,
    'Puerto_Rico_UTM_Zone_20N': 3920,
    'Qornoq_1927_UTM_Zone_22N': 2216,
    'Qornoq_1927_UTM_Zone_23N': 2217,
    'Saint_Pierre_et_Miquelon_1950_UTM_21N': 2987,
    'American_Samoa_1962_UTM_Zone_2S': 102116,
    'Azores_Central_1948_UTM_Zone_26N': 2189,
    'Azores_Central_1995_UTM_Zone_26N': 3063,
    'Azores_Occidental_1939_UTM_Zone_25N': 2188,
    'Azores_Oriental_1940_UTM_Zone_26N': 2190,
    'Azores_Oriental_1995_UTM_Zone_26N': 3062,
    'Bermuda_1957_UTM_Zone_20N': 3769,
    'Cadastre_1997_UTM_Zone_38S': 5879,
    'Combani_1950_UTM_38S': 2980,
    'Fatu_Iva_1972_UTM_Zone_7S': 3303,
    'Fiji_1956_UTM_Zone_1S': 3142,
    'Fiji_1956_UTM_Zone_60S': 3141,
    'Fort_Desaix_UTM_20N': 2973,
    'Fort_Marigot_UTM_20N': 2969,
    'Graciosa_Base_SW_1948_UTM_Zone_26N': 102162,
    'Grand_Comoros_UTM_38S': 2999,
    'Hjorsey_1955_UTM_Zone_26N': 3054,
    'Hjorsey_1955_UTM_Zone_27N': 3055,
    'Hjorsey_1955_UTM_Zone_28N': 3056,
    'IGN53_Mare_UTM_58S': 2995,
    'IGN53_Mare_UTM_Zone_59S': 3172,
    'IGN56_Lifou_UTM_58S': 2981,
    'IGN63_Hiva_Oa_UTM_Zone_7S': 3302,
    'IGN72_Grande_Terre_UTM_58S': 3060,
    'IGN72_Nuku_Hiva_UTM_7S': 2978,
    'JAD_2001_UTM_Zone_17N': 3449,
    'JAD_2001_UTM_Zone_18N': 3450,
    'Kerguelen_Island_1949_UTM_42S': 3336,
    'Madeira_1936_UTM_Zone_28N': 2191,
    'Maupiti_1983_UTM_Zone_5S': 3306,
    'Moorea_1987_UTM_Zone_6S': 3305,
    'MOP78_UTM_1S': 2988,
    'NEA74_Noumea_UTM_58S': 2998,
    'Observatorio_Meteorologico_1939_UTM_Zone_25N': 102166,
    'Old_Hawaiian_UTM_Zone_4N': 102114,
    'Old_Hawaiian_UTM_Zone_5N': 102115,
    'Pitcairn_1967_UTM_Zone_9S': 3784,
    'Porto_Santo_1936_UTM_Zone_28N': 2942,
    'Porto_Santo_1995_UTM_Zone_28N': 3061,
    'PTRA08_UTM_Zone_25N': 5014,
    'PTRA08_UTM_Zone_26N': 5015,
    'PTRA08_UTM_Zone_28N': 5016,
    'Puerto_Rico_UTM_Zone_20N': 3920,
    'RGAF09_UTM_Zone_20N': 5490,
    'RGM_2004_UTM_Zone_38S': 4471,
    'RGNC_1991-93_UTM_Zone_57S': 3169,
    'RGNC_1991-93_UTM_Zone_58S': 3170,
    'RGNC_1991-93_UTM_Zone_59S': 3171,
    'RGPF_UTM_Zone_5S': 3296,
    'RGPF_UTM_Zone_6S': 3297,
    'RGPF_UTM_Zone_7S': 3298,
    'RGPF_UTM_Zone_8S': 3299,
    'RGR_1992_UTM_39S': 5644,
    'RGR_1992_UTM_40S': 2975,
    'RGSPM_2006_UTM_Zone_21N': 4467,
    'RRAF_1991_UTM_20N': 4559,
    'Sainte_Anne_UTM_20N': 2970,
    'Sao_Braz_UTM_Zone_26N': 102168,
    'Sapper_Hill_1943_UTM_Zone_20S': 29220,
    'Sapper_Hill_1943_UTM_Zone_21S': 29221,
    'Selvagem_Grande_1938_UTM_Zone_28N': 2943,
    'ST71_Belep_UTM_58S': 2997,
    'ST84_Ile_des_Pins_UTM_58S': 2996,
    'ST87_Ouvea_UTM_58S': 3164,
    'Tahaa_1954_UTM_5S': 2977,
    'Tahiti_1979_UTM_Zone_6S': 3304,
    'Tahiti_1952_UTM_6S': 2976,
    'Aratu_UTM_Zone_22S': 20822,
    'Aratu_UTM_Zone_23S': 20823,
    'Aratu_UTM_Zone_24S': 20824,
    'Aratu_UTM_Zone_25S': 5337,
    'Bogota_UTM_Zone_17N': 21817,
    'Bogota_UTM_Zone_18N': 21818,
    'Campo_Inchauspe_UTM_19S': 2315,
    'Campo_Inchauspe_UTM_20S': 2316,
    'Chua_UTM_Zone_23S': 4071,
    'Corrego_Alegre_1961_UTM_Zone_21S': 5536,
    'Corrego_Alegre_1961_UTM_Zone_22S': 5537,
    'Corrego_Alegre_1961_UTM_Zone_23S': 5538,
    'Corrego_Alegre_1961_UTM_Zone_24S': 5539,
    'Corrego_Alegre_UTM_Zone_21S': 22521,
    'Corrego_Alegre_UTM_Zone_22S': 22522,
    'Corrego_Alegre_UTM_Zone_23S': 22523,
    'Corrego_Alegre_UTM_Zone_24S': 22524,
    'Corrego_Alegre_UTM_Zone_25S': 22525,
    'CSG_1967_UTM_Zone_21N': 3312,
    'CSG_1967_UTM_22N': 2971,
    'Hito_XVIII_1963_UTM_19S': 2084,
    'La_Canoa_UTM_Zone_18N': 24718,
    'La_Canoa_UTM_Zone_19N': 24719,
    'La_Canoa_UTM_Zone_20N': 24720,
    'La_Canoa_UTM_Zone_21N': 24721,
    'MARGEN_UTM_Zone_19S': 5356,
    'MARGEN_UTM_Zone_20S': 5355,
    'MARGEN_UTM_Zone_21S': 5357,
    'Naparima_1955_UTM_Zone_20N': 2067,
    'Naparima_1972_UTM_Zone_20N': 27120,
    'Peru96_UTM_Zone_17S': 5839,
    'Peru96_UTM_Zone_18S': 5387,
    'Peru96_UTM_Zone_19S': 5389,
    'PSAD_1956_UTM_Zone_17N': 24817,
    'PSAD_1956_UTM_Zone_21S': 24881,
    'PSAD_1956_UTM_Zone_17S': 24877,
    'PSAD_1956_UTM_Zone_18N': 24818,
    'PSAD_1956_UTM_Zone_18S': 24878,
    'PSAD_1956_UTM_Zone_19N': 24819,
    'PSAD_1956_UTM_Zone_19S': 24879,
    'PSAD_1956_UTM_Zone_20N': 24820,
    'PSAD_1956_UTM_Zone_20S': 24880,
    'PSAD_1956_UTM_Zone_21N': 24821,
    'PSAD_1956_UTM_Zone_22S': 24882,
    'REGVEN_UTM_Zone_18N': 2201,
    'REGVEN_UTM_Zone_19N': 2202,
    'REGVEN_UTM_Zone_20N': 2203,
    'RGFG_1995_UTM_Zone_21N': 3313,
    'RGFG_1995_UTM_22N': 2972,
    'Sapper_Hill_1943_UTM_Zone_20S': 29220,
    'Sapper_Hill_1943_UTM_Zone_21S': 29221,
    'SIRGAS_2000_UTM_Zone_11N': 31965,
    'SIRGAS_2000_UTM_Zone_12N': 31966,
    'SIRGAS_2000_UTM_Zone_13N': 31967,
    'SIRGAS_2000_UTM_Zone_14N': 31968,
    'SIRGAS_2000_UTM_Zone_15N': 31969,
    'SIRGAS_2000_UTM_Zone_16N': 31970,
    'SIRGAS_2000_UTM_Zone_17N': 31971,
    'SIRGAS_2000_UTM_Zone_17S': 31977,
    'SIRGAS_2000_UTM_Zone_18N': 31972,
    'SIRGAS_2000_UTM_Zone_18S': 31978,
    'SIRGAS_2000_UTM_Zone_19N': 31973,
    'SIRGAS_2000_UTM_Zone_19S': 31979,
    'SIRGAS_2000_UTM_Zone_20N': 31974,
    'SIRGAS_2000_UTM_Zone_20S': 31980,
    'SIRGAS_2000_UTM_Zone_21N': 31975,
    'SIRGAS_2000_UTM_Zone_21S': 31981,
    'SIRGAS_2000_UTM_Zone_22N': 31976,
    'SIRGAS_2000_UTM_Zone_22S': 31982,
    'SIRGAS_2000_UTM_Zone_23N': 6210,
    'SIRGAS_2000_UTM_Zone_23S': 31983,
    'SIRGAS_2000_UTM_Zone_24N': 6211,
    'SIRGAS_2000_UTM_Zone_24S': 31984,
    'SIRGAS_2000_UTM_Zone_25S': 31985,
    'SIRGAS_2000_UTM_Zone_26S': 5396,
    'SIRGAS_UTM_Zone_17N': 31986,
    'SIRGAS_UTM_Zone_17S': 31992,
    'SIRGAS_UTM_Zone_18N': 31987,
    'SIRGAS_UTM_Zone_18S': 31993,
    'SIRGAS_UTM_Zone_19N': 31988,
    'SIRGAS_UTM_Zone_19S': 31994,
    'SIRGAS_UTM_Zone_20N': 31989,
    'SIRGAS_UTM_Zone_20S': 31995,
    'SIRGAS_UTM_Zone_21N': 31990,
    'SIRGAS_UTM_Zone_21S': 31996,
    'SIRGAS_UTM_Zone_22N': 31991,
    'SIRGAS_UTM_Zone_22S': 31997,
    'SIRGAS_UTM_Zone_23S': 31998,
    'SIRGAS_UTM_Zone_24S': 31999,
    'SIRGAS_UTM_Zone_25S': 32000,
    'SIRGAS-Chile_UTM_Zone_18S': 5362,
    'SIRGAS-Chile_UTM_Zone_19S': 5361,
    'SIRGAS-ROU98_UTM_Zone_21S': 5382,
    'SIRGAS-ROU98_UTM_Zone_22S': 5383,
    'SAD_1969_96_UTM_Zone_18S': 5875,
    'SAD_1969_96_UTM_Zone_19S': 5876,
    'SAD_1969_96_UTM_Zone_20S': 5877,
    'SAD_1969_96_UTM_Zone_21S': 5531,
    'SAD_1969_96_UTM_Zone_22S': 5858,
    'SAD_1969_96_UTM_Zone_23S': 5533,
    'SAD_1969_96_UTM_Zone_24S': 5534,
    'SAD_1969_96_UTM_Zone_25S': 5535,
    'SAD_1969_UTM_Zone_17N': 5463,
    'SAD_1969_UTM_Zone_17S': 29187,
    'SAD_1969_UTM_Zone_18N': 29168,
    'SAD_1969_UTM_Zone_18S': 29188,
    'SAD_1969_UTM_Zone_19N': 29169,
    'SAD_1969_UTM_Zone_19S': 29189,
    'SAD_1969_UTM_Zone_20N': 29170,
    'SAD_1969_UTM_Zone_20S': 29190,
    'SAD_1969_UTM_Zone_21N': 29171,
    'SAD_1969_UTM_Zone_21S': 29191,
    'SAD_1969_UTM_Zone_22N': 29172,
    'SAD_1969_UTM_Zone_22S': 29192,
    'SAD_1969_UTM_Zone_23S': 29193,
    'SAD_1969_UTM_Zone_24S': 29194,
    'SAD_1969_UTM_Zone_25S': 29195,
    'Zanderij_1972_UTM_Zone_21N': 31121,
    'WGS_1972_UTM_Zone_1N': 32201,
    'WGS_1972_UTM_Zone_2N': 32202,
    'WGS_1972_UTM_Zone_3N': 32203,
    'WGS_1972_UTM_Zone_4N': 32204,
    'WGS_1972_UTM_Zone_5N': 32205,
    'WGS_1972_UTM_Zone_6N': 32206,
    'WGS_1972_UTM_Zone_7N': 32207,
    'WGS_1972_UTM_Zone_8N': 32208,
    'WGS_1972_UTM_Zone_9N': 32209,
    'WGS_1972_UTM_Zone_10N': 32210,
    'WGS_1972_UTM_Zone_11N': 32211,
    'WGS_1972_UTM_Zone_12N': 32212,
    'WGS_1972_UTM_Zone_13N': 32213,
    'WGS_1972_UTM_Zone_14N': 32214,
    'WGS_1972_UTM_Zone_15N': 32215,
    'WGS_1972_UTM_Zone_16N': 32216,
    'WGS_1972_UTM_Zone_17N': 32217,
    'WGS_1972_UTM_Zone_18N': 32218,
    'WGS_1972_UTM_Zone_19N': 32219,
    'WGS_1972_UTM_Zone_20N': 32220,
    'WGS_1972_UTM_Zone_21N': 32221,
    'WGS_1972_UTM_Zone_22N': 32222,
    'WGS_1972_UTM_Zone_23N': 32223,
    'WGS_1972_UTM_Zone_24N': 32224,
    'WGS_1972_UTM_Zone_25N': 32225,
    'WGS_1972_UTM_Zone_26N': 32226,
    'WGS_1972_UTM_Zone_27N': 32227,
    'WGS_1972_UTM_Zone_28N': 32228,
    'WGS_1972_UTM_Zone_29N': 32229,
    'WGS_1972_UTM_Zone_30N': 32230,
    'WGS_1972_UTM_Zone_31N': 32231,
    'WGS_1972_UTM_Zone_32N': 32232,
    'WGS_1972_UTM_Zone_33N': 32233,
    'WGS_1972_UTM_Zone_34N': 32234,
    'WGS_1972_UTM_Zone_35N': 32235,
    'WGS_1972_UTM_Zone_36N': 32236,
    'WGS_1972_UTM_Zone_37N': 32237,
    'WGS_1972_UTM_Zone_38N': 32238,
    'WGS_1972_UTM_Zone_39N': 32239,
    'WGS_1972_UTM_Zone_40N': 32240,
    'WGS_1972_UTM_Zone_41N': 32241,
    'WGS_1972_UTM_Zone_42N': 32242,
    'WGS_1972_UTM_Zone_43N': 32243,
    'WGS_1972_UTM_Zone_44N': 32244,
    'WGS_1972_UTM_Zone_45N': 32245,
    'WGS_1972_UTM_Zone_46N': 32246,
    'WGS_1972_UTM_Zone_47N': 32247,
    'WGS_1972_UTM_Zone_48N': 32248,
    'WGS_1972_UTM_Zone_49N': 32249,
    'WGS_1972_UTM_Zone_50N': 32250,
    'WGS_1972_UTM_Zone_51N': 32251,
    'WGS_1972_UTM_Zone_52N': 32252,
    'WGS_1972_UTM_Zone_53N': 32253,
    'WGS_1972_UTM_Zone_54N': 32254,
    'WGS_1972_UTM_Zone_55N': 32255,
    'WGS_1972_UTM_Zone_56N': 32256,
    'WGS_1972_UTM_Zone_57N': 32257,
    'WGS_1972_UTM_Zone_58N': 32258,
    'WGS_1972_UTM_Zone_59N': 32259,
    'WGS_1972_UTM_Zone_60N': 32260,
    'WGS_1972_UTM_Zone_1S': 32301,
    'WGS_1972_UTM_Zone_2S': 32302,
    'WGS_1972_UTM_Zone_3S': 32303,
    'WGS_1972_UTM_Zone_4S': 32304,
    'WGS_1972_UTM_Zone_5S': 32305,
    'WGS_1972_UTM_Zone_6S': 32306,
    'WGS_1972_UTM_Zone_7S': 32307,
    'WGS_1972_UTM_Zone_8S': 32308,
    'WGS_1972_UTM_Zone_9S': 32309,
    'WGS_1972_UTM_Zone_10S': 32310,
    'WGS_1972_UTM_Zone_11S': 32311,
    'WGS_1972_UTM_Zone_12S': 32312,
    'WGS_1972_UTM_Zone_13S': 32313,
    'WGS_1972_UTM_Zone_14S': 32314,
    'WGS_1972_UTM_Zone_15S': 32315,
    'WGS_1972_UTM_Zone_16S': 32316,
    'WGS_1972_UTM_Zone_17S': 32317,
    'WGS_1972_UTM_Zone_18S': 32318,
    'WGS_1972_UTM_Zone_19S': 32319,
    'WGS_1972_UTM_Zone_20S': 32320,
    'WGS_1972_UTM_Zone_21S': 32321,
    'WGS_1972_UTM_Zone_22S': 32322,
    'WGS_1972_UTM_Zone_23S': 32323,
    'WGS_1972_UTM_Zone_24S': 32324,
    'WGS_1972_UTM_Zone_25S': 32325,
    'WGS_1972_UTM_Zone_26S': 32326,
    'WGS_1972_UTM_Zone_27S': 32327,
    'WGS_1972_UTM_Zone_28S': 32328,
    'WGS_1972_UTM_Zone_29S': 32329,
    'WGS_1972_UTM_Zone_30S': 32330,
    'WGS_1972_UTM_Zone_31S': 32331,
    'WGS_1972_UTM_Zone_32S': 32332,
    'WGS_1972_UTM_Zone_33S': 32333,
    'WGS_1972_UTM_Zone_34S': 32334,
    'WGS_1972_UTM_Zone_35S': 32335,
    'WGS_1972_UTM_Zone_36S': 32336,
    'WGS_1972_UTM_Zone_37S': 32337,
    'WGS_1972_UTM_Zone_38S': 32338,
    'WGS_1972_UTM_Zone_39S': 32339,
    'WGS_1972_UTM_Zone_40S': 32340,
    'WGS_1972_UTM_Zone_41S': 32341,
    'WGS_1972_UTM_Zone_42S': 32342,
    'WGS_1972_UTM_Zone_43S': 32343,
    'WGS_1972_UTM_Zone_44S': 32344,
    'WGS_1972_UTM_Zone_45S': 32345,
    'WGS_1972_UTM_Zone_46S': 32346,
    'WGS_1972_UTM_Zone_47S': 32347,
    'WGS_1972_UTM_Zone_48S': 32348,
    'WGS_1972_UTM_Zone_49S': 32349,
    'WGS_1972_UTM_Zone_50S': 32350,
    'WGS_1972_UTM_Zone_51S': 32351,
    'WGS_1972_UTM_Zone_52S': 32352,
    'WGS_1972_UTM_Zone_53S': 32353,
    'WGS_1972_UTM_Zone_54S': 32354,
    'WGS_1972_UTM_Zone_55S': 32355,
    'WGS_1972_UTM_Zone_56S': 32356,
    'WGS_1972_UTM_Zone_57S': 32357,
    'WGS_1972_UTM_Zone_58S': 32358,
    'WGS_1972_UTM_Zone_59S': 32359,
    'WGS_1972_UTM_Zone_60S': 32360,
    'WGS_1984_Complex_UTM_Zone_20N': 102570,
    'WGS_1984_Complex_UTM_Zone_21N': 102571,
    'WGS_1984_Complex_UTM_Zone_22N': 102572,
    'WGS_1984_Complex_UTM_Zone_23N': 102573,
    'WGS_1984_Complex_UTM_Zone_24N': 102574,
    'WGS_1984_Complex_UTM_Zone_25N': 102575,
    'WGS_1984_Complex_UTM_Zone_26N': 102576,
    'WGS_1984_Complex_UTM_Zone_27N': 102577,
    'WGS_1984_Complex_UTM_Zone_28N': 102578,
    'WGS_1984_Complex_UTM_Zone_29N': 102579,
    'WGS_1984_Complex_UTM_Zone_30N': 102580,
    'WGS_1984_UTM_Zone_1N': 32601,
    'WGS_1984_UTM_Zone_2N': 32602,
    'WGS_1984_UTM_Zone_3N': 32603,
    'WGS_1984_UTM_Zone_4N': 32604,
    'WGS_1984_UTM_Zone_5N': 32605,
    'WGS_1984_UTM_Zone_6N': 32606,
    'WGS_1984_UTM_Zone_7N': 32607,
    'WGS_1984_UTM_Zone_8N': 32608,
    'WGS_1984_UTM_Zone_9N': 32609,
    'WGS_1984_UTM_Zone_10N': 32610,
    'WGS_1984_UTM_Zone_11N': 32611,
    'WGS_1984_UTM_Zone_12N': 32612,
    'WGS_1984_UTM_Zone_13N': 32613,
    'WGS_1984_UTM_Zone_14N': 32614,
    'WGS_1984_UTM_Zone_15N': 32615,
    'WGS_1984_UTM_Zone_16N': 32616,
    'WGS_1984_UTM_Zone_17N': 32617,
    'WGS_1984_UTM_Zone_18N': 32618,
    'WGS_1984_UTM_Zone_19N': 32619,
    'WGS_1984_UTM_Zone_20N': 32620,
    'WGS_1984_UTM_Zone_21N': 32621,
    'WGS_1984_UTM_Zone_22N': 32622,
    'WGS_1984_UTM_Zone_23N': 32623,
    'WGS_1984_UTM_Zone_24N': 32624,
    'WGS_1984_UTM_Zone_25N': 32625,
    'WGS_1984_UTM_Zone_26N': 32626,
    'WGS_1984_UTM_Zone_27N': 32627,
    'WGS_1984_UTM_Zone_28N': 32628,
    'WGS_1984_UTM_Zone_29N': 32629,
    'WGS_1984_UTM_Zone_30N': 32630,
    'WGS_1984_UTM_Zone_31N': 32631,
    'WGS_1984_UTM_Zone_32N': 32632,
    'WGS_1984_UTM_Zone_33N': 32633,
    'WGS_1984_UTM_Zone_34N': 32634,
    'WGS_1984_UTM_Zone_35N': 32635,
    'WGS_1984_UTM_Zone_36N': 32636,
    'WGS_1984_UTM_Zone_37N': 32637,
    'WGS_1984_UTM_Zone_38N': 32638,
    'WGS_1984_UTM_Zone_39N': 32639,
    'WGS_1984_UTM_Zone_40N': 32640,
    'WGS_1984_UTM_Zone_41N': 32641,
    'WGS_1984_UTM_Zone_42N': 32642,
    'WGS_1984_UTM_Zone_43N': 32643,
    'WGS_1984_UTM_Zone_44N': 32644,
    'WGS_1984_UTM_Zone_45N': 32645,
    'WGS_1984_UTM_Zone_46N': 32646,
    'WGS_1984_UTM_Zone_47N': 32647,
    'WGS_1984_UTM_Zone_48N': 32648,
    'WGS_1984_UTM_Zone_49N': 32649,
    'WGS_1984_UTM_Zone_50N': 32650,
    'WGS_1984_UTM_Zone_51N': 32651,
    'WGS_1984_UTM_Zone_52N': 32652,
    'WGS_1984_UTM_Zone_53N': 32653,
    'WGS_1984_UTM_Zone_54N': 32654,
    'WGS_1984_UTM_Zone_55N': 32655,
    'WGS_1984_UTM_Zone_56N': 32656,
    'WGS_1984_UTM_Zone_57N': 32657,
    'WGS_1984_UTM_Zone_58N': 32658,
    'WGS_1984_UTM_Zone_59N': 32659,
    'WGS_1984_UTM_Zone_60N': 32660,
    'WGS_1984_UTM_Zone_1S': 32701,
    'WGS_1984_UTM_Zone_2S': 32702,
    'WGS_1984_UTM_Zone_3S': 32703,
    'WGS_1984_UTM_Zone_4S': 32704,
    'WGS_1984_UTM_Zone_5S': 32705,
    'WGS_1984_UTM_Zone_6S': 32706,
    'WGS_1984_UTM_Zone_7S': 32707,
    'WGS_1984_UTM_Zone_8S': 32708,
    'WGS_1984_UTM_Zone_9S': 32709,
    'WGS_1984_UTM_Zone_10S': 32710,
    'WGS_1984_UTM_Zone_11S': 32711,
    'WGS_1984_UTM_Zone_12S': 32712,
    'WGS_1984_UTM_Zone_13S': 32713,
    'WGS_1984_UTM_Zone_14S': 32714,
    'WGS_1984_UTM_Zone_15S': 32715,
    'WGS_1984_UTM_Zone_16S': 32716,
    'WGS_1984_UTM_Zone_17S': 32717,
    'WGS_1984_UTM_Zone_18S': 32718,
    'WGS_1984_UTM_Zone_19S': 32719,
    'WGS_1984_UTM_Zone_20S': 32720,
    'WGS_1984_UTM_Zone_21S': 32721,
    'WGS_1984_UTM_Zone_22S': 32722,
    'WGS_1984_UTM_Zone_23S': 32723,
    'WGS_1984_UTM_Zone_24S': 32724,
    'WGS_1984_UTM_Zone_25S': 32725,
    'WGS_1984_UTM_Zone_26S': 32726,
    'WGS_1984_UTM_Zone_27S': 32727,
    'WGS_1984_UTM_Zone_28S': 32728,
    'WGS_1984_UTM_Zone_29S': 32729,
    'WGS_1984_UTM_Zone_30S': 32730,
    'WGS_1984_UTM_Zone_31S': 32731,
    'WGS_1984_UTM_Zone_32S': 32732,
    'WGS_1984_UTM_Zone_33S': 32733,
    'WGS_1984_UTM_Zone_34S': 32734,
    'WGS_1984_UTM_Zone_35S': 32735,
    'WGS_1984_UTM_Zone_36S': 32736,
    'WGS_1984_UTM_Zone_37S': 32737,
    'WGS_1984_UTM_Zone_38S': 32738,
    'WGS_1984_UTM_Zone_39S': 32739,
    'WGS_1984_UTM_Zone_40S': 32740,
    'WGS_1984_UTM_Zone_41S': 32741,
    'WGS_1984_UTM_Zone_42S': 32742,
    'WGS_1984_UTM_Zone_43S': 32743,
    'WGS_1984_UTM_Zone_44S': 32744,
    'WGS_1984_UTM_Zone_45S': 32745,
    'WGS_1984_UTM_Zone_46S': 32746,
    'WGS_1984_UTM_Zone_47S': 32747,
    'WGS_1984_UTM_Zone_48S': 32748,
    'WGS_1984_UTM_Zone_49S': 32749,
    'WGS_1984_UTM_Zone_50S': 32750,
    'WGS_1984_UTM_Zone_51S': 32751,
    'WGS_1984_UTM_Zone_52S': 32752,
    'WGS_1984_UTM_Zone_53S': 32753,
    'WGS_1984_UTM_Zone_54S': 32754,
    'WGS_1984_UTM_Zone_55S': 32755,
    'WGS_1984_UTM_Zone_56S': 32756,
    'WGS_1984_UTM_Zone_57S': 32757,
    'WGS_1984_UTM_Zone_58S': 32758,
    'WGS_1984_UTM_Zone_59S': 32759,
    'WGS_1984_UTM_Zone_60S': 32760,
    'World_Aitoff': 54043,
    'World_Azimuthal_Equidistant': 54032,
    'World_Behrmann': 54017,
    'Berghaus_Star_AAG': 102299,
    'World_Bonne': 54024,
    'World_Cassini': 54028,
    'World_Craster_Parabolic': 54046,
    'World_Cube': 54051,
    'World_Cylindrical_Equal_Area': 54034,
    'World_Eckert_I': 54015,
    'World_Eckert_II': 54014,
    'World_Eckert_III': 54013,
    'World_Eckert_IV': 54012,
    'World_Eckert_V': 54011,
    'World_Eckert_VI': 54010,
    'World_Equidistant_Conic': 54027,
    'World_Equidistant_Cylindrical': 54002,
    'World_Flat_Polar_Quartic': 54045,
    'World_Fuller': 54050,
    'World_Gall_Stereographic': 54016,
    'World_Goode_Homolosine_Land': 54052,
    'World_Goode_Homolosine_Ocean': 54053,
    'World_Hammer_Aitoff': 54044,
    'World_Hotine': 54025,
    'World_Loximuthal': 54023,
    'World_Mercator': 54004,
    'World_Miller_Cylindrical': 54003,
    'World_Mollweide': 54009,
    'NSIDC_EASE_Grid_Global': 3410,
    'World_Plate_Carree': 54001,
    'World_Polyconic': 54021,
    'World_Quartic_Authalic': 54022,
    'World_Robinson': 54030,
    'World_Sinusoidal': 54008,
    'World_Stereographic': 54026,
    'The_World_From_Space': 102038,
    'World_Times': 54048,
    'World_Two_Point_Equidistant': 54031,
    'World_Van_der_Grinten_I': 54029,
    'World_Vertical_Perspective': 54049,
    'WGS_1984_EASE_Grid_Global': 3975,
    'WGS_1984_PDC_Mercator': 3832,
    'WGS_1984_Plate_Carree': 32662,
    'WGS_1984_Web_Mercator_Auxiliary_Sphere': 3857,
    'WGS_1984_World_Mercator': 3395,
    'World_Winkel_I': 54018,
    'World_Winkel_II': 54019,
    'World_Winkel_Tripel_NGS': 54042,
    'Sphere_Aitoff': 53043,
    'Sphere_Azimuthal_Equidistant': 53032,
    'Sphere_Behrmann': 53017,
    'Sphere_Bonne': 53024,
    'Sphere_Cassini': 53028,
    'Sphere_Craster_Parabolic': 53046,
    'Sphere_Cylindrical_Equal_Area': 53034,
    'Sphere_Eckert_I': 53015,
    'Sphere_Eckert_II': 53014,
    'Sphere_Eckert_III': 53013,
    'Sphere_Eckert_IV': 53012,
    'Sphere_Eckert_V': 53011,
    'Sphere_Eckert_VI': 53010,
    'Sphere_Equidistant_Conic': 53027,
    'Sphere_Equidistant_Cylindrical': 53002,
    'Sphere_Flat_Polar_Quartic': 53045,
    'Sphere_Gall_Stereographic': 53016,
    'Sphere_Hammer_Aitoff': 53044,
    'Sphere_Hotine': 53025,
    'Sphere_Loximuthal': 53023,
    'Sphere_Mercator': 53004,
    'Sphere_Miller_Cylindrical': 53003,
    'Sphere_Mollweide': 53009,
    'Sphere_Plate_Carree': 53001,
    'Sphere_Polyconic': 53021,
    'Sphere_Quartic_Authalic': 53022,
    'Sphere_Robinson': 53030,
    'Sphere_Sinusoidal': 53008,
    'Sphere_Stereographic': 53026,
    'Sphere_Times': 53048,
    'Sphere_Two_Point_Equidistant': 53031,
    'Sphere_Van_der_Grinten_I': 53029,
    'Sphere_Vertical_Perspective': 53049,
    'Sphere_Winkel_I': 53018,
    'Sphere_Winkel_II': 53019,
    'Sphere_Winkel_Tripel_NGS': 53042
};

module.exports = (gcsName) => {
    return obj[gcsName];
};

},{}],6:[function(require,module,exports){
'use strict';

function isClockWise (array) {
  let sum = 0;
  let i = 1;
  const len = array.length;
  let prev, cur;
  while (i < len) {
    prev = cur || array[0];
    cur = array[i];
    sum += ((cur[0] - prev[0]) * (cur[1] + prev[1]));
    i++;
  }
  return sum > 0;
}

function polyReduce (a, b) {
  if (isClockWise(b) || !a.length) {
    a.push([b]);
  } else {
    a[a.length - 1].push(b);
  }
  return a;
}
ParseShp.prototype.parsePoint = function (data) {
  return {
    type: 'Point',
    coordinates: this.parseCoord(data, 0)
  };
};
ParseShp.prototype.parseZPoint = function (data) {
  const pointXY = this.parsePoint(data);
  pointXY.coordinates.push(data.readDoubleLE(16));
  return pointXY;
};
ParseShp.prototype.parsePointArray = function (data, offset, num) {
  const out = [];
  let done = 0;
  while (done < num) {
    out.push(this.parseCoord(data, offset));
    offset += 16;
    done++;
  }
  return out;
};
ParseShp.prototype.parseZPointArray = function (data, zOffset, num, coordinates) {
  let i = 0;
  while (i < num) {
    coordinates[i].push(data.readDoubleLE(zOffset));
    i++;
    zOffset += 8;
  }
  return coordinates;
};
ParseShp.prototype.parseArrayGroup = function (data, offset, partOffset, num, tot) {
  const out = [];
  let done = 0;
  let curNum; let nextNum = 0;
  let pointNumber;
  while (done < num) {
    done++;
    partOffset += 4;
    curNum = nextNum;
    if (done === num) {
      nextNum = tot;
    } else {
      nextNum = data.readInt32LE(partOffset);
    }
    pointNumber = nextNum - curNum;
    if (!pointNumber) {
      continue;
    }
    out.push(this.parsePointArray(data, offset, pointNumber));
    offset += (pointNumber << 4);
  }
  return out;
};
ParseShp.prototype.parseZArrayGroup = function (data, zOffset, num, coordinates) {
  let i = 0;
  while (i < num) {
    coordinates[i] = this.parseZPointArray(data, zOffset, coordinates[i].length, coordinates[i]);
    zOffset += (coordinates[i].length << 3);
    i++;
  }
  return coordinates;
};
ParseShp.prototype.parseMultiPoint = function (data) {
  const out = {};
  const mins = this.parseCoord(data, 0);
  const maxs = this.parseCoord(data, 16);
  out.bbox = [
    mins[0],
    mins[1],
    maxs[0],
    maxs[1]
  ];
  const num = data.readInt32LE(32, true);
  const offset = 36;
  if (num === 1) {
    out.type = 'Point';
    out.coordinates = this.parseCoord(data, offset);
  } else {
    out.type = 'MultiPoint';
    out.coordinates = this.parsePointArray(data, offset, num);
  }
  return out;
};
ParseShp.prototype.parseZMultiPoint = function (data) {
  const geoJson = this.parseMultiPoint(data);
  let num;
  if (geoJson.type === 'Point') {
    geoJson.coordinates.push(data.readDoubleLE(72));
    return geoJson;
  } else {
    num = geoJson.coordinates.length;
  }
  const zOffset = 52 + (num << 4);
  geoJson.coordinates = this.parseZPointArray(data, zOffset, num, geoJson.coordinates);
  return geoJson;
};
ParseShp.prototype.parsePolyline = function (data) {
  const out = {};
  const mins = this.parseCoord(data, 0);
  const maxs = this.parseCoord(data, 16);
  out.bbox = [
    mins[0],
    mins[1],
    maxs[0],
    maxs[1]
  ];
  const numParts = data.readInt32LE(32);
  const num = data.readInt32LE(36);
  let offset, partOffset;
  if (numParts === 1) {
    out.type = 'LineString';
    offset = 44;
    out.coordinates = this.parsePointArray(data, offset, num);
  } else {
    out.type = 'MultiLineString';
    offset = 40 + (numParts << 2);
    partOffset = 40;
    out.coordinates = this.parseArrayGroup(data, offset, partOffset, numParts, num);
  }
  return out;
};
ParseShp.prototype.parseZPolyline = function (data) {
  const geoJson = this.parsePolyline(data);
  const num = geoJson.coordinates.length;
  let zOffset;
  if (geoJson.type === 'LineString') {
    zOffset = 60 + (num << 4);
    geoJson.coordinates = this.parseZPointArray(data, zOffset, num, geoJson.coordinates);
    return geoJson;
  } else {
    const totalPoints = geoJson.coordinates.reduce(function (a, v) {
      return a + v.length;
    }, 0);
    zOffset = 56 + (totalPoints << 4) + (num << 2);
    geoJson.coordinates = this.parseZArrayGroup(data, zOffset, num, geoJson.coordinates);
    return geoJson;
  }
};
ParseShp.prototype.polyFuncs = function (out) {
  if (out.type === 'LineString') {
    out.type = 'Polygon';
    out.coordinates = [out.coordinates];
    return out;
  } else {
    out.coordinates = out.coordinates.reduce(polyReduce, []);
    if (out.coordinates.length === 1) {
      out.type = 'Polygon';
      out.coordinates = out.coordinates[0];
      return out;
    } else {
      out.type = 'MultiPolygon';
      return out;
    }
  }
};
ParseShp.prototype.parsePolygon = function (data) {
  return this.polyFuncs(this.parsePolyline(data));
};
ParseShp.prototype.parseZPolygon = function (data) {
  return this.polyFuncs(this.parseZPolyline(data));
};
const shpFuncObj = {
  1: 'parsePoint',
  3: 'parsePolyline',
  5: 'parsePolygon',
  8: 'parseMultiPoint',
  11: 'parseZPoint',
  13: 'parseZPolyline',
  15: 'parseZPolygon',
  18: 'parseZMultiPoint'
};

function makeParseCoord (trans) {
  if (trans) {
    return function (data, offset) {
      return trans.inverse([data.readDoubleLE(offset), data.readDoubleLE(offset + 8)]);
    };
  } else {
    return function (data, offset) {
      return [data.readDoubleLE(offset), data.readDoubleLE(offset + 8)];
    };
  }
}

function ParseShp (buffer, trans) {
  if (!(this instanceof ParseShp)) {
    return new ParseShp(buffer, trans);
  }
  this.buffer = buffer;
  this.headers = this.parseHeader();
  if (this.headers.length < this.buffer.byteLength) {
    this.buffer = this.buffer.slice(0, this.headers.length);
  }
  this.shpFuncs(trans);
  this.rows = this.getRows();
}
ParseShp.prototype.shpFuncs = function (tran) {
  let num = this.headers.shpCode;
  if (num > 20) {
    num -= 20;
  }
  if (!(num in shpFuncObj)) {
    throw new Error('I don\'t know that shp type');
  }
  this.parseFunc = this[shpFuncObj[num]];
  this.parseCoord = makeParseCoord(tran);
};
ParseShp.prototype.getShpCode = function () {
  return this.parseHeader().shpCode;
};
ParseShp.prototype.parseHeader = function () {
  const view = this.buffer.slice(0, 100);
  return {
    length: view.readInt32BE(6 << 2) << 1,
    version: view.readInt32LE(7 << 2),
    shpCode: view.readInt32LE(8 << 2),
    bbox: [
      view.readDoubleLE(9 << 2),
      view.readDoubleLE(11 << 2),
      view.readDoubleLE(13 << 2),
      view.readDoubleLE(13 << 2)
    ]
  };
};
ParseShp.prototype.getRows = function () {
  let offset = 100;
  const len = this.buffer.byteLength;
  const out = [];
  let current;
  while (offset < len) {
    current = this.getRow(offset);
    if (!current) {
      break;
    }
    offset += 8;
    offset += current.len;
    if (current.type) {
      out.push(this.parseFunc(current.data));
    } else {
      out.push(null);
    }
  }
  return out;
};
ParseShp.prototype.getRow = function (offset) {
  const view = this.buffer.slice(offset, offset + 12);
  const len = view.readInt32BE(4) << 1;
  const id = view.readInt32BE(0);
  if (len === 0) {
    return {
      id: id,
      len: len,
      type: 0
    };
  }
  return {
    id: id,
    len: len,
    data: this.buffer.slice(offset + 12, offset + len + 8),
    type: view.readInt32LE(8)
  };
};
module.exports = function (buffer, trans) {
  return new ParseShp(buffer, trans).rows;
};

},{}],7:[function(require,module,exports){
'use strict';

const JSZip = require('jszip');
module.exports.unzip = async (buffer) => {
  const zip = new JSZip();
  await zip.loadAsync(buffer);
  const files = zip.file(/.+/);
  const out = {};
  await Promise.all(files.map(async (a) => {
    let result;
    if (a.name.slice(-3).toLowerCase() === 'shp' || a.name.slice(-3).toLowerCase() === 'dbf') {
      result = await a.async('nodebuffer');
    } else {
      result = await a.async('text');
    }
    out[a.name] = result;
  }));
  return out;
};

module.exports.JSZip = JSZip;

},{"jszip":14}],8:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],9:[function(require,module,exports){

},{}],10:[function(require,module,exports){
arguments[4][9][0].apply(exports,arguments)
},{"dup":9}],11:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":8,"buffer":11,"ieee754":12}],12:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],13:[function(require,module,exports){
(function (global){(function (){
'use strict';
var Mutation = global.MutationObserver || global.WebKitMutationObserver;

var scheduleDrain;

{
  if (Mutation) {
    var called = 0;
    var observer = new Mutation(nextTick);
    var element = global.document.createTextNode('');
    observer.observe(element, {
      characterData: true
    });
    scheduleDrain = function () {
      element.data = (called = ++called % 2);
    };
  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
    var channel = new global.MessageChannel();
    channel.port1.onmessage = nextTick;
    scheduleDrain = function () {
      channel.port2.postMessage(0);
    };
  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
    scheduleDrain = function () {

      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var scriptEl = global.document.createElement('script');
      scriptEl.onreadystatechange = function () {
        nextTick();

        scriptEl.onreadystatechange = null;
        scriptEl.parentNode.removeChild(scriptEl);
        scriptEl = null;
      };
      global.document.documentElement.appendChild(scriptEl);
    };
  } else {
    scheduleDrain = function () {
      setTimeout(nextTick, 0);
    };
  }
}

var draining;
var queue = [];
//named nextTick for less confusing stack traces
function nextTick() {
  draining = true;
  var i, oldQueue;
  var len = queue.length;
  while (len) {
    oldQueue = queue;
    queue = [];
    i = -1;
    while (++i < len) {
      oldQueue[i]();
    }
    len = queue.length;
  }
  draining = false;
}

module.exports = immediate;
function immediate(task) {
  if (queue.push(task) === 1 && !draining) {
    scheduleDrain();
  }
}

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],14:[function(require,module,exports){
(function (global,Buffer,setImmediate){(function (){
/*!

JSZip v3.9.1 - A JavaScript class for generating and reading zip files
<http://stuartk.com/jszip>

(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>
Dual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/master/LICENSE.markdown.

JSZip uses the library pako released under the MIT license :
https://github.com/nodeca/pako/blob/master/LICENSE
*/

!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).JSZip=t()}}(function(){return function s(a,o,h){function u(r,t){if(!o[r]){if(!a[r]){var e="function"==typeof require&&require;if(!t&&e)return e(r,!0);if(l)return l(r,!0);var i=new Error("Cannot find module '"+r+"'");throw i.code="MODULE_NOT_FOUND",i}var n=o[r]={exports:{}};a[r][0].call(n.exports,function(t){var e=a[r][1][t];return u(e||t)},n,n.exports,s,a,o,h)}return o[r].exports}for(var l="function"==typeof require&&require,t=0;t<h.length;t++)u(h[t]);return u}({1:[function(t,e,r){"use strict";var c=t("./utils"),d=t("./support"),p="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";r.encode=function(t){for(var e,r,i,n,s,a,o,h=[],u=0,l=t.length,f=l,d="string"!==c.getTypeOf(t);u<t.length;)f=l-u,i=d?(e=t[u++],r=u<l?t[u++]:0,u<l?t[u++]:0):(e=t.charCodeAt(u++),r=u<l?t.charCodeAt(u++):0,u<l?t.charCodeAt(u++):0),n=e>>2,s=(3&e)<<4|r>>4,a=1<f?(15&r)<<2|i>>6:64,o=2<f?63&i:64,h.push(p.charAt(n)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join("")},r.decode=function(t){var e,r,i,n,s,a,o=0,h=0,u="data:";if(t.substr(0,u.length)===u)throw new Error("Invalid base64 input, it looks like a data url.");var l,f=3*(t=t.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(t.charAt(t.length-1)===p.charAt(64)&&f--,t.charAt(t.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error("Invalid base64 input, bad content length.");for(l=d.uint8array?new Uint8Array(0|f):new Array(0|f);o<t.length;)e=p.indexOf(t.charAt(o++))<<2|(n=p.indexOf(t.charAt(o++)))>>4,r=(15&n)<<4|(s=p.indexOf(t.charAt(o++)))>>2,i=(3&s)<<6|(a=p.indexOf(t.charAt(o++))),l[h++]=e,64!==s&&(l[h++]=r),64!==a&&(l[h++]=i);return l}},{"./support":30,"./utils":32}],2:[function(t,e,r){"use strict";var i=t("./external"),n=t("./stream/DataWorker"),s=t("./stream/Crc32Probe"),a=t("./stream/DataLengthProbe");function o(t,e,r,i,n){this.compressedSize=t,this.uncompressedSize=e,this.crc32=r,this.compression=i,this.compressedContent=n}o.prototype={getContentWorker:function(){var t=new n(i.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a("data_length")),e=this;return t.on("end",function(){if(this.streamInfo.data_length!==e.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")}),t},getCompressedWorker:function(){return new n(i.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},o.createWorkerFrom=function(t,e,r){return t.pipe(new s).pipe(new a("uncompressedSize")).pipe(e.compressWorker(r)).pipe(new a("compressedSize")).withStreamInfo("compression",e)},e.exports=o},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(t,e,r){"use strict";var i=t("./stream/GenericWorker");r.STORE={magic:"\0\0",compressWorker:function(t){return new i("STORE compression")},uncompressWorker:function(){return new i("STORE decompression")}},r.DEFLATE=t("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(t,e,r){"use strict";var i=t("./utils");var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e){return void 0!==t&&t.length?"string"!==i.getTypeOf(t)?function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t}(0|e,t,t.length,0):function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e.charCodeAt(a))];return-1^t}(0|e,t,t.length,0):0}},{"./utils":32}],5:[function(t,e,r){"use strict";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(t,e,r){"use strict";var i=null;i="undefined"!=typeof Promise?Promise:t("lie"),e.exports={Promise:i}},{lie:37}],7:[function(t,e,r){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,n=t("pako"),s=t("./utils"),a=t("./stream/GenericWorker"),o=i?"uint8array":"array";function h(t,e){a.call(this,"FlateWorker/"+t),this._pako=null,this._pakoAction=t,this._pakoOptions=e,this.meta={}}r.magic="\b\0",s.inherits(h,a),h.prototype.processChunk=function(t){this.meta=t.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,t.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new n[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},r.compressWorker=function(t){return new h("Deflate",t)},r.uncompressWorker=function(){return new h("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(t,e,r){"use strict";function A(t,e){var r,i="";for(r=0;r<e;r++)i+=String.fromCharCode(255&t),t>>>=8;return i}function i(t,e,r,i,n,s){var a,o,h=t.file,u=t.compression,l=s!==O.utf8encode,f=I.transformTo("string",s(h.name)),d=I.transformTo("string",O.utf8encode(h.name)),c=h.comment,p=I.transformTo("string",s(c)),m=I.transformTo("string",O.utf8encode(c)),_=d.length!==h.name.length,g=m.length!==c.length,b="",v="",y="",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};e&&!r||(x.crc32=t.crc32,x.compressedSize=t.compressedSize,x.uncompressedSize=t.uncompressedSize);var S=0;e&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),"UNIX"===n?(C=798,z|=function(t,e){var r=t;return t||(r=e?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(t){return 63&(t||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+d,b+="up"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+="uc"+A(y.length,2)+y);var E="";return E+="\n\0",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+"\0\0\0\0"+A(z,4)+A(i,4)+f+b+p}}var I=t("../utils"),n=t("../stream/GenericWorker"),O=t("../utf8"),B=t("../crc32"),R=t("../signature");function s(t,e,r,i){n.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=e,this.zipPlatform=r,this.encodeFileName=i,this.streamFiles=t,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,n),s.prototype.push=function(t){var e=t.meta.percent||0,r=this.entriesCount,i=this._sources.length;this.accumulate?this.contentBuffer.push(t):(this.bytesWritten+=t.data.length,n.prototype.push.call(this,{data:t.data,meta:{currentFile:this.currentFile,percent:r?(e+100*(r-i-1))/r:100}}))},s.prototype.openedSource=function(t){this.currentSourceOffset=this.bytesWritten,this.currentFile=t.file.name;var e=this.streamFiles&&!t.file.dir;if(e){var r=i(t,e,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(t){this.accumulate=!1;var e=this.streamFiles&&!t.file.dir,r=i(t,e,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),e)this.push({data:function(t){return R.DATA_DESCRIPTOR+A(t.crc32,4)+A(t.compressedSize,4)+A(t.uncompressedSize,4)}(t),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var t=this.bytesWritten,e=0;e<this.dirRecords.length;e++)this.push({data:this.dirRecords[e],meta:{percent:100}});var r=this.bytesWritten-t,i=function(t,e,r,i,n){var s=I.transformTo("string",n(i));return R.CENTRAL_DIRECTORY_END+"\0\0\0\0"+A(t,2)+A(t,2)+A(e,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,t,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(t){this._sources.push(t);var e=this;return t.on("data",function(t){e.processChunk(t)}),t.on("end",function(){e.closedSource(e.previous.streamInfo),e._sources.length?e.prepareNextSource():e.end()}),t.on("error",function(t){e.error(t)}),this},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(t){var e=this._sources;if(!n.prototype.error.call(this,t))return!1;for(var r=0;r<e.length;r++)try{e[r].error(t)}catch(t){}return!0},s.prototype.lock=function(){n.prototype.lock.call(this);for(var t=this._sources,e=0;e<t.length;e++)t[e].lock()},e.exports=s},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(t,e,r){"use strict";var u=t("../compressions"),i=t("./ZipFileWorker");r.generateWorker=function(t,a,e){var o=new i(a.streamFiles,e,a.platform,a.encodeFileName),h=0;try{t.forEach(function(t,e){h++;var r=function(t,e){var r=t||e,i=u[r];if(!i)throw new Error(r+" is not a valid compression method !");return i}(e.options.compression,a.compression),i=e.options.compressionOptions||a.compressionOptions||{},n=e.dir,s=e.date;e._compressWorker(r,i).withStreamInfo("file",{name:t,dir:n,date:s,comment:e.comment||"",unixPermissions:e.unixPermissions,dosPermissions:e.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(t){o.error(t)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(t,e,r){"use strict";function i(){if(!(this instanceof i))return new i;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files=Object.create(null),this.comment=null,this.root="",this.clone=function(){var t=new i;for(var e in this)"function"!=typeof this[e]&&(t[e]=this[e]);return t}}(i.prototype=t("./object")).loadAsync=t("./load"),i.support=t("./support"),i.defaults=t("./defaults"),i.version="3.9.1",i.loadAsync=function(t,e){return(new i).loadAsync(t,e)},i.external=t("./external"),e.exports=i},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(t,e,r){"use strict";var u=t("./utils"),n=t("./external"),i=t("./utf8"),s=t("./zipEntries"),a=t("./stream/Crc32Probe"),l=t("./nodejsUtils");function f(i){return new n.Promise(function(t,e){var r=i.decompressed.getContentWorker().pipe(new a);r.on("error",function(t){e(t)}).on("end",function(){r.streamInfo.crc32!==i.decompressed.crc32?e(new Error("Corrupted zip : CRC32 mismatch")):t()}).resume()})}e.exports=function(t,o){var h=this;return o=u.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:i.utf8decode}),l.isNode&&l.isStream(t)?n.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):u.prepareContent("the loaded zip file",t,!0,o.optimizedBinaryString,o.base64).then(function(t){var e=new s(o);return e.load(t),e}).then(function(t){var e=[n.Promise.resolve(t)],r=t.files;if(o.checkCRC32)for(var i=0;i<r.length;i++)e.push(f(r[i]));return n.Promise.all(e)}).then(function(t){for(var e=t.shift(),r=e.files,i=0;i<r.length;i++){var n=r[i],s=n.fileNameStr,a=u.resolve(n.fileNameStr);h.file(a,n.decompressed,{binary:!0,optimizedBinaryString:!0,date:n.date,dir:n.dir,comment:n.fileCommentStr.length?n.fileCommentStr:null,unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions,createFolders:o.createFolders}),n.dir||(h.file(a).unsafeOriginalName=s)}return e.zipComment.length&&(h.comment=e.zipComment),h})}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(t,e,r){"use strict";var i=t("../utils"),n=t("../stream/GenericWorker");function s(t,e){n.call(this,"Nodejs stream input adapter for "+t),this._upstreamEnded=!1,this._bindStream(e)}i.inherits(s,n),s.prototype._bindStream=function(t){var e=this;(this._stream=t).pause(),t.on("data",function(t){e.push({data:t,meta:{percent:0}})}).on("error",function(t){e.isPaused?this.generatedError=t:e.error(t)}).on("end",function(){e.isPaused?e._upstreamEnded=!0:e.end()})},s.prototype.pause=function(){return!!n.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},e.exports=s},{"../stream/GenericWorker":28,"../utils":32}],13:[function(t,e,r){"use strict";var n=t("readable-stream").Readable;function i(t,e,r){n.call(this,e),this._helper=t;var i=this;t.on("data",function(t,e){i.push(t)||i._helper.pause(),r&&r(e)}).on("error",function(t){i.emit("error",t)}).on("end",function(){i.push(null)})}t("../utils").inherits(i,n),i.prototype._read=function(){this._helper.resume()},e.exports=i},{"../utils":32,"readable-stream":16}],14:[function(t,e,r){"use strict";e.exports={isNode:"undefined"!=typeof Buffer,newBufferFrom:function(t,e){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(t,e);if("number"==typeof t)throw new Error('The "data" argument must not be a number');return new Buffer(t,e)},allocBuffer:function(t){if(Buffer.alloc)return Buffer.alloc(t);var e=new Buffer(t);return e.fill(0),e},isBuffer:function(t){return Buffer.isBuffer(t)},isStream:function(t){return t&&"function"==typeof t.on&&"function"==typeof t.pause&&"function"==typeof t.resume}}},{}],15:[function(t,e,r){"use strict";function s(t,e,r){var i,n=u.getTypeOf(e),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(t=g(t)),s.createFolders&&(i=_(t))&&b.call(this,i,!0);var a="string"===n&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(e instanceof d&&0===e.uncompressedSize||s.dir||!e||0===e.length)&&(s.base64=!1,s.binary=!0,e="",s.compression="STORE",n="string");var o=null;o=e instanceof d||e instanceof l?e:p.isNode&&p.isStream(e)?new m(t,e):u.prepareContent(t,e,s.binary,s.optimizedBinaryString,s.base64);var h=new c(t,o,s);this.files[t]=h}var n=t("./utf8"),u=t("./utils"),l=t("./stream/GenericWorker"),a=t("./stream/StreamHelper"),f=t("./defaults"),d=t("./compressedObject"),c=t("./zipObject"),o=t("./generate"),p=t("./nodejsUtils"),m=t("./nodejs/NodejsStreamInputAdapter"),_=function(t){"/"===t.slice(-1)&&(t=t.substring(0,t.length-1));var e=t.lastIndexOf("/");return 0<e?t.substring(0,e):""},g=function(t){return"/"!==t.slice(-1)&&(t+="/"),t},b=function(t,e){return e=void 0!==e?e:f.createFolders,t=g(t),this.files[t]||s.call(this,t,null,{dir:!0,createFolders:e}),this.files[t]};function h(t){return"[object RegExp]"===Object.prototype.toString.call(t)}var i={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(t){var e,r,i;for(e in this.files)i=this.files[e],(r=e.slice(this.root.length,e.length))&&e.slice(0,this.root.length)===this.root&&t(r,i)},filter:function(r){var i=[];return this.forEach(function(t,e){r(t,e)&&i.push(e)}),i},file:function(t,e,r){if(1!==arguments.length)return t=this.root+t,s.call(this,t,e,r),this;if(h(t)){var i=t;return this.filter(function(t,e){return!e.dir&&i.test(t)})}var n=this.files[this.root+t];return n&&!n.dir?n:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(t,e){return e.dir&&r.test(t)});var t=this.root+r,e=b.call(this,t),i=this.clone();return i.root=e.name,i},remove:function(r){r=this.root+r;var t=this.files[r];if(t||("/"!==r.slice(-1)&&(r+="/"),t=this.files[r]),t&&!t.dir)delete this.files[r];else for(var e=this.filter(function(t,e){return e.name.slice(0,r.length)===r}),i=0;i<e.length;i++)delete this.files[e[i].name];return this},generate:function(t){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(t){var e,r={};try{if((r=u.extend(t||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:n.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),"binarystring"===r.type&&(r.type="string"),!r.type)throw new Error("No output type specified.");u.checkSupport(r.type),"darwin"!==r.platform&&"freebsd"!==r.platform&&"linux"!==r.platform&&"sunos"!==r.platform||(r.platform="UNIX"),"win32"===r.platform&&(r.platform="DOS");var i=r.comment||this.comment||"";e=o.generateWorker(this,r,i)}catch(t){(e=new l("error")).error(t)}return new a(e,r.type||"string",r.mimeType)},generateAsync:function(t,e){return this.generateInternalStream(t).accumulate(e)},generateNodeStream:function(t,e){return(t=t||{}).type||(t.type="nodebuffer"),this.generateInternalStream(t).toNodejsStream(e)}};e.exports=i},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(t,e,r){e.exports=t("stream")},{stream:void 0}],17:[function(t,e,r){"use strict";var i=t("./DataReader");function n(t){i.call(this,t);for(var e=0;e<this.data.length;e++)t[e]=255&t[e]}t("../utils").inherits(n,i),n.prototype.byteAt=function(t){return this.data[this.zero+t]},n.prototype.lastIndexOfSignature=function(t){for(var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===e&&this.data[s+1]===r&&this.data[s+2]===i&&this.data[s+3]===n)return s-this.zero;return-1},n.prototype.readAndCheckSignature=function(t){var e=t.charCodeAt(0),r=t.charCodeAt(1),i=t.charCodeAt(2),n=t.charCodeAt(3),s=this.readData(4);return e===s[0]&&r===s[1]&&i===s[2]&&n===s[3]},n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return[];var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./DataReader":18}],18:[function(t,e,r){"use strict";var i=t("../utils");function n(t){this.data=t,this.length=t.length,this.index=0,this.zero=0}n.prototype={checkOffset:function(t){this.checkIndex(this.index+t)},checkIndex:function(t){if(this.length<this.zero+t||t<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+t+"). Corrupted zip ?")},setIndex:function(t){this.checkIndex(t),this.index=t},skip:function(t){this.setIndex(this.index+t)},byteAt:function(t){},readInt:function(t){var e,r=0;for(this.checkOffset(t),e=this.index+t-1;e>=this.index;e--)r=(r<<8)+this.byteAt(e);return this.index+=t,r},readString:function(t){return i.transformTo("string",this.readData(t))},readData:function(t){},lastIndexOfSignature:function(t){},readAndCheckSignature:function(t){},readDate:function(){var t=this.readInt(4);return new Date(Date.UTC(1980+(t>>25&127),(t>>21&15)-1,t>>16&31,t>>11&31,t>>5&63,(31&t)<<1))}},e.exports=n},{"../utils":32}],19:[function(t,e,r){"use strict";var i=t("./Uint8ArrayReader");function n(t){i.call(this,t)}t("../utils").inherits(n,i),n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(t,e,r){"use strict";var i=t("./DataReader");function n(t){i.call(this,t)}t("../utils").inherits(n,i),n.prototype.byteAt=function(t){return this.data.charCodeAt(this.zero+t)},n.prototype.lastIndexOfSignature=function(t){return this.data.lastIndexOf(t)-this.zero},n.prototype.readAndCheckSignature=function(t){return t===this.readData(4)},n.prototype.readData=function(t){this.checkOffset(t);var e=this.data.slice(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./DataReader":18}],21:[function(t,e,r){"use strict";var i=t("./ArrayReader");function n(t){i.call(this,t)}t("../utils").inherits(n,i),n.prototype.readData=function(t){if(this.checkOffset(t),0===t)return new Uint8Array(0);var e=this.data.subarray(this.zero+this.index,this.zero+this.index+t);return this.index+=t,e},e.exports=n},{"../utils":32,"./ArrayReader":17}],22:[function(t,e,r){"use strict";var i=t("../utils"),n=t("../support"),s=t("./ArrayReader"),a=t("./StringReader"),o=t("./NodeBufferReader"),h=t("./Uint8ArrayReader");e.exports=function(t){var e=i.getTypeOf(t);return i.checkSupport(e),"string"!==e||n.uint8array?"nodebuffer"===e?new o(t):n.uint8array?new h(i.transformTo("uint8array",t)):new s(i.transformTo("array",t)):new a(t)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(t,e,r){"use strict";r.LOCAL_FILE_HEADER="PK",r.CENTRAL_FILE_HEADER="PK",r.CENTRAL_DIRECTORY_END="PK",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",r.ZIP64_CENTRAL_DIRECTORY_END="PK",r.DATA_DESCRIPTOR="PK\b"},{}],24:[function(t,e,r){"use strict";var i=t("./GenericWorker"),n=t("../utils");function s(t){i.call(this,"ConvertWorker to "+t),this.destType=t}n.inherits(s,i),s.prototype.processChunk=function(t){this.push({data:n.transformTo(this.destType,t.data),meta:t.meta})},e.exports=s},{"../utils":32,"./GenericWorker":28}],25:[function(t,e,r){"use strict";var i=t("./GenericWorker"),n=t("../crc32");function s(){i.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}t("../utils").inherits(s,i),s.prototype.processChunk=function(t){this.streamInfo.crc32=n(t.data,this.streamInfo.crc32||0),this.push(t)},e.exports=s},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(t,e,r){"use strict";var i=t("../utils"),n=t("./GenericWorker");function s(t){n.call(this,"DataLengthProbe for "+t),this.propName=t,this.withStreamInfo(t,0)}i.inherits(s,n),s.prototype.processChunk=function(t){if(t){var e=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=e+t.data.length}n.prototype.processChunk.call(this,t)},e.exports=s},{"../utils":32,"./GenericWorker":28}],27:[function(t,e,r){"use strict";var i=t("../utils"),n=t("./GenericWorker");function s(t){n.call(this,"DataWorker");var e=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,t.then(function(t){e.dataIsReady=!0,e.data=t,e.max=t&&t.length||0,e.type=i.getTypeOf(t),e.isPaused||e._tickAndRepeat()},function(t){e.error(t)})}i.inherits(s,n),s.prototype.cleanUp=function(){n.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!n.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,i.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(i.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var t=null,e=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":t=this.data.substring(this.index,e);break;case"uint8array":t=this.data.subarray(this.index,e);break;case"array":case"nodebuffer":t=this.data.slice(this.index,e)}return this.index=e,this.push({data:t,meta:{percent:this.max?this.index/this.max*100:0}})},e.exports=s},{"../utils":32,"./GenericWorker":28}],28:[function(t,e,r){"use strict";function i(t){this.name=t||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}i.prototype={push:function(t){this.emit("data",t)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(t){this.emit("error",t)}return!0},error:function(t){return!this.isFinished&&(this.isPaused?this.generatedError=t:(this.isFinished=!0,this.emit("error",t),this.previous&&this.previous.error(t),this.cleanUp()),!0)},on:function(t,e){return this._listeners[t].push(e),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(t,e){if(this._listeners[t])for(var r=0;r<this._listeners[t].length;r++)this._listeners[t][r].call(this,e)},pipe:function(t){return t.registerPrevious(this)},registerPrevious:function(t){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=t.streamInfo,this.mergeStreamInfo(),this.previous=t;var e=this;return t.on("data",function(t){e.processChunk(t)}),t.on("end",function(){e.end()}),t.on("error",function(t){e.error(t)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var t=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),t=!0),this.previous&&this.previous.resume(),!t},flush:function(){},processChunk:function(t){this.push(t)},withStreamInfo:function(t,e){return this.extraStreamInfo[t]=e,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var t in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(t)&&(this.streamInfo[t]=this.extraStreamInfo[t])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var t="Worker "+this.name;return this.previous?this.previous+" -> "+t:t}},e.exports=i},{}],29:[function(t,e,r){"use strict";var h=t("../utils"),n=t("./ConvertWorker"),s=t("./GenericWorker"),u=t("../base64"),i=t("../support"),a=t("../external"),o=null;if(i.nodestream)try{o=t("../nodejs/NodejsStreamOutputAdapter")}catch(t){}function l(t,o){return new a.Promise(function(e,r){var i=[],n=t._internalType,s=t._outputType,a=t._mimeType;t.on("data",function(t,e){i.push(t),o&&o(e)}).on("error",function(t){i=[],r(t)}).on("end",function(){try{var t=function(t,e,r){switch(t){case"blob":return h.newBlob(h.transformTo("arraybuffer",e),r);case"base64":return u.encode(e);default:return h.transformTo(t,e)}}(s,function(t,e){var r,i=0,n=null,s=0;for(r=0;r<e.length;r++)s+=e[r].length;switch(t){case"string":return e.join("");case"array":return Array.prototype.concat.apply([],e);case"uint8array":for(n=new Uint8Array(s),r=0;r<e.length;r++)n.set(e[r],i),i+=e[r].length;return n;case"nodebuffer":return Buffer.concat(e);default:throw new Error("concat : unsupported type '"+t+"'")}}(n,i),a);e(t)}catch(t){r(t)}i=[]}).resume()})}function f(t,e,r){var i=e;switch(e){case"blob":case"arraybuffer":i="uint8array";break;case"base64":i="string"}try{this._internalType=i,this._outputType=e,this._mimeType=r,h.checkSupport(i),this._worker=t.pipe(new n(i)),t.lock()}catch(t){this._worker=new s("error"),this._worker.error(t)}}f.prototype={accumulate:function(t){return l(this,t)},on:function(t,e){var r=this;return"data"===t?this._worker.on(t,function(t){e.call(r,t.data,t.meta)}):this._worker.on(t,function(){h.delay(e,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(t){if(h.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new o(this,{objectMode:"nodebuffer"!==this._outputType},t)}},e.exports=f},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(t,e,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer="undefined"!=typeof Buffer,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var i=new ArrayBuffer(0);try{r.blob=0===new Blob([i],{type:"application/zip"}).size}catch(t){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);n.append(i),r.blob=0===n.getBlob("application/zip").size}catch(t){r.blob=!1}}}try{r.nodestream=!!t("readable-stream").Readable}catch(t){r.nodestream=!1}},{"readable-stream":16}],31:[function(t,e,s){"use strict";for(var o=t("./utils"),h=t("./support"),r=t("./nodejsUtils"),i=t("./stream/GenericWorker"),u=new Array(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;u[254]=u[254]=1;function a(){i.call(this,"utf-8 decode"),this.leftOver=null}function l(){i.call(this,"utf-8 encode")}s.utf8encode=function(t){return h.nodebuffer?r.newBufferFrom(t,"utf-8"):function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=h.uint8array?new Uint8Array(o):new Array(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e}(t)},s.utf8decode=function(t){return h.nodebuffer?o.transformTo("nodebuffer",t).toString("utf-8"):function(t){var e,r,i,n,s=t.length,a=new Array(2*s);for(e=r=0;e<s;)if((i=t[e++])<128)a[r++]=i;else if(4<(n=u[i]))a[r++]=65533,e+=n-1;else{for(i&=2===n?31:3===n?15:7;1<n&&e<s;)i=i<<6|63&t[e++],n--;1<n?a[r++]=65533:i<65536?a[r++]=i:(i-=65536,a[r++]=55296|i>>10&1023,a[r++]=56320|1023&i)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(t=o.transformTo(h.uint8array?"uint8array":"array",t))},o.inherits(a,i),a.prototype.processChunk=function(t){var e=o.transformTo(h.uint8array?"uint8array":"array",t.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=e;(e=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),e.set(r,this.leftOver.length)}else e=this.leftOver.concat(e);this.leftOver=null}var i=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}(e),n=e;i!==e.length&&(h.uint8array?(n=e.subarray(0,i),this.leftOver=e.subarray(i,e.length)):(n=e.slice(0,i),this.leftOver=e.slice(i,e.length))),this.push({data:s.utf8decode(n),meta:t.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,i),l.prototype.processChunk=function(t){this.push({data:s.utf8encode(t.data),meta:t.meta})},s.Utf8EncodeWorker=l},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(t,e,a){"use strict";var o=t("./support"),h=t("./base64"),r=t("./nodejsUtils"),i=t("set-immediate-shim"),u=t("./external");function n(t){return t}function l(t,e){for(var r=0;r<t.length;++r)e[r]=255&t.charCodeAt(r);return e}a.newBlob=function(e,r){a.checkSupport("blob");try{return new Blob([e],{type:r})}catch(t){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return i.append(e),i.getBlob(r)}catch(t){throw new Error("Bug : can't construct the Blob.")}}};var s={stringifyByChunk:function(t,e,r){var i=[],n=0,s=t.length;if(s<=r)return String.fromCharCode.apply(null,t);for(;n<s;)"array"===e||"nodebuffer"===e?i.push(String.fromCharCode.apply(null,t.slice(n,Math.min(n+r,s)))):i.push(String.fromCharCode.apply(null,t.subarray(n,Math.min(n+r,s)))),n+=r;return i.join("")},stringifyByChar:function(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(t){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(t){return!1}}()}};function f(t){var e=65536,r=a.getTypeOf(t),i=!0;if("uint8array"===r?i=s.applyCanBeUsed.uint8array:"nodebuffer"===r&&(i=s.applyCanBeUsed.nodebuffer),i)for(;1<e;)try{return s.stringifyByChunk(t,r,e)}catch(t){e=Math.floor(e/2)}return s.stringifyByChar(t)}function d(t,e){for(var r=0;r<t.length;r++)e[r]=t[r];return e}a.applyFromCharCode=f;var c={};c.string={string:n,array:function(t){return l(t,new Array(t.length))},arraybuffer:function(t){return c.string.uint8array(t).buffer},uint8array:function(t){return l(t,new Uint8Array(t.length))},nodebuffer:function(t){return l(t,r.allocBuffer(t.length))}},c.array={string:f,array:n,arraybuffer:function(t){return new Uint8Array(t).buffer},uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(t)}},c.arraybuffer={string:function(t){return f(new Uint8Array(t))},array:function(t){return d(new Uint8Array(t),new Array(t.byteLength))},arraybuffer:n,uint8array:function(t){return new Uint8Array(t)},nodebuffer:function(t){return r.newBufferFrom(new Uint8Array(t))}},c.uint8array={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return t.buffer},uint8array:n,nodebuffer:function(t){return r.newBufferFrom(t)}},c.nodebuffer={string:f,array:function(t){return d(t,new Array(t.length))},arraybuffer:function(t){return c.nodebuffer.uint8array(t).buffer},uint8array:function(t){return d(t,new Uint8Array(t.length))},nodebuffer:n},a.transformTo=function(t,e){if(e=e||"",!t)return e;a.checkSupport(t);var r=a.getTypeOf(e);return c[r][t](e)},a.resolve=function(t){for(var e=t.split("/"),r=[],i=0;i<e.length;i++){var n=e[i];"."===n||""===n&&0!==i&&i!==e.length-1||(".."===n?r.pop():r.push(n))}return r.join("/")},a.getTypeOf=function(t){return"string"==typeof t?"string":"[object Array]"===Object.prototype.toString.call(t)?"array":o.nodebuffer&&r.isBuffer(t)?"nodebuffer":o.uint8array&&t instanceof Uint8Array?"uint8array":o.arraybuffer&&t instanceof ArrayBuffer?"arraybuffer":void 0},a.checkSupport=function(t){if(!o[t.toLowerCase()])throw new Error(t+" is not supported by this platform")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(t){var e,r,i="";for(r=0;r<(t||"").length;r++)i+="\\x"+((e=t.charCodeAt(r))<16?"0":"")+e.toString(16).toUpperCase();return i},a.delay=function(t,e,r){i(function(){t.apply(r||null,e||[])})},a.inherits=function(t,e){function r(){}r.prototype=e.prototype,t.prototype=new r},a.extend=function(){var t,e,r={};for(t=0;t<arguments.length;t++)for(e in arguments[t])arguments[t].hasOwnProperty(e)&&void 0===r[e]&&(r[e]=arguments[t][e]);return r},a.prepareContent=function(r,t,i,n,s){return u.Promise.resolve(t).then(function(i){return o.blob&&(i instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(i)))&&"undefined"!=typeof FileReader?new u.Promise(function(e,r){var t=new FileReader;t.onload=function(t){e(t.target.result)},t.onerror=function(t){r(t.target.error)},t.readAsArrayBuffer(i)}):i}).then(function(t){var e=a.getTypeOf(t);return e?("arraybuffer"===e?t=a.transformTo("uint8array",t):"string"===e&&(s?t=h.decode(t):i&&!0!==n&&(t=function(t){return l(t,o.uint8array?new Uint8Array(t.length):new Array(t.length))}(t))),t):u.Promise.reject(new Error("Can't read the data of '"+r+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))})}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(t,e,r){"use strict";var i=t("./reader/readerFor"),n=t("./utils"),s=t("./signature"),a=t("./zipEntry"),o=(t("./utf8"),t("./support"));function h(t){this.files=[],this.loadOptions=t}h.prototype={checkSignature:function(t){if(!this.reader.readAndCheckSignature(t)){this.reader.index-=4;var e=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+n.pretty(e)+", expected "+n.pretty(t)+")")}},isSignature:function(t,e){var r=this.reader.index;this.reader.setIndex(t);var i=this.reader.readString(4)===e;return this.reader.setIndex(r),i},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var t=this.reader.readData(this.zipCommentLength),e=o.uint8array?"uint8array":"array",r=n.transformTo(e,t);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var t,e,r,i=this.zip64EndOfCentralSize-44;0<i;)t=this.reader.readInt(2),e=this.reader.readInt(4),r=this.reader.readData(e),this.zip64ExtensibleData[t]={id:t,length:e,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var t,e;for(t=0;t<this.files.length;t++)e=this.files[t],this.reader.setIndex(e.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),e.readLocalPart(this.reader),e.handleUTF8(),e.processAttributes()},readCentralDir:function(){var t;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(t=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(t);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var t=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(t<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip: can't find end of central directory");this.reader.setIndex(t);var e=t;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===n.MAX_VALUE_16BITS||this.diskWithCentralDirStart===n.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===n.MAX_VALUE_16BITS||this.centralDirRecords===n.MAX_VALUE_16BITS||this.centralDirSize===n.MAX_VALUE_32BITS||this.centralDirOffset===n.MAX_VALUE_32BITS){if(this.zip64=!0,(t=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(t),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var i=e-r;if(0<i)this.isSignature(e,s.CENTRAL_FILE_HEADER)||(this.reader.zero=i);else if(i<0)throw new Error("Corrupted zip: missing "+Math.abs(i)+" bytes.")},prepareReader:function(t){this.reader=i(t)},load:function(t){this.prepareReader(t),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},e.exports=h},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(t,e,r){"use strict";var i=t("./reader/readerFor"),s=t("./utils"),n=t("./compressedObject"),a=t("./crc32"),o=t("./utf8"),h=t("./compressions"),u=t("./support");function l(t,e){this.options=t,this.loadOptions=e}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(t){var e,r;if(t.skip(22),this.fileNameLength=t.readInt(2),r=t.readInt(2),this.fileName=t.readData(this.fileNameLength),t.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(e=function(t){for(var e in h)if(h.hasOwnProperty(e)&&h[e].magic===t)return h[e];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+s.pretty(this.compressionMethod)+" unknown (inner file : "+s.transformTo("string",this.fileName)+")");this.decompressed=new n(this.compressedSize,this.uncompressedSize,this.crc32,e,t.readData(this.compressedSize))},readCentralPart:function(t){this.versionMadeBy=t.readInt(2),t.skip(2),this.bitFlag=t.readInt(2),this.compressionMethod=t.readString(2),this.date=t.readDate(),this.crc32=t.readInt(4),this.compressedSize=t.readInt(4),this.uncompressedSize=t.readInt(4);var e=t.readInt(2);if(this.extraFieldsLength=t.readInt(2),this.fileCommentLength=t.readInt(2),this.diskNumberStart=t.readInt(2),this.internalFileAttributes=t.readInt(2),this.externalFileAttributes=t.readInt(4),this.localHeaderOffset=t.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");t.skip(e),this.readExtraFields(t),this.parseZIP64ExtraField(t),this.fileComment=t.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var t=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==t&&(this.dosPermissions=63&this.externalFileAttributes),3==t&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(t){if(this.extraFields[1]){var e=i(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(t){var e,r,i,n=t.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});t.index+4<n;)e=t.readInt(2),r=t.readInt(2),i=t.readData(r),this.extraFields[e]={id:e,length:r,value:i};t.setIndex(n)},handleUTF8:function(){var t=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var e=this.findExtraFieldUnicodePath();if(null!==e)this.fileNameStr=e;else{var r=s.transformTo(t,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var i=this.findExtraFieldUnicodeComment();if(null!==i)this.fileCommentStr=i;else{var n=s.transformTo(t,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(n)}}},findExtraFieldUnicodePath:function(){var t=this.extraFields[28789];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileName)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null},findExtraFieldUnicodeComment:function(){var t=this.extraFields[25461];if(t){var e=i(t.value);return 1!==e.readInt(1)?null:a(this.fileComment)!==e.readInt(4)?null:o.utf8decode(e.readData(t.length-5))}return null}},e.exports=l},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(t,e,r){"use strict";function i(t,e,r){this.name=t,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=e,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=t("./stream/StreamHelper"),n=t("./stream/DataWorker"),a=t("./utf8"),o=t("./compressedObject"),h=t("./stream/GenericWorker");i.prototype={internalStream:function(t){var e=null,r="string";try{if(!t)throw new Error("No output type specified.");var i="string"===(r=t.toLowerCase())||"text"===r;"binarystring"!==r&&"text"!==r||(r="string"),e=this._decompressWorker();var n=!this._dataBinary;n&&!i&&(e=e.pipe(new a.Utf8EncodeWorker)),!n&&i&&(e=e.pipe(new a.Utf8DecodeWorker))}catch(t){(e=new h("error")).error(t)}return new s(e,r,"")},async:function(t,e){return this.internalStream(t).accumulate(e)},nodeStream:function(t,e){return this.internalStream(t||"nodebuffer").toNodejsStream(e)},_compressWorker:function(t,e){if(this._data instanceof o&&this._data.compression.magic===t.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,t,e)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new n(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],l=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},f=0;f<u.length;f++)i.prototype[u[f]]=l;e.exports=i},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(t,l,e){(function(e){"use strict";var r,i,t=e.MutationObserver||e.WebKitMutationObserver;if(t){var n=0,s=new t(u),a=e.document.createTextNode("");s.observe(a,{characterData:!0}),r=function(){a.data=n=++n%2}}else if(e.setImmediate||void 0===e.MessageChannel)r="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){u(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(u,0)};else{var o=new e.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var t,e;i=!0;for(var r=h.length;r;){for(e=h,h=[],t=-1;++t<r;)e[t]();r=h.length}i=!1}l.exports=function(t){1!==h.push(t)||i||r()}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(t,e,r){"use strict";var n=t("immediate");function u(){}var l={},s=["REJECTED"],a=["FULFILLED"],i=["PENDING"];function o(t){if("function"!=typeof t)throw new TypeError("resolver must be a function");this.state=i,this.queue=[],this.outcome=void 0,t!==u&&c(this,t)}function h(t,e,r){this.promise=t,"function"==typeof e&&(this.onFulfilled=e,this.callFulfilled=this.otherCallFulfilled),"function"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(e,r,i){n(function(){var t;try{t=r(i)}catch(t){return l.reject(e,t)}t===e?l.reject(e,new TypeError("Cannot resolve promise with itself")):l.resolve(e,t)})}function d(t){var e=t&&t.then;if(t&&("object"==typeof t||"function"==typeof t)&&"function"==typeof e)return function(){e.apply(t,arguments)}}function c(e,t){var r=!1;function i(t){r||(r=!0,l.reject(e,t))}function n(t){r||(r=!0,l.resolve(e,t))}var s=p(function(){t(n,i)});"error"===s.status&&i(s.value)}function p(t,e){var r={};try{r.value=t(e),r.status="success"}catch(t){r.status="error",r.value=t}return r}(e.exports=o).prototype.finally=function(e){if("function"!=typeof e)return this;var r=this.constructor;return this.then(function(t){return r.resolve(e()).then(function(){return t})},function(t){return r.resolve(e()).then(function(){throw t})})},o.prototype.catch=function(t){return this.then(null,t)},o.prototype.then=function(t,e){if("function"!=typeof t&&this.state===a||"function"!=typeof e&&this.state===s)return this;var r=new this.constructor(u);this.state!==i?f(r,this.state===a?t:e,this.outcome):this.queue.push(new h(r,t,e));return r},h.prototype.callFulfilled=function(t){l.resolve(this.promise,t)},h.prototype.otherCallFulfilled=function(t){f(this.promise,this.onFulfilled,t)},h.prototype.callRejected=function(t){l.reject(this.promise,t)},h.prototype.otherCallRejected=function(t){f(this.promise,this.onRejected,t)},l.resolve=function(t,e){var r=p(d,e);if("error"===r.status)return l.reject(t,r.value);var i=r.value;if(i)c(t,i);else{t.state=a,t.outcome=e;for(var n=-1,s=t.queue.length;++n<s;)t.queue[n].callFulfilled(e)}return t},l.reject=function(t,e){t.state=s,t.outcome=e;for(var r=-1,i=t.queue.length;++r<i;)t.queue[r].callRejected(e);return t},o.resolve=function(t){if(t instanceof this)return t;return l.resolve(new this(u),t)},o.reject=function(t){var e=new this(u);return l.reject(e,t)},o.all=function(t){var r=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var i=t.length,n=!1;if(!i)return this.resolve([]);var s=new Array(i),a=0,e=-1,o=new this(u);for(;++e<i;)h(t[e],e);return o;function h(t,e){r.resolve(t).then(function(t){s[e]=t,++a!==i||n||(n=!0,l.resolve(o,s))},function(t){n||(n=!0,l.reject(o,t))})}},o.race=function(t){var e=this;if("[object Array]"!==Object.prototype.toString.call(t))return this.reject(new TypeError("must be an array"));var r=t.length,i=!1;if(!r)return this.resolve([]);var n=-1,s=new this(u);for(;++n<r;)a=t[n],e.resolve(a).then(function(t){i||(i=!0,l.resolve(s,t))},function(t){i||(i=!0,l.reject(s,t))});var a;return s}},{immediate:36}],38:[function(t,e,r){"use strict";var i={};(0,t("./lib/utils/common").assign)(i,t("./lib/deflate"),t("./lib/inflate"),t("./lib/zlib/constants")),e.exports=i},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(t,e,r){"use strict";var a=t("./zlib/deflate"),o=t("./utils/common"),h=t("./utils/strings"),n=t("./zlib/messages"),s=t("./zlib/zstream"),u=Object.prototype.toString,l=0,f=-1,d=0,c=8;function p(t){if(!(this instanceof p))return new p(t);this.options=o.assign({level:f,method:c,chunkSize:16384,windowBits:15,memLevel:8,strategy:d,to:""},t||{});var e=this.options;e.raw&&0<e.windowBits?e.windowBits=-e.windowBits:e.gzip&&0<e.windowBits&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==l)throw new Error(n[r]);if(e.header&&a.deflateSetHeader(this.strm,e.header),e.dictionary){var i;if(i="string"==typeof e.dictionary?h.string2buf(e.dictionary):"[object ArrayBuffer]"===u.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,(r=a.deflateSetDictionary(this.strm,i))!==l)throw new Error(n[r]);this._dict_set=!0}}function i(t,e){var r=new p(e);if(r.push(t,!0),r.err)throw r.msg||n[r.err];return r.result}p.prototype.push=function(t,e){var r,i,n=this.strm,s=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:!0===e?4:0,"string"==typeof t?n.input=h.string2buf(t):"[object ArrayBuffer]"===u.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new o.Buf8(s),n.next_out=0,n.avail_out=s),1!==(r=a.deflate(n,i))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==n.avail_out&&(0!==n.avail_in||4!==i&&2!==i)||("string"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(n.output,n.next_out))):this.onData(o.shrinkBuf(n.output,n.next_out)))}while((0<n.avail_in||0===n.avail_out)&&1!==r);return 4===i?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==i||(this.onEnd(l),!(n.avail_out=0))},p.prototype.onData=function(t){this.chunks.push(t)},p.prototype.onEnd=function(t){t===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Deflate=p,r.deflate=i,r.deflateRaw=function(t,e){return(e=e||{}).raw=!0,i(t,e)},r.gzip=function(t,e){return(e=e||{}).gzip=!0,i(t,e)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(t,e,r){"use strict";var d=t("./zlib/inflate"),c=t("./utils/common"),p=t("./utils/strings"),m=t("./zlib/constants"),i=t("./zlib/messages"),n=t("./zlib/zstream"),s=t("./zlib/gzheader"),_=Object.prototype.toString;function a(t){if(!(this instanceof a))return new a(t);this.options=c.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&0<=e.windowBits&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(0<=e.windowBits&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),15<e.windowBits&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new n,this.strm.avail_out=0;var r=d.inflateInit2(this.strm,e.windowBits);if(r!==m.Z_OK)throw new Error(i[r]);this.header=new s,d.inflateGetHeader(this.strm,this.header)}function o(t,e){var r=new a(e);if(r.push(t,!0),r.err)throw r.msg||i[r.err];return r.result}a.prototype.push=function(t,e){var r,i,n,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;i=e===~~e?e:!0===e?m.Z_FINISH:m.Z_NO_FLUSH,"string"==typeof t?h.input=p.binstring2buf(t):"[object ArrayBuffer]"===_.call(t)?h.input=new Uint8Array(t):h.input=t,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new c.Buf8(u),h.next_out=0,h.avail_out=u),(r=d.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o="string"==typeof l?p.string2buf(l):"[object ArrayBuffer]"===_.call(l)?new Uint8Array(l):l,r=d.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||i!==m.Z_FINISH&&i!==m.Z_SYNC_FLUSH)||("string"===this.options.to?(n=p.utf8border(h.output,h.next_out),s=h.next_out-n,a=p.buf2string(h.output,n),h.next_out=s,h.avail_out=u-s,s&&c.arraySet(h.output,h.output,n,s,0),this.onData(a)):this.onData(c.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(i=m.Z_FINISH),i===m.Z_FINISH?(r=d.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):i!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(t){this.chunks.push(t)},a.prototype.onEnd=function(t){t===m.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=c.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(t,e){return(e=e||{}).raw=!0,o(t,e)},r.ungzip=o},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(t,e,r){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;r.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var i in r)r.hasOwnProperty(i)&&(t[i]=r[i])}}return t},r.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,r,i,n){if(e.subarray&&t.subarray)t.set(e.subarray(r,r+i),n);else for(var s=0;s<i;s++)t[n+s]=e[r+s]},flattenChunks:function(t){var e,r,i,n,s,a;for(e=i=0,r=t.length;e<r;e++)i+=t[e].length;for(a=new Uint8Array(i),e=n=0,r=t.length;e<r;e++)s=t[e],a.set(s,n),n+=s.length;return a}},s={arraySet:function(t,e,r,i,n){for(var s=0;s<i;s++)t[n+s]=e[r+s]},flattenChunks:function(t){return[].concat.apply([],t)}};r.setTyped=function(t){t?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,n)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(i)},{}],42:[function(t,e,r){"use strict";var h=t("./common"),n=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){n=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var u=new h.Buf8(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;function l(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&n))return String.fromCharCode.apply(null,h.shrinkBuf(t,e));for(var r="",i=0;i<e;i++)r+=String.fromCharCode(t[i]);return r}u[254]=u[254]=1,r.string2buf=function(t){var e,r,i,n,s,a=t.length,o=0;for(n=0;n<a;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),o+=r<128?1:r<2048?2:r<65536?3:4;for(e=new h.Buf8(o),n=s=0;s<o;n++)55296==(64512&(r=t.charCodeAt(n)))&&n+1<a&&56320==(64512&(i=t.charCodeAt(n+1)))&&(r=65536+(r-55296<<10)+(i-56320),n++),r<128?e[s++]=r:(r<2048?e[s++]=192|r>>>6:(r<65536?e[s++]=224|r>>>12:(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63),e[s++]=128|r>>>6&63),e[s++]=128|63&r);return e},r.buf2binstring=function(t){return l(t,t.length)},r.binstring2buf=function(t){for(var e=new h.Buf8(t.length),r=0,i=e.length;r<i;r++)e[r]=t.charCodeAt(r);return e},r.buf2string=function(t,e){var r,i,n,s,a=e||t.length,o=new Array(2*a);for(r=i=0;r<a;)if((n=t[r++])<128)o[i++]=n;else if(4<(s=u[n]))o[i++]=65533,r+=s-1;else{for(n&=2===s?31:3===s?15:7;1<s&&r<a;)n=n<<6|63&t[r++],s--;1<s?o[i++]=65533:n<65536?o[i++]=n:(n-=65536,o[i++]=55296|n>>10&1023,o[i++]=56320|1023&n)}return l(o,i)},r.utf8border=function(t,e){var r;for((e=e||t.length)>t.length&&(e=t.length),r=e-1;0<=r&&128==(192&t[r]);)r--;return r<0?e:0===r?e:r+u[t[r]]>e?r:e}},{"./common":41}],43:[function(t,e,r){"use strict";e.exports=function(t,e,r,i){for(var n=65535&t|0,s=t>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(n=n+e[i++]|0)|0,--a;);n%=65521,s%=65521}return n|s<<16|0}},{}],44:[function(t,e,r){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(t,e,r){"use strict";var o=function(){for(var t,e=[],r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e}();e.exports=function(t,e,r,i){var n=o,s=i+r;t^=-1;for(var a=i;a<s;a++)t=t>>>8^n[255&(t^e[a])];return-1^t}},{}],46:[function(t,e,r){"use strict";var h,d=t("../utils/common"),u=t("./trees"),c=t("./adler32"),p=t("./crc32"),i=t("./messages"),l=0,f=4,m=0,_=-2,g=-1,b=4,n=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(t,e){return t.msg=i[e],e}function T(t){return(t<<1)-(4<t?9:0)}function D(t){for(var e=t.length;0<=--e;)t[e]=0}function F(t){var e=t.state,r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(d.arraySet(t.output,e.pending_buf,e.pending_out,r,t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))}function N(t,e){u._tr_flush_block(t,0<=t.block_start?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,F(t.strm)}function U(t,e){t.pending_buf[t.pending++]=e}function P(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function L(t,e){var r,i,n=t.max_chain_length,s=t.strstart,a=t.prev_length,o=t.nice_match,h=t.strstart>t.w_size-z?t.strstart-(t.w_size-z):0,u=t.window,l=t.w_mask,f=t.prev,d=t.strstart+S,c=u[s+a-1],p=u[s+a];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do{if(u[(r=e)+a]===p&&u[r+a-1]===c&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<d);if(i=S-(d-s),s=d-S,a<i){if(t.match_start=e,o<=(a=i))break;c=u[s+a-1],p=u[s+a]}}}while((e=f[e&l])>h&&0!=--n);return a<=t.lookahead?a:t.lookahead}function j(t){var e,r,i,n,s,a,o,h,u,l,f=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=f+(f-z)){for(d.arraySet(t.window,t.window,f,f,0),t.match_start-=f,t.strstart-=f,t.block_start-=f,e=r=t.hash_size;i=t.head[--e],t.head[e]=f<=i?i-f:0,--r;);for(e=r=f;i=t.prev[--e],t.prev[e]=f<=i?i-f:0,--r;);n+=f}if(0===t.strm.avail_in)break;if(a=t.strm,o=t.window,h=t.strstart+t.lookahead,u=n,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,d.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=c(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),t.lookahead+=r,t.lookahead+t.insert>=x)for(s=t.strstart-t.insert,t.ins_h=t.window[s],t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[s+x-1])&t.hash_mask,t.prev[s&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=s,s++,t.insert--,!(t.lookahead+t.insert<x)););}while(t.lookahead<z&&0!==t.strm.avail_in)}function Z(t,e){for(var r,i;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r)),t.match_length>=x)if(i=u._tr_tally(t,t.strstart-t.match_start,t.match_length-x),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=x){for(t.match_length--;t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart,0!=--t.match_length;);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function W(t,e){for(var r,i,n;;){if(t.lookahead<z){if(j(t),t.lookahead<z&&e===l)return A;if(0===t.lookahead)break}if(r=0,t.lookahead>=x&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=x-1,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-z&&(t.match_length=L(t,r),t.match_length<=5&&(1===t.strategy||t.match_length===x&&4096<t.strstart-t.match_start)&&(t.match_length=x-1)),t.prev_length>=x&&t.match_length<=t.prev_length){for(n=t.strstart+t.lookahead-x,i=u._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-x),t.lookahead-=t.prev_length-1,t.prev_length-=2;++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+x-1])&t.hash_mask,r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!=--t.prev_length;);if(t.match_available=0,t.match_length=x-1,t.strstart++,i&&(N(t,!1),0===t.strm.avail_out))return A}else if(t.match_available){if((i=u._tr_tally(t,0,t.window[t.strstart-1]))&&N(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return A}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=u._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<x-1?t.strstart:x-1,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}function M(t,e,r,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=i,this.func=n}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new d.Buf16(2*w),this.dyn_dtree=new d.Buf16(2*(2*a+1)),this.bl_tree=new d.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new d.Buf16(k+1),this.heap=new d.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new d.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=n,(e=t.state).pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?C:E,t.adler=2===e.wrap?0:1,e.last_flush=l,u._tr_init(e),m):R(t,_)}function K(t){var e=G(t);return e===m&&function(t){t.window_size=2*t.w_size,D(t.head),t.max_lazy_match=h[t.level].max_lazy,t.good_match=h[t.level].good_length,t.nice_match=h[t.level].nice_length,t.max_chain_length=h[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=x-1,t.match_available=0,t.ins_h=0}(t.state),e}function Y(t,e,r,i,n,s){if(!t)return _;var a=1;if(e===g&&(e=6),i<0?(a=0,i=-i):15<i&&(a=2,i-=16),n<1||y<n||r!==v||i<8||15<i||e<0||9<e||s<0||b<s)return R(t,_);8===i&&(i=9);var o=new H;return(t.state=o).strm=t,o.wrap=a,o.gzhead=null,o.w_bits=i,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=n+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new d.Buf8(2*o.w_size),o.head=new d.Buf16(o.hash_size),o.prev=new d.Buf16(o.w_size),o.lit_bufsize=1<<n+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new d.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=e,o.strategy=s,o.method=r,K(t)}h=[new M(0,0,0,0,function(t,e){var r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(j(t),0===t.lookahead&&e===l)return A;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+r;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,N(t,!1),0===t.strm.avail_out))return A;if(t.strstart-t.block_start>=t.w_size-z&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):(t.strstart>t.block_start&&(N(t,!1),t.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(t,e){return Y(t,e,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(t,e){return t&&t.state?2!==t.state.wrap?_:(t.state.gzhead=e,m):_},r.deflate=function(t,e){var r,i,n,s;if(!t||!t.state||5<e||e<0)return t?R(t,_):_;if(i=t.state,!t.output||!t.input&&0!==t.avail_in||666===i.status&&e!==f)return R(t,0===t.avail_out?-5:_);if(i.strm=t,r=i.last_flush,i.last_flush=e,i.status===C)if(2===i.wrap)t.adler=0,U(i,31),U(i,139),U(i,8),i.gzhead?(U(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),U(i,255&i.gzhead.time),U(i,i.gzhead.time>>8&255),U(i,i.gzhead.time>>16&255),U(i,i.gzhead.time>>24&255),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(U(i,255&i.gzhead.extra.length),U(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=p(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(U(i,0),U(i,0),U(i,0),U(i,0),U(i,0),U(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),U(i,3),i.status=E);else{var a=v+(i.w_bits-8<<4)<<8;a|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(a|=32),a+=31-a%31,i.status=E,P(i,a),0!==i.strstart&&(P(i,t.adler>>>16),P(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(n=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending!==i.pending_buf_size));)U(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,U(i,s)}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){n=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),F(t),n=i.pending,i.pending===i.pending_buf_size)){s=1;break}s=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,U(i,s)}while(0!==s);i.gzhead.hcrc&&i.pending>n&&(t.adler=p(t.adler,i.pending_buf,i.pending-n,n)),0===s&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&F(t),i.pending+2<=i.pending_buf_size&&(U(i,255&t.adler),U(i,t.adler>>8&255),t.adler=0,i.status=E)):i.status=E),0!==i.pending){if(F(t),0===t.avail_out)return i.last_flush=-1,m}else if(0===t.avail_in&&T(e)<=T(r)&&e!==f)return R(t,-5);if(666===i.status&&0!==t.avail_in)return R(t,-5);if(0!==t.avail_in||0!==i.lookahead||e!==l&&666!==i.status){var o=2===i.strategy?function(t,e){for(var r;;){if(0===t.lookahead&&(j(t),0===t.lookahead)){if(e===l)return A;break}if(t.match_length=0,r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):3===i.strategy?function(t,e){for(var r,i,n,s,a=t.window;;){if(t.lookahead<=S){if(j(t),t.lookahead<=S&&e===l)return A;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=x&&0<t.strstart&&(i=a[n=t.strstart-1])===a[++n]&&i===a[++n]&&i===a[++n]){s=t.strstart+S;do{}while(i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&i===a[++n]&&n<s);t.match_length=S-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=x?(r=u._tr_tally(t,1,t.match_length-x),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=u._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(N(t,!1),0===t.strm.avail_out))return A}return t.insert=0,e===f?(N(t,!0),0===t.strm.avail_out?O:B):t.last_lit&&(N(t,!1),0===t.strm.avail_out)?A:I}(i,e):h[i.level].func(i,e);if(o!==O&&o!==B||(i.status=666),o===A||o===O)return 0===t.avail_out&&(i.last_flush=-1),m;if(o===I&&(1===e?u._tr_align(i):5!==e&&(u._tr_stored_block(i,0,0,!1),3===e&&(D(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),F(t),0===t.avail_out))return i.last_flush=-1,m}return e!==f?m:i.wrap<=0?1:(2===i.wrap?(U(i,255&t.adler),U(i,t.adler>>8&255),U(i,t.adler>>16&255),U(i,t.adler>>24&255),U(i,255&t.total_in),U(i,t.total_in>>8&255),U(i,t.total_in>>16&255),U(i,t.total_in>>24&255)):(P(i,t.adler>>>16),P(i,65535&t.adler)),F(t),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?m:1)},r.deflateEnd=function(t){var e;return t&&t.state?(e=t.state.status)!==C&&69!==e&&73!==e&&91!==e&&103!==e&&e!==E&&666!==e?R(t,_):(t.state=null,e===E?R(t,-3):m):_},r.deflateSetDictionary=function(t,e){var r,i,n,s,a,o,h,u,l=e.length;if(!t||!t.state)return _;if(2===(s=(r=t.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(t.adler=c(t.adler,e,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new d.Buf8(r.w_size),d.arraySet(u,e,l-r.w_size,r.w_size,0),e=u,l=r.w_size),a=t.avail_in,o=t.next_in,h=t.input,t.avail_in=l,t.next_in=0,t.input=e,j(r);r.lookahead>=x;){for(i=r.strstart,n=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[i+x-1])&r.hash_mask,r.prev[i&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=i,i++,--n;);r.strstart=i,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,t.next_in=o,t.input=h,t.avail_in=a,r.wrap=s,m},r.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(t,e,r){"use strict";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(t,e,r){"use strict";e.exports=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C;r=t.state,i=t.next_in,z=t.input,n=i+(t.avail_in-5),s=t.next_out,C=t.output,a=s-(e-t.avail_out),o=s+(t.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,d=r.window,c=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;t:do{p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=m[c&g];e:for(;;){if(c>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(c&(1<<y)-1)];continue e}if(32&y){r.mode=12;break t}t.msg="invalid literal/length code",r.mode=30;break t}w=65535&v,(y&=15)&&(p<y&&(c+=z[i++]<<p,p+=8),w+=c&(1<<y)-1,c>>>=y,p-=y),p<15&&(c+=z[i++]<<p,p+=8,c+=z[i++]<<p,p+=8),v=_[c&b];r:for(;;){if(c>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(c&(1<<y)-1)];continue r}t.msg="invalid distance code",r.mode=30;break t}if(k=65535&v,p<(y&=15)&&(c+=z[i++]<<p,(p+=8)<y&&(c+=z[i++]<<p,p+=8)),h<(k+=c&(1<<y)-1)){t.msg="invalid distance too far back",r.mode=30;break t}if(c>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){t.msg="invalid distance too far back",r.mode=30;break t}if(S=d,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=d[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=d[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=d[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(i<n&&s<o);i-=w=p>>3,c&=(1<<(p-=w<<3))-1,t.next_in=i,t.next_out=s,t.avail_in=i<n?n-i+5:5-(i-n),t.avail_out=s<o?o-s+257:257-(s-o),r.hold=c,r.bits=p}},{}],49:[function(t,e,r){"use strict";var I=t("../utils/common"),O=t("./adler32"),B=t("./crc32"),R=t("./inffast"),T=t("./inftrees"),D=1,F=2,N=0,U=-2,P=1,i=852,n=592;function L(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=P,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new I.Buf32(i),e.distcode=e.distdyn=new I.Buf32(n),e.sane=1,e.back=-1,N):U}function o(t){var e;return t&&t.state?((e=t.state).wsize=0,e.whave=0,e.wnext=0,a(t)):U}function h(t,e){var r,i;return t&&t.state?(i=t.state,e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||15<e)?U:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=r,i.wbits=e,o(t))):U}function u(t,e){var r,i;return t?(i=new s,(t.state=i).window=null,(r=h(t,e))!==N&&(t.state=null),r):U}var l,f,d=!0;function j(t){if(d){var e;for(l=new I.Buf32(512),f=new I.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(T(D,t.lens,0,288,l,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;T(F,t.lens,0,32,f,0,t.work,{bits:5}),d=!1}t.lencode=l,t.lenbits=9,t.distcode=f,t.distbits=5}function Z(t,e,r,i){var n,s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),i>=s.wsize?(I.arraySet(s.window,e,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(i<(n=s.wsize-s.wnext)&&(n=i),I.arraySet(s.window,e,r-i,n,s.wnext),(i-=n)?(I.arraySet(s.window,e,r-i,i,0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(t){return u(t,15)},r.inflateInit2=u,r.inflate=function(t,e){var r,i,n,s,a,o,h,u,l,f,d,c,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return U;12===(r=t.state).mode&&(r.mode=13),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,f=o,d=h,x=N;t:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){t.msg="incorrect header check",r.mode=30;break}if(8!=(15&u)){t.msg="unknown compression method",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){t.msg="invalid window size",r.mode=30;break}r.dmax=1<<k,t.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){t.msg="unknown compression method",r.mode=30;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(c=r.length)&&(c=o),c&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,i,s,c,k)),512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,r.length-=c),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break t;for(c=0;k=i[s+c++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&c<o;);if(512&r.flags&&(r.check=B(r.check,i,c,s)),o-=c,s+=c,k)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u!==(65535&r.check)){t.msg="header crc mismatch",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}t.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,2;t.adler=r.check=1,r.mode=12;case 12:if(5===e||6===e)break t;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==e)break;u>>>=2,l-=2;break t;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){t.msg="invalid stored block lengths",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===e)break t;case 15:r.mode=16;case 16:if(c=r.length){if(o<c&&(c=o),h<c&&(c=h),0===c)break t;I.arraySet(n,i,s,c,a),o-=c,s+=c,h-=c,a+=c,r.length-=c;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){t.msg="too many length or distance symbols",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg="invalid code lengths set",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){t.msg="invalid bit length repeat",r.mode=30;break}k=r.lens[r.have-1],c=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}l-=_,k=0,c=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}l-=_,k=0,c=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+c>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=30;break}for(;c--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){t.msg="invalid literal/lengths set",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){t.msg="invalid distances set",r.mode=30;break}if(r.mode=20,6===e)break t;case 20:r.mode=21;case 21:if(6<=o&&258<=h){t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,R(t,d),a=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,o=t.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){t.msg="invalid literal/length code",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){t.msg="invalid distance code",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=30;break}r.mode=25;case 25:if(0===h)break t;if(c=d-h,r.offset>c){if((c=r.offset-c)>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=30;break}p=c>r.wnext?(c-=r.wnext,r.wsize-c):r.wnext-c,c>r.length&&(c=r.length),m=r.window}else m=n,p=a-r.offset,c=r.length;for(h<c&&(c=h),h-=c,r.length-=c;n[a++]=m[p++],--c;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break t;n[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break t;o--,u|=i[s++]<<l,l+=8}if(d-=h,t.total_out+=d,r.total+=d,d&&(t.adler=r.check=r.flags?B(r.check,n,d,a-d):O(r.check,n,d,a-d)),d=h,(r.flags?u:L(u))!==r.check){t.msg="incorrect data check",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break t;o--,u+=i[s++]<<l,l+=8}if(u!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break t;case 30:x=-3;break t;case 31:return-4;case 32:default:return U}return t.next_out=a,t.avail_out=h,t.next_in=s,t.avail_in=o,r.hold=u,r.bits=l,(r.wsize||d!==t.avail_out&&r.mode<30&&(r.mode<27||4!==e))&&Z(t,t.output,t.next_out,d-t.avail_out)?(r.mode=31,-4):(f-=t.avail_in,d-=t.avail_out,t.total_in+=f,t.total_out+=d,r.total+=d,r.wrap&&d&&(t.adler=r.check=r.flags?B(r.check,n,d,t.next_out-d):O(r.check,n,d,t.next_out-d)),t.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===d||4===e)&&x===N&&(x=-5),x)},r.inflateEnd=function(t){if(!t||!t.state)return U;var e=t.state;return e.window&&(e.window=null),t.state=null,N},r.inflateGetHeader=function(t,e){var r;return t&&t.state?0==(2&(r=t.state).wrap)?U:((r.head=e).done=!1,N):U},r.inflateSetDictionary=function(t,e){var r,i=e.length;return t&&t.state?0!==(r=t.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,e,i,0)!==r.check?-3:Z(t,e,i,i)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(t,e,r){"use strict";var D=t("../utils/common"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,r,i,n,s,a,o){var h,u,l,f,d,c,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<i;v++)O[e[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return n[s++]=20971520,n[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===t||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<i;v++)0!==e[r+v]&&(a[B[e[r+v]]++]=v);if(c=0===t?(A=R=a,19):1===t?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,d=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===t&&852<C||2===t&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<c?(m=0,a[v]):a[v]>c?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;n[d+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=e[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),d+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===t&&852<C||2===t&&592<C)return 1;n[l=E&f]=k<<24|x<<16|d-s|0}}return 0!==E&&(n[d+E]=b-S<<24|64<<16|0),o.bits=k,0}},{"../utils/common":41}],51:[function(t,e,r){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(t,e,r){"use strict";var n=t("../utils/common"),o=0,h=1;function i(t){for(var e=t.length;0<=--e;)t[e]=0}var s=0,a=29,u=256,l=u+1+a,f=30,d=19,_=2*l+1,g=15,c=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));i(z);var C=new Array(2*f);i(C);var E=new Array(512);i(E);var A=new Array(256);i(A);var I=new Array(a);i(I);var O,B,R,T=new Array(f);function D(t,e,r,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function F(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function N(t){return t<256?E[t]:E[256+(t>>>7)]}function U(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function P(t,e,r){t.bi_valid>c-r?(t.bi_buf|=e<<t.bi_valid&65535,U(t,t.bi_buf),t.bi_buf=e>>c-t.bi_valid,t.bi_valid+=r-c):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)}function L(t,e,r){P(t,r[2*e],r[2*e+1])}function j(t,e){for(var r=0;r|=1&t,t>>>=1,r<<=1,0<--e;);return r>>>1}function Z(t,e,r){var i,n,s=new Array(g+1),a=0;for(i=1;i<=g;i++)s[i]=a=a+r[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=j(s[o]++,o))}}function W(t){var e;for(e=0;e<l;e++)t.dyn_ltree[2*e]=0;for(e=0;e<f;e++)t.dyn_dtree[2*e]=0;for(e=0;e<d;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*m]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function M(t){8<t.bi_valid?U(t,t.bi_buf):0<t.bi_valid&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function H(t,e,r,i){var n=2*e,s=2*r;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[r]}function G(t,e,r){for(var i=t.heap[r],n=r<<1;n<=t.heap_len&&(n<t.heap_len&&H(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!H(e,i,t.heap[n],t.depth));)t.heap[r]=t.heap[n],r=n,n<<=1;t.heap[r]=i}function K(t,e,r){var i,n,s,a,o=0;if(0!==t.last_lit)for(;i=t.pending_buf[t.d_buf+2*o]<<8|t.pending_buf[t.d_buf+2*o+1],n=t.pending_buf[t.l_buf+o],o++,0===i?L(t,n,e):(L(t,(s=A[n])+u+1,e),0!==(a=w[s])&&P(t,n-=I[s],a),L(t,s=N(--i),r),0!==(a=k[s])&&P(t,i-=T[s],a)),o<t.last_lit;);L(t,m,e)}function Y(t,e){var r,i,n,s=e.dyn_tree,a=e.stat_desc.static_tree,o=e.stat_desc.has_stree,h=e.stat_desc.elems,u=-1;for(t.heap_len=0,t.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(t.heap[++t.heap_len]=u=r,t.depth[r]=0):s[2*r+1]=0;for(;t.heap_len<2;)s[2*(n=t.heap[++t.heap_len]=u<2?++u:0)]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=a[2*n+1]);for(e.max_code=u,r=t.heap_len>>1;1<=r;r--)G(t,s,r);for(n=h;r=t.heap[1],t.heap[1]=t.heap[t.heap_len--],G(t,s,1),i=t.heap[1],t.heap[--t.heap_max]=r,t.heap[--t.heap_max]=i,s[2*n]=s[2*r]+s[2*i],t.depth[n]=(t.depth[r]>=t.depth[i]?t.depth[r]:t.depth[i])+1,s[2*r+1]=s[2*i+1]=n,t.heap[1]=n++,G(t,s,1),2<=t.heap_len;);t.heap[--t.heap_max]=t.heap[1],function(t,e){var r,i,n,s,a,o,h=e.dyn_tree,u=e.max_code,l=e.stat_desc.static_tree,f=e.stat_desc.has_stree,d=e.stat_desc.extra_bits,c=e.stat_desc.extra_base,p=e.stat_desc.max_length,m=0;for(s=0;s<=g;s++)t.bl_count[s]=0;for(h[2*t.heap[t.heap_max]+1]=0,r=t.heap_max+1;r<_;r++)p<(s=h[2*h[2*(i=t.heap[r])+1]+1]+1)&&(s=p,m++),h[2*i+1]=s,u<i||(t.bl_count[s]++,a=0,c<=i&&(a=d[i-c]),o=h[2*i],t.opt_len+=o*(s+a),f&&(t.static_len+=o*(l[2*i+1]+a)));if(0!==m){do{for(s=p-1;0===t.bl_count[s];)s--;t.bl_count[s]--,t.bl_count[s+1]+=2,t.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(i=t.bl_count[s];0!==i;)u<(n=t.heap[--r])||(h[2*n+1]!==s&&(t.opt_len+=(s-h[2*n+1])*h[2*n],h[2*n+1]=s),i--)}}(t,e),Z(s,u,t.bl_count)}function X(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),e[2*(r+1)+1]=65535,i=0;i<=r;i++)n=a,a=e[2*(i+1)+1],++o<h&&n===a||(o<u?t.bl_tree[2*n]+=o:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[2*b]++):o<=10?t.bl_tree[2*v]++:t.bl_tree[2*y]++,s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4))}function V(t,e,r){var i,n,s=-1,a=e[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),i=0;i<=r;i++)if(n=a,a=e[2*(i+1)+1],!(++o<h&&n===a)){if(o<u)for(;L(t,n,t.bl_tree),0!=--o;);else 0!==n?(n!==s&&(L(t,n,t.bl_tree),o--),L(t,b,t.bl_tree),P(t,o-3,2)):o<=10?(L(t,v,t.bl_tree),P(t,o-3,3)):(L(t,y,t.bl_tree),P(t,o-11,7));s=n,u=(o=0)===a?(h=138,3):n===a?(h=6,3):(h=7,4)}}i(T);var q=!1;function J(t,e,r,i){P(t,(s<<1)+(i?1:0),3),function(t,e,r,i){M(t),i&&(U(t,r),U(t,~r)),n.arraySet(t.pending_buf,t.window,e,r,t.pending),t.pending+=r}(t,e,r,!0)}r._tr_init=function(t){q||(function(){var t,e,r,i,n,s=new Array(g+1);for(i=r=0;i<a-1;i++)for(I[i]=r,t=0;t<1<<w[i];t++)A[r++]=i;for(A[r-1]=i,i=n=0;i<16;i++)for(T[i]=n,t=0;t<1<<k[i];t++)E[n++]=i;for(n>>=7;i<f;i++)for(T[i]=n<<7,t=0;t<1<<k[i]-7;t++)E[256+n++]=i;for(e=0;e<=g;e++)s[e]=0;for(t=0;t<=143;)z[2*t+1]=8,t++,s[8]++;for(;t<=255;)z[2*t+1]=9,t++,s[9]++;for(;t<=279;)z[2*t+1]=7,t++,s[7]++;for(;t<=287;)z[2*t+1]=8,t++,s[8]++;for(Z(z,l+1,s),t=0;t<f;t++)C[2*t+1]=5,C[2*t]=j(t,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,d,p)}(),q=!0),t.l_desc=new F(t.dyn_ltree,O),t.d_desc=new F(t.dyn_dtree,B),t.bl_desc=new F(t.bl_tree,R),t.bi_buf=0,t.bi_valid=0,W(t)},r._tr_stored_block=J,r._tr_flush_block=function(t,e,r,i){var n,s,a=0;0<t.level?(2===t.strm.data_type&&(t.strm.data_type=function(t){var e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return o;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return h;for(e=32;e<u;e++)if(0!==t.dyn_ltree[2*e])return h;return o}(t)),Y(t,t.l_desc),Y(t,t.d_desc),a=function(t){var e;for(X(t,t.dyn_ltree,t.l_desc.max_code),X(t,t.dyn_dtree,t.d_desc.max_code),Y(t,t.bl_desc),e=d-1;3<=e&&0===t.bl_tree[2*S[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}(t),n=t.opt_len+3+7>>>3,(s=t.static_len+3+7>>>3)<=n&&(n=s)):n=s=r+5,r+4<=n&&-1!==e?J(t,e,r,i):4===t.strategy||s===n?(P(t,2+(i?1:0),3),K(t,z,C)):(P(t,4+(i?1:0),3),function(t,e,r,i){var n;for(P(t,e-257,5),P(t,r-1,5),P(t,i-4,4),n=0;n<i;n++)P(t,t.bl_tree[2*S[n]+1],3);V(t,t.dyn_ltree,e-1),V(t,t.dyn_dtree,r-1)}(t,t.l_desc.max_code+1,t.d_desc.max_code+1,a+1),K(t,t.dyn_ltree,t.dyn_dtree)),W(t),i&&M(t)},r._tr_tally=function(t,e,r){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(A[r]+u+1)]++,t.dyn_dtree[2*N(e)]++),t.last_lit===t.lit_bufsize-1},r._tr_align=function(t){P(t,2,3),L(t,m,z),function(t){16===t.bi_valid?(U(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):8<=t.bi_valid&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}(t)}},{"../utils/common":41}],53:[function(t,e,r){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(t,e,r){"use strict";e.exports="function"==typeof setImmediate?setImmediate:function(){var t=[].slice.apply(arguments);t.splice(1,0,0),setTimeout.apply(null,t)}},{}]},{},[10])(10)});
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,require("timers").setImmediate)
},{"buffer":11,"timers":26}],15:[function(require,module,exports){
'use strict';
var immediate = require('immediate');

/* istanbul ignore next */
function INTERNAL() {}

var handlers = {};

var REJECTED = ['REJECTED'];
var FULFILLED = ['FULFILLED'];
var PENDING = ['PENDING'];

module.exports = Promise;

function Promise(resolver) {
  if (typeof resolver !== 'function') {
    throw new TypeError('resolver must be a function');
  }
  this.state = PENDING;
  this.queue = [];
  this.outcome = void 0;
  if (resolver !== INTERNAL) {
    safelyResolveThenable(this, resolver);
  }
}

Promise.prototype["finally"] = function (callback) {
  if (typeof callback !== 'function') {
    return this;
  }
  var p = this.constructor;
  return this.then(resolve, reject);

  function resolve(value) {
    function yes () {
      return value;
    }
    return p.resolve(callback()).then(yes);
  }
  function reject(reason) {
    function no () {
      throw reason;
    }
    return p.resolve(callback()).then(no);
  }
};
Promise.prototype["catch"] = function (onRejected) {
  return this.then(null, onRejected);
};
Promise.prototype.then = function (onFulfilled, onRejected) {
  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
    typeof onRejected !== 'function' && this.state === REJECTED) {
    return this;
  }
  var promise = new this.constructor(INTERNAL);
  if (this.state !== PENDING) {
    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
    unwrap(promise, resolver, this.outcome);
  } else {
    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
  }

  return promise;
};
function QueueItem(promise, onFulfilled, onRejected) {
  this.promise = promise;
  if (typeof onFulfilled === 'function') {
    this.onFulfilled = onFulfilled;
    this.callFulfilled = this.otherCallFulfilled;
  }
  if (typeof onRejected === 'function') {
    this.onRejected = onRejected;
    this.callRejected = this.otherCallRejected;
  }
}
QueueItem.prototype.callFulfilled = function (value) {
  handlers.resolve(this.promise, value);
};
QueueItem.prototype.otherCallFulfilled = function (value) {
  unwrap(this.promise, this.onFulfilled, value);
};
QueueItem.prototype.callRejected = function (value) {
  handlers.reject(this.promise, value);
};
QueueItem.prototype.otherCallRejected = function (value) {
  unwrap(this.promise, this.onRejected, value);
};

function unwrap(promise, func, value) {
  immediate(function () {
    var returnValue;
    try {
      returnValue = func(value);
    } catch (e) {
      return handlers.reject(promise, e);
    }
    if (returnValue === promise) {
      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
    } else {
      handlers.resolve(promise, returnValue);
    }
  });
}

handlers.resolve = function (self, value) {
  var result = tryCatch(getThen, value);
  if (result.status === 'error') {
    return handlers.reject(self, result.value);
  }
  var thenable = result.value;

  if (thenable) {
    safelyResolveThenable(self, thenable);
  } else {
    self.state = FULFILLED;
    self.outcome = value;
    var i = -1;
    var len = self.queue.length;
    while (++i < len) {
      self.queue[i].callFulfilled(value);
    }
  }
  return self;
};
handlers.reject = function (self, error) {
  self.state = REJECTED;
  self.outcome = error;
  var i = -1;
  var len = self.queue.length;
  while (++i < len) {
    self.queue[i].callRejected(error);
  }
  return self;
};

function getThen(obj) {
  // Make sure we only access the accessor once as required by the spec
  var then = obj && obj.then;
  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
    return function appyThen() {
      then.apply(obj, arguments);
    };
  }
}

function safelyResolveThenable(self, thenable) {
  // Either fulfill, reject or reject with error
  var called = false;
  function onError(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.reject(self, value);
  }

  function onSuccess(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.resolve(self, value);
  }

  function tryToUnwrap() {
    thenable(onSuccess, onError);
  }

  var result = tryCatch(tryToUnwrap);
  if (result.status === 'error') {
    onError(result.value);
  }
}

function tryCatch(func, value) {
  var out = {};
  try {
    out.value = func(value);
    out.status = 'success';
  } catch (e) {
    out.status = 'error';
    out.value = e;
  }
  return out;
}

Promise.resolve = resolve;
function resolve(value) {
  if (value instanceof this) {
    return value;
  }
  return handlers.resolve(new this(INTERNAL), value);
}

Promise.reject = reject;
function reject(reason) {
  var promise = new this(INTERNAL);
  return handlers.reject(promise, reason);
}

Promise.all = all;
function all(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var values = new Array(len);
  var resolved = 0;
  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    allResolver(iterable[i], i);
  }
  return promise;
  function allResolver(value, i) {
    self.resolve(value).then(resolveFromAll, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
    function resolveFromAll(outValue) {
      values[i] = outValue;
      if (++resolved === len && !called) {
        called = true;
        handlers.resolve(promise, values);
      }
    }
  }
}

Promise.race = race;
function race(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    resolver(iterable[i]);
  }
  return promise;
  function resolver(value) {
    self.resolve(value).then(function (response) {
      if (!called) {
        called = true;
        handlers.resolve(promise, response);
      }
    }, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
  }
}

},{"immediate":13}],16:[function(require,module,exports){
;(function () { // closure for web browsers

if (typeof module === 'object' && module.exports) {
  module.exports = LRUCache
} else {
  // just set the global for non-node platforms.
  this.LRUCache = LRUCache
}

function hOP (obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
}

function naiveLength () { return 1 }

var didTypeWarning = false
function typeCheckKey(key) {
  if (!didTypeWarning && typeof key !== 'string' && typeof key !== 'number') {
    didTypeWarning = true
    console.error(new TypeError("LRU: key must be a string or number. Almost certainly a bug! " + typeof key).stack)
  }
}

function LRUCache (options) {
  if (!(this instanceof LRUCache))
    return new LRUCache(options)

  if (typeof options === 'number')
    options = { max: options }

  if (!options)
    options = {}

  this._max = options.max
  // Kind of weird to have a default max of Infinity, but oh well.
  if (!this._max || !(typeof this._max === "number") || this._max <= 0 )
    this._max = Infinity

  this._lengthCalculator = options.length || naiveLength
  if (typeof this._lengthCalculator !== "function")
    this._lengthCalculator = naiveLength

  this._allowStale = options.stale || false
  this._maxAge = options.maxAge || null
  this._dispose = options.dispose
  this.reset()
}

// resize the cache when the max changes.
Object.defineProperty(LRUCache.prototype, "max",
  { set : function (mL) {
      if (!mL || !(typeof mL === "number") || mL <= 0 ) mL = Infinity
      this._max = mL
      if (this._length > this._max) trim(this)
    }
  , get : function () { return this._max }
  , enumerable : true
  })

// resize the cache when the lengthCalculator changes.
Object.defineProperty(LRUCache.prototype, "lengthCalculator",
  { set : function (lC) {
      if (typeof lC !== "function") {
        this._lengthCalculator = naiveLength
        this._length = this._itemCount
        for (var key in this._cache) {
          this._cache[key].length = 1
        }
      } else {
        this._lengthCalculator = lC
        this._length = 0
        for (var key in this._cache) {
          this._cache[key].length = this._lengthCalculator(this._cache[key].value)
          this._length += this._cache[key].length
        }
      }

      if (this._length > this._max) trim(this)
    }
  , get : function () { return this._lengthCalculator }
  , enumerable : true
  })

Object.defineProperty(LRUCache.prototype, "length",
  { get : function () { return this._length }
  , enumerable : true
  })


Object.defineProperty(LRUCache.prototype, "itemCount",
  { get : function () { return this._itemCount }
  , enumerable : true
  })

LRUCache.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this
  var i = 0
  var itemCount = this._itemCount

  for (var k = this._mru - 1; k >= 0 && i < itemCount; k--) if (this._lruList[k]) {
    i++
    var hit = this._lruList[k]
    if (isStale(this, hit)) {
      del(this, hit)
      if (!this._allowStale) hit = undefined
    }
    if (hit) {
      fn.call(thisp, hit.value, hit.key, this)
    }
  }
}

LRUCache.prototype.keys = function () {
  var keys = new Array(this._itemCount)
  var i = 0
  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {
    var hit = this._lruList[k]
    keys[i++] = hit.key
  }
  return keys
}

LRUCache.prototype.values = function () {
  var values = new Array(this._itemCount)
  var i = 0
  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {
    var hit = this._lruList[k]
    values[i++] = hit.value
  }
  return values
}

LRUCache.prototype.reset = function () {
  if (this._dispose && this._cache) {
    for (var k in this._cache) {
      this._dispose(k, this._cache[k].value)
    }
  }

  this._cache = Object.create(null) // hash of items by key
  this._lruList = Object.create(null) // list of items in order of use recency
  this._mru = 0 // most recently used
  this._lru = 0 // least recently used
  this._length = 0 // number of items in the list
  this._itemCount = 0
}

LRUCache.prototype.dump = function () {
  var arr = []
  var i = 0

  for (var k = this._mru - 1; k >= 0 && i < this._itemCount; k--) if (this._lruList[k]) {
    var hit = this._lruList[k]
    if (!isStale(this, hit)) {
      //Do not store staled hits
      ++i
      arr.push({
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      });
    }
  }
  //arr has the most read first
  return arr
}

LRUCache.prototype.dumpLru = function () {
  return this._lruList
}

LRUCache.prototype.set = function (key, value, maxAge) {
  maxAge = maxAge || this._maxAge
  typeCheckKey(key)

  var now = maxAge ? Date.now() : 0
  var len = this._lengthCalculator(value)

  if (hOP(this._cache, key)) {
    if (len > this._max) {
      del(this, this._cache[key])
      return false
    }
    // dispose of the old one before overwriting
    if (this._dispose)
      this._dispose(key, this._cache[key].value)

    this._cache[key].now = now
    this._cache[key].maxAge = maxAge
    this._cache[key].value = value
    this._length += (len - this._cache[key].length)
    this._cache[key].length = len
    this.get(key)

    if (this._length > this._max)
      trim(this)

    return true
  }

  var hit = new Entry(key, value, this._mru++, len, now, maxAge)

  // oversized objects fall out of cache automatically.
  if (hit.length > this._max) {
    if (this._dispose) this._dispose(key, value)
    return false
  }

  this._length += hit.length
  this._lruList[hit.lu] = this._cache[key] = hit
  this._itemCount ++

  if (this._length > this._max)
    trim(this)

  return true
}

LRUCache.prototype.has = function (key) {
  typeCheckKey(key)
  if (!hOP(this._cache, key)) return false
  var hit = this._cache[key]
  if (isStale(this, hit)) {
    return false
  }
  return true
}

LRUCache.prototype.get = function (key) {
  typeCheckKey(key)
  return get(this, key, true)
}

LRUCache.prototype.peek = function (key) {
  typeCheckKey(key)
  return get(this, key, false)
}

LRUCache.prototype.pop = function () {
  var hit = this._lruList[this._lru]
  del(this, hit)
  return hit || null
}

LRUCache.prototype.del = function (key) {
  typeCheckKey(key)
  del(this, this._cache[key])
}

LRUCache.prototype.load = function (arr) {
  //reset the cache
  this.reset();

  var now = Date.now()
  //A previous serialized cache has the most recent items first
  for (var l = arr.length - 1; l >= 0; l-- ) {
    var hit = arr[l]
    typeCheckKey(hit.k)
    var expiresAt = hit.e || 0
    if (expiresAt === 0) {
      //the item was created without expiration in a non aged cache
      this.set(hit.k, hit.v)
    } else {
      var maxAge = expiresAt - now
      //dont add already expired items
      if (maxAge > 0) this.set(hit.k, hit.v, maxAge)
    }
  }
}

function get (self, key, doUse) {
  typeCheckKey(key)
  var hit = self._cache[key]
  if (hit) {
    if (isStale(self, hit)) {
      del(self, hit)
      if (!self._allowStale) hit = undefined
    } else {
      if (doUse) use(self, hit)
    }
    if (hit) hit = hit.value
  }
  return hit
}

function isStale(self, hit) {
  if (!hit || (!hit.maxAge && !self._maxAge)) return false
  var stale = false;
  var diff = Date.now() - hit.now
  if (hit.maxAge) {
    stale = diff > hit.maxAge
  } else {
    stale = self._maxAge && (diff > self._maxAge)
  }
  return stale;
}

function use (self, hit) {
  shiftLU(self, hit)
  hit.lu = self._mru ++
  self._lruList[hit.lu] = hit
}

function trim (self) {
  while (self._lru < self._mru && self._length > self._max)
    del(self, self._lruList[self._lru])
}

function shiftLU (self, hit) {
  delete self._lruList[ hit.lu ]
  while (self._lru < self._mru && !self._lruList[self._lru]) self._lru ++
}

function del (self, hit) {
  if (hit) {
    if (self._dispose) self._dispose(hit.key, hit.value)
    self._length -= hit.length
    self._itemCount --
    delete self._cache[ hit.key ]
    shiftLU(self, hit)
  }
}

// classy, since V8 prefers predictable objects.
function Entry (key, value, lu, length, now, maxAge) {
  this.key = key
  this.value = value
  this.lu = lu
  this.length = length
  this.now = now
  if (maxAge) this.maxAge = maxAge
}

})()

},{}],17:[function(require,module,exports){
require('text-encoding-polyfill');
var StringDecoder = require('string_decoder').StringDecoder;
function defaultDecoder(data) {
  var decoder = new StringDecoder();
  var out = decoder.write(data) + decoder.end();
  return out.replace(/\0/g, '').trim();
}
module.exports = createDecoder;
var regex = /^(?:ANSI\s)?(\d+)$/m;
function createDecoder(encoding, second) {
  if (!encoding) {
    return defaultDecoder;
  }
  try {
    new TextDecoder(encoding.trim());
  } catch(e) {
    var match = regex.exec(encoding);
    if (match && !second) {
      return createDecoder('windows-' + match[1], true);
    } else {
      return defaultDecoder;
    }
  }
  return browserDecoder;
  function browserDecoder(buffer) {
    var decoder = new TextDecoder(encoding);
    var out = decoder.decode(buffer, {
      stream: true
    }) + decoder.decode();
    return out.replace(/\0/g, '').trim();
  }
}

},{"string_decoder":23,"text-encoding-polyfill":24}],18:[function(require,module,exports){
var createDecoder = require('./decoder');
function dbfHeader(data) {
  var out = {};
  out.lastUpdated = new Date(data.readUInt8(1) + 1900, data.readUInt8(2), data.readUInt8(3));
  out.records = data.readUInt32LE(4);
  out.headerLen = data.readUInt16LE(8);
  out.recLen = data.readUInt16LE(10);
  return out;
}

function dbfRowHeader(data, headerLen, decoder) {
  var out = [];
  var offset = 32;
  while (offset < headerLen) {
    out.push({
      name: decoder(data.slice(offset, offset + 11)),
      dataType: String.fromCharCode(data.readUInt8(offset + 11)),
      len: data.readUInt8(offset + 16),
      decimal: data.readUInt8(offset + 17)
    });
    if (data.readUInt8(offset + 32) === 13) {
      break;
    } else {
      offset += 32;
    }
  }
  return out;
}

function rowFuncs(buffer, offset, len, type, decoder) {
  var data = buffer.slice(offset, offset + len);
  var textData = decoder(data);
  switch (type) {
    case 'N':
    case 'F':
    case 'O':
      return parseFloat(textData, 10);
    case 'D':
      return new Date(textData.slice(0, 4), parseInt(textData.slice(4, 6), 10) - 1, textData.slice(6, 8));
    case 'L':
      return textData.toLowerCase() === 'y' || textData.toLowerCase() === 't';
    default:
      return textData;
  }
}

function parseRow(buffer, offset, rowHeaders, decoder) {
  var out = {};
  var i = 0;
  var len = rowHeaders.length;
  var field;
  var header;
  while (i < len) {
    header = rowHeaders[i];
    field = rowFuncs(buffer, offset, header.len, header.dataType, decoder);
    offset += header.len;
    if (typeof field !== 'undefined') {
      out[header.name] = field;
    }
    i++;
  }
  return out;
}

module.exports = function(buffer, encoding) {
  var decoder = createDecoder(encoding);
  var header = dbfHeader(buffer);
  var rowHeaders = dbfRowHeader(buffer, header.headerLen - 1, decoder);

  var offset = ((rowHeaders.length + 1) << 5) + 2;
  var recLen = header.recLen;
  var records = header.records;
  var out = [];
  while (records) {
    out.push(parseRow(buffer, offset, rowHeaders, decoder));
    offset += recLen;
    records--;
  }
  return out;
};

},{"./decoder":17}],19:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],20:[function(require,module,exports){
const wktcrs = require("wkt-crs");
/* pass 1 */
const A='PARAMETER',B='AUTHORITY',C='latitude_of_origin',D='raw:0',E='central_meridian',F='Transverse_Mercator',G='false_northing',H='raw:0.017453292519943295',I='false_easting',J='raw:0.0174532925199433',K='EPSG',L='PROJECTION',M='Greenwich',N='scale_factor',O='raw:298.257222101',P='SPHEROID',Q='UNIT',R='raw:6378137',S='GEOGCS',T='PRIMEM',U='PROJCS',V='DATUM',W='standard_parallel_1',X='raw:1',Y='standard_parallel_2',Z='raw:500000',a=' +no_defs',b='Lambert_Conformal_Conic',c=' +towgs84=0,0,0,0,0,0,0',d='degree',e='Degree',f='Lambert_Conformal_Conic_2SP',g='raw:NORTH',h='raw:0.9996',i='TOWGS84',j=' +ellps=GRS80',k='raw:EAST',l='+proj=tmerc',m='Meter',n='AXIS',o='raw:0.30480060960121924',p='raw:0.3048006096012192',q=' +units=m',r='raw:298.257223563',s='metre',t='9122',u='8901',v='D_NAD83_National_Spatial_Reference_System_2007',w='NAD83_National_Spatial_Reference_System_2007',x='raw:6378245',y='GRS_1980',z='Northing',AA='NAD83_High_Accuracy_Reference_Network',AB='raw:10000000',AC='raw:298.3',AD=' +towgs84=23.92,-141.27,-80.9,-0,0.35,0.82,-0.12',AE='North_American_Datum_1983',AF=' +towgs84=24.47,-130.89,-81.56,-0,-0,0.13,-0.22',AG=' 1980(IUGG,',AH='GCS_North_American_1983',AI='Easting',AJ='Krasovsky_1940',AK='raw:6378388',AL='NAD83(NSRS2007)',AM='D_North_American_1983',AN='raw:6378206.4',AO='9001',AP='D_North_American_1983_HARN',AQ='International_1924',AR='raw:294.9786982139006',AS='raw:0.9999',AT='D_unknown',AU='+proj=lcc',AV='+proj=utm',AW=' Gauss-Kruger',AX=' +units=us-ft',AY='raw:299.1528128',AZ='raw:6378135',Aa='Foot_US',Ab='European_Terrestrial_Reference_System_1989',Ac='GCS_NAD83(NSRS2007)',Ad='North_American_Datum_1927',Ae='GRS80',Af='WGS_1984',Ag='+proj=longlat',Ah='WGS_1972_Transit_Broadcast_Ephemeris',Ai='raw:6377397.155',Aj='NAD83(HARN)',Ak='GCS_North_American_1927',Al='raw:298.26',Am=' +ellps=krass',An='raw:6378249.145',Ao='unknown',Ap='raw:297',Aq='raw:294.9786982',Ar='D_North_American_1927',As='Lambert_Conformal_Conic_1SP',At=' +lat_0=0',Au='unnamed',Av='International',Aw=' +towgs84=0,0,4.5,0,0,0.554,0.2263',Ax='Krassowsky',Ay=' +x_0=500000',Az=' +towgs84=0,0,1.9,0,0,0.814,-0.38',BA='GCS_NAD83(HARN)',BB='GCS_WGS_1984',BC='7019',BD=' 1980)',BE='GCS_Pulkovo',BF='Clarke_1866',BG='NAD83_Canadian_Spatial_Reference_System',BH='D_WGS_1984',BI='Pulkovo',BJ='raw:2000000',BK='raw:-0',BL='raw:200000',BM='D_Pulkovo_1942',BN='raw:1000000',BO='WGS_1972',BP=' +ellps=intl',BQ=' +y_0=0',BR='raw:293.465',BS='D_Pulkovo_1995',BT=' +datum=WGS84',BU='GCS_GRS',BV='longitude_of_center',BW='latitude_of_center',BX='raw:0.3048',BY='Transverse_Mercator_South_Orientated',BZ=' +towgs84=15.8,-154.4,-82.3,0,0,0,0',Ba='Pulkovo_1942',Bb='raw:36.66666666666666',Bc='raw:41.66666666666666',Bd='Pulkovo_1995',Be='raw:600000',Bf=' +ellps=WGS72',Bg='D_North_American_1983_CSRS98',Bh='raw:-141.27',Bi=' (International)',Bj='raw:-130.89',Bk=' +towgs84=59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993',Bl='Clarke_1880_RGS',Bm='raw:400000',Bn='raw:-90',Bo='epsg',Bp=' 1980',Bq='raw:1640416.667',Br='raw:-81.56',Bs='Bessel_1841',Bt=' 3-degree',Bu='raw:73.66666666666667',Bv='D_WGS_1972_BE',Bw='raw:6378160',Bx='NAD83',By='raw:300000',Bz='Hotine_Oblique_Mercator_Azimuth_Natural_Origin',CA=' +datum=NAD27',CB=' +k=0.9999',CC='raw:298.257',CD='Sistema_de_Referencia_Geocentrico_para_las_AmericaS_2000',CE='raw:23.92',CF='raw:-80.9',CG='raw:-0.12',CH='raw:1968500',CI='raw:1500000',CJ=' +ellps=bessel',CK='raw:43.66666666666666',CL='raw:6378249.2',CM='GCS_ETRS_1989',CN='raw:24.47',CO='raw:-0.22',CP='raw:0.35',CQ='raw:70.33333333333333',CR='raw:6378140',CS='New_Zealand_Geodetic_Datum_2000',CT='raw:0.999966667',CU='raw:100000',CV='raw:1640416.67',CW=' +x_0=609601.2192024384',CX=' +towgs84=33.4,-146.6,-76.3,-0.359,-0.053,0.844,-0.84',CY='raw:38.33333333333334',CZ='7024',Ca='raw:0.82',Cb='raw:0.9999375',Cc='NAD83(CSRS)',Cd='raw:0.13',Ce='CGCS2000',Cf='raw:293.4660212936265',Cg='Clarke',Ch='raw:700000',Ci='raw:800000',Cj=' +x_0=600000',Ck='D_ETRS_1989',Cl='raw:39.33333333333334',Cm='raw:0.2263',Cn='New_Zealand_Geodetic_Datum_1949',Co='raw:42.83333333333334',Cp='raw:36.33333333333334',Cq='raw:37.66666666666666',Cr='raw:34.33333333333334',Cs='D_WGS_1972',Ct=' +b=6356755.288157528',Cu='raw:0.999941177',Cv=' +x_0=152400.3048006096',Cw=' +ellps=clrk80',Cx='raw:304800',Cy='raw:298.25',Cz='raw:787400',DA='raw:118110',DB='raw:240000',DC='9003',DD=' +lat_0=36.66666666666666',DE=' (ftUS)',DF='raw:0.554',DG='raw:0.814',DH=' +towgs84=-146.414,507.337,680.507,0,0,0,0',DI='Lambert_Azimuthal_Equal_Area',DJ='raw:-120.5',DK='raw:43.83333333333334',DL='raw:80.33333333333333',DM='Sistema_de_Referencia_Geocentrico_para_America_del_Sur_1995',DN='raw:-0.38',DO='raw:1640416.6667',DP='Beijing',DQ='raw:0.999933333',DR='GCS_NAD83(CSRS)',DS='D_Datum_Geodesi_Nasional_1995',DT='raw:1312333.3333',DU='raw:300.8017',DV='raw:-68.66666666666667',DW='raw:-71.33333333333333',DX='raw:6561666.667',DY='7030',DZ='raw:36000',Da='raw:3500000',Db='raw:41.78333333333333',Dc='raw:27.83333333333333',Dd='raw:72.02500919444445',De='Datum_Geodesi_Nasional_1995',Df='D_Beijing_1954',Dg='NAD27',Dh=' +x_0=500000.001016002',Di='raw:5500000',Dj='raw:42.33333333333334',Dk='raw:-75.33333333333333',Dl='raw:-80.23861111111111',Dm=' +towgs84=-87,-98,-121,0,0,0,0',Dn='raw:0.01570796326794897',Do='7022',Dp=' +x_0=200000',Dq='raw:250000',Dr=' +ellps=clrk66',Ds='GCS_WGS',Dt='D_New_Beijing',Du='raw:4500000',Dv=' +ellps=WGS84',Dw='Clarke_1880_IGN',Dx='raw:-100.3333333333333',Dy='raw:-76.66666666666667',Dz='raw:-79.33333333333333',EA='raw:-72.66666666666667',EB=' +lat_0=41.66666666666666',EC='Hotine_Oblique_Mercator_Azimuth_Center',ED='ETRS89',EE='raw:0.99995',EF=' +x_0=240000',EG='raw:48.73333333333333',EH='raw:37.96666666666667',EI='raw:36.76666666666667',EJ='raw:32.66666666666666',EK='raw:24.33333333333333',EL='raw:38.43333333333333',EM='raw:984250.0000000002',EN='4269',EO='6269',EP='raw:656166.667',EQ=' Coordinate',ER=' +lat_0=-90',ES='D_China_2000',ET='Beijing_1954',EU='raw:2500000',EV='raw:328083.3333',EW='raw:-81',EX='Albers_Conic_Equal_Area',EY='D_Bhutan_National_Geodetic_Datum',EZ='Polar_Stereographic',Ea='raw:39.83333333333334',Eb='raw:3280833.333300001',Ec='raw:40.16666666666666',Ed='raw:38.83333333333334',Ee='Japanese_Geodetic_Datum_2000',Ef='raw:4.5',Eg='raw:-84.36666666666666',Eh=' +towgs84=-117.808,-51.536,137.784,0.303,0.446,0.234,-0.29',Ei='4326',Ej='GCS_New_Zealand_1949',Ek='6326',El='raw:1.9',Em='raw:3000000',En='Australian_National_Spheroid',Eo='raw:293.46602',Ep='raw:83.66666666666667',Eq='Bhutan_National_Geodetic_Datum',Er='New_Beijing',Es='raw:6377276.345',Et='D_Xian_1980',Eu='rectified_grid_angle',Ev='raw:45',Ew='raw:-111.5',Ex=' +y_0=36000',Ey='7008',Ez=' 1940',FA='raw:44.33333333333334',FB='raw:45.66666666666666',FC='raw:75.36440330555556',FD='Stereographic_South_Pole',FE='raw:2624666.6667',FF='D_New_Zealand_1949',FG='Geocentric_Datum_of_Australia_1994',FH='raw:-17.66666666666667',FI='raw:-64.66666666666667',FJ='raw:-67.33333333333333',FK='4759',FL=' +towgs84=-115.854,-99.0583,-152.462,0,0,0,0',FM='European_Datum_1950',FN='6759',FO='Provisional_South_American_Datum_1956',FP='raw:31',FQ=' +towgs84=-208.406,-109.878,-2.5764,0,0,0,0',FR='raw:39.66666666666666',FS='raw:36.16666666666666',FT='China_2000',FU='raw:-154.4',FV='D_Turkish_National_Reference_Frame',FW='raw:300.8017255',FX=' +towgs84=577.326,90.129,463.919,5.137,1.474,5.297,2.4232',FY='D_Pulkovo_1942_Adj_1958',FZ='4152',Fa='6152',Fb='7043',Fc=' +lat_0=39.33333333333334',Fd='raw:-105.5',Fe='Turkish_National_Reference_Frame',Ff='raw:40.66666666666666',Fg='raw:78.70733752777778',Fh=' +ellps=aust_SA',Fi='raw:150000',Fj=' +lat_0=36.33333333333334',Fk=' +lat_0=37.66666666666666',Fl='raw:105',Fm=' +x_0=400000',Fn=' +towgs84=598.1,73.7,418.2,0.202,0.045,-2.455,6.7',Fo='raw:-87',Fp=' +units=ft',Fq='GRS_1967_Truncated',Fr='raw:-123.3333333333333',Fs='raw:-91.33333333333333',Ft='raw:293.4663077',Fu='raw:0.999947368',Fv=' +x_0=500000.0001016001',Fw=' +x_0=200000.0001016002',Fx=' +y_0=500000.0001016001',Fy='raw:40.5',Fz='GCS_European_1950',GA=' ellipsoid',GB='Xian_1980',GC='raw:-82.3',GD=' survey',GE=' +x_0=500000.00001016',GF='Everest_Adjustment_1937',GG='GCS_NZGD_2000',GH='GCS_Beijing',GI='raw:37.21666666666667',GJ='raw:40.71666666666667',GK='raw:40.33333333333334',GL='raw:39.01666666666667',GM='raw:26.16666666666667',GN='raw:117',GO='raw:129',GP='D_Greenland_1996',GQ='raw:-98',GR=' +y_0=1000000',GS='Hartebeesthoek94',GT='raw:-57',GU='raw:123',GV='raw:90',GW=' +x_0=300000',GX='raw:-63',GY='raw:111',GZ=' +lon_0=-120.5',Ga='raw:-90.33333333333333',Gb='Hotine_Oblique_Mercator',Gc='Indonesian_National_Spheroid',Gd='D_Reseau_Geodesique_de_la_RDC_2005',Ge='raw:-69',Gf=' +lat_0=43.66666666666666',Gg=' +lat_0=43.83333333333334',Gh=' Central',Gi='North_American_Datum_1927_CGQ77',Gj='Average_Terrestrial_System_1977',Gk='GCS_Provisional_S_American_1956',Gl='raw:135',Gm='D_Provisional_S_American_1956',Gn='raw:30',Go='raw:36',Gp='D_European_1950',Gq='raw:304800.6096',Gr='NZGD2000',Gs='raw:6377483.865280419',Gt='raw:43.26666666666667',Gu='raw:31.16666666666667',Gv='raw:68.68747555555557',Gw=' Hemisphere',Gx='raw:40',Gy='raw:39',Gz='raw:15',HA='raw:33',HB=' +lat_1=-68.66666666666667',HC=' +lat_2=-71.33333333333333',HD=' +k=0.999966667',HE='North_American_Datum_1927_1976',HF='raw:-2500000',HG='Reseau_Geodesique_de_la_RDC_2005',HH=' +k=0.9996',HI='raw:21',HJ='IAG_1975',HK='raw:15.8',HL=' Geodetic',HM='D_IGC_1962_Arc_of_the_6th_Parallel_South',HN=' +south',HO='4267',HP='6267',HQ=' +lat_0=38.33333333333334',HR=' +lat_1=73.66666666666667',HS=' +lat_2=70.33333333333333',HT=' +lat_0=72.02500919444445',HU=' +a=6378249.2',HV=' +x_0=1500000',HW=' +lat_ts=-80.23861111111111',HX='4284',HY='raw:-100',HZ='raw:2.33722917',Ha='Greenland_1996',Hb='raw:34.75',Hc=' +towgs84=-288,175,-376,0,0,0,0',Hd='6284',He='raw:-5000000',Hf='raw:6500000',Hg='South_American_Datum_1969',Hh='raw:37.5',Hi='raw:27',Hj='D_Libyan_Geodetic_Datum_2006',Hk='raw:6378293.645208759',Hl='raw:294.2606763692569',Hm='raw:45.83333333333334',Hn='raw:25.66666666666667',Ho='raw:29.66666666666667',Hp='raw:35.83333333333334',Hq='raw:41.71666666666667',Hr='raw:37.83333333333334',Hs='raw:82.05842488888888',Ht='D_NZGD_2000',Hu='IGC_1962_Arc_of_the_6th_Parallel_South',Hv='raw:-78.5',Hw='raw:-98.5',Hx=' +lat_1=41.78333333333333',Hy=' +lat_2=-75.33333333333333',Hz=' +towgs84=278.3,93,474.5,7.889,0.05,-6.61,6.21',IA=' 1924',IB='raw:-15',IC='azimuth',ID='Bessel',IE='raw:45.5',IF='raw:93',IG='raw:6377304.063',IH='Cassini_Soldner',II='4200',IJ='6200',IK='raw:-75',IL=' +x_0=304800',IM=' +x_0=2000000.0001016',IN='raw:38',IO='SWEREF99',IP='raw:-110.0833333333333',IQ='raw:-107.3333333333333',IR='raw:-105.1666666666667',IS='raw:-120.8333333333333',IT='raw:-78.58333333333333',IU='raw:-76.58333333333333',IV='raw:-107.8333333333333',IW='raw:-104.3333333333333',IX='raw:-71.66666666666667',IY='raw:-118.5833333333333',IZ='raw:-115.5833333333333',Ia='raw:-116.6666666666667',Ib='raw:-88.83333333333333',Ic='raw:-70.16666666666667',Id='raw:-87.08333333333333',Ie='raw:-85.66666666666667',If='raw:-90.16666666666667',Ig='raw:-88.33333333333333',Ih='raw:-112.1666666666667',Ii='raw:-84.16666666666667',Ij='raw:-82.16666666666667',Ik='raw:-75.41666666666667',Il='raw:-110.1666666666667',Im='raw:-111.9166666666667',In=' +k=0.9999375',Io=' +y_0=500000',Ip=' +towgs84=-209.362,-87.8162,404.62,0.0046,3.4784,0.5805,-1.4547',Iq='raw:51',Ir=' +lon_0=-100.3333333333333',Is=' +lat_1=-76.66666666666667',It=' +lat_2=-79.33333333333333',Iu=' +lat_1=-72.66666666666667',Iv='Libyan_Geodetic_Datum_2006',Iw='D_NAD_1927_Definition_1976',Ix='European_Libyan_Datum_1979',Iy='Australian_Geodetic_Datum_1966',Iz='raw:5000000',JA='raw:77',JB=' +y_0=10000000',JC=' +towgs84=-57,1,-41,0,0,0,0',JD='raw:6377299.151',JE='raw:-121',JF='raw:-117',JG='raw:10.72291666666667',JH='raw:44.06666666666667',JI='raw:42.73333333333333',JJ='raw:46.76666666666667',JK='raw:45.56666666666667',JL='raw:45.16666666666666',JM='raw:38.88333333333333',JN='raw:37.48333333333333',JO='raw:47.33333333333334',JP='raw:45.33333333333334',JQ='raw:38.03333333333333',JR='raw:30.28333333333333',JS='raw:28.38333333333333',JT='raw:33.96666666666667',JU='raw:32.13333333333333',JV='raw:31.66666666666667',JW='raw:36.18333333333333',JX='raw:31.88333333333333',JY='raw:30.11666666666667',JZ='raw:36.41666666666666',Ja='raw:45.68333333333333',Jb='raw:44.41666666666666',Jc='raw:31.83333333333333',Jd='raw:41.08333333333334',Je='raw:40.96666666666667',Jf='raw:39.93333333333333',Jg='raw:40.88333333333333',Jh='raw:35.23333333333333',Ji='raw:33.93333333333333',Jj='raw:33.33333333333334',Jk='raw:35.56666666666667',Jl='raw:40.03333333333333',Jm='raw:38.73333333333333',Jn='raw:40.43333333333333',Jo='raw:47.48333333333333',Jp='raw:46.18333333333333',Jq='raw:47.43333333333333',Jr='raw:41.03333333333333',Js='raw:45.21666666666667',Jt='raw:43.78333333333333',Ju='raw:48.63333333333333',Jv='raw:47.03333333333333',Jw='raw:45.61666666666667',Jx='raw:42.68333333333333',Jy='raw:41.48333333333333',Jz='raw:41.28333333333333',KA='raw:37.93333333333333',KB='raw:36.73333333333333',KC='raw:38.96666666666667',KD='raw:38.56666666666667',KE='raw:37.26666666666667',KF='raw:39.78333333333333',KG='raw:38.71666666666667',KH='raw:40.61666666666667',KI='raw:42.06666666666667',KJ='raw:29.58333333333333',KK='raw:41.86666666666667',KL='raw:40.83333333333334',KM='raw:37.23333333333333',KN='raw:40.78333333333333',KO='raw:39.71666666666667',KP='raw:33.88333333333333',KQ='raw:32.78333333333333',KR='raw:32.16666666666666',KS='raw:35.46666666666667',KT='raw:34.03333333333333',KU='raw:35.33333333333334',KV='raw:37.06666666666667',KW='raw:34.76666666666667',KX='raw:36.23333333333333',KY='raw:34.93333333333333',KZ='raw:820208.3330000002',Ka=' +k=0.999941177',Kb=' +x_0=800000.0000101599',Kc=' +y_0=99999.99998983997',Kd=' +lat_0=24.33333333333333',Ke=' +lat_1=38.43333333333333',Kf='Geodetic_Datum_of_Malaysia_2000',Kg=' Definition)',Kh=' +towgs84=26,-121,-78,0,0,0,0',Ki='raw:99',Kj=' +a=6378140',Kk='raw:4000000',Kl=' 1942(58)',Km=' +towgs84=-96.062,-82.428,-121.753,4.801,0.345,-1.376,1.496',Kn='GCS_China',Ko='Pulkovo_1942_58',Kp='Everest_1830_1975_Definition',Kq=' +x_0=399999.99998984',Kr=' +towgs84=-24,-15,5,0,0,0,0',Ks='7004',Kt='raw:54',Ku=' +towgs84=682,-203,480,0,0,0,0',Kv=' +towgs84=-136,-108,-292,0,0,0,0',Kw=' +x_0=0',Kx='raw:-111',Ky='raw:-4.5993',Kz='Militar_Geographische_Institut_Ferro',LA=' +b=6356075.41314024',LB='D_South_American_1969',LC='raw:87',LD='raw:165',LE='raw:0.99878641',LF=' +lat_0=42.83333333333334',LG=' +lat_1=37.96666666666667',LH=' +lat_0=34.33333333333334',LI=' +lat_0=40.16666666666666',LJ=' +lat_0=38.83333333333334',LK='raw:299.3249646',LL='raw:3280833.333',LM='raw:2296583.333',LN='raw:1968503.937',LO='raw:914401.8289',LP='raw:298.247',LQ='D_Deutsches_Hauptdreiecksnetz',LR='raw:26',LS=' +lon_0=-84.36666666666666',LT='raw:-141',LU='D_Pulkovo_1942_Adj_1983',LV='raw:58',LW='raw:14500000',LX='raw:31500000',LY='Militar_Geographische_Institute',LZ='Reseau_Geodesique_Francais_1993',La='raw:9',Lb='Nouvelle_Triangulation_Francaise_Paris',Lc='raw:-82.5',Ld='raw:-51',Le='raw:-99',Lf=' +x_0=300000.0000000001',Lg='raw:300.8017255433552',Lh='Indonesian_Datum_1974',Li='raw:34.83333333333334',Lj='raw:47.08333333333334',Lk='raw:45.48333333333333',Ll='raw:44.78333333333333',Lm='raw:44.18333333333333',Ln='raw:43.31666666666667',Lo='raw:37.08333333333334',Lp='raw:38.66666666666666',Lq=' +k=0.999933333',Lr='Kalianpur',Ls='raw:42.5',Lt='raw:29.5',Lu='raw:-177',Lv=' +lat_1=48.73333333333333',Lw='raw:75',Lx='raw:-77.75',Ly='raw:-100.5',Lz='raw:-85.75',MA='D_European_Libyan_1979',MB='raw:6000000',MC='raw:7500000',MD=' +lon_0=-111.5',ME='Deutsches_Hauptdreiecksnetz',MF=' Modified',MG='raw:50000',MH='raw:6377492.018',MI='raw:164041.9948',MJ='raw:0.999909091',MK='raw:187.44',ML=' 1866',MM='raw:171',MN='raw:22500000',MO='raw:20500000',MP='raw:13500000',MQ='raw:29500000',MR='raw:6377299.36559538',MS='raw:81',MT=' +k=0.9999473679999999',MU='Unknown',MV='Oblique_Stereographic',MW='raw:323.1301023611111',MX=' +towgs84=-67.35,3.88,-38.22,0,0,0,0',MY='D_SIRGAS_2000',MZ='NAD27(CGQ77)',Ma=' +lat_2=73.66666666666667',Mb=' +lat_0=75.36440330555556',Mc=' +b=6356515',Md='raw:0.99998',Me='raw:-66.43333333333334',Mf=' +towgs84=25,-141,-78.5,-0,0.35,0.736,0',Mg='raw:-71.5',Mh='D_Posiciones_Geodesicas_Argentinas_2007',Mi='raw:41.5',Mj='raw:-171',Mk='+proj=stere',Ml=' +lat_1=-64.66666666666667',Mm=' +lat_2=-67.33333333333333',Mn='raw:177',Mo='raw:44',Mp='Double_Stereographic',Mq='D_South_American_Datum_1969_96',Mr=' +b=6356514.966398753',Ms='GCS_Xian',Mt='raw:23500000',Mu='raw:21500000',Mv='raw:19500000',Mw='raw:18500000',Mx='raw:16500000',My='raw:15500000',Mz=' +towgs84=295,736,257,0,0,0,0',NA=' +x_0=100000',NB='raw:900000',NC=' +towgs84=-11,851,5,0,0,0,0',ND=' +towgs84=414.1,41.3,603.1,-0.855,2.141,-7.023,0',NE='raw:106.8077194444444',NF='raw:21.16666666666667',NG='raw:18.43333333333333',NH='raw:18.03333333333333',NI='raw:17.83333333333333',NJ='raw:10.16666666666667',NK='4324',NL='raw:32.5',NM=' +towgs84=-127.62,-67.24,-47.04,-3.068,4.903,1.578,-1.06',NN='raw:-93',NO='raw:44.25',NP='raw:41.75',NQ='raw:-74.5',NR='raw:-93.5',NS='Posiciones_Geodesicas_Argentinas_2007',NT='Posiciones_Geodesicas_Argentinas_1994',NU='Posiciones_Geodesicas_Argentinas_1998',NV='6322',NW='6324',NX='raw:43',NY='raw:24',NZ='raw:0.99999',Na=' +lat_0=39.66666666666666',Nb='4322',Nc='Stereographic_North_Pole',Nd=' +x_0=1000000',Ne='raw:-147',Nf='raw:-146.414',Ng='raw:59.47',Nh='raw:-5.04',Ni='raw:1.024',Nj='7012',Nk=' +lon_0=-105.5',Nl=' +towgs84=482.5,-130.6,564.6,-1.042,-0.214,-0.631,8.15',Nm='raw:141',Nn=' (RGS)',No='South_American_Datum_1969_96',Np='raw:40.25',Nq='raw:-79.5',Nr=' +a=6378249.145',Ns='raw:28500000',Nt='raw:27500000',Nu='raw:25500000',Nv='raw:26500000',Nw='GCS_JGD_2000',Nx='Geocentric_datum_of_Korea',Ny='raw:57',Nz=' +x_0=2000000',OA='4258',OB=' California',OC='GCS_SIRGAS',OD='raw:6378200',OE='D_Indonesian_1974',OF='6258',OG='raw:-9',OH=' +lat_0=45.66666666666666',OI=' +lat_1=80.33333333333333',OJ=' +lat_0=78.70733752777778',OK='Australian_Geodetic_Datum_1984',OL='raw:-153',OM='Clarke_1880_Arc',ON='raw:0.999964286',OO='raw:0.999916667',OP='raw:1640419.948',OQ='raw:69',OR='raw:147',OS=' +b=6356774.50408554',OT='raw:0.9143985307444408',OU=' Spheroid',OV=' Rectangular',OW='raw:40.65',OX='raw:-68.5',OY='raw:12',OZ='raw:507.337',Oa='raw:680.507',Ob=' +lon_0=-123.3333333333333',Oc=' +lon_0=-91.33333333333333',Od='Schwarzeck',Oe='GCS_Kalianpur',Of=' +towgs84=-168,-60,320,0,0,0,0',Og='raw:-92',Oh='raw:-45',Oi='raw:-123',Oj='raw:-122',Ok='raw:-105',Ol='GCS_DGN95',Om='raw:17500000',On='raw:32500000',Oo='raw:30500000',Op='raw:11482916.667',Oq='raw:1.0000135965',Or='raw:293.4663076556349',Os='raw:293.4663155389802',Ot='raw:48.33333333333334',Ou='raw:44.66666666666666',Ov='raw:85.43711833333333',Ow='raw:9842500.000000002',Ox=' +lat_0=31',Oy=' +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093',Oz=' +x_0=150000',PA=' +x_0=3500000',PB=' +towgs84=213.11,9.37,-74.95,0,0,0,0',PC='raw:-39',PD=' +lat_1=43.66666666666666',PE=' +lat_0=40.33333333333334',PF='NZGD49',PG='raw:46',PH='raw:-129',PI='raw:0.47',PJ='raw:-0.1',PK='Kartastokoordinaattijarjestelma_1966',PL='raw:SOUTH',PM=' +towgs84=616,97,-251,0,0,0,0',PN=' +towgs84=-148,136,90,0,0,0,0',PO='Everest',PP=' 1995',PQ=' +lon_0=-90',PR=' +x_0=250000',PS='GCS_SWEREF99',PT=' +x_0=914401.8288036576',PU=' 1942',PV='JGD2000',PW=' Lambert',PX='D_NAD_1927_CGQ77',PY=' +lon_0=-90.33333333333333',PZ='raw:153',Pa='raw:262467.1916',Pb='raw:656166.6667',Pc=' +a=6377276.345',Pd='raw:33.3',Pe='D_JGD_2000',Pf='raw:-146.6',Pg='raw:-0.359',Ph='raw:-0.053',Pi=' +b=6356103.038993155',Pj='GCS_New',Pk='Albers',Pl='raw:1.000034',Pm='raw:1.000015',Pn='raw:1.000026',Po='raw:1.000031',Pp='raw:11500000',Pq='raw:0.999975',Pr='raw:33500000',Ps='D_Hartebeesthoek_1994',Pt='Marco_Geocentrico_Nacional_de_Referencia',Pu='raw:-92.5',Pv='raw:42',Pw='raw:49',Px=' +lat_0=40.5',Py=' +towgs84=-134,-48,149,0,0,0,0',Pz=' +towgs84=25,-141,-78.5,0,0.35,0.736,0',QA='D_Korean_Datum_1985',QB='GCS_Australian_1966',QC='raw:-135',QD=' +lat_2=37.21666666666667',QE=' +lat_2=40.71666666666667',QF=' +lat_2=39.01666666666667',QG=' +lat_1=27.83333333333333',QH=' +lat_2=26.16666666666667',QI=' +lat_1=70.33333333333333',QJ=' +lat_0=68.68747555555557',QK=' 1942(83)',QL='Tokyo',QM=' North',QN='raw:213360',QO=' +towgs84=-104.1,-49.1,-9.9,0.971,-2.917,0.714,-11.68',QP=' +y_0=999999.9998983998',QQ=' +x_0=699999.9998983998',QR=' +y_0=304800.6096012192',QS=' +y_0=800000',QT='Pulkovo_1942_83',QU='GCS_NAD27(CGQ77)',QV=' National',QW=' +k=0.99995',QX='GCS_Tokyo',QY='raw:35',QZ='Cassini',Qa='GCS_GR96',Qb='raw:0.99999375',Qc='D_Australian_1966',Qd='raw:-118.3333333333333',Qe='raw:-85.83333333333333',Qf='D_Reseau_Geodesique_de_Nouvelle_Caledonie_91_93',Qg=' +lat_0=34.75',Qh=' Adjustment)',Qi='raw:47',Qj='raw:18',Qk=' +lon_0=-81',Ql=' +lon_0=-100',Qm=' +b=6356098.145120132',Qn='NAD27(76)',Qo='raw:-70.5',Qp='D_Autonomous_Regions_of_Portugal_2008',Qq='D_Ross_Sea_Region_Geodetic_Datum_2000',Qr='raw:46.5',Qs='raw:-159',Qt='raw:30.5',Qu='raw:-165',Qv='raw:WEST',Qw='+proj=omerc',Qx='raw:41',Qy='Australian',Qz='Reseau_Geodesique_de_Nouvelle_Caledonie_91_93',RA='D_Reseau_Geodesique_de_la_Polynesie_Francaise',RB=' +lon_0=-98.5',RC='raw:1.00002',RD='raw:8500000',RE='raw:1700000',RF='raw:7.439583333333333',RG='raw:45.91666666666666',RH='raw:65.10127088888888',RI='raw:73.15574086111111',RJ='raw:49.83333333333334',RK='raw:13.33333333333333',RL='raw:4.596200416666666',RM=' +towgs84=-103.746,-9.614,-255.95,0,0,0,0',RN='D_Not_specified_based_on_International_1924_Authalic_Sphere',RO='raw:-86',RP=' +x_0=800000',RQ=' Stereographic',RR='raw:293.4663',RS='raw:24500000',RT='raw:12500000',RU='raw:0.999995',RV='raw:6377298.556',RW='raw:6377563.396',RX='raw:6377301.243',RY='raw:328083.9895',RZ='raw:-76.3',Ra='raw:0.844',Rb='raw:-0.84',Rc='D_SWEREF99',Rd='raw:-109.5',Re='raw:0.9995',Rf='pseudo_standard_parallel_1',Rg=' +lat_2=42.33333333333334',Rh=' +lat_2=44.33333333333334',Ri=' +lat_0=25.66666666666667',Rj=' +lat_0=29.66666666666667',Rk=' +lat_0=35.83333333333334',Rl=' +lat_0=37.83333333333334',Rm=' +lat_1=83.66666666666667',Rn=' +lat_2=80.33333333333333',Ro=' +lat_0=82.05842488888888',Rp='raw:114',Rq='raw:159',Rr='Korean_Datum_1985',Rs='Autonomous_Regions_of_Portugal_2008',Rt='Ross_Sea_Region_Geodetic_Datum_2000',Ru='Not_specified_based_on_International_1924_Authalic_Sphere',Rv=' +lat_0=38',Rw=' +x_0=2500000',Rx=' +towgs84=-377,681,-50,0,0,0,0',Ry='D_Institut_Geographique_du_Congo_Belge_1955',Rz='Reseau_Geodesique_de_la_Polynesie_Francaise',SA='GCS_Hartebeesthoek94',SB='raw:38.35',SC='raw:34.65',SD='SIRGAS',SE='+proj=cass',SF='GCS_GDA_1994',SG='Bessel_Namibia_GLM',SH='D_Phillipine_Reference_System_1992',SI='raw:3',SJ=' +y_0=2000000',SK=' +towgs84=-143,-236,7,0,0,0,0',SL='raw:-158',SM=' +lon_0=-110.0833333333333',SN=' +lon_0=-107.3333333333333',SO=' +lon_0=-105.1666666666667',SP=' +lon_0=-120.8333333333333',SQ=' +lon_0=-78.58333333333333',SR=' +lon_0=-76.58333333333333',SS=' +lon_0=-107.8333333333333',ST=' +lon_0=-104.3333333333333',SU=' +lon_0=-71.66666666666667',SV=' +lon_0=-118.5833333333333',SW=' +lon_0=-115.5833333333333',SX=' +lon_0=-116.6666666666667',SY=' +lon_0=-88.83333333333333',SZ=' +lon_0=-93.09999999999999',Sa=' +lon_0=-70.16666666666667',Sb=' +lon_0=-87.08333333333333',Sc=' +lon_0=-85.66666666666667',Sd=' +lon_0=-90.16666666666667',Se=' +lon_0=-88.33333333333333',Sf=' +lon_0=-112.1666666666667',Sg=' +lon_0=-84.16666666666667',Sh=' +lon_0=-82.16666666666667',Si=' +lon_0=-75.41666666666667',Sj=' +lon_0=-110.1666666666667',Sk=' +lon_0=-111.9166666666667',Sl='Everest_1830_1967_Definition',Sm='Everest_1830_1962_Definition',Sn='Institut_Geographique_du_Congo_Belge_1955',So='raw:-33',Sp='raw:-27',Sq='raw:132',Sr=' 1841',Ss='D_Kalianpur_1975',St='raw:-108.75',Su='raw:-106.25',Sv='raw:-115.75',Sw='raw:-116.25',Sx='raw:-113.75',Sy=' +lat_0=37.5',Sz=' +y_0=700000',TA='raw:300.8017000000015',TB=' +towgs84=-242.2,-144.9,370.3,0,0,0,0',TC='raw:120',TD='raw:-118',TE=' +y_0=1500000',TF=' +x_0=4500000',TG='raw:1.000038',TH='raw:1.000027',TI='raw:1.000036',TJ='raw:10500000',TK=' +x_0=599999.9999976',TL='Rikets_koordinatsystem_1990',TM='Philippine_Reference_System_1992',TN=' System',TO=' +towgs84=-275.722,94.7824,340.894,-8.001,-4.42,-11.821,1',TP='raw:63',TQ='raw:34',TR='+proj=aea',TS=' Inchauspe',TT=' +y_0=-2500000',TU=' +lat_0=45.16666666666666',TV=' +lat_0=45.33333333333334',TW=' +lat_2=36.76666666666667',TX=' +lat_0=27.83333333333333',TY=' +lat_0=31.66666666666667',TZ=' +lat_0=42.33333333333334',Ta=' +lat_0=31.83333333333333',Tb=' +lat_0=41.08333333333334',Tc=' +lat_1=40.96666666666667',Td=' +lat_2=39.93333333333333',Te=' +lat_0=33.33333333333334',Tf=' +lat_1=36.76666666666667',Tg=' +lat_1=41.03333333333333',Th=' +lat_2=40.66666666666666',Ti=' +lat_2=41.71666666666667',Tj=' +lat_2=38.96666666666667',Tk=' +lat_1=38.56666666666667',Tl=' +lat_2=37.26666666666667',Tm=' +lat_1=39.78333333333333',Tn=' +lat_2=38.71666666666667',To=' +lat_2=40.61666666666667',Tp=' +lat_1=43.26666666666667',Tq=' +lat_2=42.06666666666667',Tr=' +lat_2=29.58333333333333',Ts=' +lat_1=41.86666666666667',Tt=' +lat_0=40.83333333333334',Tu=' +lat_2=37.23333333333333',Tv=' +lat_1=33.88333333333333',Tw=' +lat_2=32.78333333333333',Tx=' +lat_0=32.16666666666666',Ty=' +lat_1=35.46666666666667',Tz=' +lat_2=34.03333333333333',UA=' +lat_0=35.33333333333334',UB=' +lat_2=37.06666666666667',UC=' +lat_1=39.83333333333334',UD=' +lat_2=38.33333333333334',UE=' +lat_1=41.66666666666666',UF=' +lat_1=34.76666666666667',UG=' +lat_0=32.66666666666666',UH=' +lat_1=36.23333333333333',UI=' +lat_2=34.93333333333333',UJ='D_Croatian_Terrestrial_Reference_System',UK='raw:39.45',UL='raw:39.75',UM='raw:38.45',UN='Everest_1830_Definition',UO=' +y_0=100000',UP=' +b=6356173.508712696',UQ='raw:-77',UR='raw:33.4',US=' +y_0=5500000',UT='GCS_NAD27(76)',UU='raw:6378300.789',UV='raw:131233.5958',UW=' +lon_0=105',UX='raw:102',UY='raw:1.0',UZ=' +y_0=-5000000',Ua='raw:-208.406',Ub='raw:-109.878',Uc='raw:-115.854',Ud='raw:-99.0583',Ue='raw:-152.462',Uf=' +k=0.9999749999999999',Ug=' +k=0.9995000000000001',Uh='raw:-9.131906111111112',Ui='raw:-89.24166666666667',Uj='raw:-92.63333333333334',Uk='raw:-123.0833333333333',Ul='raw:-119.1666666666667',Um='raw:-122.3333333333333',Un='raw:-123.1666666666667',Uo='raw:-117.8333333333333',Up='raw:-160.1666666666667',Uq='raw:-156.6666666666667',Ur='raw:-133.6666666666667',Us='raw:0.1166666666666667',Ut='raw:-71.60561777777777',Uu=' +towgs84=307,304,-318,0,0,0,0',Uv=' +towgs84=-160,-6,-302,0,0,0,0',Uw='Croatian_Terrestrial_Reference_System',Ux='raw:44.5',Uy='raw:-114',Uz='GCS_DRUKREF',VA=' +lon_0=-82.5',VB='D_GDA_1994',VC='raw:-101.5',VD='raw:-94.25',VE='raw:750000',VF='raw:-84.25',VG='raw:-72.75',VH=' +towgs84=-304.046,-60.576,103.64,0,0,0,0',VI=' +towgs84=70.995,-335.916,262.898,0,0,0,0',VJ='Yemen_National_Geodetic_Network_1996',VK='raw:126',VL='raw:1300000',VM='raw:1.00012',VN='raw:8000000',VO='raw:2952750',VP='raw:4921250',VQ='raw:0.99996',VR='raw:9500000',VS='raw:0.99984',VT='D_Campo_Inchauspe',VU='4617',VV=' +x_0=700000',VW=' +x_0=213360',VX='raw:30.28813972222222',VY='raw:46.95240555555556',VZ='raw:44.03611111111111',Va='raw:31.73409694444445',Vb='raw:35.21208055555556',Vc='raw:44.08333333333334',Vd='raw:45.08333333333334',Ve='raw:21.66666666666667',Vf='raw:21.83333333333333',Vg='raw:20.33333333333333',Vh='raw:18.83333333333333',Vi='raw:26246666.66670001',Vj='raw:45.30916666666666',Vk='raw:2296583.333300001',Vl='raw:53.83333333333334',Vm='raw:51.83333333333334',Vn='raw:63.66666666666666',Vo='raw:51.16666666666666',Vp='raw:4.599047222222222',Vq='4555',Vr='6140',Vs='6610',Vt=' +lon_0=-77.75',Vu=' +lon_0=-100.5',Vv=' +lon_0=-85.75',Vw='Kalianpur_1975',Vx=' +x_0=999999.9999898402',Vy=' +towgs84=-151.99,287.04,-147.45,0,0,0,0',Vz='D_Not_specified_based_on_Hughes_1980_ellipsoid',WA=' Northern',WB=' +lon_0=129',WC=' +a=6378293.645208759',WD=' +b=6356617.987679838',WE='1024',WF='1045',WG='4214',WH='4490',WI='4610',WJ=' (Paris)',WK='raw:1.000043',WL='raw:39500000',WM='raw:37500000',WN='raw:35500000',WO='raw:40500000',WP='raw:38500000',WQ='raw:36500000',WR='raw:34500000',WS='raw:45500000',WT='raw:43500000',WU='raw:41500000',WV='Bessel_Modified',WW='raw:5',WX=' +x_0=5500000',WY=' +lat_0=39.83333333333334',WZ=' +lat_1=44.06666666666667',Wa=' +lat_2=42.73333333333333',Wb=' +lat_1=46.76666666666667',Wc=' +lat_2=45.56666666666667',Wd=' +lat_1=38.88333333333333',We=' +lat_2=37.48333333333333',Wf=' +lat_1=47.33333333333334',Wg=' +lat_2=45.83333333333334',Wh=' +lat_2=38.03333333333333',Wi=' +lat_1=30.28333333333333',Wj=' +lat_2=28.38333333333333',Wk=' +lat_1=33.96666666666667',Wl=' +lat_2=32.13333333333333',Wm=' +lat_1=36.18333333333333',Wn=' +lat_1=31.88333333333333',Wo=' +lat_2=30.11666666666667',Wp=' +lat_1=36.41666666666666',Wq=' +lat_2=42.83333333333334',Wr=' +lat_1=45.68333333333333',Ws=' +lat_2=44.41666666666666',Wt=' +lat_1=34.83333333333334',Wu=' +lat_2=40.88333333333333',Wv=' +lat_1=35.23333333333333',Ww=' +lat_2=33.93333333333333',Wx=' +lat_2=35.56666666666667',Wy=' +lat_1=40.03333333333333',Wz=' +lat_2=38.73333333333333',XA=' +lat_2=40.43333333333333',XB=' +lat_1=47.48333333333333',XC=' +lat_2=46.18333333333333',XD=' +lat_2=47.43333333333333',XE=' +lat_1=36.16666666666666',XF=' +lat_2=34.33333333333334',XG=' +lat_1=45.21666666666667',XH=' +lat_2=43.78333333333333',XI=' +lat_1=48.63333333333333',XJ=' +lat_2=47.03333333333333',XK=' +lat_2=45.61666666666667',XL=' +lat_1=47.08333333333334',XM=' +lat_2=45.48333333333333',XN=' +lat_0=44.78333333333333',XO=' +lat_2=44.18333333333333',XP=' +lat_0=43.31666666666667',XQ=' +lat_1=42.68333333333333',XR=' +lat_1=41.48333333333333',XS=' +lat_2=41.28333333333333',XT=' +lat_1=32.66666666666666',XU=' +lat_2=31.16666666666667',XV=' +lat_1=37.93333333333333',XW=' +lat_2=36.73333333333333',XX=' +lat_1=37.08333333333334',XY=' +lat_2=38.66666666666666',XZ=' +lat_1=40.78333333333333',Xa=' +lat_2=39.71666666666667',Xb='1043',Xc='6214',Xd='7049',Xe=' +lat_0=58',Xf='DGN95',Xg='DRUKREF',Xh=' +lon_0=-98',Xi=' +lon_0=135',Xj=' +lon_0=117',Xk='raw:44.4',Xl='raw:47.5',Xm='raw:-2.5764',Xn='raw:298.279411123061',Xo='D_Mexican_Datum_of_1993',Xp='Not_specified_based_on_Hughes_1980_ellipsoid',Xq='raw:25',Xr='raw:37',Xs=' +lat_0=41.5',Xt=' +lat_0=42.5',Xu=' +y_0=3000000',Xv=' 72BE',Xw=' +lon_0=123',Xx='raw:337.25556',Xy=' +lat_0=40',Xz=' +lat_0=54',YA='raw:52',YB='D_Tokyo',YC='raw:1.0002',YD='raw:492125',YE='Helmert_1906',YF='raw:-117.808',YG='D_Australian_1984',YH='D_Deutsche_Bahn_Reference_System',YI='D_Red_Geodesica_de_Canarias_1995',YJ='raw:80000',YK='raw:-72.5',YL='raw:35.25',YM='raw:41.95',YN='raw:33.75',YO='raw:-93.1',YP='raw:47.05',YQ='raw:30.75',YR='raw:-84.5',YS='raw:37.25',YT='GCS_Australian_1984',YU='GCS_POSGAR',YV=' +towgs84=-192.873,-39.382,-111.202,-0.00205,-0.0005,0.00335,0.0188',YW=' +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725',YX='LGD2006',YY='raw:6378300',YZ='GCS_LGD2006',Ya=' +x_0=914401.8289',Yb=' +y_0=304800.6096',Yc='raw:6377340.189',Yd='Campo_Inchauspe',Ye='raw:492125.9843',Yf='raw:4921259.843',Yg='raw:8202099.738',Yh='raw:1312335.958',Yi='raw:0.999625769',Yj=' Argentina',Yk=' +lon_0=111',Yl=' +k_0=0.99878641',Ym=' +lon_0=-66.43333333333334',Yn=' +towgs84=-679,669,-48,0,0,0,0',Yo=' +towgs84=-133,-77,-51,0,0,0,0',Yp=' +towgs84=61,-285,-181,0,0,0,0',Yq='raw:295',Yr='raw:108',Ys='SAD69(96)',Yt=' +lat_0=41.75',Yu=' +lon_0=-78.5',Yv=' +lon_0=-71.5',Yw=' +lon_0=-93.5',Yx=' +y_0=999999.9999898402',Yy=' +y_0=249999.9998983998',Yz=' +to_meter=1.0000135965',ZA='raw:-168',ZB='raw:27.5',ZC='Mexican_Datum_of_1993',ZD=' +a=6377304.063',ZE=' +lat_0=36',ZF='raw:67',ZG='Deutsche_Bahn_Reference_System',ZH=' +towgs84=-79.9,-158,-168.9,0,0,0,0',ZI=' +towgs84=-50.9,-347.6,-231,0,0,0,0',ZJ='Red_Geodesica_de_Canarias_1995',ZK=' +towgs84=-106.869,52.2978,-103.724,0.3366,-0.457,1.8422,-1.2747',ZL=' +towgs84=-92,-93,122,0,0,0,0',ZM=' +towgs84=-206,172,-6,0,0,0,0',ZN=' +towgs84=283,682,231,0,0,0,0',ZO=' +to_meter=0.9143985307444408',ZP='raw:-41',ZQ='+proj=sterea',ZR='raw:1.000028',ZS='raw:1.000025',ZT='raw:1.000045',ZU='raw:44500000',ZV='raw:42500000',ZW=' +lat_0=21.16666666666667',ZX=' +lat_1=18.43333333333333',ZY=' +lat_2=18.03333333333333',ZZ=' +lat_0=17.83333333333333',Za=' +gamma=323.1301023611111',Zb='7011',Zc=' Circuit',Zd='raw:29',Ze='raw:10',Zf='raw:78',Zg='raw:-3',Zh='raw:-203',Zi='raw:-119',Zj='raw:39.5',Zk=' +lon_0=-79.5',Zl=' +y_0=4500000',Zm=' +x_0=31500000',Zn='raw:-51.536',Zo='raw:137.784',Zp='raw:656167.979',Zq=' +b=6356514.96582849',Zr=' +x_0=500000.0001504',Zs=' +towgs84=674.4,15.1,405.3,0,0,0,0',Zt='D_Papua_New_Guinea_Geodetic_Datum_1994',Zu=' +towgs84=-180.624,-225.516,173.919,-0.81,-1.898,8.336,16.7101',Zv=' (IGN)',Zw=' +towgs84=589,76,480,0,0,0,0',Zx=' +towgs84=-263,6,431,0,0,0,0',Zy='raw:-79',Zz='raw:136',aA='raw:-54',aB='raw:-21',aC='raw:0.736',aD='raw:40000',aE='GCS_TUREF',aF='GCS_SAD69',aG='D_Ocotepeque_1935',aH='D_Ain_el_Abd_1970',aI='raw:13123333.3333',aJ=' +lat_0=30',aK=' +lon_0=21',aL=' +lon_0=15',aM=' +axis=wsu',aN='raw:84',aO=' +ellps=helmert',aP=' +a=6377299.151',aQ='System_Jednotne_Trigonometricke_Site_Katastralni_Ferro',aR='Unspecified',aS='Foot',aT='9002',aU='Mercator',aV='Indonesian',aW='raw:38.5',aX='raw:39.2',aY='raw:41.7',aZ='raw:38.3',aa='raw:30.7',ab='raw:29.3',ac='raw:28.5',ad='raw:41.2',ae='raw:33.5',af='raw:36.5',ag='raw:-120',ah='raw:-154',ai='Papua_New_Guinea_Geodetic_Datum_1994',aj=' +lon_0=-74.5',ak=' +b=6356098.359005156',al=' +b=6356750.304921594',am=' +x_0=200000.00001016',an=' +x_0=3500000.0001016',ao=' +y_0=2000000.0001016',ap=' +y_0=399999.99998984',aq='raw:23',ar='raw:96',as='raw:-24',at='raw:-74',au='raw:-78',av=' +x_0=14500000',aw=' +x_0=29500000',ax=' Massachusetts',ay='MAGNA-SIRGAS',az='D_Korea_2000',bA='Corrego_Alegre_1970_72',bB='raw:-91.91666666666667',bC='raw:-60.66666666666666',bD='raw:-63.33333333333334',bE='raw:0.1333333333333333',bF='raw:0.3047997101815088',bG=' +towgs84=-117,-132,-164,0,0,0,0',bH='raw:1.00016',bI='raw:3900000',bJ='raw:0.99975',bK='raw:81.317226',bL='raw:2743195.5',bM='D_Iraqi_Geospatial_Reference_System',bN='foot',bO=' +zone=20',bP=' +lon_0=-122',bQ='D_Stockholm_1938',bR='raw:13123333.333',bS='raw:16404166.667',bT='raw:-4354009.816',bU='raw:0.3047972654',bV='Paris',bW=' +ellps=bess_nam',bX='D_Ukraine_2000',bY='GCS_Schwarzeck',bZ='D_Nord_Sahara_1959',ba=' +lon_0=-86.15000000000001',bb=' +towgs84=-189,-242,-91,0,0,0,0',bc=' +towgs84=-265,120,-358,0,0,0,0',bd='International_1924_Authalic_Sphere',be=' +towgs84=-73.472,-51.66,-112.482,0.953,4.6,-2.368,0.586',bf='raw:480',bg='raw:-60',bh='raw:682',bi='raw:-48',bj='raw:131',bk='raw:-94',bl='raw:-84',bm='raw:-62',bn='raw:18.05827777777778',bo='raw:6378249.144808011',bp='raw:44.36259546944444',bq='raw:44.11394404583334',br='raw:45.96121983333334',bs='raw:42.66946209694444',bt='raw:46.07784409055556',bu='raw:43.57503293972223',bv='raw:45.17782208583333',bw='raw:45.90009913138888',bx='raw:44.41682397527777',by='raw:44.63614887194444',bz='raw:45.70422377027778',cA='raw:44.00007392861111',cB='raw:44.90090442361111',cC='raw:45.15423710527778',cD='raw:43.80700011777778',cE='raw:42.63756227694444',cF='raw:44.87228112638889',cG='raw:43.46254664583333',cH='raw:44.97785689861112',cI='raw:45.89871486583333',cJ='raw:46.66964837722222',cK='raw:45.78333333333333',cL='raw:31.73439361111111',cM='raw:35.20451694444445',cN='raw:140.8333333333333',cO='raw:139.8333333333333',cP='raw:137.1666666666667',cQ='raw:134.3333333333333',cR='raw:132.1666666666667',cS='raw:3.192280555555556',cT='raw:6561666.666700001',cU='raw:16.33333333333333',cV='raw:10.33333333333333',cW='raw:53.31582047222222',cX=' +towgs84=-10.18,-350.43,291.37,0,0,0,0',cY=' +towgs84=-190.421,8.532,238.69,0,0,0,0',cZ=' +towgs84=-17.51,-108.32,-62.39,0,0,0,0',ca='PSAD56',cb=' +lon_0=-68.5',cc=' +a=6377299.36559538',cd=' +x_0=50000.00001504',ce=' +x_0=79999.99999968',cf='GDM2000',cg='Iraqi_Geospatial_Reference_System',ch='POSGAR',ci=' +lon_0=0',cj=' (Ferro)',ck=' +lon_0=27',cl=' +lon_0=93',cm=' +lon_0=99',cn=' +lon_0=81',co=' +lon_0=75',cp=' Wisconsin',cq='raw:65',cr='raw:60',cs='Carthage',ct=' +x_0=900000',cu=' Mississippi',cv=' +x_0=22500000',cw=' +x_0=20500000',cx=' +x_0=13500000',cy=' +towgs84=-130,110,-13,0,0,0,0',cz=' +towgs84=-166,-15,204,0,0,0,0',dA=' +towgs84=-587.8,519.75,145.76,0,0,0,0',dB='System_Jednotne_Trigonometricke_Site_Katastralni',dC='raw:-87.5',dD='raw:44.75',dE='raw:30000',dF='GCS_ELD79',dG='Ocotepeque_1935',dH='Ain_el_Abd_1970',dI='raw:196850.3937',dJ='raw:1148291.667',dK='raw:2723091.667',dL='raw:13123359.58',dM='raw:2546731.496',dN='raw:26246719.16',dO='raw:19685039.37',dP='raw:1312333.333',dQ='raw:2624666.667',dR='raw:152400.3048',dS='raw:0.999625544',dT=' +lat_2=83.66666666666667',dU=' +lat_0=85.43711833333333',dV='raw:-22',dW='raw:-288',dX='raw:-376',dY='D_SIRGAS',dZ='raw:48.5',da='raw:42.1',db='raw:45.7',dc='raw:-150',dd='raw:577.326',de='raw:463.919',df='GCS_GDM2000',dg='D_Schwarzeck',dh='raw:-4000000',di='raw:0.999912',dj='raw:914398.5',dk=' +towgs84=-273.5,110.6,-357.9,0,0,0,0',dl=' +lon_0=87',dm='Ocotepeque',dn='+proj=laea',dp='D_GDM_2000',dq='raw:-2.455',dr='raw:-85.05',ds='raw:-86.15',dt='raw:984250',du='raw:350000',dv='raw:0.9998',dw='NGO_1948_Oslo',dx='GCS_SAD69(96)',dy='GCS_MGI_Ferro',dz=' +towgs84=-403,684,41,0,0,0,0',eA='European_Datum_1950_1977',eB=' (Jakarta)',eC=' Arctic',eD='Batavia',eE=' +y_0=6000000',eF=' +lon_0=-92.5',eG=' Pennsylvania',eH=' +zone=19',eI=' Virginia',eJ='UCS-2000',eK=' +lat_2=45.5',eL=' +lat_0=29.5',eM=' +y_0=300000',eN=' +a=6377492.018',eO=' +k=0.999909091',eP=' +b=6356751.689189189',eQ=' +b=6356100.230165384',eR='raw:175',eS='raw:296',eT='raw:-82',eU='raw:-96',eV='raw:150',eW=' +lat_0=90',eX=' +lon_0=90',eY='raw:48',eZ='raw:19',ea='GCS_ID74',eb='raw:0.303',ec='raw:0.446',ed='raw:0.234',ee='raw:-0.29',ef=' +x_0=16500000',eg=' +x_0=23500000',eh=' +x_0=21500000',ei=' +x_0=28500000',ej=' +x_0=27500000',ek=' +x_0=18500000',el=' +x_0=25500000',em=' +x_0=19500000',en=' +x_0=15500000',eo=' +x_0=26500000',ep='raw:170251.555',eq='raw:98425.1969',er='raw:328083.333',es='Nord_Sahara_1959',et='D_Kalianpur_1880',eu=' +zone=18',ev=' +zone=21',ew=' +towgs84=-124.76,53,466.79,0,0,0,0',ex=' 1975',ey='4167',ez=' ellipse',fA=' Island',fB='Ferro',fC=' +lon_0=-92',fD='Clarke_1858',fE='raw:1200000',fF='raw:14743.5',fG='raw:6200000',fH='raw:7000000',fI='raw:2800000',fJ='raw:4321000',fK='raw:3210000',fL='6167',fM=' +lon_0=12',fN=' +lon_0=33',fO=' +lon_0=24',fP=' +lat_2=77',fQ='raw:50',fR=' +y_0=200000',fS=' +lon_0=-70.5',fT=' +x_0=7500000',fU=' +y_0=3500000',fV='raw:90.129',fW='raw:2.4232',fX='D_RGF_1993',fY='Ukraine_2000',fZ='Mercator_1SP',fa=' +towgs84=31,146,47,0,0,0,0',fb='Cylindrical_Equal_Area',fc='raw:598.1',fd='raw:418.2',fe='raw:0.202',ff='raw:0.045',fg='raw:40.55',fh='raw:37.75',fi='raw:-87.3',fj='raw:-86.5',fk='raw:127.5',fl='D_POSGAR_1994',fm='D_POSGAR_1998',fn='raw:609601.22',fo='raw:0.9998335',fp='GCS_NTF_Paris',fq=' +lat_0=45',fr=' +lat_0=26',fs=' Minnesota',ft=' +a=6378160',fu='Zanderij',fv='Merchich',fw='Camacupa',fx=' +lon_0=-109.5',fy=' +x_0=32500000',fz=' +x_0=30500000',gA='D_Corrego_Alegre_1961',gB='Everest_1830_Modified',gC=' +y_0=0.003048006096012192',gD=' +lon_0=-118.3333333333333',gE=' +lon_0=-85.83333333333333',gF='raw:53.13010236111111',gG='raw:162',gH='raw:-66',gI='GCS_Unspecified',gJ='D_Tananarive_1925',gK='raw:298.247167427',gL='raw:43.3223129275',gM='raw:43.0695160375',gN=' +lat_0=30.5',gO='raw:4',gP=' +lat_0=44',gQ=' +lat_0=47',gR=' +lon_0=30',gS=' +lat_1=77',gT='raw:72',gU='raw:55',gV='raw:-136',gW='raw:-108',gX='raw:-292',gY='raw:-166',gZ='Tananarive',ga='raw:-67.35',gb='raw:-38.22',gc='D_NGO_1948',gd='raw:550000',ge='Stockholm_1938',gf='Kalianpur_1880',gg='D_Rauenberg_Datum_83',gh='D_European_1950_ED77',gi=' +lat_0=36.16666666666666',gj=' +lat_0=65.10127088888888',gk=' +lat_0=73.15574086111111',gl=' +lat_0=81.31722600000001',gm=' +gamma=53.13010236111111',gn=' +lon_0=13.33333333333333',go=' +lat_0=4.596200416666666',gp='D_Marco_Geodesico_Nacional',gq='Reseau_Geodesique_Francais_Guyane_1995',gr=' 1954',gs='GDA94',gt=' +zone=17',gu=' +lon_0=114',gv=' +lon_0=132',gw=' +towgs84=-143,-90,-294,0,0,0,0',gx='4272',gy='grad',gz='raw:-36',hA='raw:138',hB='+proj=merc',hC='raw:5.137',hD='raw:1.474',hE='raw:5.297',hF='raw:1.000013',hG='raw:1.000022',hH='raw:1.000029',hI='raw:1.000155',hJ='raw:1.000002',hK='raw:1.000175',hL='raw:1.000023',hM='raw:1.000008',hN='raw:-4480000',hO='raw:541337.5',hP='raw:19685000',hQ='GCS_UCS-2000',hR='raw:0.999923',hS='raw:6378306.3696',hT='D_Corrego_Alegre',hU='D_Kalianpur_1962',hV='raw:43.200055605',hW='raw:0.9987864078',hX='Polyconic',hY='D_Karbala_1979_Polservice',hZ='6272',ha=' +zone=22',hb=' +lat_0=41',hc='clrk80',hd='raw:20',he=' Hawaiian',hf=' +lat_0=46.5',hg=' +lon_0=-118',hh=' +y_0=400000',hi=' +x_0=33500000',hj=' +x_0=17500000',hk=' +lon_0=-108.75',hl=' +k=0.999964286',hm=' +k=0.999916667',hn=' +lon_0=-106.25',ho=' +lon_0=-115.75',hp=' +lon_0=-116.25',hq=' +lon_0=-113.75',hr='Corrego_Alegre_1961',hs=' +towgs84=-73,-247,227,0,0,0,0',ht=' +towgs84=265.025,384.929,-194.046,0,0,0,0',hu='Reseau_Geodesique_de_la_Reunion_1992',hv='SAD69',hw='TUREF',hx=' Sphere',hy='RSRGD2000',hz=' +k=0.99998',iA='raw:73.7',iB='raw:-148',iC='raw:-134',iD='raw:-143',iE='raw:-115',iF='raw:53.5',iG='raw:0.01',iH='raw:40.9',iI='GCS_Cape',iJ=' +lat_1=38.35',iK=' +lat_1=40.65',iL=' +y_0=6500000',iM=' +y_0=2500000',iN=' +x_0=39999.99999984',iO='Marco_Geodesico_Nacional',iP='Red_Geodesica_Venezolana',iQ=' +towgs84=-61.702,284.488,472.052,0,0,0,0',iR=' +towgs84=-223.237,110.193,36.649,0,0,0,0',iS=' Authalic',iT=' +zone=32',iU=' +zone=39',iV=' Michigan',iW='Jakarta',iX='raw:110',iY='raw:0.0',iZ='raw:6377295.664',ia='D_Timbalai_1948',ib='raw:9842519.685',ic='raw:3280839.895',id=' +towgs84=217,823,299,0,0,0,0',ie=' +towgs84=214,804,268,0,0,0,0',ig=' +towgs84=-125,53,467,0,0,0,0',ih=' +towgs84=198,881,317,0,0,0,0',ii='GR96',ij='ED50',ik='Indian',il='4230',im='4747',io='4755',ip=' +lat_1=43',iq=' +lon_0=45',ir='raw:-6',is='ED50(ED77)',it='GCS_Krassovsky,',iu='D_Potsdam_Datum_83',iv='Rauenberg_Datum_83',iw='Airy_Modified_1849',ix='Clarke_1880_Benoit',iy=' +x_0=99999.99998983997',iz=' +x_0=99999.99999960001',jA=' +x_0=2743195.592233322',jB=' +y_0=914398.5307444407',jC='Istituto_Geografico_Militaire_1995',jD='raw:278.3',jE='raw:474.5',jF='raw:7.889',jG='raw:-6.61',jH='GCS_RGF93',jI='raw:39.15',jJ='raw:41.25',jK='raw:45.25',jL='raw:43.25',jM='raw:43.75',jN='raw:-94.5',jO='raw:-90.5',jP='raw:0.994',jQ='raw:-64.5',jR='raw:-61.5',jS='raw:6378273',jT='raw:6371228',jU='raw:1.00003',jV='raw:1.00001',jW='raw:-122.75',jX='raw:-124.05',jY='raw:1.00013',jZ='raw:1.00005',ja='raw:1.00011',jb='raw:1.00007',jc='raw:-119.75',jd='raw:-121.25',je='raw:-121.75',jf='raw:2460625',jg='raw:-70.375',jh='raw:-67.875',ji='raw:-69.125',jj='6230',jk='6747',jl='6755',jm=' +zone=38',jn=' +zone=28',jo='Lisbon',jp='Adindan',jq=' +lat_1=45.5',jr=' +lon_0=-114',js=' +towgs84=-73,46,-86,0,0,0,0',jt=' +towgs84=11,72,-101,0,0,0,0',ju=' +towgs84=287.58,177.78,-135.41,0,0,0,0',jv=' +towgs84=-162.619,-276.959,-161.764,0.067753,-2.24365,-1.15883,-1.09425',jw='China',jx='Corrego',jy=' +x_0=50000',jz=' +k=0.99999',kA=' +lon_0=-99',kB=' +lon_0=-87',kC=' +lon_0=126',kD=' +lon_0=102',kE=' Washington',kF='GCS_unnamed',kG='raw:6',kH='D_MGI',kI=' +lat_2=40',kJ=' Louisiana',kK='raw:70',kL='raw:61',kM='raw:28',kN='raw:127',kO='raw:-11',kP='raw:851',kQ='GCS_DHDN',kR='Amersfoort',kS=' +lon_0=-101.5',kT=' +lon_0=-94.25',kU=' +lon_0=-84.25',kV=' +lon_0=-72.75',kW=' +x_0=11500000',kX='raw:-209.362',kY='raw:-87.8162',kZ='raw:-121.753',ka='D_Katanga_1955',kb='Kalianpur_1962',kc='D_Old_Hawaiian',kd='raw:219529.584',ke='raw:820208.333',kf='raw:6561679.79',kg='raw:-3.687938888888889',kh='raw:-74.08091666666667',ki='raw:-88.81666666666666',kj='raw:-88.06388888888888',kk='raw:-91.78333333333333',kl='raw:-88.54166666666667',km='raw:-89.48888888888889',kn='raw:-90.78333333333333',ko='raw:-91.36666666666666',kp='raw:-90.48333333333333',kq='raw:-88.60555555555555',kr='raw:-91.11666666666666',ks='raw:-91.06666666666666',kt='raw:-89.07222222222222',ku='raw:-90.43055555555556',kv='raw:-90.48888888888889',kw='raw:-92.22777777777777',kx='raw:-89.54444444444444',ky='raw:-87.90833333333335',kz='raw:-90.64166666666668',lA='raw:-88.41666666666667',lB='raw:-87.71111111111111',lC='raw:-89.73333333333333',lD='raw:-89.03333333333333',lE='raw:-91.31666666666666',lF='raw:-87.89444444444445',lG='raw:-90.84429651944444',lH='raw:-90.25555555555556',lI='raw:-90.16111111111111',lJ='raw:-89.83888888888889',lK='raw:-88.63333333333334',lL='raw:-88.14166666666668',lM='raw:-91.28888888888889',lN='raw:-91.89444444444445',lO='raw:-87.27222222222223',lP='raw:-89.42222222222223',lQ='raw:-89.39444444444445',lR='raw:-90.70833333333334',lS='raw:-91.29444444444444',lT='raw:-92.45777777777778',lU='raw:-91.79722222222222',lV='raw:-91.15277777777779',lW='raw:-90.62222222222222',lX='raw:-108.3333333333333',lY='raw:-108.4166666666667',lZ='raw:-83.66666666666667',la='raw:-8.131906111111112',lb='raw:-91.86666666666666',lc='raw:-55.68333333333333',ld='raw:-61.33333333333334',le='raw:0.9143984146160287',lf='ELD79',lg=' Parallel',lh=' +y_0=5000000',li=' +x_0=6500000',lj=' +x_0=1700000',lk='7050',ll='GCS_RGRDC',lm='GCS_Korean',ln='GCS_Ocotepeque',lo=' +towgs84=31.95,300.99,419.19,0,0,0,0',lp=' +towgs84=-119.425,-303.659,-11.0006,1.1643,0.174458,1.09626,3.65706',lq=' +towgs84=-189.681,18.3463,-42.7695,-0.33746,-3.09264,2.53861,0.4598',lr=' (Oslo)',ls='raw:2.337208333333333',lt='raw:24.83333333333333',lu='raw:52.15616055555555',lv='raw:43.42027777777778',lw='raw:42.56944444444445',lx='raw:42.91805555555555',ly='raw:43.16111111111111',lz='raw:42.81944444444445',mA='raw:43.91944444444444',mB='raw:41.94444444444444',mC='raw:44.55555555555555',mD='raw:44.66111111111111',mE='raw:44.39722222222222',mF='raw:44.71666666666667',mG='raw:44.69166666666666',mH='raw:44.84444444444445',mI='raw:43.45111111111111',mJ='raw:42.21666666666667',mK='raw:44.25333512777778',mL='raw:45.43333333333333',mM='raw:42.53888888888888',mN='raw:41.41111111111111',mO='raw:44.00555555555555',mP='raw:45.43888888888888',mQ='raw:44.40833333333333',mR='raw:45.88333333333333',mS='raw:41.47222222222222',mT='raw:-90.9388888888889',mU='raw:42.71944444444445',mV='raw:43.48138888888889',mW='raw:45.13333333333333',mX='raw:45.70611111111111',mY='raw:43.36666666666667',mZ='raw:42.66666666666666',ma='raw:29.02626833333333',mb='raw:19.33333333333333',mc='raw:60.33333333333334',md='raw:62.01530688888889',me='raw:65.35103930555555',mf='raw:91.56666666666666',mg='raw:48.66666666666666',mh='raw:53.66666666666666',mi='raw:127.0028902777778',mj='raw:4.359215833333333',mk='raw:61.66666666666666',ml='raw:22.31213333333334',mm='raw:114.1785555555556',mn='raw:59.33333333333334',mo='raw:57.51755393055556',mp='raw:27.41666666666667',mq='raw:34.91666666666666',mr='raw:22.55827777777778',ms='raw:20.30827777777778',mt='raw:15.80827777777778',mu='raw:13.55827777777778',mv='raw:11.30827777777778',mw='raw:10.44166666666667',mx='raw:51.21666666666667',my='raw:6.166666666666667',mz='raw:4.666666666666667',nA='raw:6.666666666666667',nB=' +towgs84=982.609,552.753,-540.873,6.68163,-31.6115,-19.8482,16.805',nC=' +zone=37',nD=' +no_uoff',nE=' +zone=33',nF=' +lon_0=9',nG=' Colorado',nH=' +zone=29',nI=' Indonesia',nJ=' +lon_0=177',nK=' +lon_0=120',nL=' +y_0=250000',nM=' +lon_0=-111',nN=' +lon_0=-158',nO=' +lon_0=-177',nP='raw:213.11',nQ='raw:-74.95',nR='raw:-87.55',nS='raw:-87.45',nT='raw:-86.95',nU='raw:-85.45',nV='raw:-85.85',nW='raw:-84.95',nX='raw:-112.5',nY='raw:-98.25',nZ='raw:-122.5',na='raw:1.0001',nb='raw:-159.5',nc='raw:-155.5',nd='raw:520000',ne='raw:609600',nf='raw:830000',ng='raw:165000',nh='raw:850000',ni='raw:-89.75',nj='raw:-176.5',nk='raw:650000',nl='raw:0.9992',nm='Potsdam_Datum_83',nn='D_Yemen_NGN_1996',no=' +x_0=1500000.0001464',np=' +x_0=2500000.0001424',nq='GCS_MAGNA-SIRGAS',nr=' +towgs84=0,0,0,-0,-0,-0,0',ns=' +lon_0=-89.24166666666667',nt=' +lon_0=-92.63333333333334',nu=' +lon_0=-86.90000000000001',nv=' +lon_0=-87.09999999999999',nw=' +lon_0=-85.84999999999999',nx=' +lon_0=-123.0833333333333',ny=' +lon_0=-119.1666666666667',nz=' +lon_0=-122.3333333333333',oA=' +lon_0=-123.1666666666667',oB=' +lon_0=-117.8333333333333',oC=' +lon_0=-160.1666666666667',oD=' +lon_0=-156.6666666666667',oE=' +lat_0=0.1166666666666667',oF=' +lon_0=-71.60561777777777',oG='Clarke_1880_international_foot',oH=' +towgs84=8.846,-4.394,-1.122,-0.00237,-0.146528,0.130428,0.783926',oI=' +towgs84=347.103,1078.12,2623.92,-33.8875,70.6773,-9.3943,186.074',oJ='raw:174',oK='raw:6.7',oL='raw:736',oM='raw:257',oN='raw:-85',oO='raw:180',oP='raw:125',oQ='raw:2.7',oR='RGNC91-93',oS='raw:6378298.3',oT='Timbalai_1948',oU='raw:1.0000067',oV='raw:626907.39',oW=' +towgs84=-0.293,766.95,87.713,0.195704,1.69507,3.47302,-0.039338',oX=' +towgs84=-480.26,-438.32,-643.429,16.3119,20.1721,-4.0349,-111.7',oY='raw:3.88',oZ='raw:0.05',oa='raw:6.21',ob='raw:-189',oc='raw:-251',od='raw:-130',oe='raw:49.5',of='raw:-170',og='raw:-174',oh='MOLDREF99',oi='GCS_Corrego',oj='raw:-1.4547',ok='raw:-96.062',ol='raw:-82.428',om='raw:5.38763888888889',on=' +towgs84=215.525,149.593,176.229,-3.2624,-1.692,-1.1571,10.4773',oo=' +towgs84=221.525,152.948,176.768,-2.3847,-1.3896,-0.877,11.4741',op=' Grid',oq=' +zone=35',or=' Kentucky',os=' +alpha=30.28813972222222',ot=' +lat_0=46.95240555555556',ou=' +lat_0=44.03611111111111',ov=' +lat_0=31.73409694444445',ow=' +lon_0=35.21208055555556',ox=' +lat_1=48.33333333333334',oy=' +lat_0=48.33333333333334',oz=' +lat_0=44.08333333333334',pA=' +lat_0=44.33333333333334',pB=' +lat_0=45.08333333333334',pC=' +lat_0=45.91666666666666',pD=' +lat_1=45.66666666666666',pE=' +lat_1=44.66666666666666',pF=' +lat_0=44.66666666666666',pG=' +lat_0=21.66666666666667',pH=' +lat_0=21.83333333333333',pI=' +lat_0=20.33333333333333',pJ=' +lat_0=18.83333333333333',pK=' +lat_0=45.30916666666666',pL=' +lat_1=53.83333333333334',pM=' +lat_2=51.83333333333334',pN=' +lonc=-133.6666666666667',pO=' +alpha=323.1301023611111',pP=' +lat_1=49.83333333333334',pQ=' +lat_2=51.16666666666666',pR=' +lat_0=40.66666666666666',pS=' +lat_0=4.599047222222222',pT=' +lat_1=10.16666666666667',pU=' +lat_0=10.16666666666667',pV='6612',pW='6674',pX=' 1970-72',pY=' +lat_1=49',pZ=' +lon_0=39',pa=' Carolina',pb='raw:17',pc=' +lon_0=-72.5',pd=' +y_0=4000000',pe=' +lat_0=33.75',pf=' +x_0=4000000',pg=' +lat_1=30.75',ph=' +lon_0=-84.5',pi=' +lat_1=39.75',pj=' +lat_2=38.45',pk=' +lat_1=37.25',pl=' +x_0=5000000',pm=' +k=0.99999375',pn=' +x_0=12500000',po=' +x_0=10500000',pp=' +x_0=24500000',pq='D_Gunung_Segara',pr=' +x_0=399999.9999984',ps='Centre_Spatial_Guyanais_1967',pt='AGD66',pu=' +lon_0=-77',pv=' +lon_0=108',pw=' +lon_0=171',px=' +towgs84=-179.483,-69.379,-27.584,-7.862,8.163,6.042,-13.925',py='Cape',pz=' Wyoming',qA='4179',qB='4301',qC='4612',qD='4674',qE="Clarke's",qF='raw:-38',qG='raw:154',qH=' Terrestrial',qI=' +k=1.000034',qJ=' +k=1.000015',qK=' +k=1.000026',qL=' +k=1.000031',qM=' +lon_0=-117',qN=' +lat_0=32.5',qO=' +lon_0=-171',qP=' Philippines',qQ=' +ellps=evrstSS',qR=' +a=6377301.243',qS='Katanga_1955',qT='raw:-103.746',qU='D_Luzon_1911',qV='Old_Hawaiian',qW='raw:1.000035',qX='raw:1.000037',qY='raw:1.000033',qZ='raw:1.000018',qa='raw:1.000032',qb='raw:1.000024',qc='raw:-3000000',qd='raw:47500000',qe='Mercator_2SP',qf=' +towgs84=410.721,55.049,80.746,2.5779,2.3514,0.6664,17.3311',qg='D_Reseau_Geodesique_de_Saint_Pierre_et_Miquelon_2006',qh='D_Batavia',qi='raw:39.25',qj='raw:-86.9',qk='raw:-85.8',ql='raw:-87.1',qm='raw:-85.5',qn='raw:40.35',qo='raw:38.15',qp='raw:-86.3',qq='raw:46.25',qr='raw:60000',qs='raw:133.5',qt='raw:-76.5',qu='raw:-73.5',qv='raw:-67.5',qw='raw:-58.5',qx=' +towgs84=72.438,345.918,79.486,1.6045,0.8823,0.5565,1.3746',qy='Korean',qz='6179',rA='6301',rB=' +pm=ferro',rC=' +pm=paris',rD=' +lon_0=10',rE=' +lon_0=78',rF='raw:53',rG='D_Cape',rH='GCS_MGI',rI='raw:-132',rJ='D_Carthage',rK='raw:-0.007',rL='raw:404.62',rM='raw:0.0046',rN='raw:3.4784',rO='raw:0.5805',rP='D_Arc_1960',rQ='War_Office',rR='raw:-0.855',rS='raw:-7.023',rT='raw:-1.376',rU='D_ATS_1977',rV='D_Islands_Net_2004',rW='raw:-15091863.5171',rX='raw:0.201166195164',rY='Reseau_National_Belge_1972',rZ=' +towgs84=572.213,85.334,461.94,4.9732,1.529,5.2484,3.5378',ra=' +towgs84=8.853,-52.644,180.304,-0.393,-2.323,2.96,-24.081',rb='Reseau_Geodesique_de_Saint_Pierre_et_Miquelon_2006',rc=' +towgs84=446.448,-125.157,542.06,0.15,0.247,0.842,-20.489',rd=' +towgs84=0.055,-0.541,-0.185,0.0183,-0.0003,-0.007,-0.014',re='Not_specified_based_on_Clarke_1866_Authalic_Sphere',rf=' +zone=23',rg=' +zone=58',rh=' +x_0=350000.0001016001',ri=' +x_0=249999.9998983998',rj=' +x_0=830000.0001016001',rk=' +y_0=8000000.000010163',rl=' +x_0=7999999.999968001',rm=' +x_0=5999999.999976001',rn=' +x_0=399999.9998983998',ro=' +x_0=99999.99989839978',rp=' +x_0=699999.9999898402',rq=' +x_0=800000.0001016001',rr=' +x_0=304800.6096012192',rs=' +y_0=152400.3048006096',rt=' +to_meter=0.3047972654',ru='D_Not_specified_based_on_GRS_1980_Authalic_Sphere',rv=' (ft)',rw='6619',rx='7003',ry=' +lon_0=-86',rz=' +lon_0=-69',sA='REGCAN95',sB='SIRGAS-ROU98',sC='SIRGAS-Chile',sD=' +towgs84=-3.2,-5.7,2.8,0,0,0,0',sE='National_Geodetic_Network',sF='D_Reseau_Geodesique_des_Antilles_Francaises_2009',sG='Reseau_de_Reference_des_Antilles_Francaises_1991',sH='raw:-50',sI='raw:-73',sJ='raw:320',sK='raw:149',sL='raw:145',sM='raw:124',sN='raw:616',sO='raw:-72',sP='raw:115',sQ='raw:-18',sR='raw:-70',sS='raw:168',sT='raw:144',sU=' +k_0=1.00012',sV=' +lat_0=40.25',sW=' +lat_2=44.25',sX=' +lat_1=40.25',sY=' +lat_2=34.65',sZ=' +lat_2=35.25',sa=' +lat_1=41.95',sb=' +lat_0=44.25',sc=' +lat_1=47.05',sd=' +lat_1=39.45',se=' +x_0=9500000',sf=' +x_0=8500000',sg='raw:6376523',sh='raw:6378145',si='raw:-255.95',sj='raw:-127.62',sk='Bogota_1975',sl='raw:4300000',sm='raw:3300000',sn='raw:2300000',so='raw:1166200',sp='D_Mauritania_1999',sq='raw:22965879.2651',sr='Not_specified_based_on_GRS_1980_Authalic_Sphere',ss=' (E-N)',st='4619',su='5264',sv=' +zone=40',sw=' +zone=51',sx=' +zone=36',sy=' +zone=49',sz=' +zone=48',tA=' +lon_0=96',tB='raw:11',tC='raw:68',tD='raw:66',tE='Makassar',tF='IRENET95',tG=' +lat_0=38.5',tH=' +y_0=750000',tI=' +k=0.999995',tJ=' +lat_2=41.2',tK=' +lat_0=33.5',tL=' +lon_0=-119',tM=' +lat_0=36.5',tN=' +lon_0=-120',tO=' +lat_2=33.3',tP=' +lon_0=-154',tQ=' +x_0=39500000',tR=' +x_0=37500000',tS=' +x_0=35500000',tT=' +x_0=40500000',tU=' +x_0=38500000',tV=' +x_0=36500000',tW=' +x_0=34500000',tX=' +x_0=45500000',tY=' +x_0=43500000',tZ=' +x_0=41500000',ta='D_Monte_Mario',tb='GCS_RSRGD2000',tc=' +y_0=2000000.00001016',td=' +y_0=3999999.99998984',te=' +towgs84=-186,230,110,0,0,0,0',tf=' +towgs84=164,138,-189,0,0,0,0',tg='Sierra_Leone_Colony_1924',th='Reseau_Geodesique_des_Antilles_Francaises_2009',ti='RGF93',tj=' Regional',tk='GCS_Korea',tl='GCS_Batavia',tm=' Florida',tn='1058',to='7015',tp='E(X)',tq='N(Y)',tr='Timbalai',ts='raw:9.37',tt='raw:-377',tu='raw:-236',tv='raw:78.5',tw='raw:37.8',tx='raw:38.9',ty='raw:39.3',tz='raw:39.6',uA='raw:40.7',uB='raw:13.5',uC='raw:43.5',uD='raw:31.5',uE='raw:-176',uF='raw:-162',uG='raw:-146',uH='raw:-142',uI='raw:10.5',uJ='raw:16.5',uK='raw:-5.4',uL='Airy_1830',uM='raw:414.1',uN='raw:603.1',uO='raw:2.141',uP='D_RT_1990',uQ='raw:4.801',uR='raw:0.345',uS='raw:1.496',uT='Islands_Net_2004',uU='D_IGN_Astro_1960',uV='D_Palestine_1923',uW='D_Kalianpur_1937',uX='raw:1.0000421209',uY='raw:1.0000392096',uZ='raw:1.0000333645',ua='raw:1.0000346179',ub='raw:1.0000475376',uc='raw:1.0000367192',ud='raw:1.0000730142',ue='raw:1.0000408158',uf='raw:1.0000361538',ug='raw:1.0000597566',uh='raw:1.0000381803',ui='raw:1.0000573461',uj='raw:1.0000373868',uk='raw:1.0000495976',ul='raw:1.0000337311',um='raw:1.0000375653',un='raw:1.0000649554',uo='raw:1.0000433849',up='raw:1.0000362977',uq='raw:1.0000686968',ur='raw:1.0000236869',us='raw:1.0000434122',ut='raw:1.0000362499',uu='raw:1.0000234982',uv='raw:1.0000599003',uw='raw:1.0000627024',ux='raw:1.0000319985',uy='raw:1.0000233704',uz='raw:1.0000260649',vA='raw:1.0000677153',vB='raw:1.0000394961',vC='raw:1.0000344057',vD='raw:1.0000390487',vE='raw:1.0000349452',vF='raw:1.0000673004',vG='raw:1.0000552095',vH='raw:1.0000410324',vI='raw:1.0000385418',vJ='raw:1.0000187521',vK='raw:1.0000346418',vL='raw:1.0000384786',vM='raw:1.0000349151',vN='raw:1.0000463003',vO='raw:1.0000391127',vP='raw:1.0000286569',vQ='raw:1.0000383841',vR='raw:1.0000382778',vS='raw:1.0000331195',vT='raw:1.0000486665',vU='raw:1.0000495683',vV='raw:1.0000365285',vW='raw:-984251.9685',vX='raw:-9842519.685',vY='raw:1640419.9475',vZ='raw:0.9999238418',va=' +towgs84=-74,-130,42,0,0,0,0',vb=' +towgs84=210,814,289,0,0,0,0',vc=' +towgs84=-346,-1,224,0,0,0,0',vd=' +towgs84=-43,-163,45,0,0,0,0',ve=' +towgs84=-199,32,322,0,0,0,0',vf=' +towgs84=-76,-138,67,0,0,0,0',vg=' +to_meter=0.3047997101815088',vh='Minna',vi=' +zone=34',vj=' +zone=52',vk=' +zone=16',vl=' +zone=15',vm=' +zone=50',vn=' +lon_0=131',vo=' +lon_0=-79',vp=' +lon_0=-94',vq=' +lon_0=-84',vr=' +lon_0=-62',vs=' +lon_0=-54',vt=' +lon_0=165',vu=' +lon_0=153',vv=' +a=6378300.789',vw=' +b=6356566.435',vx=' +x_0=150000.00001464',vy=' +y_0=3999999.9998984',vz=' +y_0=5000000.0001016',wA=' +lat_0=43',wB=' +lat_2=46',wC=' +lon_0=84',wD='raw:16',wE='raw:119',wF='raw:166',wG='Mauritania',wH='Krassovsky,',wI=' Connecticut',wJ='raw:294.73',wK='raw:308.64',wL='raw:-9.614',wM='raw:-67.24',wN='raw:-47.04',wO='raw:-3.068',wP='raw:-130.6',wQ='raw:-1.042',wR='raw:-0.214',wS='raw:-0.631',wT='raw:-242.2',wU='raw:-144.9',wV='Luzon_1911',wW='raw:144.25',wX='raw:142.25',wY='raw:140.25',wZ='raw:102.25',wa='raw:450000',wb='D_Tokyo_1892',wc='raw:-304.046',wd='raw:-335.916',we='D_Egypt_1907',wf=' +k_0=0.999625769',wg=' +towgs84=51,391,-36,0,0,0,0',wh=' +towgs84=-23,259,-9,0,0,0,0',wi=' +towgs84=-355,21,72,0,0,0,0',wj=' +towgs84=-83,37,124,0,0,0,0',wk='raw:-20.19506944444445',wl='raw:-14.26666666666667',wm='raw:0.5716611944444444',wn='krass',wo=' (Lisbon)',wp='Palestine',wq='Mauritania_1999',wr='raw:1.000032144',ws='raw:1.000039936',wt='raw:1.000053289',wu='raw:1.000035079',wv='raw:120091.4402',ww='raw:393700.7874',wx='raw:426509.1864',wy='raw:53.31580995',wz='raw:323.0257905',xA='raw:1126867.909',xB='raw:0.999877499',xC='raw:0.999877341',xD='D_Geocentric_Datum_Brunei_Darussalam_2009',xE=' +towgs84=174.05,-25.49,112.57,-0,-0,0.554,0.2263',xF='New_Beijing_3_degree_Gauss_Kruger_CM_132E',xG=' +zone=59',xH=' +zone=47',xI=' +zone=54',xJ=' +zone=14',xK=' +zone=13',xL=' +zone=12',xM=' +zone=11',xN=' +zone=24',xO=' +zone=25',xP='Peru96',xQ='GCS_Campo',xR=' +k=1.000038',xS=' +k=1.000027',xT=' +k=1.000036',xU=' +lat_0=44.5',xV=' +lat_2=47.5',xW=' +lat_1=39.2',xX=' +lat_1=27.5',xY=' +lat_1=44.4',xZ=' +lat_2=32.5',xa=' +x_0=609600',xb=' +lat_1=41.7',xc=' +x_0=165000',xd=' +lat_2=42.1',xe=' +lat_1=45.7',xf=' +lat_2=38.3',xg=' +lat_1=30.7',xh=' +lat_2=29.3',xi=' +lat_0=28.5',xj=' +lon_0=-150',xk=' +lon_0=-87.5',xl='Panama-Colon',xm='Rassadiran',xn='GCS_Carthage',xo=' +x_0=199999.9999992',xp=' +x_0=3999999.999984',xq='Tananarive_1925_Paris',xr='Everest_1830_RSO_1969',xs=' +towgs84=16,196,93,0,0,0,0',xt=' +towgs84=-88,4,101,0,0,0,0',xu='PDO_Survey_Datum_1993',xv='raw:40.91666666666666',xw='raw:41.83333333333334',xx='raw:42.53333333333333',xy='raw:43.16666666666666',xz='raw:16.81666666666667',yA='raw:8.416666666666666',yB='raw:11.73333333333333',yC='raw:13.86666666666667',yD='raw:13.78333333333333',yE='raw:10.46666666666667',yF='Mexican',yG='Geocentric_Datum_Brunei_Darussalam_2009',yH=' Arizona',yI='Azores',yJ='4283',yK='6618',yL='Katanga',yM='Helmert',yN=' +lat_0=18',yO=' +lat_2=67',yP='raw:97',yQ='raw:14',yR='raw:85',yS='raw:22',yT='Afgooye',yU=' +k=1.00002',yV=' +x_0=80000',yW=' +x_0=40000',yX=' +lon_0=-74',yY=' +lon_0=-82',yZ=' +lon_0=-96',ya=' +lon_0=150',yb=' +lon_0=147',yc='raw:-263',yd='raw:-318',ye='D_Bogota',yf='raw:-133',yg='Arc_1960',yh='raw:-160',yi='raw:-302',yj='raw:-163',yk='raw:41.3',yl="M'poraloko",ym=' +lon_0=-85.05',yn=' +x_0=44500000',yo=' +x_0=42500000',yp='raw:-60.576',yq='raw:262.898',yr='raw:-0.0183',ys='raw:-0.0093',yt=' +ellps=mod_airy',yu='raw:94.7824',yv='raw:-11.821',yw='raw:-151.99',yx='raw:-147.45',yy='D_Jamaica_2001',yz='IGN_Astro_1960',AAA='Ancienne_Triangulation_Francaise_Paris',AAB='D_Trucial_Coast_1948',AAC='D_International_1967',AAD=' +y_0=0.003352806705613411',AAE=' +lon_0=-91.91666666666667',AAF=' +lat_1=-60.66666666666666',AAG=' +lat_2=-63.33333333333334',AAH=' +lat_0=0.1333333333333333',AAI='D_Hjorsey_1955',AAJ='D_NEA74_Noumea',AAK='Palestine_1923',AAL='Kalianpur_1937',AAM='D_Abidjan_1987',AAN='D_Locodjo_1965',AAO='raw:1.00003738',AAP='raw:1.00003498',AAQ='raw:126867.909',AAR='raw:0.99995696',AAS='raw:0.99994471',AAT='raw:0.99987742',AAU='GCS_ED50(ED77)',AAV='Greek_Geodetic_Reference_System_1987',AAW='D_Panama_Colon_1911',AAX='D_Sierra_Leone_1968',AAY='D_Sierra_Leone_1924',AAZ='D_Taiwan_Datum_1997',AAa='D_Taiwan_Datum_1967',AAb=' +lon_0=7.439583333333333',AAc=' +lat_0=31.73439361111111',AAd=' +lon_0=35.20451694444445',AAe=' +lon_0=140.8333333333333',AAf=' +lon_0=139.8333333333333',AAg=' +lon_0=137.1666666666667',AAh=' +lon_0=134.3333333333333',AAi=' +lon_0=132.1666666666667',AAj=' +lon_0=3.192280555555556',AAk=' +lon_0=16.33333333333333',AAl=' +lon_0=10.33333333333333',AAm=' +alpha=53.31582047222222',AAn=' +lat_1=49.50000000000001',AAo=' +lat_0=49.50000000000001',AAp=' +towgs84=-43.685,-179.785,-267.721,0,0,0,0',AAq='Reseau_National_Belge_1950_Brussels',AAr=' +towgs84=-502.862,-247.438,312.724,0,0,0,0',AAs=' +towgs84=-381.788,-57.501,-256.673,0,0,0,0',AAt='D_Reseau_Geodesique_de_Mayotte_2004',AAu='Lambert_Conformal_Conic_2SP_Belgium',AAv=' +towgs84=508.088,-191.042,565.223,0,0,0,0',AAw='Sister_Islands_Geodetic_Datum_1961',AAx=' +towgs84=-106.226,166.366,-37.893,0,0,0,0',AAy='raw:4.903',AAz='raw:1.578',ABA='raw:-1.06',ABB='raw:482.5',ABC='raw:564.6',ABD='raw:370.3',ABE='raw:0.011',ABF='raw:0.003',ABG='raw:10000',ABH='raw:138.5',ABI='raw:129.5',ABJ='raw:-66.5',ABK='raw:0.997',ABL='raw:47.25',ABM='raw:46.85',ABN='GCS_ATS77',ABO='D_Voirol_1879',ABP='D_Voirol_1875',ABQ='D_Indian_1954',ABR='D_Deir_ez_Zor',ABS='D_Puerto_Rico',ABT='D_Indian_1960',ABU='Moznet_ITRF94',ABV='raw:0.9999079',ABW='raw:1.0000353',ABX='raw:1.0001515',ABY='raw:32808.399',ABZ='raw:50.797815',ABa='raw:63.390675',ABb='raw:42.122774',ABc='raw:45.568977',ABd='GCS_RGNC91-93',ABe='raw:2743196.4',ABf='raw:0.9996256',ABg='Lisbon_1937_Lisbon',ABh='Trucial_Coast_1948',ABi='D_Sapper_Hill_1943',ABj=' +k_0=0.9987864078000001',ABk=' +towgs84=-204.619,140.176,55.226,0,0,0,0',ABl=' +towgs84=195.671,332.517,274.607,0,0,0,0',ABm='Reseau_Geodesique_de_Mayotte_2004',ABn=' +y_0=-4354009.816',ABo=' +towgs84=-56.263,16.136,-22.856,0,0,0,0',ABp='Grand_Cayman_Geodetic_Datum_1959',ABq='D_Azores_Occidental_Islands_1939',ABr=' +towgs84=-0.465,372.095,171.736,0,0,0,0',ABs=' +towgs84=-133.63,-157.5,-158.62,0,0,0,0',ABt=' +towgs84=674.374,15.056,405.346,0,0,0,0',ABu=' +towgs84=-241.54,-163.64,396.06,0,0,0,0',ABv='raw:681',ABw='raw:-91',ABx='raw:106',ABy='raw:-37',ABz='raw:-56',ACA='raw:-44',ACB='raw:121',ACC='raw:156',ACD='Kandawala',ACE='GCS_Mexican',ACF='Tokyo_1892',ACG='raw:-104.1',ACH='raw:-2.917',ACI='raw:-11.68',ACJ='raw:103.64',ACK='raw:70.995',ACL='raw:-168.9',ACM='raw:-0.507',ACN='raw:-0.245',ACO='raw:0.0003',ACP='D_Zanderij',ACQ='raw:-8.001',ACR='D_Merchich',ACS='Egypt_1907',ACT='raw:-347.6',ACU='D_Camacupa',ACV='raw:287.04',ACW='GCS_PTRA08',ACX=' +x_0=2743195.5',ACY='Panama_Colon_1911',ACZ='D_Hito_XVIII_1963',ACa='Sierra_Leone_1968',ACb='Taiwan_Datum_1997',ACc='Taiwan_Datum_1967',ACd=' +y_0=30480.06096012192',ACe=' +y_0=999999.9999960001',ACf=' +x_0=182880.3657607315',ACg=' +towgs84=217.037,86.959,23.956,0,0,0,0',ACh='D_Saint_Pierre_et_Miquelon_1950',ACi=' +towgs84=335.47,222.58,-230.94,0,0,0,0',ACj=' +towgs84=103.25,-100.4,-307.19,0,0,0,0',ACk=' +towgs84=-128.16,-282.42,21.93,0,0,0,0',ACl='UTM_Zone_40_Northern_Hemisphere',ACm='UTM_Zone_39_Northern_Hemisphere',ACn='UTM_Zone_16_Northern_Hemisphere',ACo='UTM_Zone_15_Northern_Hemisphere',ACp='UTM_Zone_14_Northern_Hemisphere',ACq='UTM_Zone_13_Northern_Hemisphere',ACr='UTM_Zone_12_Northern_Hemisphere',ACs='UTM_Zone_11_Northern_Hemisphere',ACt='raw:4.367975',ACu='Jamaica_2001',ACv='Karbala_1979',ACw='Hjorsey_1955',ACx='NEA74_Noumea',ACy='raw:-275.722',ACz='raw:-190.421',ADA='D_Hanoi_1972',ADB='Abidjan_1987',ADC='Locodjo_1965',ADD='raw:1.000017',ADE='raw:1.000041',ADF='raw:1.000014',ADG='raw:1.000044',ADH='raw:1.000021',ADI='raw:1.000007',ADJ='raw:1.000185',ADK='raw:1.000148',ADL='raw:1.000145',ADM='raw:-4600000',ADN='GCS_REGCAN95',ADO='raw:0.999997',ADP='raw:-6000000',ADQ='raw:60500000',ADR='raw:49.01518',ADS='GCS_Zanderij',ADT='raw:64500000',ADU='raw:63500000',ADV='raw:62500000',ADW='raw:61500000',ADX='raw:59500000',ADY='raw:58500000',ADZ='raw:57500000',ADa='raw:56500000',ADb='raw:55500000',ADc='raw:54500000',ADd='raw:53500000',ADe='raw:52500000',ADf='raw:51500000',ADg='raw:50500000',ADh='raw:49500000',ADi='raw:48500000',ADj='raw:46500000',ADk='GCS_Merchich',ADl='raw:914398.8',ADm='GCS_Camacupa',ADn='D_Slovenia_Geodetic_Datum_1996',ADo='D_Azores_Oriental_Islands_1995',ADp=' +towgs84=-11.64,-348.6,291.98,0,0,0,0',ADq=' +towgs84=-254.1,-5.36,-100.29,0,0,0,0',ADr='D_Azores_Oriental_Islands_1940',ADs='Azores_Occidental_Islands_1939',ADt=' +towgs84=-199.87,74.79,246.62,0,0,0,0',ADu='UTM_Zone_5_Northern_Hemisphere',ADv='UTM_Zone_4_Northern_Hemisphere',ADw=' +pm=jakarta',ADx=' +ellps=airy',ADy=' +lat_0=40.55',ADz=' +lat_0=37.75',AEA=' +lon_0=-87.3',AEB=' +lon_0=-86.5',AEC=' +lat_0=44.75',AED=' +y_0=1300000',AEE=' +lon_0=127.5',AEF=' +x_0=6000000',AEG=' +x_0=3900000',AEH='+proj=somerc',AEI='GCS_Timbalai',AEJ=' +alpha=337.25556',AEK=' +x_0=2546731.496',AEL=' +gamma=337.25556',AEM=' +x_0=304800.6096',AEN=' +y_0=152400.3048',AEO=' +k_0=0.999625544',AEP='Sapper_Hill_1943',AEQ=' +towgs84=-146.21,112.63,4.05,0,0,0,0',AER='D_Egypt_Gulf_of_Suez_S-650_TL',AES=' +towgs84=-770.1,158.4,-498.2,0,0,0,0',AET='D_Azores_Central_Islands_1995',AEU='Saint_Pierre_et_Miquelon_1950',AEV=' +towgs84=-294.7,-200.1,525.5,0,0,0,0',AEW=' +towgs84=-206.1,-174.7,-87.7,0,0,0,0',AEX='D_Azores_Central_Islands_1948',AEY='D_Sphere_Clarke_1866_Authalic',AEZ='D_S_JTSK',AEa='raw:-242',AEb='raw:8.15',AEc='raw:-679',AEd='raw:-206',AEe='raw:-285',AEf='raw:-181',AEg='raw:17.5',AEh='raw:-102',AEi='raw:11.5',AEj='raw:25.5',AEk='GCS_RT38',AEl='GCS_RT90',AEm='Slovenia_Geodetic_Datum_1996',AEn='Azores_Oriental_Islands_1995',AEo=' +towgs84=52.17,-71.82,-14.9,0,0,0,0',AEp=' +towgs84=-70.9,-151.8,-41.4,0,0,0,0',AEq='Azores_Oriental_Islands_1940',AEr='raw:-1',AEs=' +a=6378135',AEt=' Transverse',AEu=' +k=0.99996',AEv=' +lon_0=-66',AEw=' +k=0.99984',AEx=' +lat_0=-22',AEy=' +lon_0=159',AEz=' +lon_0=141',AFA='raw:431',AFB='raw:307',AFC='raw:304',AFD='raw:-13',AFE='raw:172',AFF='raw:-88',AFG='raw:-49.1',AFH='raw:0.971',AFI='raw:0.714',AFJ='raw:674.4',AFK='raw:405.3',AFL='raw:-79.9',AFM='raw:0.072',AFN='raw:-4.42',AFO='raw:-50.9',AFP='D_Adindan',AFQ=' +y_0=-4000000',AFR='GCS_PRS92',AFS='GCS_Minna',AFT=' +y_0=914398.5',AFU='raw:-350.43',AFV='raw:340.894',AFW='Monte_Mario',AFX='Kertau_1968',AFY='Indian_1954',AFZ='Deir_ez_Zor',AFa='raw:-108.32',AFb='raw:-124.76',AFc='Puerto_Rico',AFd='Indian_1960',AFe='Hughes_1980',AFf='raw:6370997',AFg='raw:6371007',AFh='raw:-88.225',AFi='raw:-88.775',AFj='raw:-122.45',AFk='raw:1.00024',AFl='raw:-111.25',AFm='raw:-107.75',AFn='raw:1.00009',AFo='raw:1.00019',AFp='raw:-300000',AFq='raw:105.625',AFr='raw:9842500',AFs='raw:3200000',AFt='raw:2200000',AFu='raw:6375000',AFv='raw:6430000',AFw='raw:234.358',AFx='GCS_Adindan',AFy=' +b=6356657.142669561',AFz=' +b=6355862.933255573',AGA=' +b=6356094.667915204',AGB='D_Trinidad_1903',AGC='Tananarive_1925',AGD='Hito_XVIII_1963',AGE=' +a=6378249.144808011',AGF=' +b=6356514.966204134',AGG='D_Barbados_1938',AGH='D_Tonga_Geodetic_Datum_2005',AGI='Egypt_Gulf_of_Suez_S_650_TL',AGJ=' +towgs84=283.7,735.9,261.1,0,0,0,0',AGK='Azores_Central_Islands_1995',AGL='Azores_Central_Islands_1948',AGM='Clarke_1866_Authalic_Sphere',AGN='PTRA08',AGO=' +lat_1=44',AGP=' +lat_1=46',AGQ=' +lat_0=33',AGR=' +lat_0=42',AGS=' +lon_0=36',AGT=' +lat_0=52',AGU=' +lon_0=42',AGV=' +lon_0=51',AGW='Beduaram',AGX='Kousseri',AGY=' emulation',AGZ='GCS_Indian',AGa=' +x_0=170251.555',AGb='Chatham_Islands_Datum_1979',AGc='Chatham_Islands_Datum_1971',AGd=' +lon_0=3',AGe=' +zone=53',AGf=' +zone=26',AGg=' Oklahoma',AGh=' Illinois',AGi=' Arkansas',AGj=' +zone=30',AGk='ISN2004',AGl='JAD2001',AGm=' Tennessee',AGn=' Hampshire',AGo='GCS_Katanga',AGp='D_SIRGAS_ROU98',AGq='D_SIRGAS_Chile',AGr='D_Vietnam_2000',AGs='D_Conakry_1905',AGt='D_Nahrwan_1967',AGu=' +y_0=50000.00001504',AGv=' +y_0=2999999.999988',AGw=' +y_0=1999999.999992',AGx='Tonga_Geodetic_Datum_2005',AGy='Qatar_National_Datum_1995',AGz='Krovak',AHA='raw:-8',AHB='raw:74',AHC='raw:13',AHD='raw:80',AHE='TC(1948)',AHF=' +k=1.000028',AHG=' +lat_0=40.9',AHH=' +k=1.000025',AHI=' +k=1.000043',AHJ=' +lat_0=48.5',AHK=' +x_0=350000',AHL=' +lon_0=-147',AHM=' +y_0=600000',AHN=' +y_0=900000',AHO=' +lat_1=32.5',AHP='raw:-587.8',AHQ='raw:519.75',AHR='raw:145.76',AHS='D_Makassar',AHT='raw:-10.18',AHU='raw:291.37',AHV='raw:-273.5',AHW='raw:-357.9',AHX='D_La_Canoa',AHY='raw:238.69',AHZ='D_Arc_1950',AHa='Hanoi_1972',AHb='raw:-17.51',AHc='raw:-62.39',AHd='raw:466.79',AHe='raw:394000',AHf='raw:-89.77',AHg='raw:-91.85',AHh='raw:0.0041',AHi='raw:0.0033',AHj='raw:0.0029',AHk='raw:-85.25',AHl='raw:-87.05',AHm='raw:-87.95',AHn='raw:-87.35',AHo='raw:-86.75',AHp='raw:-85.35',AHq='raw:-85.95',AHr='raw:-87.65',AHs='raw:-85.65',AHt='raw:-87.15',AHu='raw:-86.65',AHv='raw:-108.5',AHw='raw:120000',AHx='raw:130000',AHy='raw:96.875',AHz='raw:0.9994',AIA='raw:144.75',AIB='GCS_DB_REF',AIC='GCS_HTRS96',AID='raw:-132.5',AIE='raw:615000',AIF='raw:810000',AIG='raw:930000',AIH='raw:500135',AII='raw:300090',AIJ='D_Fehmarnbelt_Datum_2010',AIK='Fiji_Geodetic_Datum_1986',AIL=' +towgs84=-20.8,11.3,2.4,0,0,0,0',AIM=' +towgs84=-637,-549,-203,0,0,0,0',AIN='GRS_1980_Authalic_Sphere',AIO='raw:0.008000000000000002',AIP='Laborde_Oblique_Mercator',AIQ='Aratu',AIR=' +zone=55',AIS=' +zone=60',AIT='Pitcairn',AIU='CH1903',AIV=' +lat_0=37',AIW=' +lat_0=34',AIX=' +lat_0=35',AIY=' +lat_0=29',AIZ=' +lat_2=36',AIa=' +lat_2=65',AIb=' +lon_0=18',AIc=' +lon_0=31',AId=' +lon_0=63',AIe=' +a=6378300',AIf=' +lat_ts=90',AIg=' +lon_0=-63',AIh=' +lon_0=162',AIi='raw:589',AIj='D_MAGNA',AIk='raw:669',AIl='raw:122',AIm='D_Minna',AIn='raw:283',AIo='raw:231',AIp='raw:173',AIq='raw:142',AIr='raw:-71',AIs='raw:179',AIt='raw:-12',AIu='GCS_KKJ',AIv='raw:0.1',AIw='raw:-53',AIx='raw:-403',AIy=' (Brussels)',AIz='raw:-9.9',AJA='D_Lisbon',AJB='raw:15.1',AJC='raw:-104',AJD=' (offshore)',AJE='raw:-265',AJF='raw:-358',AJG='raw:-231',AJH='raw:-164',AJI=' +y_0=14743.5',AJJ=' +lon_0=-94.5',AJK=' +lon_0=-90.5',AJL=' +y_0=2800000',AJM=' +x_0=4321000',AJN=' +y_0=3210000',AJO='raw:22.5',AJP=' +lon_0=-64.5',AJQ=' +lon_0=-61.5',AJR=' +b=6356889.449',AJS=' +lon_0=-122.75',AJT=' +lon_0=-119.75',AJU=' +lon_0=-121.25',AJV=' +lon_0=-121.75',AJW=' +x_0=609601.22',AJX=' +lon_0=-70.375',AJY=' +lon_0=-67.875',AJZ=' +lon_0=-69.125',AJa='Gunung_Segara',AJb='Trinidad_1903',AJc='raw:-0.398957',AJd='D_Indian_1975',AJe='Barbados_1938',AJf='D_Qornoq_1927',AJg='D_South_Yemen',AJh='D_Dabola_1981',AJi='D_Kerguelen_Island_1949',AJj=' +towgs84=-963,510,-359,0,0,0,0',AJk=' +towgs84=253,-132,-127,0,0,0,0',AJl=' +towgs84=-382,-59,-262,0,0,0,0',AJm=' +towgs84=94,-948,-1262,0,0,0,0',AJn=' +towgs84=-467,-16,-300,0,0,0,0',AJo=' +towgs84=-499,-249,314,0,0,0,0',AJp='Congo_1960_Pointe_Noire',AJq=' +towgs84=27.5,14,186.4,0,0,0,0',AJr='Equidistant_Cylindrical',AJs='DB_REF',AJt='HTRS96',AJu='Naparima',AJv='+proj=krovak',AJw='Fehmarnbelt_Datum_2010',AJx='D_Sri_Lanka_Datum_1999',AJy=' +towgs84=145,-187,103,0,0,0,0',AJz=' +towgs84=0,-0.15,0.68,0,0,0,0',AKA='D_Chatham_Islands_1979',AKB='D_Islands_Network_1993',AKC=' +towgs84=-13,-348,292,0,0,0,0',AKD=' +towgs84=137,248,-430,0,0,0,0',AKE=' +towgs84=-289,-124,60,0,0,0,0',AKF=' +towgs84=-149,128,296,0,0,0,0',AKG='D_Dealul_Piscului_1933',AKH='Geodetic_Datum_of_1965',AKI=' +towgs84=-148,51,-291,0,0,0,0',AKJ=' +towgs84=70,207,389.5,0,0,0,0',AKK=' +towgs84=-134,229,-29,0,0,0,0',AKL=' +towgs84=-106,-87,188,0,0,0,0',AKM=' +towgs84=-104,167,-38,0,0,0,0',AKN=' +towgs84=-425,-169,81,0,0,0,0',AKO=' +towgs84=-115,118,426,0,0,0,0',AKP='raw:-90.53333333333333',AKQ='raw:-91.66666666666667',AKR='raw:-92.81666666666666',AKS='raw:-93.71666666666667',AKT='raw:-94.63333333333334',AKU='raw:-95.73333333333333',AKV='raw:-94.83333333333333',AKW='raw:-80.56666666666666',AKX='raw:-35.31773627777778',AKY='raw:-70.66666666666667',AKZ='raw:-72.33333333333333',AKa='raw:-73.66666666666667',AKb='raw:-84.33333333333333',AKc='raw:-76.83333333333333',AKd='raw:-25.06855261111111',AKe='raw:-130.1129671111111',AKf='raw:-8.133108333333334',AKg='raw:-21.11666666666667',AKh='raw:-74.33333333333333',AKi='raw:-74.66666666666667',AKj='raw:-22.24472222222222',AKk='raw:-22.29472222222222',AKl='raw:-22.26972222222222',AKm='raw:-20.66666666666667',AKn='raw:-22.33333333333333',AKo='raw:-68.07750791666666',AKp='raw:-71.07750791666666',AKq='raw:-74.07750791666666',AKr='raw:-77.07750791666666',AKs='raw:-80.07750791666666',AKt='raw:-2.416666666666667',AKu='GCS_Voirol_1875_Degree',AKv='raw:0.3047994715386762',AKw='raw:-2.333333333333333',AKx='raw:-4.666666666666667',AKy='raw:-46.60000961111111',AKz='raw:-45.86151336111111',ALA='raw:-45.81619661111111',ALB='raw:-45.56372616666666',ALC='raw:-45.13290258333333',ALD='raw:-44.73526797222222',ALE='raw:-44.40222036111111',ALF='raw:-43.74871155555556',ALG='raw:-43.59063758333333',ALH='raw:-43.97780288888889',ALI='raw:-43.11012813888889',ALJ='raw:-42.88632236111111',ALK='raw:-41.54448666666666',ALL='raw:-42.68911658333333',ALM='raw:-42.33369427777778',ALN='raw:-41.81080286111111',ALO='raw:-41.28991152777778',ALP='raw:-41.27454472222222',ALQ='raw:-40.71475905555556',ALR='raw:-41.30131963888888',ALS='raw:-40.92553263888889',ALT='raw:-40.24194713888889',ALU='raw:-39.51247038888889',ALV='raw:-39.13575830555556',ALW='raw:-39.65092930555556',ALX='raw:-38.62470277777778',ALY='raw:-37.76124980555556',ALZ='raw:-36.87986527777778',ALa='raw:-68.08091666666667',ALb='raw:-71.08091666666667',ALc='raw:-77.08091666666667',ALd='raw:-45.86138888888889',ALe='raw:-45.81611111111111',ALf='raw:-59.55972222222222',ALg='raw:-45.56361111111111',ALh='raw:-45.13277777777778',ALi='raw:-44.40194444444445',ALj='raw:-43.74861111111111',ALk='raw:-43.59055555555556',ALl='raw:-43.97777777777778',ALm='raw:-42.88611111111111',ALn='raw:-41.54444444444444',ALo='raw:-42.68888888888888',ALp='raw:-42.33361111111111',ALq='raw:-41.81055555555555',ALr='raw:-41.28972222222222',ALs='raw:-41.27444444444444',ALt='raw:-40.71472222222223',ALu='raw:-40.92527777777777',ALv='raw:-40.24194444444444',ALw='raw:-39.51222222222222',ALx='raw:-39.13555555555556',ALy='raw:-39.65083333333333',ALz='raw:-38.62444444444444',AMA='raw:-37.76111111111111',AMB='raw:-36.87972222222222',AMC='raw:-60.68600888888889',AMD='AGD84',AME=' Southern',AMF=' +zone=46',AMG=' +zone=10',AMH=' Missouri',AMI=' +zone=31',AMJ=' Europe',AMK='D_NTF',AML=' (Benoit)',AMM='Massawa',AMN='CH1903+',AMO='GCS_Clarke',AMP='GCS_Kertau',AMQ='GCS_Azores',AMR='GCS_Bogota',AMS='raw:110.6',AMT='raw:8.532',AMU='raw:0.013',AMV='raw:-89.9',AMW='raw:-89.5',AMX='raw:0.019',AMY='raw:0.028',AMZ='raw:-90.8',AMa='raw:-88.5',AMb='raw:0.016',AMc='raw:-85.9',AMd='raw:-85.3',AMe='raw:37.85',AMf='raw:-86.7',AMg='raw:38.95',AMh='raw:-87.4',AMi='raw:38.55',AMj='raw:37.95',AMk='raw:39.65',AMl='raw:-85.7',AMm='raw:39.95',AMn='raw:38.65',AMo='raw:-84.9',AMp='raw:40.15',AMq='raw:-86.6',AMr='raw:-85.6',AMs='raw:-86.4',AMt='raw:40.05',AMu='raw:-85.4',AMv='raw:40.45',AMw='GCS_RD/83',AMx='GCS_PD/83',AMy='GCS_Aratu',AMz='raw:64.25',ANA='raw:65.75',ANB='raw:89.55',ANC='raw:89.85',AND='raw:24.45',ANE='raw:37.35',ANF='SIRGAS_ROU98',ANG='SIRGAS_Chile',ANH='Plessis_1817',ANI='D_Belge_1950',ANJ='Vietnam_2000',ANK='raw:-192.873',ANL='raw:-111.202',ANM='raw:-0.00205',ANN='D_Kertau_RSO',ANO='raw:-194.046',ANP='D_Kasai_1955',ANQ='D_IGN53_Mare',ANR='Conakry_1905',ANS='raw:-106.869',ANT='raw:-103.724',ANU='D_Belge_1972',ANV='raw:0.343988',ANW='D_Amersfoort',ANX='raw:-223.237',ANY='Nahrwan_1967',ANZ='raw:-180.624',ANa='raw:-225.516',ANb='Observatario',ANc='raw:-112.482',ANd='raw:300.8017000000115',ANe='Gunung_Segara_Jakarta',ANf='raw:12.45233333333333',ANg=' +towgs84=175,-38,113,0,0,0,0',ANh='D_Chatham_Island_1971',ANi='Lithuania_1994_ETRS89',ANj=' +towgs84=162,117,154,0,0,0,0',ANk=' +towgs84=186,482,151,0,0,0,0',ANl=' +towgs84=174,359,365,0,0,0,0',ANm=' +towgs84=72,213.7,93,0,0,0,0',ANn=' +towgs84=725,685,536,0,0,0,0',ANo=' +towgs84=-255,-15,71,0,0,0,0',ANp=' +towgs84=-10,375,165,0,0,0,0',ANq=' +towgs84=-130,29,364,0,0,0,0',ANr=' +towgs84=-73,213,296,0,0,0,0',ANs=' +towgs84=-203,141,53,0,0,0,0',ANt='D_American_Samoa_1962',ANu=' +towgs84=-173,253,27,0,0,0,0',ANv='raw:51.16666723333333',ANw='raw:4.367486666666666',ANx='raw:80.51666666666667',ANy='raw:77.51666666666667',ANz='raw:74.51666666666667',AOA='raw:71.51666666666667',AOB='raw:68.51666666666667',AOC='raw:684000.0010000003',AOD='raw:685000.0010000002',AOE='raw:861000.0010000002',AOF='raw:711000.0010000002',AOG='raw:822000.0010000002',AOH='raw:550000.0000000002',AOI='raw:400012.2780000002',AOJ='raw:82020.83299999998',AOK='raw:794999.9979999998',AOL='raw:905000.0050000004',AOM='raw:863999.9990000002',AON='raw:373000.0000000002',AOO='raw:554999.9989999998',AOP='raw:655999.9970000002',AOQ='raw:750000.0010000004',AOR='raw:567000.0010000004',AOS='raw:482999.9990000002',AOT='raw:8000000.000000002',AOU='raw:7200000.000000003',AOV='raw:7000000.000000003',AOW='raw:6800000.000000002',AOX='raw:6600000.000000002',AOY='raw:8900000.000000002',AOZ='raw:8300000.000000003',AOa='raw:9600000.000000004',AOb='raw:149.0092948305555',AOc='raw:52.66666666666666',AOd='raw:54.33333333333334',AOe='raw:11.33333333333333',AOf='raw:17.06124194444444',AOg='raw:90.86666666666666',AOh='raw:90.11666666666666',AOi='raw:90.16666666666667',AOj='raw:90.26666666666667',AOk='raw:89.06666666666666',AOl='raw:91.23333333333333',AOm='raw:91.13333333333334',AOn='raw:90.03333333333333',AOo='raw:90.73333333333333',AOp='raw:7.000471527777778',AOq='raw:80.77171308333334',AOr='raw:7.000480277777778',AOs='raw:80.77171111111112',AOt='raw:131.0028902777778',AOu='raw:129.0028902777778',AOv='raw:125.0028902777778',AOw='raw:16.66666666666667',AOx='raw:15.83333333333333',AOy='raw:5.893922222222222',AOz='raw:102.1772916666667',APA='raw:4.859380555555555',APB='raw:100.8167666666667',APC='raw:5.965147222222223',APD='raw:100.6375944444444',APE='raw:100.3458694444444',APF='raw:4.946141666666667',APG='raw:102.8952083333333',APH='raw:3.680344444444444',API='raw:101.5082444444444',APJ='raw:3.710972222222222',APK='raw:102.4361777777778',APL='raw:2.712283333333334',APM='raw:101.9411666666667',APN='raw:2.042583333333333',APO='raw:103.5627583333333',APP='WGS_1984_UTM_Zone_36N',APQ='WGS_1984_UTM_Zone_35N',APR='raw:55.33333333333334',APS='raw:22.55633333333333',APT='raw:20.30631666666667',APU='raw:15.80628452944445',APV='raw:13.55626666666667',APW='raw:20.13333333333333',APX='raw:20.71666666666667',APY='raw:43.08333333333334',APZ='raw:39.66825833333333',APa='raw:55.53333333333333',APb='raw:1.366666666666667',APc='raw:103.8333333333333',APd='raw:5.972543658333334',APe='raw:102.2952416694444',APf='raw:4.859063022222222',APg='raw:100.8154105861111',APh='raw:5.964672713888889',APi='raw:100.6363711111111',APj='raw:5.421517541666667',APk='raw:100.3443769638889',APl='raw:101.3891079138889',APm='raw:3.769388088888889',APn='raw:102.3682989833333',APo='raw:2.682347636111111',APp='raw:101.9749050416667',APq='raw:2.121679744444445',APr='raw:103.4279362361111',APs='raw:323.0257964666666',APt='raw:57.52182777777778',APu='raw:52.16666666666666',APv='raw:19.16666666666667',APw='raw:32.33333333333334',APx='raw:33.66666666666666',APy='raw:33.76666666666667',APz='raw:34.96666666666667',AQA='raw:40.28333333333333',AQB='raw:42.81666666666667',AQC='raw:41.33333333333334',AQD='raw:44.86666666666667',AQE='raw:47.88333333333333',AQF='raw:48.71666666666667',AQG='raw:1988.392164223695',AQH='raw:25.39246588888889',AQI='raw:4.356939722222222',AQJ='raw:21.08333333333333',AQK='raw:52.41864827777778',AQL='raw:13.62720366666667',AQM='raw:20.11676512155263',AQN='raw:56.76666666666667',AQO='raw:53.76666666666667',AQP='raw:50.76666666666667',AQQ='raw:50.53333333333333',AQR='raw:47.53333333333333',AQS='raw:44.53333333333333',AQT='raw:41.53333333333333',AQU='raw:5.999999999999998',AQV='raw:18.33333333333333',AQW='raw:14.16666666666667',AQX=' +to_meter=0.9143984146160287',AQY='raw:170.2825891111111',AQZ='raw:170.6285951666667',AQa='raw:167.7388617777778',AQb='raw:168.3986411944444',AQc='raw:169.4677550833333',AQd='raw:171.0572508333333',AQe='raw:171.3607484722222',AQf='raw:172.7271935833333',AQg='raw:170.2609258333333',AQh='raw:173.8020741111111',AQi='raw:173.0101333888889',AQj='raw:171.5497713055556',AQk='raw:171.5812600555556',AQl='raw:172.1090281944444',AQm='raw:173.2993168055555',AQn='raw:174.7766231111111',AQo='raw:175.6473496666667',AQp='raw:175.4880996111111',AQq='raw:175.6400368055556',AQr='raw:176.6736805277778',AQs='raw:177.8856362777778',AQt='raw:174.7643393611111',AQu='raw:34.41666666666666',AQv='raw:33.86666666666667',AQw='raw:34.13333333333333',AQx='raw:800000.0000000002',AQy='raw:28.66666666666667',AQz='raw:30.66666666666667',ARA='raw:1.287646666666667',ARB='raw:103.8530022222222',ARC='raw:47.14439372222222',ARD='raw:19.04857177777778',ARE='raw:34.66666666666666',ARF='raw:18.95833333333333',ARG='raw:51.67083333333333',ARH='raw:16.67222222222222',ARI='raw:53.58333333333334',ARJ='raw:17.00833333333333',ARK='raw:53.00194444444445',ARL='raw:21.50277777777778',ARM='raw:168.3427777777778',ARN='raw:170.6283333333333',ARO='raw:13.17638888888889',ARP='raw:167.7386111111111',ARQ='raw:168.3986111111111',ARR='raw:171.0572222222222',ARS='raw:171.3605555555555',ART='raw:172.7269444444445',ARU='raw:168.6061111111111',ARV='raw:170.2608333333333',ARW='raw:170.9797222222222',ARX='raw:173.8019444444444',ARY='raw:171.5497222222222',ARZ='raw:171.5811111111111',ARa='raw:172.1088888888889',ARb='raw:173.2991666666667',ARc='raw:172.6719444444444',ARd='raw:-41.3011111111111',ARe='raw:174.7763888888889',ARf='raw:175.6472222222222',ARg='raw:175.4880555555555',ARh='raw:174.2277777777778',ARi='raw:176.6736111111111',ARj='raw:177.8855555555556',ARk='raw:176.4661111111111',ARl='raw:174.7641666666667',ARm='raw:25.38236111111111',ARn='raw:50.76138888888889',ARo='raw:11.25217861111111',ARp='raw:27.51882880555555',ARq='raw:52.60353916666667',ARr='4618',ARs='5252',ARt='6283',ARu='7013',ARv='9105',ARw='Oslo',ARx='S-JTSK',ARy=' +lat_2=39',ARz=' +lat_2=35',ASA=' +lat_2=45',ASB=' +lon_0=28',ASC=' +lon_0=25',ASD=' +lon_0=19',ASE=' +lon_0=69',ASF=' +lon_0=57',ASG='GCS_S-JTSK',ASH=' +lon_0=-87.55',ASI=' +lon_0=-87.45',ASJ=' +lon_0=-86.95',ASK=' +lon_0=-85.45',ASL=' +lon_0=-84.95',ASM=' +lon_0=-112.5',ASN=' +lon_0=-98.25',ASO=' +lon_0=-122.5',ASP=' +k_0=1.000002',ASQ=' +lonc=-124.05',ASR=' +k_0=1.000008',ASS=' +lon_0=-159.5',AST=' +lon_0=-155.5',ASU=' +y_0=-4480000',ASV=' +lon_0=-89.75',ASW=' +lon_0=-176.5',ASX='Sri_Lanka_Datum_1999',ASY=' +towgs84=185,165,42,0,0,0,0',ASZ='D_Little_Cayman_1961',ASa='D_IGN72_Grande_Terre',ASb=' +towgs84=30,430,368,0,0,0,0',ASc='Dealul_Piscului_1930',ASd=' +towgs84=639,405,60,0,0,0,0',ASe='D_Kuwait_Oil_Company',ASf=' +towgs84=-97,787,86,0,0,0,0',ASg='Hungarian_Datum_1972',ASh='D_Pampa_del_Castillo',ASi='New_Zealand_Map_Grid',ASj='British',ASk='1057',ASl='4170',ASm='4238',ASn='4248',ASo='6608',ASp='6609',ASq='7021',ASr=' +lat_0=4',ASs='Nahrwan',ASt='GCS_IGC',ASu=' Nebraska',ASv=' Mainland',ASw=' Maryland',ASx=' Delaware',ASy='VN-2000',ASz=' +lon_0=-85',ATA=' +k=1.00016',ATB=' +y_0=50000',ATC=' +lon_0=136',ATD=' +lon_0=180',ATE=' +lon_0=127',ATF=' +lon_0=125',ATG=' +k=0.99975',ATH=' +lon_0=-93',ATI=' +lon_0=138',ATJ=' +lon_0=2.7',ATK='raw:268',ATL='raw:684',ATM=' (onshore)',ATN=' Kerguelen',ATO='raw:-28',ATP='raw:146',ATQ='D_Aratu',ATR='raw:-43',ATS='raw:204',ATT='raw:-76',ATU=' +lat_0=49.5',ATV=' +k=1.000045',ATW=' +lat_1=39.5',ATX=' +lat_2=40.5',ATY=' +lon_0=-170',ATZ=' +lon_0=-165',ATa=' +lat_1=29.5',ATb=' +lon_0=-115',ATc=' +k=0.999912',ATd=' +lon_0=-168',ATe=' +lon_0=-174',ATf=' +lat_1=33.3',ATg=' +lat_0=33.3',ATh=' (ancienne)',ATi='Struve_1860',ATj='raw:-39.382',ATk='raw:-0.0005',ATl='raw:0.00335',ATm='raw:265.025',ATn='raw:384.929',ATo='D_Fiji_1956',ATp='Voirol_1879',ATq='raw:-135.41',ATr='D_RGFG_1995',ATs='raw:52.2978',ATt='raw:-1.2747',ATu='Voirol_1875',ATv='raw:-61.702',ATw='raw:284.488',ATx='raw:472.052',ATy='raw:565.417',ATz='raw:50.3319',AUA='raw:465.552',AUB='raw:-1.8774',AUC='raw:110.193',AUD='D_Mporaloko',AUE='Clarke_1880',AUF='Indian_1975',AUG='Qornoq_1927',AUH='South_Yemen',AUI='Dabola_1981',AUJ='raw:173.919',AUK='raw:16.7101',AUL='raw:-73.472',AUM='GCS_ISN2004',AUN='GCS_JAD2001',AUO='GCS_Mauritania',AUP='D_Grand_Cayman_1959',AUQ='D_ST84_Ile_des_Pins',AUR=' +towgs84=84,274,65,0,0,0,0',AUS=' +towgs84=9,183,236,0,0,0,0',AUT='American_Samoa_1962',AUU=' +towgs84=-48,55,52,0,0,0,0',AUV='GCS_Tananarive_1925',AUW='Tunisia_Mining_Grid',AUX=' Islands',AUY='Bogota',AUZ='4159',AUa='4178',AUb='4608',AUc='4609',AUd='4754',AUe='6170',AUf='6238',AUg='6248',AUh='8903',AUi='Segara',AUj='MARGEN',AUk='Trinidad',AUl='REGVEN',AUm='Moznet',AUn='raw:76',AUo='raw:-5',AUp='D_Peru96',AUq='raw:-247',AUr='Brussels',AUs='raw:-199',AUt='La_Canoa',AUu='D_Kertau',AUv='Arc_1950',AUw='raw:-294',AUx='D_REGVEN',AUy='raw:-125',AUz='raw:-101',AVA='D_Moznet',AVB='raw:43.6',AVC='raw:40.2',AVD='raw:39.7',AVE='raw:38.4',AVF='raw:38.8',AVG='raw:40.3',AVH='raw:38.7',AVI='raw:39.9',AVJ='raw:38.2',AVK='raw:39.1',AVL='raw:38.1',AVM='raw:40.4',AVN='raw:54.5',AVO='raw:12.5',AVP='raw:-112',AVQ='GCS_RGPF',AVR='raw:58.5',AVS='raw:-126',AVT='raw:-9.5',AVU='GCS_Lake',AVV='D_Sibun_Gorge_1922',AVW='Madrid_1870_Madrid',AVX='D_Faroe_Datum_1954',AVY='IGN_1962_Kerguelen',AVZ='D_Porto_Santo_1995',AVa='IGN72_Grande_Terre',AVb='D_Porto_Santo_1936',AVc='Kuwait_Oil_Company',AVd='Pampa_del_Castillo',AVe=' +lon_0=-88.81666666666666',AVf=' +lon_0=-88.22499999999999',AVg=' +lon_0=-88.06388888888888',AVh=' +lon_0=-91.78333333333333',AVi=' +lon_0=-88.54166666666667',AVj=' +lon_0=-89.48888888888889',AVk=' +lon_0=-90.78333333333333',AVl=' +lon_0=-91.36666666666666',AVm=' +y_0=0.003962407924815849',AVn=' +lon_0=-90.48333333333333',AVo=' +lon_0=-88.60555555555555',AVp=' +lon_0=-91.11666666666666',AVq=' +lon_0=-89.90000000000001',AVr=' +lon_0=-91.06666666666666',AVs=' +lon_0=-89.07222222222222',AVt=' +lon_0=-90.43055555555556',AVu=' +lon_0=-90.48888888888889',AVv=' +y_0=0.005791211582423164',AVw=' +lon_0=-92.22777777777777',AVx=' +lon_0=-89.54444444444444',AVy=' +lon_0=-87.90833333333335',AVz=' +lon_0=-90.64166666666668',AWA=' +lon_0=-88.41666666666667',AWB=' +lon_0=-87.71111111111111',AWC=' +lon_0=-89.73333333333333',AWD=' +lon_0=-89.03333333333333',AWE=' +lon_0=-91.31666666666666',AWF=' +lon_0=-87.89444444444445',AWG=' +lon_0=-90.84429651944444',AWH=' +lon_0=-90.25555555555556',AWI=' +y_0=0.008534417068834137',AWJ=' +lon_0=-90.16111111111111',AWK=' +lon_0=-89.83888888888889',AWL=' +lon_0=-88.63333333333334',AWM=' +lon_0=-88.14166666666668',AWN=' +lon_0=-91.28888888888889',AWO=' +lon_0=-91.89444444444445',AWP=' +lon_0=-87.27222222222223',AWQ=' +lon_0=-88.77500000000001',AWR=' +lon_0=-89.42222222222223',AWS=' +lon_0=-89.39444444444445',AWT=' +lon_0=-90.70833333333334',AWU=' +lon_0=-91.29444444444444',AWV=' +y_0=0.004876809753619507',AWW=' +lon_0=-92.45777777777778',AWX=' +lon_0=-91.79722222222222',AWY=' +lon_0=-91.15277777777779',AWZ=' +lon_0=-91.84999999999999',AWa=' +lon_0=-90.62222222222222',AWb=' +lon_0=-85.90000000000001',AWc=' +lon_0=-87.34999999999999',AWd=' +lon_0=-87.40000000000001',AWe=' +lon_0=-85.34999999999999',AWf=' +lon_0=-87.65000000000001',AWg=' +lon_0=-85.65000000000001',AWh=' +lon_0=-84.90000000000001',AWi=' +lon_0=-86.59999999999999',AWj=' +lon_0=-87.15000000000001',AWk=' +lon_0=-85.59999999999999',AWl=' +lon_0=-86.40000000000001',AWm=' +lon_0=-86.65000000000001',AWn=' +lon_0=-85.40000000000001',AWo=' +lon_0=-108.3333333333333',AWp=' +lon_0=-108.4166666666667',AWq=' +lon_0=-83.66666666666667',AWr=' +lon_0=-8.131906111111112',AWs='NAD83_BLM_59N_ftUS',AWt=' +lon_0=-91.86666666666666',AWu=' +lon_0=-55.68333333333333',AWv=' +lon_0=-61.33333333333334',AWw='4046',AWx='6159',AWy='6178',AWz='6754',AXA='ATS77',AXB=' Oriental',AXC=' +zone=41',AXD=' +zone=42',AXE=' +k=0.994',AXF=' +zone=56',AXG='GCS_Arc',AXH='WGS84',AXI='raw:7',AXJ='Barbados',AXK=' +lon_0=54',AXL=' +lon_0=23',AXM=' +lon_0=48',AXN='GCS_Egypt',AXO='GCS_Luzon',AXP='S-JTSK/05',AXQ=' +y_0=1200000',AXR=' +lat_0=39.25',AXS=' +lat_0=39.15',AXT=' +lat_0=41.25',AXU=' +lon_0=-85.8',AXV=' +lat_0=40.65',AXW=' +lon_0=-85.5',AXX=' +lat_0=40.35',AXY=' +lat_0=38.15',AXZ=' +lon_0=-86.3',AXa=' +x_0=7000000',AXb=' +lat_0=45.25',AXc=' +lat_0=43.25',AXd=' +lat_0=43.75',AXe=' +lon_0=133.5',AXf=' +y_0=8000000',AXg=' +k=0.9998335',AXh=' +x_0=8000000',AXi=' +lon_0=-76.5',AXj=' +lon_0=-73.5',AXk=' +lon_0=-67.5',AXl=' +lon_0=-58.5',AXm='raw:0.0188',AXn=' +a=6378306.3696',AXo='Kertau_RSO',AXp='Kasai_1953',AXq='D_IGM_1995',AXr='IGN53_Mare',AXs='raw:287.58',AXt='raw:177.78',AXu='D_RGR_1992',AXv='D_CSG_1967',AXw='raw:0.3366',AXx='raw:-0.457',AXy='raw:1.8422',AXz='raw:4.0725',AYA='raw:36.649',AYB='D_Datum_73',AYC='M_poraloko',AYD='raw:300.99',AYE='raw:419.19',AYF='D_IRENET95',AYG='raw:-1.898',AYH='D_PDO_1993',AYI='raw:-51.66',AYJ='raw:-2.368',AYK=' +x_0=219529.584',AYL='GCS_Peru96',AYM='GCS_Moznet',AYN='GCS_MARGEN',AYO='GCS_Palestine',AYP='GCS_REGVEN',AYQ='D_Costa_Rica_2005',AYR='raw:298.257839303',AYS='ST84_Ile_des_Pins',AYT='D_IGN72_Nuku_Hiva',AYU='D_Selvagem_Grande',AYV='D_St_Vincent_1945',AYW='D_Montserrat_1958',AYX='D_Luxembourg_1930',AYY='D_Chos_Malal_1914',AYZ=' +lon_0=24.83333333333333',AYa=' +lat_0=52.15616055555555',AYb=' +lat_1=44.36259546944444',AYc=' +lat_0=44.36259546944444',AYd=' +lat_1=44.11394404583334',AYe=' +lat_0=44.11394404583334',AYf=' +lat_0=43.42027777777778',AYg=' +lat_0=42.56944444444445',AYh=' +lat_0=42.91805555555555',AYi=' +lat_1=45.96121983333334',AYj=' +lat_0=45.96121983333334',AYk=' +lat_1=42.66946209694444',AYl=' +lat_0=42.66946209694444',AYm=' +lat_1=46.07784409055556',AYn=' +lat_0=46.07784409055556',AYo=' +lat_1=43.57503293972223',AYp=' +lat_0=43.57503293972223',AYq=' +lat_0=43.16111111111111',AYr=' +lat_1=45.17782208583333',AYs=' +lat_0=45.17782208583333',AYt=' +lat_1=45.90009913138888',AYu=' +lat_0=45.90009913138888',AYv=' +lat_0=42.81944444444445',AYw=' +lat_0=43.91944444444444',AYx=' +lat_0=41.94444444444444',AYy=' +lat_0=44.55555555555555',AYz=' +lat_1=44.41682397527777',AZA=' +lat_0=44.41682397527777',AZB=' +lat_0=44.66111111111111',AZC=' +lat_1=44.63614887194444',AZD=' +lat_0=44.63614887194444',AZE=' +lat_1=45.70422377027778',AZF=' +lat_0=45.70422377027778',AZG=' +lat_0=44.39722222222222',AZH=' +lat_1=44.00007392861111',AZI=' +lat_0=44.00007392861111',AZJ=' +lat_0=44.71666666666667',AZK=' +lat_0=44.69166666666666',AZL=' +lat_1=44.90090442361111',AZM=' +lat_0=44.90090442361111',AZN=' +lat_0=44.84444444444445',AZO=' +lat_1=45.15423710527778',AZP=' +lat_0=45.15423710527778',AZQ=' +lat_0=43.45111111111111',AZR=' +lat_0=43.26666666666667',AZS=' +lat_0=42.21666666666667',AZT=' +lat_0=44.25333512777778',AZU=' +lat_0=45.43333333333333',AZV=' +lat_0=42.53888888888888',AZW=' +lat_1=43.80700011777778',AZX=' +lat_0=43.80700011777778',AZY=' +lat_1=42.63756227694444',AZZ=' +lat_0=42.63756227694444',AZa=' +lat_0=41.41111111111111',AZb=' +lat_0=44.00555555555555',AZc=' +lat_0=45.43888888888888',AZd=' +lat_1=44.87228112638889',AZe=' +lat_0=44.87228112638889',AZf=' +lat_0=44.40833333333333',AZg=' +lat_0=45.88333333333333',AZh=' +lat_0=41.47222222222222',AZi=' +lon_0=-90.9388888888889',AZj=' +lat_1=43.46254664583333',AZk=' +lat_0=43.46254664583333',AZl=' +lat_1=44.97785689861112',AZm=' +lat_0=44.97785689861112',AZn=' +lat_0=42.71944444444445',AZo=' +lat_1=45.89871486583333',AZp=' +lat_0=45.89871486583333',AZq=' +lat_0=43.48138888888889',AZr=' +lat_1=46.66964837722222',AZs=' +lat_0=46.66964837722222',AZt=' +lat_0=45.13333333333333',AZu=' +lat_0=45.70611111111111',AZv=' +lat_0=43.36666666666667',AZw=' +lat_0=42.66666666666666',AZx=' +lat_1=45.78333333333333',AZy=' +lat_0=45.78333333333333',AZz=' +lat_0=29.02626833333333',AaA=' +lat_1=63.66666666666666',AaB=' +lat_2=60.33333333333334',AaC=' +lat_0=62.01530688888889',AaD=' +lat_2=63.66666666666666',AaE=' +lat_0=65.35103930555555',AaF=' +lon_0=91.56666666666666',AaG=' +lon_0=89.84999999999999',AaH=' +lat_1=48.66666666666666',AaI=' +lat_2=53.66666666666666',AaJ=' +lon_0=127.0028902777778',AaK='NAD27_BLM_4N_ftUS',AaL='raw:-6500620.1207',AaM='raw:1.00000561024',AaN=' +lon_0=4.359215833333333',AaO=' +lat_1=61.66666666666666',AaP=' +lat_0=22.31213333333334',AaQ=' +lon_0=114.1785555555556',AaR='raw:103.070275625',AaS=' +lat_1=59.33333333333334',AaT=' +lat_0=57.51755393055556',AaU=' +lat_2=48.73333333333333',AaV='raw:-6500614.7836',AaW=' +lat_1=27.41666666666667',AaX=' +lat_2=34.91666666666666',AaY=' +lat_0=31.16666666666667',AaZ=' +lon_0=22.55827777777778',Aaa=' +lon_0=20.30827777777778',Aab=' +lon_0=18.05827777777778',Aac=' +lon_0=15.80827777777778',Aad=' +lon_0=13.55827777777778',Aae=' +lon_0=11.30827777777778',Aaf=' +lat_0=10.44166666666667',Aag=' +to_meter=0.201166195164',Aah=' +lon_0=51.21666666666667',Aai=' +lat_1=42.16500000000001',Aaj=' +lat_0=42.16500000000001',Aak=' +lat_1=44.10000000000001',Aal=' +lat_0=44.10000000000001',Aam=' +lon_0=6.166666666666667',Aan=' +lat_0=4.666666666666667',Aao=' +lat_0=6.666666666666667',Aap=' (Arc)',Aaq='Voirol',Aar='German',Aas='1033',Aat='4202',Aau='4222',Aav='8909',Aaw='Madrid',Aax='Leigon',Aay='Garoua',Aaz='Bissau',AbA='Israel',AbB='GCS_Nord',AbC='GDBD2009',AbD='Martinique',AbE='Guadeloupe',AbF='Montserrat',AbG='Luxembourg',AbH='+proj=poly',AbI='GCS_Sierra',AbJ='Sibun_Gorge_1922',AbK='Makassar_Jakarta',AbL='D_Viti_Levu_1912',AbM='Faroe_Datum_1954',AbN='D_Hong_Kong_1963',AbO='D_Mhast_Offshore',AbP='D_Nakhl-e_Ghanem',AbQ='D_Lithuania_1994',AbR='Porto_Santo_1995',AbS='Islands_Net_1993',AbT='Porto_Santo_1936',AbU='D_Hong_Kong_1980',AbV='D_Kuwait_Utility',AbW='D_Hungarian_1972',AbX='Hu_Tzu_Shan_1950',AbY='Final_Datum_1958',AbZ='raw:0.9996012717',Aba=' +lon_0=5.38763888888889',Abb='raw:6561666.6667',Abc='raw:0.9143917962',Abd='GCS_SIRGAS-ROU98',Abe='GCS_SIRGAS-Chile',Abf='raw:-22.24469175',Abg='raw:-22.29469175',Abh='raw:-22.26969175',Abi='raw:166.44242575',Abj='raw:150000.01256',Abk='raw:5400088.4378',Abl='raw:174.22801175',Abm='raw:176.46619725',Abn='raw:-16404166.67',Abo='raw:0.9988085293',Abp=' Georgia',Abq=' Austria',Abr='4146',Abs='4162',Abt='4314',Abu='4742',Abv='6202',Abw='6222',Abx='6312',Aby='6737',Abz='7005',AcA='7020',AcB='7045',AcC=' Noumea',AcD='PRS92',AcE='Average',AcF=' +pm=oslo',AcG='Fahud',AcH='Accra',AcI=' +zone=43',AcJ=' +zone=27',AcK=' +zone=57',AcL=' Colombia',AcM='Karbala',AcN='Hjorsey',AcO='Abidjan',AcP='Locodjo',AcQ='GCS_NGO',AcR='D_KKJ',AcS=' (Madrid)',AcT='raw:-2',AcU='D_Lake',AcV=' Occidental',AcW=' Antarctic',AcX='raw:32',AcY=' Castillo',AcZ=' +lon_0=-60',Aca=' +lon_0=-75',Acb=' +lon_0=-39',Acc=' +lon_0=-72',Acd=' +lon_0=168',Ace=' +lon_0=144',Acf=' +lon_0=174',Acg='raw:227',Ach='raw:230',Aci='raw:259',Acj='raw:253',Ack='raw:137',Acl='raw:-10',Acm='raw:217',Acn='raw:823',Aco='raw:299',Acp='raw:214',Acq='raw:804',Acr='raw:467',Acs='raw:198',Act='raw:881',Acu='raw:317',Acv='raw:116',Acw='raw:-52',Acx='raw:-42',Acy='raw:-30',Acz='raw:-19',AdA='raw:9.5',AdB='raw:8.5',AdC='raw:100',AdD='raw:-95',AdE='raw:9.9',AdF=' +b=6356571.996',AdG=' (international',AdH=' +a=6377295.664',AdI='Fiji_1956',AdJ='raw:124.5',AdK='Serindung',AdL='raw:31.95',AdM='D_Afgooye',AdN='raw:-0.81',AdO='raw:8.336',AdP='Madzansua',AdQ='raw:0.953',AdR='raw:0.586',AdS='raw:42.65',AdT=' +y_0=626907.39',AdU='GCS_PNG94',AdV='GCS_Segara',AdW='SIRGAS_ES2007.8',AdX='Costa_Rica_2005',AdY='Batavia_Jakarta',AdZ='D_Pitcairn_2006',Ada='D_Pitcairn_1967',Adb='D_Mhast_Onshore',Adc='D_Le_Pouce_1934',Add='D_IGN63_Hiva_Oa',Ade='D_Fatu_Iva_1972',Adf='D_Grand_Comoros',Adg='IGN72_Nuku_Hiva',Adh='Martinique_1938',Adi='Guadeloupe_1948',Adj='Selvagem_Grande',Adk='St_Vincent_1945',Adl='D_St_Lucia_1955',Adm='D_St_Kitts_1955',Adn='Montserrat_1958',Ado='D_Dominica_1945',Adp='D_Anguilla_1957',Adq='D_Cadastre_1997',Adr='D_Naparima_1972',Ads='D_Albanian_1987',Adt='Luxembourg_1930',Adu='Chos_Malal_1914',Adv='D_Naparima_1955',Adw='raw:5400088.438',Adx=' +x_0=120091.4401828804',Ady='raw:208483.6173',Adz='raw:185013.9709',AeA='raw:120091.4415',AeB='raw:234086.8682',AeC='raw:188358.6058',AeD='raw:232562.8651',AeE='raw:111088.2224',AeF='raw:134417.0689',AeG='raw:222504.4451',AeH='raw:256946.9138',AeI='raw:187147.5744',AeJ='raw:107746.7522',AeK='raw:165506.7302',AeL='raw:262433.3253',AeM='raw:216713.2336',AeN='raw:120734.1631',AeO='raw:185623.5716',AeP='raw:250546.1013',AeQ='raw:146304.2926',AeR='raw:202387.6048',AeS='raw:134255.4253',AeT='raw:227990.8546',AeU='raw:141732.2823',AeV='raw:167640.3354',AeW='raw:182880.3676',AeX='raw:121923.9861',AeY='raw:105461.0121',AeZ='raw:238658.8794',Aea='raw:116129.0323',Aeb='raw:105279.7829',Aec='raw:130454.6598',Aed='raw:185928.3728',Aee='raw:220980.4419',Aef='raw:113081.0261',Aeg='raw:150876.3018',Aeh='raw:170078.7403',Aei='raw:242316.4841',Aej='raw:275844.5533',Aek='raw:133502.6683',Ael='raw:158801.1176',Aem='raw:263347.7263',Aen='raw:247193.2944',Aeo='raw:146591.9896',Aep='raw:113690.6274',Aeq='raw:169164.3381',Aer='raw:111569.6134',Aes='raw:199949.1989',Aet='raw:244754.8893',Aeu='raw:175260.3502',Aev='raw:228600.4575',Aew='raw:148551.4837',Aex='raw:172821.9461',Aey='raw:147218.6942',Aez=' +y_0=99999.99999960001',AfA='raw:164041.9938',AfB=' +y_0=1889763.779527559',AfC=' +y_0=-4600000.00001208',AfD='raw:0.999942857',AfE='raw:-88.6318575',AfF='Equirectangular',AfG='raw:100182.7406',AfH='raw:1500121.846',AfI='raw:1500102.765',AfJ='raw:1500083.521',AfK='raw:1500064.274',AfL='raw:1500044.695',AfM='raw:1500025.141',AfN='raw:100178.1808',AfO='raw:4185861.369',AfP='raw:170.9799935',AfQ='raw:172.6720465',AfR='raw:16404166.67',AfS='raw:0.999616437',AfT='raw:0.999616304',AfU='raw:0.999615596',AfV='raw:1040084.558',AfW='raw:1039979.159',AfX='raw:1426834.743',AfY='GCS_Indian_1975',AfZ='raw:0.999895934',Afa='raw:3044969.194',Afb=' Alberta',Afc='Kertau',Afd='4148',Afe='4171',Aff='4312',Afg='4697',Afh='4737',Afi='6146',Afj='6162',Afk='6314',Afl='6742',Afm='6805',Afn='7007',Afo='RGFG95',Afp=' +lon_0=20',Afq=' +lat_1=60',Afr=' +lat_0=51',Afs=' +lat_1=87',Aft=' +lon_0=26',Afu=' +k=0.9998',Afv=' +lon_0=66',Afw=' +lon_0=17',Afx=' +lat_1=26',Afy=' +lat_0=53.5',Afz=' +lat_0=37.8',AgA=' +lat_0=38.9',AgB=' +lat_0=39.3',AgC=' +k=1.000013',AgD=' +lat_0=39.6',AgE=' +k=1.000022',AgF=' +lat_0=40.7',AgG=' +k=1.000029',AgH=' +lat_1=48.5',AgI=' +lat_2=37.5',AgJ=' +k=1.000155',AgK=' +lat_0=45.5',AgL=' +k=1.000175',AgM=' +lon_0=-121',AgN=' +k=1.000023',AgO=' +k_0=1.0002',AgP=' +x_0=520000',AgQ=' +lat_2=39.5',AgR=' +x_0=830000',AgS=' +x_0=850000',AgT=' +lat_0=43.5',AgU=' +lat_2=31.5',AgV=' +lon_0=-176',AgW=' +lon_0=-166',AgX=' +lon_0=-162',AgY=' +lon_0=-146',AgZ=' +lon_0=-142',Aga=' +lon_0=-153',Agb=' +lon_0=-129',Agc=' +lat_1=44.5',Agd=' +lon_0=10.5',Age=' +lon_0=16.5',Agf=' +lon_0=-135',Agg=' +x_0=750000',Agh=' +lon_0=-5.4',Agi=' +k=0.999923',Agj=' +pm=2.337208333333333',Agk='Carthage_Paris',Agl='raw:23.7163375',Agm='D_Bermuda_2000',Agn='Viti_Levu_1912',Ago='D_Nahrwan_1934',Agp='Hong_Kong_1963',Agq='Mhast_offshore',Agr='Nakhl_e_Ghanem',Ags='D_Maupiti_1983',Agt='raw:6377019.27',Agu='D_Combani_1950',Agv='D_Reunion_1947',Agw='D_Fort_Marigot',Agx='Hong_Kong_1980',Agy='D_Grenada_1953',Agz='D_Antigua_1943',AhA='Kuwait_Utility',AhB='D_Pointe_Noire',AhC='D_Malongo_1987',AhD='D_Jamaica_1969',AhE='D_Jamaica_1875',AhF='D_Bermuda_1957',AhG='D_Estonia_1997',AhH='D_Mount_Dillon',AhI='D_Estonia_1992',AhJ='raw:49.8333339',AhK='raw:150000.013',AhL='GCS_Amersfoort',AhM='raw:441566.551',AhN='raw:147866.367',AhO='raw:607000.003',AhP='raw:394000.004',AhQ='raw:617973.193',AhR='raw:364461.943',AhS='raw:165147.666',AhT='raw:155944.768',AhU='raw:353499.136',AhV='raw:542999.997',AhW='raw:396108.667',AhX='raw:609000.001',AhY='raw:440469.675',AhZ='raw:747999.995',Aha='raw:464999.996',Ahb='raw:282260.222',Ahc='raw:188936.744',Ahd='raw:600000.006',Ahe='raw:346000.004',Ahf='raw:783000.007',Ahg='raw:345405.421',Ahh='raw:427999.996',Ahi='raw:262000.006',Ahj='raw:610000.003',Ahk='raw:259746.132',Ahl='raw:150361.559',Ahm='raw:438000.004',Ahn='raw:300812.797',Aho='raw:170000.001',Ahp='raw:480943.886',Ahq='raw:176190.987',Ahr='raw:366041.307',Ahs='raw:144656.648',Aht='raw:802999.999',Ahu='raw:209999.999',Ahv='raw:195032.104',Ahw='raw:574999.999',Ahx='raw:103674.333',Ahy='raw:487372.659',Ahz='raw:305609.625',AiA='raw:134589.754',AiB='raw:45069.7587',AiC='raw:208788.418',AiD='raw:50337.1092',AiE='raw:47532.0602',AiF='raw:56388.1128',AiG='raw:50022.1874',AiH='raw:86033.0876',AiI='raw:70104.1401',AiJ='raw:57588.0346',AiK='raw:204521.209',AiL='raw:74676.1493',AiM='raw:55049.2669',AiN='raw:198425.197',AiO='raw:79857.7614',AiP='raw:79170.7795',AiQ='raw:45830.2947',AiR='raw:91687.9239',AiS='raw:59131.3183',AiT='raw:53703.1201',AiU='raw:44091.4346',AiV='raw:64008.1276',AiW='raw:59445.9043',AiX=' +x_0=7000000.00000248',AiY='raw:0.99999387',AiZ='raw:1.00002514',Aia='raw:0.99992226',Aib='raw:292209.579',Aic='raw:0.99989909',Aid='raw:294865.303',Aie='raw:0.99992228',Aif='raw:288876.327',Aig='raw:0.99990314',Aih='raw:359891.816',Aii='raw:0.99996704',Aij='raw:295809.184',Aik='raw:0.99989906',Ail='raw:325992.681',Aim='raw:327987.436',Ain='raw:271820.522',Aio='raw:128511.202',Aip='raw:133453.669',Aiq='raw:-21759.438',Air='raw:0.99999506',Ais='raw:229126.939',Ait='raw:280296.016',Aiu='raw:133454.779',Aiv='raw:3.68464905',Aiw='raw:-34836.161',Aix='raw:-14810.562',Aiy='raw:-83.248627',Aiz='raw:-84.455955',AjA='raw:0.99999425',AjB='raw:1937263.44',AjC='raw:1452947.58',AjD='raw:29352.4763',AjE='raw:22014.3572',AjF='raw:185861.369',AjG='raw:0.99950908',AjH='raw:168.342872',AjI='raw:168.606267',AjJ='raw:4186692.58',AjK='raw:4160926.74',AjL="GCS_M'poraloko",AjM='raw:0.99952992',AjN='raw:0.99932994',AjO='raw:0.99983008',AjP='raw:2743185.69',AjQ='raw:0.99846154',AjR='raw:447315.028',AjS='raw:147315.028',AjT='raw:-52684.972',AjU='raw:658377.437';

/* pass 2 (bigram) */
const BCo=Ag+Fh,Akl=Ag+j,AjV=AG+BD,AmC=Ag+Dv,BCn=Ag+Nr,AkB=Ag+BP,Avi=Ag+Pc,Apw=Au+ez,Ako=Ag+CJ,Ajn=ID+Sr,AoR=Ag+Am,AjY=Ax+Ez,Ajd=Av+IA,Alx=Ag+Dr,Aji=Cg+ML,Arw=WC+WD,AmQ=Ag+HU,BGV=AUi+eB,AwD=ARx+cj,Aqt=eN+UP,ApR=Hz+AcF,ApQ=ID+MF,BEN=Mc+Zx,BEM=gZ+WJ,Aru=Mc+Of,Art=Ku+rB,BEL=jo+wo,AmU=AUY+ex,Akm=Ag+Cw,Ajz=Bf+Aw,AlY=Qy+QV,BAt=yI+Gh,AqS=yI+AXB,AkM=Kj+Ct,AkK=jw+HL,Ajt=EQ+TN,Ajy=Bf+Az,BEI=qQ+Yn,Ars=bW+PM,Aje=BI+PU,BEH=vv+vw,BCi=Ag+ADx,Aop=ZD+Pi,BAs=cc+ak,BEE=ik+ex,BAr=ik+gr,AnL=ft+OS,Amh=aV+QV,ApO=Mr+Kv,Ajv=DP+gr,Ajf=BI+PP,BGU=yI+AcV,Akd=BI+Kl,AlK=BI+QK,BGT=Qy+AcW,Arq=AIe+eP,AlD=SD+PP,ApM=aP+Qm,Alw=Lr+ex,BCf=qR+eQ,AqR=AEs+al,Aod=AcE+qH,Aro=Bp+GA,Alv=iS+hx,BDz=Bp+iS,BAp=Kg+GA,AoN=QV+op,AoM=AU+pY,BCc=AJv+ATU,AkH=CB+Kw,AkI=BQ+CJ,BGS=AEH+ot,Akv=BP+Bk,Amc=AV+oq,Alu=AV+iT,AlE=BP+Dm,AjX=l+At,AsC=JB+j,AjW=BU+AG,AkE=j+AX,Aoc=AV+AXC,Akj=WA+Gw,AnK=AV+sv,Alt=AV+iU,BDy=l+ADy,Arn=qI+EF,AkZ=Ex+j,Ajg=AX+a,BDx=yU+EF,BDw=qJ+EF,Arm=qK+EF,AkD=EF+Ex,BDv=l+ADz,BAo=xR+EF,BGR=AgC+EF,BGQ=AgE+EF,Arl=qL+EF,AwC=AHF+EF,BDu=l+AHG,BDt=xS+EF,AwB=AHH+EF,BAn=xT+EF,BGP=AgG+EF,Ark=kF+ez,Aja=BQ+j,Akz=j+Fp,Aju=aS+Bi,AkW=Fp+a,BGO=AU+AgH,BDs=NA+BQ,Aps=UO+j,Akh=Dp+BQ,AlH=Oz+BQ,Akr=HN+j,AnB=AME+Gw,ApL=AV+AcI,Aob=AV+AXD,AmA=AV+jm,AmP=AV+nC,Avj=Nr+Zq,Ajh=Kw+BQ,Akn=Dv+c,BCY=ci+Kw,Aqr=BQ+Dv,BAm=dn+eW,BCX=AU+ATW,BGL=AgI+ZE,Ari=Kq+BQ,AlC=Fm+BQ,Ajp=c+AX,Aoa=AU+AGO,Arh=Rg+EB,Ald=HV+BQ,AoY=AU+AGP,Arg=Rh+Gf,AmF=Rw+BQ,Amu=AU+ip,BAk=kI+WY,AoL=GE+BQ,Apr=AU+jq,BAh=sW+Gg,Als=PQ+Cj,Ajb=Ay+BQ,Are=eK+Yt,BGJ=oz+ASO,BGI=AgJ+Kw,BAg=cd+BQ,BAf=jy+BQ,BCT=AgK+AJS,BGG=gD+AgL,BGF=AXb+ny,BGD=Qw+AEC,BGC=AXc+qM,BDq=ce+BQ,BDp=yV+BQ,BDo=iN+BQ,BCQ=yW+BQ,BGB=Ob+AHI,BGA=AXd+oA,BFz=xU+AgM,Avd=l+LF,BFy=Ob+AgN,BFx=GZ+ASR,AqQ=l+Xt,Apq=AU+PD,BFw=Gf+AJT,BFv=pF+AJU,BFt=Yt+AJV,BFs=oB+ATA,AoK=AV+xG,AoJ=AV+xH,AnA=AV+AMF,Anl=AV+vi,AmO=AV+nE,AlL=HH+Ay,Amg=AV+AIR,AoI=AV+xI,AmT=AV+AGe,Ank=AV+vj,AnJ=AV+sw,BAd=l+fr,AwA=ATC+CB,BDm=vn+CB,BFq=AEE+CB,AqP=l+Xy,AsB=l+ZE,Avc=l+AGQ,BFp=AXe+CB,Avb=RP+BQ,BCO=ZW+nN,BFo=pH+ASS,BDl=jz+Ay,BDk=HD+Ay,BFm=pJ+AST,Aqo=AU+iJ,Aqm=QD+DD,Apo=MD+GE,Arc=Xu+j,Amb=AU+Hx,Aqk=QE+PE,Aqj=AU+iK,Aqh=QF+HQ,Avz=Afq+wB,BDj=gP+cb,BFk=AU+Afq,Ava=wB+gP,BDi=cb+Kw,Apl=MD+Ay,AlM=GR+j,BBA=SJ+j,AnO=l+Px,BAb=hk+In,Ajs=Cj+BQ,BAY=SM+In,Anj=Kb+Kc,Ani=RP+UO,BAW=SN+In,Aqv=Kc+j,BAU=SO+In,BFj=HH+AgP,BAS=AU+WZ,AqO=Wa+AGR,BAQ=AU+Wb,BAO=Wc+TU,BAN=AU+Wd,AqN=We+AIV,BAL=Qk+Cj,BAK=AU+sX,AqL=ARy+tG,BAJ=Zk+Cj,BAI=AU+Wf,BAG=Wg+TV,Alr=Fv+BQ,Anh=AU+Lv,BAE=xV+gQ,AnI=AU+LG,BAC=TW+Fj,BAB=Yu+an,BCw=QP+j,BAA=Yu+PA,Ayz=AU+xW,Ayx=Wh+Fk,BFi=AgQ+ZE,AvS=pc+hl,Ayw=AU+Wi,Ayu=Wj+TX,Ayt=kA+Cj,Aqg=AU+QG,AvQ=QH+Ri,BFh=lh+j,Ays=AU+Wk,Ayq=Wl+TY,Ayo=RB+Cj,Ayn=AU+Wm,AqK=sY+AIW,AqJ=xX+ARz,Ayl=yN+Ql,BCv=eE+j,Ayj=AU+Wn,Ayh=Wo+Rj,Ayg=AU+Wp,Aye=sZ+LH,Ayc=ry+Cj,Ayb=AU+xY,AyZ=Wq+TZ,AyY=Ir+Cj,AyX=AU+Wr,AyV=Ws+Gg,AyU=Ql+Cj,AyT=AU+Wt,AyR=xZ+Ta,AyQ=Qk+xa,AvK=Tb+Yv,BCL=AU+ZX,BCJ=ZY+ZZ,BDh=Dp+fR,AvJ=AU+Tc,AvH=Td+Fc,Ang=Vt+Cj,AyN=AU+sa,AyL=Wu+LI,AyK=AU+Wv,AyI=Ww+Te,Anf=Xh+Cj,AvD=AU+Tf,AqH=Wx+AIX,AyG=AU+Wy,AyE=Wz+Rv,Ane=VA+Cj,AyD=AU+xb,AyB=XA+Na,AyA=AU+XB,Axy=XC+OH,Axx=Vu+TK,Axw=Vu+Cj,Axu=XD+gQ,Axt=AU+XE,Axr=XF+pe,AkJ=CW+BQ,BFg=vo+AJW,Auw=SQ+In,BFd=AHK+BQ,Auv=AU+Tg,Axq=Th+LI,Akq=GW+BQ,Aut=l+LJ,Anc=aj+CB,Aur=SR+In,Aoo=PR+BQ,AlO=l+Ox,Aup=SS+hm,BFb=AgR+BQ,Aun=ST+eO,Axn=xc+BQ,Aul=hn+CB,Auj=SU+HD,Aon=l+Qg,Auh=SV+CB,Auf=SW+CB,BFa=Dp+AXf,Aud=SX+CB,AqF=ASA+sb,Apk=TK+BQ,BCH=gi+AJJ,BFZ=Ka+AgS,BFX=l+Rk,BCE=AJK+Lq,Avy=l+eL,Axk=PY+QW,Axj=QQ+BQ,Ana=VV+BQ,BFW=qN+ASV,BFV=AXg+Ay,Axh=SY+QW,Axg=AU+XG,Axe=XH+wA,Axd=AU+XI,Axb=XJ+hf,Axa=AU+sc,AxY=XK+fq,AxW=xd+Xs,BFT=AEJ+HH,BCC=AEK+ABn,BFQ=nD+AEL,AxU=AU+XL,AxS=XM+XN,BFP=kB+AXh,AxQ=AU+xe,AxO=XO+XP,BFN=LS+AEF,AxM=AU+XQ,AxK=Ti+hb,AxJ=AU+XR,AxH=XS+hb,AxG=AU+sd,AxE=xf+Fk,AuW=Sa+HD,AuV=ct+BQ,AxC=Gf+cb,BDg=CB+GW,BFK=AJX+hz,BFJ=Gg+AJY,BCB=AgT+AJZ,AxB=AU+xg,Awz=xh+xi,AuT=Vx+BQ,Amt=Nd+BQ,Awx=AU+XT,Awv=XU+gN,Awt=AU+XV,Awr=XW+Fj,AoW=Fx+j,Aom=Ay+Io,Awq=AU+XX,Awo=XY+Fj,Awn=Vv+HV,AuR=Tj+Sy,AuP=AU+Tk,AuN=Tl+DD,Awl=Kq+ap,Arb=Fm+hh,AuL=AU+Tm,AuJ=Tn+HQ,AuG=To+Xy,AuE=AU+Tp,AuC=Tq+Xs,Awk=Yw+HV,AsA=l+Sy,Atz=Sb+HD,Atx=Sc+HD,Arz=l+DD,Atv=Sd+Ka,Att=Se+Uf,Aol=l+EB,Atr=ho+Lq,Atp=Sf+MT,Ama=Fw+BQ,Atn=jr+MT,AoV=l+aJ,Atl=Sg+CB,Atj=Sh+CB,Ary=l+Kd,Ath=yY+Ka,Atg=AU+pg,ApG=Tr+AIY,Awh=ph+Cj,Atd=Qk+Ka,Amz=l+Rv,Atb=Si+tI,Ata=AU+Ts,AtY=tJ+Tt,BFG=kV+AEM,Amr=AU+Ke,AtV=Tu+DD,Apj=Nk+PT,BCu=QR+j,Aph=Nk+Ya,BCt=Yb+j,Awg=AU+XZ,Awe=Xa+Fc,AtS=AU+pi,AtQ=pj+Rl,AtO=AU+Tv,AtM=Tw+Tx,Alq=IM+Fx,Alp=Nz+Io,AtK=AU+Ty,AtI=Tz+tK,AtG=AU+pk,ApD=AIZ+UA,AtD=UB+tM,AtB=AU+UC,Asz=UD+Fk,Awd=bP+IM,Awc=bP+Nz,Ams=Io+j,Asx=AU+UE,Asv=kI+Fc,BBz=ATX+At,BDf=tN+Kw,Ast=AU+UF,Asr=tO+UG,Awa=fC+Kq,AwZ=fC+Fm,Asp=AU+UH,Asn=UI+LH,Ask=hq+Lq,Alo=VW+BQ,Asi=Sj+CB,Asg=Sk+CB,BFF=pM+Afr,AnN=l+Xz,BFD=ATY+CB,BFB=AgW+CB,BEz=AgX+CB,AkS=CB+Ay,BEx=AgY+CB,BEv=AgZ+CB,BBw=nD+Za,Alc=c+Fp,BBv=Am+Pz,BBu=wH+PU,BBt=it+PU,AnW=AV+vk,AnV=AV+vl,AoG=AV+xJ,AoF=AV+xK,AoE=AV+xL,AoD=AV+xM,BBs=gE+AEu,Aqe=AU+QI,Aqc=yO+QJ,BDe=iL+j,AmN=AU+HR,AmL=HS+HT,BAz=US+j,BBr=TR+ATa,BDd=yZ+Kw,AlG=AV+eH,AlJ=AV+eu,AlW=AV+gt,Amy=AV+AMG,Ame=AV+AIS,ApC=fT+BQ,Aoq=CJ+Ku,Aqb=QW+Dp,AoC=AV+xN,Amp=AV+rf,Aki=K+eC,AmZ=AU+gS,AoA=Ma+Mb,BBp=Zl+BT,ApB=AU+OI,Aoz=fP+OJ,BDc=fU+BT,Ara=AU+Rm,ArY=Rn+Ro,Ajq=BT+q,Avx=AU+Afs,BDb=dT+dU,AwX=US+BT,Apf=Mk+eW,Aoy=AXE+Nz,Ase=SJ+BT,Aka=HN+BP,Aku=AV+bO,Akt=HN+Fh,Alb=AV+ha,BBo=Dp+AHM,ApN=Fh+Eh,AmY=WX+BQ,AnG=CJ+q,Ajc=Bt+AW,Alz=TF+BQ,Amo=PA+BQ,Apv=CJ+Fn,AoP=Am+Kh,Aok=BE+QK,Ale=Am+CX,Aln=BE+Kl,AwV=hi+BQ,ArV=fy+BQ,AqY=Zm+BQ,AkR=BQ+BP,Anm=Dm+q,Asd=AIa+AGT,BBn=pf+AJL,BBm=dn+AGT,BBl=rD+AJM,Aoj=HN+Dv,Akb=Cv+BQ,Ajr=CA+AX,Avh=Am+Mf,ArU=li+BQ,BAv=Dr+PB,AoS=AV+AXF,AlI=AV+ev,Any=AV+xO,Arx=Fh+MX,AlU=Mk+ER,Amn=AU+Is,Anx=Dr+q,AnM=Fh+JC,AmS=AV+AGf,AnU=l+ER,AqW=AEG+AHN,BAu=CJ+Rx,BEq=AU+Agc,BDZ=At+vq,AmW=PR+TT,ArP=en+BQ,ArO=av+BQ,ArN=cx+BQ,BDX=pn+BQ,BDW=kW+BQ,BBh=po+BQ,AwU=se+BQ,AqD=Qw+ASr,AmB=Pc+LA,BDV=rB+q,AmV=Dp+Io,Amx=l+Xe,AlT=NA+GR,Ajo=BQ+CA,BEo=ci+AXE,Asf=Nz+SJ,Aly=AV+jn,Akw=Am+q,BDU=tX+BQ,BDT=yn+BQ,BDS=tY+BQ,BDR=yo+BQ,BDQ=tZ+BQ,BDP=tT+BQ,BDO=tQ+BQ,BDN=tU+BQ,BDM=tR+BQ,BDL=tV+BQ,BDK=tS+BQ,BDJ=tW+BQ,AsZ=fz+BQ,AsY=aw+BQ,AsX=ei+BQ,AsW=ej+BQ,AsV=eo+BQ,AsU=el+BQ,AsT=eg+BQ,AsS=cv+BQ,AsR=eh+BQ,AsQ=cw+BQ,ArM=em+BQ,AsP=ek+BQ,AwT=hj+BQ,AwS=ef+BQ,AkQ=Kn+HL,Akg=QM+DE,Akf=HH+Dh,AwR=sf+BQ,BEK=Dr+RM,BCq=NC+q,Ajx=BQ+BT,Aou=AV+AcJ,AnF=AV+sx,Aot=AGd+lj,ArH=UZ+CJ,AnT=It+ER,AmK=CA+q,AlF=Fm+QS,Akp=Gh+DE,BEm=cp+AEt,BBe=cp+QM,BBd=cp+Gh,Aoh=eI+QM,BBc=kE+QM,AsO=MD+Zr,ApU=QM+rv,AsN=Gh+rv,BBb=QM+Gh,AsM=fA+DE,BBa=eG+QM,ArE=AGg+QM,BBZ=QM+pa,Anv=Lf+BQ,BEl=AMH+Gh,BBY=fs+QM,BBX=fs+Gh,BDG=iV+QM,BDF=iV+Gh,ArD=ax+ASv,BBW=ax+fA,Anw=At+gv,BEB=Dr+Yp,BBV=HD+Cv,Aks=BQ+Dr,BBU=kJ+QM,BBT=or+QM,BBS=tm+QM,BBR=nG+QM,BBQ=nG+Gh,ArC=AGi+QM,BBP=yH+Gh,AmJ=AV+nH,Akc=HU+Mc,AkA=Ds+Xv,AnE=AV+sy,AnD=AV+sz,Avq=AU+AHO,ArB=Cw+q,AjZ=BQ+Am,AkG=AF+q,Ajm=BE+PP,AkF=AD+q,Ajk=BE+PU,Ajj=Am+AD,BCd=BP+Km,BCr=BP+q,AmR=AV+AGj,BDE=HN+Cw,AnC=JB+Cw,Anu=Nd+GR,AkV=HN+BT,Aml=AV+rg,Aos=AV+AcK,AnS=AV+vm,Amw=AV+AMI,Amk=AU+Iu,Ami=Hy+ER,AkC=HN+Bf,AkT=Az+q,AmI=AU+HB,AmG=HC+ER,AkU=Aw+q,Aog=AU+Ml,Aoe=Mm+ER,AkY=CB+IL,BEg=AXi+CB,AkX=IL+BQ,BEe=AXj+CB,BEc=AXk+CB,BBL=AJP+CB,BBJ=AJQ+CB,BEa=AXl+CB,AsJ=Ka+Cv,ApK=AGR+PQ,Ave=Gg+PQ,AvZ=TU+PQ,ApJ=AIV+Qk,AvY=tG+Zk,BDY=ER+vs,AvX=TV+GZ,AvW=gQ+SP,AvV=Fj+Yu,AvU=Fk+Yu,App=DD+MD,Apm=HQ+MD,Apn=PE+MD,AvP=Ri+RB,AvR=TX+kA,ArQ=ER+AEv,AvO=Rj+Ir,ApI=AIW+kS,AvN=TZ+Ir,AvM=Gg+Ql,AvL=Ta+Qk,AoQ=BP+FQ,AvF=LI+Vt,Aqq=EB+GZ,Aqp=Gf+GZ,AvE=Te+Xh,ApH=AIX+Xh,AvC=Rv+VA,AvB=Na+VA,AvA=OH+Vu,Auz=gQ+Vu,Auy=pe+vo,Anr=OC+PP,BAx=FQ+q,Aqs=CJ+FX,BEZ=FX+q,BDB=Kw+UZ,AqU=QW+Ay,Alf=CJ+DH,BBG=AU+ATf,BCj=Cw+Ip,BCk=AXB+PP,AsH=Ay+eM,BCe=CJ+ND,ApS=DH+q,Aqy=Ug+Fm,AwO=l+AEx,AwN=aM+bW,AwM=PM+Yz,Avv=JC+q,Ajl=Am+AF,Avg=Of+rC,AnP=Bk+q,AlQ=GW+Sz,AlP=Sz+BP,Auc=wA+vp,Aua=fq+kT,Aub=hf+SZ,AuY=hb+fS,AuZ=hb+Yv,AuU=cb+CB,AnH=Fj+Vv,AtT=Fc+Nk,Ans=CB+Cv,Anq=BQ+Cw,BEG=Cw+ZL,Ano=BP+Hc,AwG=Hc+q,AkL=Am+BZ,AkP=GH+gr,BBD=Yl+ACX,BBC=AFT+aP,Apu=Qm+Mz,AqT=Oe+ex,Avl=AU+Afx,BCy=Mz+q,AkN=Ms+Bp,AwF=HN+ft,Ann=OS+Kr,AwE=Kr+q,Akx=CB+Dp,AnQ=TE+Dv,AnR=Dp+TE,BAq=BP+SK,AsF=xQ+TS,Aqz=eM+HU,Aqx=aM+Nr,Amv=Nr+Mr,BCp=Kv+q,Arr=BP+PN,BCg=AXB+Ez,BCl=BP+Uu,BBB=AMR+ex,AsD=vr+Ug,BCh=Cw+Uv,BAw=FL+q,AoO=BP+FL,Aqw=aM+Dv,BCs=Eh+q;

/* pass 3 (bigram) */
const Asj=Akl+a,And=Akl+c,BPz=BCn+Zq,BFU=Avi+LA,BHZ=Ako+a,BFS=AkB+a,BIQ=Alx+a,BMv=Ag+Arw,BFr=AmC+c,ArZ=AmQ+Mc,AxF=Aqt+ApR,BIP=Akm+a,ApV=AlY+OU,BPy=BAt+PP,BPx=AqS+PP,AlZ=AkK+Ajt,BPw=BEH+TO,ArA=Amh+OU,BPv=AqS+Ez,BIb=BCf+ZN,BEb=Aod+TN,Arv=Ajd+Alv,BHY=Aji+Alv,BIa=BDz+hx,BPu=os+AkH,BPt=AkI+Zw,Aqu=Akv+q,ArJ=AlE+q,Ati=AsC+c,Ajw=AjW+BD,AlX=AkE+a,BMu=gC+AkE,Atc=Arn+AkZ,BHX=BDx+AkZ,BHW=BDw+AkZ,BPs=nu+Arm,All=AkZ+Ajg,AoZ=AkZ+q,ArT=AkD+AkE,BFR=AkD+j,BET=BAo+AkZ,BMt=BGR+AkZ,BMs=BGQ+AkZ,AtX=Arl+AkZ,BHV=AwC+AkZ,BHU=BDt+AkZ,AtZ=Arm+AkZ,BPr=ba+Arl,BHT=AwB+AkZ,BES=BAn+AkZ,BMr=BGP+AkZ,BMq=iy+Aja,Aov=Akz+a,AoX=Aja+AkW,BMp=BGO+AHJ,BNN=BDs+j,Aqi=Akh+j,ArI=AlH+j,BIO=Akr+q,Api=Ajh+j,AqV=Akn+q,BMo=BCX+BGL,AtW=AlC+j,AlN=j+Ajp,AtU=Aoa+Arh,BMm=no+Aja,BMl=GZ+Ald,AtR=AoY+Arg,BMj=np+Aja,BMi=GZ+AmF,BER=Amu+BAk,BPq=Ql+AoL,BEQ=Apr+BAh,AoU=Als+Aja,AqA=AjX+fM,AlV=Aja+c,BIM=AjX+Afp,Alh=Ajb+j,AtP=Amu+Are,BMg=pr+Aja,BMf=GZ+AlC,BMe=BGJ+BGI,Ant=Aja+q,BEO=BAg+Akz,BIt=BAf+j,BMc=Apr+BCT,BPp=pB+BGG,BMa=BGF+ATV,BMZ=BGD+ASQ,BHS=BDq+Akz,BNM=BDp+j,BHR=BDo+Akz,BNL=BCQ+j,BPo=Yt+BGB,BPn=BGA+qJ,BMY=Avd+BFy,BPm=OH+BFx,BPl=AqQ+Ob,BMX=Apq+BFw,BPk=pE+BFv,BPi=xU+BFs,Anp=Akr+c,BIZ=AlL+JB,AmE=AkH+Aja,BHQ=AwA+Ajh,BHP=BDm+Ajh,BMV=l+BCO,BMh=AoL+AkE,BHO=BDl+Aja,BHN=BDk+Aja,Ash=Aqo+Aqm,BMT=Apo+Arc,Asc=Amb+Aqk,BPg=Apo+Yx,Asb=Aqj+Aqh,BPf=Apo+tc,BMQ=BFk+Ava,BMN=Apl+Arc,BML=Apl+AlM,BMJ=Apl+BBA,BEJ=AnO+BAb,BED=Ajs+j,BEC=AnO+BAY,BMH=Anj+AkE,AxR=Ani+j,BEA=AnO+BAW,BPd=Kq+Aqv,BPb=Fm+Aps,BDr=AnO+BAU,BPZ=am+Aja,BGq=AjX+PQ,BME=BFj+ASU,BDn=BAS+AqO,BDI=BAQ+BAO,BDD=BAN+AqN,BDA=BAL+Aja,BCz=BAK+AqL,BCm=BAJ+Aja,BCb=BAI+BAG,BPX=GZ+Alr,BPW=GZ+Ajb,BCa=Anh+BAE,BPV=SP+Alr,BPU=SP+Ajb,BCZ=AnI+BAC,BMC=BAB+BCw,BMA=BAA+AlM,BCW=Ayz+Ayx,BPT=BAB+ao,BLx=BAA+BBA,BPS=BFi+Zk,AxD=AqQ+AvS,BCV=Ayw+Ayu,BPQ=Ayt+vy,BPP=Ayt+pd,AxA=Aqg+AvQ,BPO=GW+BFh,BCS=Ays+Ayq,BPN=Ayo+ao,BLu=Ayo+BBA,BCP=Ayn+AqK,BPM=Fw+BCw,BPL=Dp+AlM,BPK=AU+AqJ,BGl=Ayl+HV,BPJ=TR+AqJ,BCM=Ayj+Ayh,BPH=QQ+Arc,BPG=VV+Arc,BCK=Ayg+Aye,BCG=Ayc+Aja,BCF=Ayb+AyZ,BCA=AyY+Aja,BBy=AyX+AyV,BBq=AyU+Aja,BBk=AyT+AyR,BBi=AyQ+Aja,BIL=l+AvK,BPF=pm+BDs,BFO=BCL+BCJ,BLs=Ym+BDh,Awy=AvJ+AvH,AqM=Ang+Aja,BBf=AyN+AyL,BBN=AyK+AyI,AqI=Anf+Aja,BBK=AvD+AqH,BBH=AyG+AyE,AqG=Ane+Aja,BBE=AyD+AyB,BAl=AyA+Axy,BAj=Axx+Aja,BAi=Axw+Aja,BAe=Anh+Axu,BAc=Axt+Axr,BPD=vo+AkJ,BLm=BFg+Aja,Aww=AqP+Auw,BPB=rh+Aja,BAa=Auv+Axq,BLk=yX+Akq,AqE=Aut+Anc,Awu=AqP+Aur,BOz=ri+Aja,BHL=Aoo+j,Aws=AlO+Aup,BOx=rj+Aja,Awp=AlO+Aun,BLg=Axn+j,Awm=AlO+Aul,BHM=Alr+AkE,Awj=AqQ+Auj,BLj=Akq+AkE,Asq=Akq+j,Awi=Aon+Auh,Awf=Aon+Auf,Awb=Aon+Aud,BOs=GE+BCv,BOq=Ay+BCv,BOp=Ql+Ajb,BAX=AoM+AqF,BOo=fx+Apk,BOn=fx+Ajs,BLc=BCH+BFZ,BIJ=BFX+BCE,BLZ=BFX+eF,BOm=Lq+Ajb,BAV=Avy+Axk,AxP=Ana+j,BLW=BFW+BFV,BAT=Avy+Axh,BAR=Axg+Axe,BOl=vp+Anj,BOk=vp+Ani,BAP=Axd+Axb,BOj=SZ+Anj,BOi=SZ+Ani,BAM=Axa+AxY,BOh=kT+Anj,BOg=kT+Ani,BAH=Apq+AxW,BOf=xp+Aja,BOe=pf+Aja,BLU=BFT+BCC,BAF=AxU+AxS,BOc=rl+Aja,BLR=BFP+Aja,BAD=AxQ+AxO,BOa=rm+Aja,BLP=BFN+Aja,Ayy=AxM+AxK,Ayv=AxJ+AxH,BOZ=fS+Alr,BOY=fS+Ajb,Ayr=AxG+AxE,BOX=rn+Aja,BOW=pu+AlC,AwY=Avd+AuW,BIs=AuV+j,BIr=l+AxC,BIG=BDg+Aja,BLO=Avd+BFK,BOV=BFJ+hz,BOT=BCB+hz,Aym=AxB+Awz,BLM=Oc+AuT,BLL=Oc+Amt,Ayk=Awx+Awv,BOR=eF+AuT,BOQ=eF+Amt,Ayi=Awt+Awr,BOP=Fv+AoW,BOO=Vv+Aom,Ayf=Awq+Awo,BLJ=Awn+BCw,BLI=Awn+AlM,AwQ=AnI+AuR,BON=kU+Alr,BOM=kU+Ajb,AwP=AuP+AuN,BOL=RB+Awl,BOK=RB+Arb,AwL=AuL+AuJ,BOJ=Xh+Ari,BOI=Xh+AlC,AwK=Amb+AuG,BOH=Yw+AoL,BOG=Yw+Ajb,AwJ=AuE+AuC,BOF=Awk+Yx,BLH=Awk+AlM,AwI=AsA+Atz,AwH=AsA+Atx,Avw=Arz+Atv,BOB=rp+Aja,Avu=Arz+Att,Avt=Aol+Atr,BNz=rq+Aja,BNK=Avb+j,Avs=Aol+Atp,BIE=Ama+AkE,Avr=Aol+Atn,Avp=AoV+Atl,Avo=AoV+Atj,Avn=Ary+Ath,Avm=Atg+ApG,AyS=Awh+Aja,BNy=vq+AlC,Avk=Ary+Atd,Avf=Amz+Atb,AvT=Ata+AtY,BKo=BFG+AEN,AvI=Amr+AtV,Arp=Apj+BCu,Arj=Aph+BCt,AyP=Awg+Awe,AvG=AtS+AtQ,Aux=AtO+AtM,BNx=hp+Alq,BNw=hp+Alp,Auu=AtK+AtI,BNv=hg+Alq,BNu=hg+Alp,Aus=AtG+ApD,BNt=tL+Alq,BNs=tL+Alp,Auq=Amr+AtD,BNr=GZ+Alq,BNq=GZ+Alp,Auo=AtB+Asz,AyO=Awd+AoW,AyM=Awc+Ams,Aum=Asx+Asv,BID=BBz+BDf,Auk=Ast+Asr,BNp=Awa+ap,BNo=AwZ+hh,Aui=Asp+Asn,BKZ=Awa+Aja,BKX=AwZ+Aja,Aug=AlO+Ask,Asa=Alo+j,Aue=AlO+Asi,AuX=AlO+Asg,BNn=pL+BFF,AwW=Amt+j,BKV=AnN+BFD,BKU=AnN+BFB,BKT=AnN+BEz,BNm=AnN+nN,AtN=AkS+Aja,BNl=AnN+tP,BNk=AnN+xj,BKS=AnN+BEx,BKR=AnN+BEv,BNj=tP+Ajh,AsI=j+Alc,AsG=AjX+pZ,BEw=Akq+BBv,AtL=AjX+AGS,Aqn=AjX+fN,ArX=AjX+gR,Apz=AjX+ck,ArK=AjX+fO,ApT=AjX+aK,BIN=AmF+j,BIq=AnW+j,BIp=AnV+j,BIo=AoG+j,BIn=AoF+j,BIm=AoE+j,BIl=AoD+j,BKP=AoV+xk,BNi=Lq+Ajs,BKO=gN+BBs,AsL=Aqe+Aqc,ApA=AmN+AmL,BKM=BBr+eK,BKL=BDd+Aja,BIB=AlG+j,BIA=AlJ+j,BKK=AlW+j,BFn=BAz+c,Aqf=AmZ+AoA,BKJ=BBp+q,ArS=ApB+Aoz,BNJ=BDc+q,AtJ=Ara+ArY,BKI=iM+Ajq,BHK=Avx+BDb,BNh=TE+Ajq,BHz=BDe+c,BIk=AwX+q,BEu=Apf+AIf,BHy=Aoy+Ase,Ake=Ajh+Ajq,AsE=Aki+tj,AxL=AjX+nO,BLt=HV+BFh,BKH=AmA+Aka,BGN=Akt+MX,AtH=AkS+AsC,Akk=Ajq+a,ApP=AjX+aL,Apx=AnG+a,BHx=Alz+AnG,Aqa=AjX+nF,BKG=AjX+AGd,BHJ=Apv+q,BEf=AoP+q,BKF=Amo+AoP,ArW=Ale+q,BKE=Amo+Ale,BHI=AoL+j,AkO=Ajp+a,BKD=AkR+Anm,BKC=Asd+rD,BHw=BBm+BBl,BHH=AlL+AkR,AmD=Akb+Ajr,BKA=Ajb+Avh,BIj=Avh+q,BJz=BAv+q,BNI=Aka+q,BJy=Amp+Aka,BJx=Alb+Aka,BJw=AlI+Aka,BIi=Aku+j,AuS=AlM+c,BHu=Arc+c,BJv=BFh+c,Atf=Anx+a,BJu=AnM+q,BHt=AlG+Akr,BJt=AlJ+Akr,BHf=Aoj+c,BNe=AjX+vq,BNd=AnU+vs,BJs=AnU+AcZ,BJr=AnU+AIg,BJq=AnU+AEv,BHe=AnU+rz,BJp=AnU+Acc,BMk=Ald+j,BNc=Aka+Vy,BNb=AqW+CJ,Aso=AmW+j,AtF=AjX+iq,AyC=AjX+AGU,Asm=AjX+eX,BHs=BDV+a,BNa=Amz+vn,BNZ=Amz+WB,BHG=Amz+ATE,BJo=Amz+ATF,BHF=BBA+c,Arf=AmV+AnG,ArL=AlT+j,BIh=Ajo+q,BJn=BEo+Asf,BNH=Aly+j,Ape=AjX+Xi,AmM=Ajb+Akw,Asl=AjX+gv,Apd=AjX+WB,Aty=AjX+kC,ApF=AjX+Xw,Atw=AjX+nK,ApE=AjX+Xj,Atu=AjX+gu,ApX=AjX+Yk,Ats=AjX+pv,ApW=AjX+UW,Atq=AjX+kD,Apc=AjX+cm,Ato=AjX+tA,Apb=AjX+cl,Apa=AjX+dl,Atm=AjX+wC,ApZ=AjX+cn,Atk=AjX+rE,ApY=AjX+co,AmH=Akw+a,Ala=AkQ+Ajt,BJl=AlI+j,Alk=Ajr+a,Alg=AkJ+Ajr,Aor=Akf+Aja,BJk=AjX+nM,BJj=AjX+qM,BEV=AjX+qO,BEU=AjX+nJ,Aoi=Akf+Ajo,AxI=AjX+pw,BHE=Ajh+Aop,BFl=BCq+a,Ard=Aop+BCq,BEt=AjX+ASB,BJi=AjX+Aft,BEs=AjX+AIb,BJh=AmV+BEK,BNY=AoM+fP,BEr=AjX+AIc,BHD=AjX+ASC,BHC=AjX+AXL,BEp=AjX+ASD,AqB=Amn+AnT,BNX=CB+Aoo,BJg=AkH+Ajo,Apt=AmK+a,BJf=PA+AsC,AqZ=AlF+j,BNG=Alb+j,BFf=Anj+j,BIY=Aoh+DE,BNF=BCv+c,AoT=Alc+a,Axz=Anv+j,Ate=Alr+j,BNE=Axj+j,BLK=Aom+j,Axv=Ama+j,Amq=Ajz+q,BNW=Alt+Cw,Amm=Ajy+q,BJd=AjX+ATb,BIX=Avq+qN,BJc=ArB+a,BJb=AjX+ATD,Aox=AjZ+AkG,Anb=AjZ+AkF,AlR=Ajj+q,BNC=BCd+q,BNB=BCr+a,Aqd=AkS+AnC,BNV=Akr+Oy,Aql=AlU+HW,AnZ=AkV+q,BIW=AjX+Qk,BJa=Akf+Ajx,BIV=AjX+kB,BHA=AjX+ATH,Apg=Amk+Ami,Alj=AkC+AkT,Aow=AmI+AmG,Ali=AkC+AkU,ArG=Aog+Aoe,Aof=AkY+Aja,BNU=AjX+Zk,BJY=AjX+BEg,BFY=AkX+j,BJW=AjX+BEe,BJU=AjX+BEc,BHq=AjX+BBL,BHp=AjX+BBJ,BJQ=AjX+BEa,BJO=AkX+AmK,BGz=AsJ+Ajo,Alm=Ajo+Ajg,AuK=Aqb+AkR,BHo=BAx+a,BHn=AjX+Afw,BHm=AjX+AXM,BIU=AlL+BQ,BIg=Anu+j,BEn=Aoq+BDV,AtE=AqU+Aks,BGy=Alf+q,BHl=BBG+ATg,BNA=BCj+q,BJM=AmS+BP,BJL=Aly+BP,BEk=Aml+Aka,BNS=wf+AsH,Axs=AsH+Akc,BGx=Ald+AnG,BGw=Ald+BCe,Apy=AkH+AkI,BEj=ApS+a,BGv=Ajh+Alf,BIT=Aku+BP,Axp=Ajh+AwN,BIf=AwM+a,AuH=Akt+Avv,BGM=AjX+vt,Axm=AjX+AEy,BGK=AjX+vu,BGH=AjX+yb,Axl=AjX+AEz,BNR=pp+AjZ,AqX=AkF+a,Axi=AjX+ASE,Axf=AjX+AId,Axc=AjX+ASF,AuF=AjX+AGV,BJK=AjX+ATd,AlB=Ajb+Ajl,AxZ=Akc+Avg,BJJ=AjX+ATe,BJI=AjX+Acf,BJH=AjX+Acd,BJG=AjX+AIh,BNQ=AjX+ya,BJF=AjX+Ace,BJE=AjX+ATI,AxX=Ajh+Aqt,BId=ApR+q,AoB=AlQ+Akv,BJD=AjX+Afv,BJC=AjX+AXK,AlS=Ajl+q,AsK=AkG+a,AlA=Ajb+Ajj,BNP=Akc+fa,BHj=Ano+q,BMy=AwG+a,BGu=Aka+AwG,Amj=Ajb+AkL,BHi=BBD+BBC,BIS=Avl+fr,BJA=jB+BAs,BIR=BAs+ZO,BGt=ApM+BCy,Amd=AkL+q,Amf=Ajb+AkM,AxV=AwF+Ann,BEi=AnL+AwE,ArF=Akx+AnQ,AmX=AkM+q,BEh=Ajb+AlE,BIy=BAq+q,BMw=AqR+q,BIx=Aka+ZM,BNO=Akc+Zx,AtC=Ajh+Aqx,BHd=ApO+q,BIw=HN+Amv,BIv=Arr+q,BIu=Anu+BCl,BGs=Aks+q,AuD=AjX+AsD,BGE=AlC+Cw,BHc=BAw+a,AuA=Akx+AkR,Asw=Ajh+Aqw,BFu=Akt+Py,Asu=AkY+Aks,Ass=Akt+BCs,AxT=AkX+Anx;

/* pass 4 (bigram) */
const AuO=And+a,BIC=BFr+a,BRv=BPu+BPt,BDH=ArJ+a,BKw=Atc+Ajg,BHB=ArT+a,BGr=BFR+q,BRu=BET+Ajg,BRt=BES+Ajg,BLV=Aqi+q,BKv=BIO+a,BDC=Api+c,BAy=AqV+a,BRs=BMo+ASN,AnX=AlN+a,BRr=AtU+GZ,BKu=AtU+BMl,BRp=AtR+GZ,BKt=AtR+BMi,BRn=BER+BPq,BGf=BEQ+AoU,BHv=AlV+q,AxN=Alh+c,BRm=AtP+GZ,BKs=AtP+BMf,BKr=Ant+a,BLT=BEO+a,BLS=BIt+q,BRk=BMc+ASP,BSP=BHS+a,BSO=BNM+q,BSN=BHR+a,BSM=BNL+q,BSr=pD+BPm,BRj=BMX+AgO,BSq=AU+BPk,AuQ=Anp+q,BGp=AmE+q,BSo=BMV+jz,AyH=Alh+q,BRi=Ash+BMT,BRh=Asc+BPg,BRg=Asb+BPf,BRf=BMQ+BDi,BRe=Ash+BMN,BRd=Asc+BML,BRc=Asb+BMJ,BGo=BEJ+BED,BRb=BEC+AxR,BRa=BEA+BPd,BRZ=BEA+BPb,BRY=BDr+BPZ,BRX=BDr+Aqi,BRW=BGq+BME,BGe=BDn+AoU,BGd=BDI+AoU,BGc=BDD+BDA,BGb=BCz+BCm,BRV=BCb+BPX,BRU=BCb+BPW,BRT=BCa+BPV,BRS=BCa+BPU,BRR=BCZ+BMC,BRQ=BCZ+BMA,BRP=BCW+BPT,BRO=BCW+BLx,BRN=BPS+Api,BRM=AxD+Alh,BRL=BCV+BPQ,BRK=BCV+BPP,BIe=AxA+RB,BRJ=BCS+BPN,BRI=BCS+BLu,BIc=BCP+kS,BRH=BPK+BGl,BRG=BPJ+BGl,BIK=BCM+Ir,BGa=BCK+BCG,BGZ=BCF+BCA,BGY=BBy+BBq,BGX=BBk+BBi,BSi=BIL+pm,BRF=BIL+BPF,BKq=BFO+BLs,BGW=Awy+AqM,BFe=BBf+AqM,BFc=BBN+AqI,BFM=BBK+AqI,BFL=BBH+AqG,BFI=BBE+AqG,BRE=BAl+BAj,BRD=BAl+BAi,BRC=BAe+BAj,BRB=BAe+BAi,BRA=BAc+BPD,BQz=BAc+BLm,BQy=Aww+BPB,BQx=Aww+BFd,BKp=BAa+BLk,BBg=AqE+ArI,BQw=Awu+BOz,BQv=Awu+BHL,BQu=Aws+BOx,BQt=Aws+BFb,BGn=Awp+BLg,BQs=Awm+Alh,BQr=Awj+Asq,BSg=Awi+Kb,BSf=Awi+RP,BSe=Awf+am,BQq=Awf+BFa,BQp=Awb+BOs,BQo=Awb+BOq,BQn=BER+BOp,BQm=BAX+BOo,BQl=BAX+BOn,BQk=BIJ+BHL,BQj=BLZ+BOm,BQi=BAV+AxP,BQh=BLW+AED,BQg=BAT+Asq,BQf=BAR+BOl,BQe=BAR+BOk,BQd=BAP+BOj,BQc=BAP+BOi,BQb=BAM+BOh,BQa=BAM+BOg,BII=BAH+LS,BQZ=BLU+BFQ,BSb=BAF+kB,BQY=BAF+BLR,BSZ=BAD+LS,BQX=BAD+BLP,BIH=Ayy+Yv,BQW=Ayv+BOZ,BQV=Ayv+BOY,BSX=Ayr+pu,BQU=Ayr+BOW,BGm=AwY+BIs,BKn=BIr+BIG,BQT=BLO+Asq,BQS=BOV+AxP,BQR=BOT+Alh,BQQ=Aym+BLM,BQP=Aym+BLL,BQO=Ayk+BOR,BQN=Ayk+BOQ,BSV=Ayi+Vv,BQM=Ayi+BOO,BQL=Ayf+BLJ,BQK=Ayf+BLI,BQJ=AwQ+BON,BQI=AwQ+BOM,BQH=AwP+BOL,BQG=AwP+BOK,BQF=AwL+BOJ,BQE=AwL+BOI,BQD=AwK+BOH,BQC=AwK+BOG,BQB=AwJ+BOF,BQA=AwJ+BLH,BIF=AwI+ct,BST=AwH+ro,BSS=AwH+NA,BPj=Avw+BOB,BPh=Avw+AxP,BPe=Avu+Asq,BPc=Avt+BNz,BPa=Avt+BNK,BPY=Avs+Aqi,BPR=Avr+Alh,BPI=Avp+AxP,BPE=Avo+Aqi,BPC=Avn+Aqi,BFH=Avm+AyS,BPA=Avk+Aqi,BOy=Avf+Aqi,BOw=AvT+kV,BOv=AvT+BKo,BOu=AvI+Arp,BOt=AvI+Arj,BOr=AyP+Arp,BOd=AyP+Arj,BOb=AvG+Arp,BOU=AvG+Arj,BOS=Aux+BNx,BOE=Aux+BNw,BOD=Auu+BNv,BOC=Auu+BNu,BOA=Aus+BNt,BNg=Aus+BNs,BNf=Auq+BNr,BNT=Auq+BNq,BND=Auo+AyO,BMz=Auo+AyM,BMx=Aum+AyO,BMn=Aum+AyM,BKm=BID+AFQ,BMd=Auk+BNp,BMb=Auk+BNo,BMW=Aui+BKZ,BMU=Aui+BKX,BGk=Aug+Asa,BGj=Aue+Asa,BGi=AuX+Asa,BSR=AU+BNn,BGh=AsI+a,BMR=BEw+q,BMP=BIq+c,BMO=BIp+c,BMM=BIo+c,BMK=BIn+c,BMI=BIm+c,BMG=BIl+c,BMF=BKP+BNi,BMD=BKO+Aqi,BHr=BFn+q,BMB=BKJ+a,BSL=BNJ+a,BKl=BHz+q,BLQ=BIk+a,Aky=Ake+a,BLN=BGN+q,BKa=AtH+c,BLz=BIZ+Akk,BJe=BHJ+a,BKY=BEf+a,BCx=ArW+a,BSQ=Aqa+HH,BKk=BHI+AkO,BKj=BKC+BBn,BKi=BHw+AJN,AyJ=AmD+a,BLy=AwW+c,BLw=BJz+a,BLG=BIi+c,BLv=BJu+a,BKW=BHf+q,BCU=Aso+c,BLr=BHL+c,BHk=Arf+a,BBx=ArL+c,BLq=BJn+Akk,BSK=BNH+c,AyW=AmM+a,BLp=BJl+c,Asy=Alg+a,AyF=Aor+AkO,Axo=Aoi+Ajg,BJZ=BHE+BFl,BSJ=Ard+a,BCR=AmE+c,BLo=AtN+c,BBF=AqZ+c,BSI=BNG+c,BLF=BIB+c,BLE=BIA+c,BSH=BKK+c,BBM=Axz+AkO,BJP=Ate+AkO,BJN=BNE+AkO,BKx=Yy+AlN,BBI=Axv+AkO,AtA=Amq+a,BLn=BLM+AlN,ArR=Amm+a,BEF=Aox+a,BBO=Anb+a,AoH=AlR+a,BSB=BNC+a,BHb=Aqd+q,AuM=AnZ+a,BLl=BJa+Ajg,AuI=Alj+a,AuB=Ali+a,BCI=Aof+c,BHa=BFY+c,BIz=BGz+Ajg,BEX=AuK+BHo,BLD=BIg+c,BLi=BEn+a,BLh=AtE+NM,BKe=BGy+a,BSA=BNA+a,BRz=BGx+a,BRy=BGw+q,BEP=ArI+c,BCD=Apy+BEj,BFE=Axp+BIf,BKd=AuH+a,Anz=AlB+q,BLC=AxZ+q,BFC=AxX+BId,BBj=AoB+q,AqC=AlS+a,AnY=AlA+q,BLf=AtE+Yo,BKc=BHj+a,BAZ=Amj+q,BKb=BHi+Apu,BLe=jA+BJA,BRx=BGt+a,Ayp=Amd+a,Ayd=Amf+q,BLA=AxV+q,BLb=BEi+a,BGg=ArF+c,Aya=AmX+a,BLa=BEh+q,BLY=BIy+a,BRw=BMw+a,BDa=AtC+BHd,BLX=BIv+a,BFA=AuD+BGE,BEW=AuA+BHc,BKN=Asw+c,BKz=BFu+q,BKB=Asu+q,BJm=Ass+a,BKy=AxT+a;

/* pass 5 (bigram) */
const BLB=BGr+a,BKf=BDC+q,BSc=BRr+BMm,BSa=BRp+BMj,BRq=BHv+a,BHg=AxN+q,BSY=BRm+BMg,BSt=BLS+a,BTb=BSO+a,BTa=BSM+a,BTl=AU+BSr,BTk=BSq+sU,BEd=AuQ+a,BKh=BGp+a,BEy=AyH+a,BTT=BIe+BPO,BTS=BIc+BPM,BTR=BIc+BPL,BTQ=BIK+BPH,BTP=BIK+BPG,BTO=BSi+BMq,BTj=BSg+td,BTi=BSf+pd,BTh=BSe+rk,BTN=BII+BOf,BTM=BII+BOe,BTL=BSb+BOc,BTK=BSZ+BOa,BTg=BIH+Fw,BTf=BIH+Dp,BTJ=BSX+BOX,BTI=BSV+BOP,BTe=BIF+nL,BTd=BSS+nL,BTc=BOw+rr,BTH=BSR+AgV,BTG=BMR+a,BTF=BMP+q,BTE=BMO+q,BTD=BMM+q,BTC=BMK+q,BTB=BMI+q,BTA=BMG+q,BRo=BHr+a,BSW=BKl+a,BSs=BLN+a,BSU=BKa+q,BSz=BLy+q,BSp=BLG+q,BSG=BKW+a,BKQ=BCU+q,BJT=BBx+q,BTZ=BSK+q,BSy=BLp+q,BJX=BCR+q,BSx=BLo+q,BJR=BBF+q,BTY=BSI+q,BSn=BLF+q,BSm=BLE+q,BTX=BSH+q,BSC=BBg+AkO,BTW=BBg+c,BTV=BKx+a,BRl=BHb+a,BJV=BCI+q,BMS=BHa+q,BSl=BLD+q,BTU=BRy+a,BLd=BEP+q,BEY=Anz+a,BSk=BLC+a,BSj=BFC+a,BJS=BBj+a,BCN=AnY+a,BJB=BAZ+a,BSw=Yl+BLe,BHh=Ayd+a,BSh=BLA+a,BKg=BGg+q,BSu=BLa+a,BSF=BDa+a,BSE=BKN+q,BSd=BKz+a,BSD=BKB+a;

/* pass 6 (bigram) */
const BTr=BKf+a,BSv=BHg+a,BUR=BTg+tH,BUQ=BTf+tH,BUP=BTc+rs,BUK=BTF+a,BUJ=BTE+a,BUI=BTD+a,BUH=BTC+a,BUG=BTB+a,BUF=BTA+a,BTw=BSU+a,BUE=BSz+a,BUA=BSp+a,BTq=BKQ+a,BTn=BJT+a,BUO=BTZ+a,BUD=BSy+a,BTp=BJX+a,BUC=BSx+a,BTm=BJR+a,BUN=BTY+a,BTz=BSn+a,BTy=BSm+a,BUM=BTX+a,BUL=BTW+q,BTo=BJV+a,BTu=BMS+a,BTx=BSl+a,BTt=BLd+a,BUB=BSw+ZO,BTs=BKg+a,BTv=BSE+a;

/* pass 7 (bigram) */
const BUS=BUL+a;

/* pass 8 (array) */
const BVE=[B,K,DY],BVK=[B,K,Ek],BUZ=[B,K,u],BUY=[B,K,t],BVJ=[B,K,Ei],BUw=[P,Af,R,r],BUU=[T,M,D],BUW=[Q,e,H],Baf=[B,K,lk],BXl=[i,GT,X,ZP,D,D,D,D],BhL=[B,K,yK],BdI=[B,K,ARr],BXk=[P,Fq,Bw,Cy],BUe=[P,Ae,R,O],BUu=[Q,d,J],BUV=[i,D,D,D,D,D,D,D],Bld=[P,AXH,R,r],BaT=[P,hc,An,RR],BnF=[i,'raw:-43.685','raw:-179.785','raw:-267.721',D,D,D,D],CPr=[P,'intl',AK,Ap],BdA=[i,'raw:8.846','raw:-4.394','raw:-1.122','raw:-0.00237','raw:-0.146528','raw:0.130428','raw:0.783926'],BUi=[B,K,BC],Bmz=[B,K,'6135'],BUh=[P,y,R,O],CVu=[B,K,'1095'],CVt=[B,K,'5886'],BVi=[B,K,Ks],BrG=[B,K,'1081'],BrF=[B,K,'5681'],BVM=[P,Bs,Ai,AY],CVs=[B,K,'1078'],CVr=[B,K,'5593'],BUv=[B,K,CZ],BZv=[i,Xq,LT,Hv,BK,CP,aC,D],Bjy=[B,K,'1077'],Bjx=[B,K,'5561'],BUn=[P,AJ,x,AC],BwN=[B,K,'1076'],BwM=[B,K,'5546'],BaS=[i,ga,oY,gb,D,D,D,D],BhH=[B,K,'1075'],BhG=[B,K,'5527'],BVF=[B,K,Do],BrE=[B,K,'1074'],BrD=[B,K,'5524'],BUs=[P,AQ,AK,Ap],CVq=[B,K,'1073'],CVp=[B,K,'5489'],BVL=[B,K,Ey],CFH=[B,K,'1072'],CFG=[B,K,'5467'],BUx=[P,BF,AN,Aq],Bmy=[B,K,Afn],CVo=[B,K,'1071'],CVn=[B,K,'5464'],BhF=[P,fD,Hk,Hl],Bbg=[i,nP,ts,nQ,D,D,D,D],Bkz=[B,K,'1070'],Bky=[B,K,'5451'],CFF=[B,K,'1068'],CFE=[B,K,'5381'],BwL=[B,K,'1067'],BwK=[B,K,'5373'],CVm=[B,K,'1065'],CVl=[B,K,'5365'],CFD=[B,K,'1064'],CFC=[B,K,'5360'],BwJ=[B,K,'1063'],BwI=[B,K,'5354'],Bkx=[B,K,'1062'],Bkw=[B,K,'5340'],BwH=[B,K,'1060'],BwG=[B,K,'5324'],Bcn=[B,K,tn],Bcm=[B,K,su],BdH=[B,K,ASk],BdG=[B,K,ARs],CVk=[B,K,'1056'],CVj=[B,K,'5246'],Bcl=[B,K,to],BdC=[i,'raw:-0.293','raw:766.95','raw:87.713','raw:0.195704','raw:1.69507','raw:3.47302','raw:-0.039338'],CVi=[B,K,'1053'],CVh=[B,K,'5233'],BZG=[P,GF,Es,DU],BeF=[i,'raw:572.213','raw:85.334','raw:461.94','raw:4.9732','raw:1.529','raw:5.2484','raw:3.5378'],BhP=[B,K,Aav],BhO=[T,fB,FH],BrC=[B,K,'1048'],BrB=[B,K,'5132'],BpO=[B,K,'1041'],BpN=[B,K,'5013'],BnK=[i,'raw:508.088','raw:-191.042','raw:565.223',D,D,D,D],BwF=[B,K,'8902'],CFB=[T,jo,Uh],CFA=[B,K,'7028'],CVg=[B,K,'6903'],CVf=[B,K,'8905'],CVe=[B,K,'4903'],Bxw=[P,ATi,oS,wJ],CEz=[B,K,'7027'],CVd=[B,K,'6901'],CVc=[B,K,'8914'],Bct=[B,K,ARv],CVb=[B,K,'4901'],Bxv=[P,ANH,sg,wK],CPq=[T,bV+' RGS',ls],Bcs=[Q,gy,Dn],BXd=[B,K,Zb],Beb=[B,K,AUh],BWG=[P,Dw,CL,Eo],Bea=[T,bV,HZ],BhT=[i,AIx,ATL,Qx,D,D,D,D],CVa=[B,K,'6820'],Bmx=[B,K,'8908'],CVZ=[B,K,'4820'],BrA=[T,iW,NE],Bdy=[i,AIi,AUn,bf,D,D,D,D],CEy=[B,K,'6818'],CEx=[B,K,'4818'],BlT=[B,K,Abz],BZF=[i,jD,IF,jE,jF,oZ,jG,oa],Bjw=[B,K,'6817'],Bjv=[B,K,'8913'],Bju=[B,K,'4817'],BeZ=[P,WV,MH,AY],Blc=[T,ARw,JG],BcI=[i,yc,kG,AFA,D,D,D,D],CVY=[B,K,'6816'],CVX=[B,K,'4816'],BbD=[i,tt,ABv,sH,D,D,D,D],CVW=[B,K,'6813'],CVV=[B,K,'4813'],BlX=[i,sI,AUq,Acg,D,D,D,D],Bdx=[i,ob,AEa,ABw,D,D,D,D],CEw=[B,K,'6810'],CEv=[B,K,'4810'],CVU=[B,K,'6809'],CVT=[B,K,'8910'],CVS=[B,K,'4809'],BaR=[i,ZA,bg,sJ,D,D,D,D],Bjt=[B,K,'6807'],Bjs=[B,K,'4807'],BcE=[i,ACG,AFG,AIz,AFH,ACH,AFI,ACI],BYO=[i,bh,Zh,bf,D,D,D,D],Bmw=[B,K,Afm],BhE=[B,K,'4805'],BlS=[i,AHP,AHQ,AHR,D,D,D,D],CVR=[B,K,'6804'],CVQ=[B,K,'4804'],Bjr=[i,wc,yp,ACJ,D,D,D,D],CEu=[B,K,'6803'],CEt=[B,K,'4803'],BcD=[i,AFB,AFC,yd,D,D,D,D],BhK=[i,AFJ,AJB,AFK,D,D,D,D],CVP=[B,K,'6801'],CVO=[B,K,'8907'],CVN=[B,K,'4801'],CQf=[T,'Bern',RF],CVM=[B,K,'6765'],CVL=[B,K,'4765'],BpM=[B,K,'6764'],BpL=[B,K,'4764'],CVK=[B,K,'6763'],CVJ=[B,K,'4763'],CVI=[B,K,'6762'],CVH=[B,K,'4762'],Bqz=[B,K,'6761'],Bqy=[B,K,'4761'],CEs=[B,K,'7025'],BvF=[P,'NWL_9D',sh,Cy],BVO=[B,K,FN],BVN=[B,K,FK],BwE=[B,K,'6758'],BwD=[B,K,'4758'],CVG=[B,K,'6757'],CVF=[B,K,'4757'],Blb=[i,ANK,ATj,ANL,ANM,ATk,ATl,AXm],CEr=[B,K,'6756'],CEq=[B,K,'4756'],BaM=[B,K,jl],BaL=[B,K,io],BYD=[i,Ua,Ub,Xm,D,D,D,D],Bgw=[B,K,AWz],Bgv=[B,K,AUd],CEp=[B,K,'7055'],Bne=[i,Iq,'raw:391',gz,D,D,D,D],CVE=[B,K,'6752'],CVD=[B,K,'4752'],CEo=[P,oG,hS,Or],CEn=[B,K,'7056'],CEm=[B,K,'6751'],CEl=[B,K,'4751'],CEk=[P,xr,iZ,DU],BnW=[i,'raw:-56.263','raw:16.136','raw:-22.856',D,D,D,D],CVC=[B,K,'6750'],CVB=[B,K,'4750'],Bqx=[B,K,'6749'],Bqw=[B,K,'4749'],BaK=[B,K,jk],BaJ=[B,K,im],Bqv=[B,K,'6746'],Bqu=[B,K,'4746'],Bqt=[B,K,'6745'],Bqs=[B,K,'4745'],BVr=[B,K,Nj],CVA=[B,K,'6744'],CUz=[B,K,'4744'],BVV=[P,Bl,An,BR],Bjq=[i,ACK,wd,yq,D,D,D,D],BwC=[B,K,'6743'],BwB=[B,K,'4743'],BkK=[B,K,Afl],BkJ=[B,K,Abu],CUy=[B,K,'6741'],CUx=[B,K,'4741'],CUw=[B,K,'6738'],CUv=[B,K,'4738'],BlR=[B,K,Aby],BlQ=[B,K,Afh],Bxo=[i,'raw:185',LD,Pv,D,D,D,D],CUu=[B,K,'6729'],CUt=[B,K,'4729'],BeE=[i,'raw:8.853','raw:-52.644','raw:180.304','raw:-0.393','raw:-2.323','raw:2.96','raw:-24.081'],CUs=[B,K,'6726'],CUr=[B,K,'4726'],Bdz=[i,'raw:-179.483','raw:-69.379','raw:-27.584','raw:-7.862','raw:8.163','raw:6.042','raw:-13.925'],CUq=[B,K,'6723'],CUp=[B,K,'4723'],BqD=[i,ATm,ATn,ANO,D,D,D,D],CEj=[B,K,'6721'],CEi=[B,K,'4721'],BVS=[B,K,Fb],BVC=[i,D,D,Ef,D,D,DF,Cm],CUo=[B,K,'6720'],CUn=[B,K,'4720'],BVA=[P,BO,AZ,Al],BcB=[B,K,rx],BYd=[P,En,Bw,Cy],Bjp=[B,K,AcA],Bnm=[i,'raw:-146.21','raw:112.63','raw:4.05',D,D,D,D],CUm=[B,K,'6706'],CUl=[B,K,'4706'],BcH=[P,YE,OD,AC],CUk=[B,K,'6705'],CUj=[B,K,'4705'],CUi=[B,K,'6704'],CUh=[B,K,'4704'],BwA=[B,K,'6702'],Bvz=[B,K,'4702'],BhS=[i,AFL,SL,ACL,D,D,D,D],Bqr=[B,K,'6701'],Bqq=[B,K,'4701'],Bvy=[B,K,'6700'],Bvx=[B,K,'4700'],Bnl=[i,'raw:-770.1','raw:158.4','raw:-498.2',D,D,D,D],CUg=[B,K,'6699'],CUf=[B,K,'4699'],BuZ=[i,sL,'raw:-187','raw:103',D,D,D,D],CUe=[B,K,'6698'],CUd=[B,K,'4698'],BeY=[B,K,'6697'],BlP=[B,K,Afg],CEh=[B,K,'6696'],CEg=[B,K,'4696'],Bgm=[i,qT,wL,si,D,D,D,D],BpK=[B,K,'6695'],BpJ=[B,K,'4695'],Bkv=[B,K,'6694'],Bku=[B,K,'4694'],BuW=[i,D,'raw:-0.15','raw:0.68',D,D,D,D],CUc=[B,K,'6693'],CUb=[B,K,'4693'],Bnd=[i,'raw:217.037','raw:86.959','raw:23.956',D,D,D,D],CUa=[B,K,'6692'],CUZ=[B,K,'4692'],BdE=[i,'raw:215.525','raw:149.593','raw:176.229','raw:-3.2624','raw:-1.692','raw:-1.1571','raw:10.4773'],CUY=[B,K,'6691'],CUX=[B,K,'4691'],BdD=[i,'raw:221.525','raw:152.948','raw:176.768','raw:-2.3847','raw:-1.3896','raw:-0.877','raw:11.4741'],CUW=[B,K,'6690'],CUV=[B,K,'4690'],BeB=[i,'raw:410.721','raw:55.049','raw:80.746','raw:2.5779','raw:2.3514','raw:0.6664','raw:17.3311'],CUU=[B,K,'6689'],CUT=[B,K,'4689'],Bcz=[i,'raw:347.103','raw:1078.12','raw:2623.92','raw:-33.8875','raw:70.6773','raw:-9.3943','raw:186.074'],CUS=[B,K,'6688'],CUR=[B,K,'4688'],Bcy=[i,AFM,ACM,ACN,yr,ACO,rK,ys],Bqp=[B,K,'6687'],Bqo=[B,K,'4687'],BpI=[B,K,'6686'],BpH=[B,K,'4686'],Bbf=[i,sj,wM,wN,wO,AAy,AAz,ABA],BpG=[B,K,'6683'],BpF=[B,K,'4683'],BpP=[i,'raw:283.7','raw:735.9','raw:261.1',D,D,D,D],CUQ=[B,K,'6682'],CUP=[B,K,'4682'],Bbe=[B,K,pW],Bbd=[B,K,qD],BnJ=[i,'raw:174.05','raw:-25.49','raw:112.57',BK,BK,DF,Cm],CUO=[B,K,'6673'],CUN=[B,K,'4673'],Bxn=[i,eR,qF,'raw:113',D,D,D,D],CUM=[B,K,'6672'],CUL=[B,K,'4672'],CEf=[B,K,'6671'],CEe=[B,K,'4671'],CEd=[B,K,'6670'],CEc=[B,K,'4670'],CUK=[B,K,'6126'],CUJ=[B,K,'4669'],BnI=[i,'raw:-106.226','raw:166.366','raw:-37.893',D,D,D,D],CUI=[B,K,'6665'],CUH=[B,K,'4665'],BnR=[i,'raw:-204.619','raw:140.176','raw:55.226',D,D,D,D],CUG=[B,K,'6664'],CUF=[B,K,'4664'],BnE=[i,'raw:-502.862','raw:-247.438','raw:312.724',D,D,D,D],CUE=[B,K,'6663'],CUD=[B,K,'4663'],Bnh=[i,'raw:-11.64','raw:-348.6','raw:291.98',D,D,D,D],CUC=[B,K,'6634'],CUB=[B,K,'4662'],CUA=[B,K,'6661'],CTz=[B,K,'4661'],Bcx=[i,'raw:982.609','raw:552.753','raw:-540.873','raw:6.68163','raw:-31.6115','raw:-19.8482','raw:16.805'],CTy=[B,K,'6660'],CTx=[B,K,'4660'],CTw=[B,K,'6659'],CTv=[B,K,'4659'],BnH=[i,sI,PG,RO,D,D,D,D],Bvw=[B,K,'6658'],Bvv=[B,K,'4658'],BqC=[i,'raw:-963','raw:510','raw:-359',D,D,D,D],CTu=[B,K,'6646'],CTt=[B,K,'4646'],BlO=[i,AHT,AFU,AHU,D,D,D,D],Bvu=[B,K,'6644'],Bvt=[B,K,'4644'],BdB=[i,'raw:-480.26','raw:-438.32','raw:-643.429','raw:16.3119','raw:20.1721','raw:-4.0349','raw:-111.7'],CTs=[B,K,'6643'],CTr=[B,K,'4643'],BuV=[i,AFD,'raw:-348','raw:292',D,D,D,D],CTq=[B,K,'6642'],CTp=[B,K,'4642'],BqB=[i,AXs,AXt,ATq,D,D,D,D],CEb=[B,K,'6641'],CEa=[B,K,'4641'],BwR=[i,Acj,rI,'raw:-127',D,D,D,D],CTo=[B,K,'6639'],CTn=[B,K,'4639'],Bug=[i,Gn,'raw:430','raw:368',D,D,D,D],CTm=[B,K,'6638'],CTl=[B,K,'4638'],Bnc=[i,'raw:335.47','raw:222.58','raw:-230.94',D,D,D,D],CTk=[B,K,'6633'],CTj=[B,K,'4633'],BqA=[i,'raw:-382','raw:-59','raw:-262',D,D,D,D],CTi=[B,K,'6632'],CTh=[B,K,'4632'],Bxm=[i,aN,'raw:274',cq,D,D,D,D],CTg=[B,K,'6630'],CTf=[B,K,'4630'],BeC=[i,'raw:72.438','raw:345.918','raw:79.486','raw:1.6045','raw:0.8823','raw:0.5565','raw:1.3746'],CTe=[B,K,'6629'],CTd=[B,K,'4629'],CFt=[i,gG,GN,qG,D,D,D,D],CTc=[B,K,'6628'],CTb=[B,K,'4628'],CEZ=[B,K,'6627'],CEY=[B,K,'4627'],Bpz=[i,'raw:94','raw:-948','raw:-1262',D,D,D,D],CTa=[B,K,'6626'],CTZ=[B,K,'4626'],BqG=[i,'raw:186','raw:482','raw:151',D,D,D,D],CTY=[B,K,'6625'],CTX=[B,K,'4625'],CEX=[B,K,'6624'],CEW=[B,K,'4624'],BnD=[i,'raw:-186',Ach,iX,D,D,D,D],CEV=[B,K,'6623'],CEU=[B,K,'4623'],Bpy=[i,'raw:-467','raw:-16','raw:-300',D,D,D,D],CTW=[B,K,'6622'],CTV=[B,K,'4622'],BuU=[i,Ack,'raw:248','raw:-430',D,D,D,D],CTU=[B,K,'6621'],CTT=[B,K,'4621'],Bck=[B,K,rw],Bcj=[B,K,st],BWv=[B,K,Vr],BWu=[B,K,VU],BuT=[i,'raw:-289','raw:-124',cr,D,D,D,D],CTS=[B,K,'6616'],CTR=[B,K,'4616'],Bpx=[i,'raw:-499','raw:-249','raw:314',D,D,D,D],CTQ=[B,K,'6615'],CTP=[B,K,'4615'],Bcv=[i,'raw:-119.425','raw:-303.659','raw:-11.0006','raw:1.1643','raw:0.174458','raw:1.09626','raw:3.65706'],CTO=[B,K,'6614'],CTN=[B,K,'4614'],CET=[B,K,'6613'],CES=[B,K,'4613'],Bbc=[B,K,pV],Bbb=[B,K,qC],Bci=[i,'raw:-162.619','raw:-276.959','raw:-161.764','raw:0.067753','raw:-2.24365','raw:-1.15883','raw:-1.09425'],CTM=[B,K,'6611'],CTL=[B,K,'4611'],BXJ=[B,K,Xd],BXI=[B,K,Vs],BXH=[B,K,WI],BVs=[P,HJ,CR,CC],Bgu=[B,K,ASp],Bgt=[B,K,AUc],Bgs=[B,K,ASo],Bgr=[B,K,AUb],BnQ=[i,'raw:195.671','raw:332.517','raw:274.607',D,D,D,D],CTK=[B,K,'6607'],CTJ=[B,K,'4607'],BuY=[i,'raw:-149','raw:128',eS,D,D,D,D],CTI=[B,K,'6606'],CTH=[B,K,'4606'],Buf=[i,La,'raw:183','raw:236',D,D,D,D],CTG=[B,K,'6605'],CTF=[B,K,'4605'],Bue=[i,oJ,'raw:359','raw:365',D,D,D,D],CTE=[B,K,'6604'],CTD=[B,K,'4604'],BwQ=[i,gT,'raw:213.7',IF,D,D,D,D],CTC=[B,K,'6603'],CTB=[B,K,'4603'],BqF=[i,'raw:725','raw:685','raw:536',D,D,D,D],CTA=[B,K,'6602'],CSz=[B,K,'4602'],Bud=[i,'raw:-255',IB,'raw:71',D,D,D,D],CSy=[B,K,'6601'],CSx=[B,K,'4601'],CSw=[B,K,'6600'],CSv=[B,K,'4600'],CSu=[B,K,'1047'],CSt=[B,K,'4558'],BXC=[B,K,WF],BXB=[B,K,Vq],BXA=[B,K,WE],BXG=[B,K,Xb],BXF=[B,K,WH],BWM=[P,Ce,R,O],Bmv=[B,K,'1042'],Bmu=[B,K,'4483'],BnC=[i,'raw:-381.788','raw:-57.501','raw:-256.673',D,D,D,D],CSs=[B,K,'1037'],CSr=[B,K,'4475'],CSq=[B,K,'1036'],CSp=[B,K,'4470'],CSo=[B,K,'1038'],CSn=[B,K,'4463'],BVB=[i,D,D,El,D,D,DG,DN],BVo=[B,K,NW],BVn=[B,K,NK],BVq=[B,K,NV],BVp=[B,K,Nb],Bps=[i,'raw:-20.8','raw:11.3','raw:2.4',D,D,D,D],CSm=[B,K,'6319'],CSl=[B,K,'4319'],BhJ=[i,'raw:-3.2','raw:-5.7','raw:2.8',D,D,D,D],CER=[B,K,'6318'],CEQ=[B,K,'4318'],Bnb=[i,'raw:103.25','raw:-100.4','raw:-307.19',D,D,D,D],CSk=[B,K,'6316'],CSj=[B,K,'4316'],BnP=[i,'raw:-23',Aci,OG,D,D,D,D],CEP=[B,K,'6315'],CEO=[B,K,'4315'],BYI=[i,fc,iA,fd,fe,ff,dq,oK],BkI=[B,K,Afk],BkH=[B,K,Abt],Bla=[i,ANS,ATs,ANT,AXw,AXx,AXy,ATt],CEN=[B,K,'6313'],CEM=[B,K,'4313'],BYc=[i,dd,fV,de,hC,hD,hE,fW],BlN=[B,K,Abx],BlM=[B,K,Aff],BhR=[i,AJE,TC,AJF,D,D,D,D],Bqn=[B,K,'6311'],Bqm=[B,K,'4311'],CSi=[B,K,'6310'],CSh=[B,K,'4310'],Bmt=[B,K,'6308'],Bms=[B,K,'4308'],BbC=[i,kX,kY,rL,rM,rN,rO,oj],Bmr=[B,K,'6307'],Bmq=[B,K,'4307'],CEL=[B,K,'6304'],CEK=[B,K,'4304'],CEJ=[B,K,'6303'],CEI=[B,K,'4303'],Bpw=[i,ATv,ATw,ATx,D,D,D,D],CEH=[B,K,'6302'],CEG=[B,K,'4302'],BWc=[i,Nf,OZ,Oa,D,D,D,D],Bba=[B,K,rA],BbZ=[B,K,qB],Bql=[B,K,'7002'],BbY=[i,ABB,wP,ABC,wQ,wR,wS,AEb],CSg=[B,K,'6300'],CSf=[B,K,'4300'],Bqk=[P,iw,Yc,LK],CSe=[B,K,'6299'],CSd=[B,K,'4299'],Bmp=[B,K,'7016'],Bdw=[i,AEc,AIk,bi,D,D,D,D],BpE=[B,K,'6298'],BpD=[B,K,'4298'],Bmo=[P,Sl,RV,DU],CEF=[B,K,'6297'],CEE=[B,K,'4297'],BeX=[B,K,'7046'],BaQ=[i,sN,yP,oc,D,D,D,D],BhD=[B,K,'6293'],BhC=[B,K,'4293'],BeW=[P,SG,Gs,AY],BnO=[i,'raw:-355',HI,gT,D,D,D,D],CED=[B,K,'6292'],CEC=[B,K,'4292'],BlZ=[i,ATy,ATz,AUA,AJc,ANV,AUB,AXz],CEB=[B,K,'6289'],CEA=[B,K,'4289'],CSc=[B,K,'6286'],CSb=[B,K,'4286'],Bna=[i,'raw:-128.16','raw:-282.42','raw:21.93',D,D,D,D],CSa=[B,K,'6285'],CSZ=[B,K,'4285'],BUp=[i,CE,Bh,CF,BK,CP,Ca,CG],BVc=[B,K,Hd],BVb=[B,K,HX],Bcr=[B,K,ARt],Bgl=[B,K,yJ],Bxa=[i,iB,Iq,'raw:-291',D,D,D,D],CSY=[B,K,'6282'],CSX=[B,K,'4282'],Bqj=[B,K,'7010'],Bjo=[i,ACy,yu,AFV,ACQ,AFN,yv,X],Bvs=[B,K,'6281'],Bvr=[B,K,'4281'],Bqi=[P,ix,UU,Os],Bmn=[B,K,'7001'],Bmm=[P,uL,RW,LK],BeD=[i,'raw:446.448','raw:-125.157','raw:542.06','raw:0.15','raw:0.247','raw:0.842','raw:-20.489'],CSW=[B,K,'6277'],CSV=[B,K,'4277'],Bpv=[i,ANX,AUC,AYA,D,D,D,D],CDz=[B,K,'6274'],CDy=[B,K,'4274'],BVk=[i,Ng,Nh,MK,PI,PJ,Ni,Ky],BZj=[B,K,hZ],BZi=[B,K,gx],BxZ=[i,Acl,'raw:375',LD,D,D,D,D],CSU=[B,K,'6271'],CST=[B,K,'4271'],BeV=[i,wT,wU,ABD,D,D,D,D],CDx=[B,K,'6270'],CDw=[B,K,'4270'],BVI=[B,K,EO],BVH=[B,K,EN],BVa=[B,K,HP],BVZ=[B,K,HO],BuN=[i,at,od,Pv,D,D,D,D],CDv=[B,K,'6266'],CDu=[B,K,'4266'],Bvq=[B,K,'6265'],Bvp=[B,K,'4265'],BeU=[i,Og,NN,AIl,D,D,D,D],BpC=[B,K,'6263'],BpB=[B,K,'4263'],Buc=[i,'raw:639','raw:405',cr,D,D,D,D],CSS=[B,K,'6262'],CSR=[B,K,'4262'],Bjn=[i,FP,ATP,Qi,D,D,D,D],Bqh=[B,K,'6261'],Bqg=[B,K,'4261'],Bng=[i,'raw:-254.1','raw:-5.36','raw:-100.29',D,D,D,D],CSQ=[B,K,'6259'],CSP=[B,K,'4259'],BVz=[B,K,OF],BVy=[B,K,OA],CSO=[B,K,'6257'],CSN=[B,K,'4257'],BnZ=[i,wD,'raw:196',IF,D,D,D,D],CDt=[B,K,'6254'],CDs=[B,K,'4254'],Bgk=[i,yf,UQ,Ld,D,D,D,D],BpA=[B,K,'6253'],Boz=[B,K,'4253'],CSM=[B,K,'6252'],CSL=[B,K,'4252'],Bxl=[i,od,Zd,'raw:364',D,D,D,D],CSK=[B,K,'6250'],CSJ=[B,K,'4250'],Bqf=[B,K,'6249'],Bqe=[B,K,'4249'],BXv=[i,dW,eR,dX,D,D,D,D],BeT=[B,K,AUg],BeS=[B,K,ASn],BlL=[i,AHV,AMS,AHW,D,D,D,D],Bvo=[B,K,'6247'],Bvn=[B,K,'4247'],Bnk=[i,'raw:-294.7','raw:-200.1','raw:525.5',D,D,D,D],CSI=[B,K,'6246'],CSH=[B,K,'4246'],Bqd=[B,K,'7018'],BYo=[i,kO,kP,WW,D,D,D,D],Bvm=[B,K,'6245'],Bvl=[B,K,'4245'],Bqc=[P,gB,IG,DU],BqH=[i,'raw:-97','raw:787','raw:86',D,D,D,D],CSG=[B,K,'6244'],CSF=[B,K,'4244'],Bkt=[B,K,'7042'],Bml=[B,K,'6243'],Bmk=[B,K,'4243'],Bks=[P,UN,MR,Lg],BuS=[i,kK,'raw:207','raw:389.5',D,D,D,D],CSE=[B,K,'6242'],CSD=[B,K,'4242'],CDr=[B,K,'7034'],CSC=[B,K,'6241'],CSB=[B,K,'4241'],Bxu=[P,AUE,bo,Or],BhQ=[i,'raw:210','raw:814','raw:289',D,D,D,D],CDq=[B,K,'6240'],CDp=[B,K,'4240'],BlK=[i,Acm,Acn,Aco,D,D,D,D],Bvk=[B,K,'6239'],Bvj=[B,K,'4239'],BdF=[B,K,ASq],BXu=[i,as,IB,WW,D,D,D,D],BeR=[B,K,AUf],BeQ=[B,K,ASm],Bag=[P,Gc,Bw,LP],CDo=[B,K,'7036'],Boy=[i,'raw:52.17','raw:-71.82','raw:-14.9',D,D,D,D],CSA=[B,K,'6237'],CRz=[B,K,'4237'],BuM=[P,'GRS_1967',Bw,gK],BuR=[i,'raw:-637','raw:-549',Zh,D,D,D,D],CRy=[B,K,'6236'],CRx=[B,K,'4236'],BkG=[i,'raw:-346',AEr,'raw:224',D,D,D,D],CDn=[B,K,'6232'],CDm=[B,K,'4232'],BWC=[i,Fo,GQ,JE,D,D,D,D],BaI=[B,K,jj],BaH=[B,K,il],Bjm=[i,od,iX,AFD,D,D,D,D],Bqb=[B,K,'6229'],Bqa=[B,K,'4229'],BlJ=[i,ACz,AMT,AHY,D,D,D,D],Bvi=[B,K,'6227'],Bvh=[B,K,'4227'],Bdv=[i,AEd,AFE,ir,D,D,D,D],Box=[B,K,'6225'],Bow=[B,K,'4225'],Bub=[i,iC,'raw:229','raw:-29',D,D,D,D],CRw=[B,K,'6224'],CRv=[B,K,'4224'],BqZ=[B,K,'6223'],BqY=[B,K,'4223'],Bcq=[B,K,ARu],BYn=[i,gV,gW,gX,D,D,D,D],Bjl=[B,K,Abw],Bjk=[B,K,Aau],BaP=[P,OM,An,Ft],BaO=[i,iB,Zz,GV,D,D,D,D],BhB=[B,K,'6221'],BhA=[B,K,'4221'],BhI=[i,AFO,ACT,AJG,D,D,D,D],BqX=[B,K,'6220'],BqW=[B,K,'4220'],Bov=[B,K,'6218'],Bou=[B,K,'4218'],Bxk=[i,sI,'raw:213',eS,D,D,D,D],CRu=[B,K,'6216'],CRt=[B,K,'4216'],BVU=[i,HK,FU,GC,D,D,D,D],BXE=[B,K,Xc],BXD=[B,K,WG],BuX=[i,'raw:-106',Fo,'raw:188',D,D,D,D],CRs=[B,K,'6213'],CRr=[B,K,'4213'],Bpu=[i,AdL,AYD,AYE,D,D,D,D],CDl=[B,K,'6212'],CDk=[B,K,'4212'],Bot=[B,K,'6211'],Bos=[B,K,'4211'],Bcp=[i,yh,ir,yi,D,D,D,D],Bmj=[B,K,'6210'],Bmi=[B,K,'4210'],Bmh=[i,iD,Bn,AUw,D,D,D,D],Bvg=[B,K,'6209'],Bvf=[B,K,'4209'],Bjj=[i,yw,ACV,yx,D,D,D,D],BqV=[B,K,'6208'],BqU=[B,K,'4208'],CRq=[B,K,'6207'],CRp=[B,K,'4207'],BqT=[i,ATR,yj,Ev,D,D,D,D],CDj=[B,K,'6205'],CDi=[B,K,'4205'],BbB=[i,iD,tu,AXI,D,D,D,D],Bkr=[B,K,'6204'],Bkq=[B,K,'4204'],Bah=[i,iC,bi,sK,D,D,D,D],Bji=[B,K,'6203'],Bjh=[B,K,'4203'],BXw=[i,YF,Zn,Zo,eb,ec,ed,ee],Bjg=[B,K,Abv],Bjf=[B,K,Aat],Bje=[i,gY,IB,ATS,D,D,D,D],BqS=[B,K,'6201'],BqR=[B,K,'4201'],BUq=[i,CN,Bj,Br,BK,BK,Cd,CO],BVf=[B,K,IJ],BVe=[B,K,II],CRo=[B,K,'6198'],CRn=[B,K,'4198'],CRm=[B,K,'6197'],CRl=[B,K,'4197'],BnY=[i,'raw:164',hA,ob,D,D,D,D],CDh=[B,K,'6194'],CDg=[B,K,'4194'],Bor=[i,'raw:-70.9','raw:-151.8','raw:-41.4',D,D,D,D],CRk=[B,K,'6193'],CRj=[B,K,'4193'],Bnj=[i,'raw:-206.1','raw:-174.7','raw:-87.7',D,D,D,D],CRi=[B,K,'6192'],CRh=[B,K,'4192'],CRg=[B,K,'6191'],CRf=[B,K,'4191'],Bkp=[B,K,'6190'],Bko=[B,K,'4190'],Bve=[B,K,'6189'],Bvd=[B,K,'4189'],CRe=[B,K,'6188'],CRd=[B,K,'4188'],CFs=[i,Zh,Nm,rF,D,D,D,D],CRc=[B,K,'6184'],CRb=[B,K,'4184'],BxY=[i,AJC,'raw:167',qF,D,D,D,D],CRa=[B,K,'6183'],CRZ=[B,K,'4183'],BuQ=[i,'raw:-425','raw:-169',MS,D,D,D,D],CRY=[B,K,'6182'],CRX=[B,K,'4182'],Bcu=[i,'raw:-189.681','raw:18.3463','raw:-42.7695','raw:-0.33746','raw:-3.09264','raw:2.53861','raw:0.4598'],CRW=[B,K,'6181'],CRV=[B,K,'4181'],CRU=[B,K,'6180'],CRT=[B,K,'4180'],BWD=[i,UR,Pf,RZ,Pg,Ph,Ra,Rb],BbX=[B,K,qz],BbW=[B,K,qA],BYC=[i,LR,JE,au,D,D,D,D],Bgq=[B,K,AWy],Bgp=[B,K,AUa],BnN=[i,AFF,gO,'raw:101',D,D,D,D],CDf=[B,K,'6175'],CDe=[B,K,'4175'],Bmg=[B,K,'7029'],CDd=[B,K,'6174'],CDc=[B,K,'4174'],Bmf=[P,rQ,YY,eS],CDb=[B,K,'6173'],CDa=[B,K,'4173'],BeP=[B,K,'6171'],BlI=[B,K,Afe],BeO=[B,K,AUe],BeN=[B,K,ASl],Bua=[i,iE,'raw:118','raw:426',D,D,D,D],CRS=[B,K,'6169'],CRR=[B,K,'4169'],BnB=[i,AUs,AcX,'raw:322',D,D,D,D],CDZ=[B,K,'6168'],CDY=[B,K,'4168'],BYs=[B,K,fL],BYr=[B,K,ey],BwP=[i,'raw:-173',Acj,Hi,D,D,D,D],CRQ=[B,K,'6165'],CRP=[B,K,'4165'],BnA=[i,ATT,'raw:-138',ZF,D,D,D,D],CDX=[B,K,'6164'],CDW=[B,K,'4164'],BqQ=[B,K,'6163'],BqP=[B,K,'4163'],BkF=[B,K,Afj],BkE=[B,K,Abs],BwO=[i,ZB,yQ,'raw:186.4',D,D,D,D],CRO=[B,K,'6161'],CRN=[B,K,'4161'],CRM=[B,K,'6160'],CRL=[B,K,'4160'],BYB=[i,Uc,Ud,Ue,D,D,D,D],Bgo=[B,K,AWx],Bgn=[B,K,AUZ],BnV=[i,'raw:-0.465','raw:372.095','raw:171.736',D,D,D,D],CRK=[B,K,'6158'],CRJ=[B,K,'4158'],CRI=[B,K,'6157'],CRH=[B,K,'4157'],CDV=[B,K,'6156'],CDU=[B,K,'4156'],BnX=[i,'raw:-83',Xr,sM,D,D,D,D],CDT=[B,K,'6155'],CDS=[B,K,'4155'],Bjd=[i,JF,rI,AJH,D,D,D,D],BqO=[B,K,'6154'],BqN=[B,K,'4154'],BnU=[i,'raw:-133.63','raw:-157.5','raw:-158.62',D,D,D,D],CRG=[B,K,'6153'],CRF=[B,K,'4153'],BVR=[B,K,Fa],BVQ=[B,K,FZ],BnT=[i,'raw:674.374','raw:15.056','raw:405.346',D,D,D,D],CRE=[B,K,'6150'],CRD=[B,K,'4150'],CDR=[B,K,'6149'],CDQ=[B,K,'4149'],BeM=[B,K,'6148'],BlH=[B,K,Afd],BlG=[i,AHb,AFa,AHc,D,D,D,D],Bvc=[B,K,'6147'],Bvb=[B,K,'4147'],Bjc=[B,K,AcB],BZH=[i,Yq,oL,oM,D,D,D,D],BkD=[B,K,Afi],BkC=[B,K,Abr],BcG=[P,Kp,JD,FW],Bme=[B,K,'7044'],Bdu=[i,AIn,bh,AIo,D,D,D,D],Boq=[B,K,'6145'],Bop=[B,K,'4145'],Bmd=[P,Sm,RX,FW],BlF=[i,Acp,Acq,ATK,D,D,D,D],Bva=[B,K,'6144'],BvZ=[B,K,'4144'],BlW=[i,AFb,rF,AHd,D,D,D,D],BvY=[B,K,'6143'],BvX=[B,K,'4143'],BlV=[i,AUy,rF,Acr,D,D,D,D],BvW=[B,K,'6142'],BvV=[B,K,'4142'],CFr=[i,bi,gU,YA,D,D,D,D],CRC=[B,K,'6141'],CRB=[B,K,'4141'],Bmc=[i,tB,gT,AUz,D,D,D,D],BvU=[B,K,'6139'],BvT=[B,K,'4139'],Bdt=[i,kL,AEe,AEf,D,D,D,D],Boo=[B,K,'4135'],BlY=[i,ANZ,ANa,AUJ,AdN,AYG,AdO,AUK],CDP=[B,K,'6134'],CDO=[B,K,'4134'],Bgz=[i,'raw:0.055','raw:-0.541','raw:-0.185','raw:0.0183','raw:-0.0003',rK,'raw:-0.014'],CRA=[B,K,'6133'],CQz=[B,K,'4133'],BnS=[i,'raw:-241.54','raw:-163.64','raw:396.06',D,D,D,D],CQy=[B,K,'6132'],CQx=[B,K,'4132'],BlE=[i,Acs,Act,Acu,D,D,D,D],BvS=[B,K,'6131'],BvR=[B,K,'4131'],BnG=[i,D,D,D,BK,BK,BK,D],BvQ=[B,K,'6130'],BvP=[B,K,'4130'],CQw=[B,K,'6129'],CQv=[B,K,'6128'],BkB=[i,AUL,AYI,ANc,AdQ,'raw:4.6',AYJ,AdR],CDN=[B,K,'6127'],CDM=[B,K,'4127'],BbV=[i,uM,yk,uN,rR,uO,rS,D],Bkn=[B,K,'6124'],Bmb=[B,K,'4124'],BbA=[i,ok,ol,kZ,uQ,uR,rT,uS],Bkm=[B,K,'6123'],Bma=[B,K,'4123'],Bkl=[B,K,'7041'],Bkk=[B,K,'6122'],BmZ=[B,K,'4122'],Bkj=[P,Gj,AZ,CC],Bnf=[i,'raw:-199.87','raw:74.79','raw:246.62',D,D,D,D],CDL=[B,K,'6121'],CQu=[B,K,'4121'],CQt=[B,K,'6120'],BqM=[B,K,'1035'],BqL=[B,K,'4081'],BvO=[B,K,'7058'],BqK=[B,K,'6054'],BvN=[B,K,'4054'],BvE=[P,AFe,jS,Xn],BvM=[B,K,'7057'],BqJ=[B,K,'6053'],BvL=[B,K,'4053'],Bxj=[P,bd,jT,D],CQs=[B,K,'7052'],CDK=[B,K,'6052'],CQr=[B,K,'4052'],CQe=[P,AGM,AFf,D],CQq=[B,K,'7048'],CQp=[B,K,'6047'],CQo=[B,K,'4047'],CQd=[P,AIN,AFg,D],BhN=[B,K,Aas],BhM=[B,K,AWw],CDJ=[B,K,'1032'],CDI=[B,K,'4023'],CQn=[B,K,'1031'],CQm=[B,K,'3906'],BvK=[B,K,'1029'],BvJ=[B,K,'3889'],CDH=[B,K,'1026'],CDG=[B,K,'3824'],CDF=[B,K,'1025'],CDE=[B,K,'3821'],Bxi=[L,fZ],BYA=[A,E,D],BUf=[A,N,X],BUy=[A,I,D],BUT=[A,G,D],BUb=[B,K,AO],BUl=[n,'X',k],BUk=[n,'Y',g],BUd=[L,F],BmW=[A,C,Pw],BVh=[A,I,Bm],CGp=[A,G,'raw:-100000'],BUj=[n,AI,k],BUm=[n,z,g],BUa=[Q,m,X],BVG=[L,f],BaG=[A,W,Pw],CNd=[A,Y,Mo],BbU=[A,C,Qr],BXt=[A,E,SI],BWl=[A,I,Ch],CGo=[A,G,'raw:6600000'],BVD=[L,b],BvH=[L,AGz],Bpr=[A,BW,oe],CDD=[A,BV,lt],Bpq=[A,IC,VX],Bpp=[A,Rf,tv],BUt=[A,N,AS],BlU=[L,EC],Bpo=[A,BW,VY],BvD=[A,BV,RF],BmY=[A,IC,GV],Bxh=[A,Eu,GV],BVY=[A,I,Be],Bae=[A,G,BL],BvC=[n,'Y',k],BvB=[n,'X',g],CNc=[A,C,ZP],Bxg=[A,E,AIp],CGn=[A,I,'raw:2510000'],CGm=[A,G,'raw:6023150'],Bcw=[A,C,GV],Bpn=[L,MV],CNb=[A,C,lu],CNa=[A,E,om],CDC=[A,N,ABV],CNZ=[A,I,'raw:155000'],CNY=[A,G,'raw:463000'],Bpm=[L,Mp],BUX=[A,C,D],BWP=[A,E,Hi],BUg=[A,N,h],BUc=[A,I,Z],BuL=[A,C,iF],Bpl=[A,E,AHA],BxX=[A,N,qW],BVP=[A,I,BL],Bch=[A,G,Dq],CGl=[A,I,'raw:2600000'],BuK=[A,G,fE],BWO=[A,E,La],CGk=[A,I,'raw:1600000'],BUo=[A,G,AB],CGj=[A,I,'raw:5300000'],Bon=[A,G,fF],BxW=[A,I,sl],BxV=[A,I,sm],BxU=[A,I,sn],CNX=[A,I,VL],BWW=[L,As],CNW=[A,C,bp],BWb=[A,E,Bn],CNV=[A,N,uX],BVT=[Q,Aa,p],BUr=[Q,Aa,o],CNU=[A,C,bq],BuJ=[A,E,Ui],CNT=[A,N,uY],CDB=[A,I,AHe],CNS=[A,C,lv],CNR=[A,E,ki],CNQ=[A,N,uZ],CPH=[A,G,'raw:0.023'],CNP=[A,C,lw],CDA=[A,E,AFh],CNO=[A,N,ua],BvA=[A,G,ABE],CNN=[A,C,lx],CNM=[A,E,kj],CCz=[A,N,AAO],BmV=[A,G,iG],CNL=[A,C,br],CNK=[A,E,kk],CNJ=[A,N,ub],CNI=[A,I,'raw:768000'],CNH=[A,C,bs],CNG=[A,E,kl],CNF=[A,N,uc],CNE=[A,I,'raw:763000'],CND=[A,C,bt],CNC=[A,E,km],CNB=[A,N,ud],CNA=[A,I,'raw:441000'],CMz=[A,C,bu],CMy=[A,E,kn],CMx=[A,N,ue],CMw=[A,I,'raw:730000'],CMv=[A,C,ly],CMu=[A,E,ko],CMt=[A,N,uf],CMs=[A,I,'raw:843000'],CCy=[A,G,AMU],CMr=[A,C,bv],CMq=[A,E,kp],CMp=[A,N,ug],CMo=[A,I,'raw:614000'],BuI=[A,C,VZ],BuH=[A,E,Uj],CMn=[A,N,uh],CPG=[A,G,'raw:0.034'],CMm=[A,E,kq],CMl=[A,N,wr],CPF=[A,G,'raw:0.031'],CMk=[A,C,bw],CMj=[A,E,kr],CMi=[A,N,ui],CMh=[A,C,lz],CCx=[A,E,AMV],CMg=[A,N,uj],CPE=[A,G,'raw:0.017'],CMf=[A,C,mA],CMe=[A,E,ks],CMd=[A,N,uk],CPD=[A,G,'raw:0.077'],CMc=[A,C,mB],CMb=[A,E,kt],CMa=[A,N,ul],CMZ=[A,I,'raw:480000'],CPC=[A,G,'raw:0.022'],CMY=[A,C,gL],CMX=[A,E,ku],CMW=[A,N,um],CMV=[A,I,'raw:664000'],CMU=[A,C,mC],CMT=[A,E,kv],CMS=[A,N,un],CPB=[A,G,'raw:0.036'],CMR=[A,C,bx],CCw=[A,E,AMW],CMQ=[A,N,ws],CMP=[A,I,'raw:185000'],CCv=[A,G,'raw:164114.46'],CMO=[A,C,mD],CMN=[A,N,uo],CCu=[A,G,AMX],CMM=[A,C,by],CML=[A,E,kw],CMK=[A,N,up],CMJ=[A,C,bz],CMI=[A,E,kx],CMH=[A,N,uq],CMG=[A,I,'raw:230000'],CMF=[A,C,mE],CME=[A,E,ky],CMD=[A,N,ur],CMC=[A,C,cA],CMB=[A,E,kz],CMA=[A,N,us],CLz=[A,I,'raw:671000'],CLy=[A,C,mF],CLx=[A,E,lA],CLw=[A,N,ut],CLv=[A,C,mG],CLu=[A,E,lB],CLt=[A,N,uu],CLs=[A,C,cB],CCt=[A,E,AHf],CLr=[A,N,wt],CLq=[A,I,'raw:245000'],CCs=[A,G,'raw:180607.47'],CLp=[A,C,mH],CLo=[A,E,lC],CLn=[A,N,uv],CLm=[A,I,'raw:381000'],CLl=[A,C,cC],CLk=[A,E,lD],CLj=[A,N,uw],CLi=[A,I,'raw:651000'],CLh=[A,C,mI],CLg=[A,E,lE],CLf=[A,N,ux],CLe=[A,C,Gt],BuG=[A,E,nR],CLd=[A,N,uy],CPA=[A,G,'raw:0.004'],CLc=[A,C,mJ],CLb=[A,E,lF],CLa=[A,N,uz],Buz=[A,G,ABF],CLZ=[A,C,mK],CLY=[A,E,lG],CCr=[A,N,ABW],CGi=[A,I,'raw:88582.5'],CLX=[A,C,mL],CLW=[A,E,lH],CLV=[A,N,vA],CLU=[A,I,'raw:725000'],CCq=[A,G,AMY],CLT=[A,C,mM],CLS=[A,E,lI],CLR=[A,N,vB],CLQ=[A,I,'raw:371000'],COz=[A,G,'raw:0.015'],CLP=[A,C,cD],CLO=[A,N,vC],CLN=[A,I,'raw:495000'],CLM=[A,C,cE],CLL=[A,E,lJ],CLK=[A,N,vD],CLJ=[A,I,'raw:558000'],CLI=[A,C,mN],CCp=[A,E,AMZ],CLH=[A,N,vE],COy=[A,G,'raw:0.033'],CLG=[A,C,mO],CLF=[A,E,lK],CLE=[A,N,vF],COx=[A,G,'raw:0.052'],CLD=[A,C,mP],CLC=[A,E,lL],CLB=[A,N,vG],COw=[A,G,'raw:0.021'],CLA=[A,C,cF],CKz=[A,E,lM],CKy=[A,N,wu],CKx=[A,C,mQ],CKw=[A,E,lN],CKv=[A,N,vH],CKu=[A,C,mR],BxT=[A,E,bB],CKt=[A,N,vI],CKs=[A,I,'raw:194000'],CKr=[A,C,Xk],CKq=[A,E,lO],CKp=[A,N,vJ],CKo=[A,I,'raw:521000'],CKn=[A,C,mS],CCo=[A,E,AFi],CKm=[A,N,vK],COv=[A,G,'raw:0.025'],CKl=[A,C,gM],CKk=[A,E,lP],CKj=[A,N,vL],CKi=[A,I,'raw:811000'],CKh=[A,C,hV],CKg=[A,E,mT],CKf=[A,N,vM],CKe=[A,C,cG],CKd=[A,E,lQ],CCn=[A,N,AAP],CCm=[A,C,AVB],CKc=[A,E,lR],CKb=[A,N,vN],CKa=[A,C,cH],CKZ=[A,E,lS],CKY=[A,N,vO],CKX=[A,I,'raw:197000'],CKW=[A,C,mU],CCl=[A,E,AMa],CKV=[A,N,vP],CCk=[A,G,AMb],CKU=[A,C,cI],CKT=[A,E,lT],CKS=[A,N,vQ],CKR=[A,C,mV],CKQ=[A,E,lU],CKP=[A,N,vR],BcA=[A,C,NX],CCj=[A,E,AFF],Bds=[A,N,RC],CCi=[A,G,'raw:15091.833'],CKO=[A,C,cJ],CKN=[A,E,lV],CKM=[A,N,vS],CKL=[A,C,mW],CCh=[A,E,AHg],CKK=[A,N,vT],CKJ=[A,C,mX],CKI=[A,E,lW],CKH=[A,N,vU],COu=[A,G,'raw:0.006'],CKG=[A,C,mY],CKF=[A,N,vV],COt=[A,G,'raw:0.012'],CKE=[A,I,wv],COs=[A,G,'raw:0.007'],CKD=[A,G,'raw:0.0034'],CCg=[A,G,AHh],CKC=[A,G,'raw:0.0103'],CKB=[A,G,'raw:0.0096'],CKA=[A,G,'raw:0.0051'],CJz=[A,G,'raw:0.0234'],CJy=[A,G,'raw:0.0068'],CJx=[A,G,'raw:0.0109'],CJw=[A,G,'raw:0.0059'],CCf=[A,G,AHi],CCe=[A,G,AHj],CJv=[A,G,'raw:0.0032'],CJu=[A,G,'raw:0.0058'],CJt=[A,G,'raw:0.0012'],CJs=[A,G,'raw:0.0009'],COr=[A,I,'raw:27000'],COq=[A,G,'raw:25000'],CJr=[A,G,'raw:0.0085'],CJq=[A,G,'raw:0.0045'],CJp=[A,G,'raw:0.0157'],CJo=[A,G,'raw:0.0063'],CCd=[A,I,'raw:51816.104'],CJn=[A,G,'raw:0.0023'],CJm=[A,G,'raw:0.0076'],CJl=[A,G,'raw:0.0086'],CFq=[A,I,'raw:60045.72'],CJk=[A,G,'raw:0.0049'],CJj=[A,G,'raw:0.0048'],COp=[A,I,'raw:31600'],CPp=[A,G,'raw:4600'],COo=[A,I,'raw:93150'],CJi=[A,G,'raw:0.0017'],CJh=[A,G,'raw:0.0037'],BZN=[A,E,TP],BXz=[A,E,Ny],BWt=[A,E,Iq],BmU=[A,C,fg],CCc=[A,E,AHk],Bdr=[A,N,Pl],BVx=[A,I,Cz],BVw=[A,G,DA],BVv=[A,I,DB],BVu=[A,G,DZ],BuF=[A,C,qi],BuE=[A,E,nS],BuD=[A,C,tw],Bdq=[A,N,Pm],CCb=[A,C,AVC],BuC=[A,E,qj],Bdp=[A,N,Pn],BuB=[A,C,tx],Bkh=[A,E,dC],CCa=[A,N,ADD],BYb=[A,C,Mi],BmT=[A,E,oN],CCZ=[A,N,ADE],BmS=[A,C,fh],CCY=[A,E,AHl],CCX=[A,N,ADF],BuA=[A,C,ty],CCW=[A,E,AMc],Btz=[A,N,jU],CCV=[A,E,AMd],BjY=[A,N,TG],CCU=[A,C,AVD],BmR=[A,E,dr],CCT=[A,N,ADG],CCS=[A,E,AHm],Bty=[A,N,hF],CCR=[A,C,AMe],BmQ=[A,E,fi],CCQ=[A,E,AMf],Btx=[A,C,tz],CCP=[A,E,AHn],Btw=[A,N,hG],Btv=[A,C,jI],CJg=[A,C,UK],Btu=[A,E,nT],Bdo=[A,N,Po],CCO=[A,C,AMg],BmP=[A,E,fj],BmO=[A,N,ZR],BmN=[A,C,iH],CCN=[A,E,AHo],BjX=[A,N,TH],Btt=[A,C,uA],CCM=[A,E,AMh],Bts=[A,C,jJ],Btr=[A,E,nU],BxS=[A,N,qX],CCL=[A,C,AVE],BmM=[A,E,ds],CCK=[A,C,AVF],Btq=[A,E,qk],BmL=[A,N,ZS],CCJ=[A,C,AMi],CCI=[A,E,AHp],CCH=[A,C,AVG],Btp=[A,E,ql],CCG=[A,C,AVH],CCF=[A,E,AHq],Bto=[A,C,OW],Btn=[A,E,qm],Btm=[A,C,qn],CJf=[A,C,UL],Bkg=[A,N,WK],CCE=[A,C,AMj],CCD=[A,C,AMk],BjW=[A,N,TI],CCC=[A,C,AVI],Bcg=[A,E,RO],CCB=[A,E,AMl],Btl=[A,C,qo],CCA=[A,E,AHr],Btk=[A,E,qp],CBz=[A,C,AMm],Btj=[A,E,nV],BxR=[A,N,qY],CBy=[A,C,AVJ],Bti=[A,E,nW],CBx=[A,C,AVK],CBw=[A,E,AHs],CBv=[A,C,AMn],CBu=[A,E,AMo],Bth=[A,N,hH],CJe=[A,C,UM],BxQ=[A,N,qZ],CBt=[A,C,AVL],CBs=[A,C,AMp],CBr=[A,E,AMq],BxP=[A,N,qa],CBq=[A,E,AHt],BxO=[A,N,qb],CBp=[A,E,AMr],CBo=[A,N,ADH],CBn=[A,E,AMs],CBm=[A,C,AVM],CBl=[A,E,AHu],Btg=[A,C,Gy],CBk=[A,C,AMt],CBj=[A,E,AMu],CBi=[A,C,AMv],Btf=[A,C,Va],Bte=[A,E,Vb],Btd=[A,I,ep],CBh=[A,G,AAQ],CBg=[A,E,AFj],CBf=[A,N,ADI],CJd=[A,I,'raw:157480'],COn=[A,G,'raw:78740'],COm=[A,I,'raw:48000'],COl=[A,G,'raw:24000'],CJc=[A,C,mZ],CJb=[A,E,lX],CBe=[A,N,AFk],Bom=[A,I,EV],CJa=[A,C,cK],CJZ=[A,E,lY],CBd=[A,N,ABX],Btc=[A,I,Zp],BxN=[A,G,MI],BVd=[Q,Aju,BX],CJY=[A,C,qq],CBc=[A,E,AFl],CBb=[A,N,ADJ],Bol=[A,I,RY],CJX=[A,G,RY],CJW=[A,W,qq],CJV=[A,C,dD],CBa=[A,E,AFm],CBZ=[A,N,ADK],Btb=[A,C,Ot],BXR=[A,E,Fd],CBY=[A,N,AFn],CJU=[A,W,Ot],BjV=[A,N,VM],BmK=[A,C,dZ],CBX=[A,E,AHv],CJT=[A,W,dZ],BXs=[A,E,Kx],CBW=[A,N,ADL],Bta=[A,I,Ye],BtZ=[A,C,eY],BtY=[A,E,nX],CBV=[A,N,AFo],BmJ=[A,N,bH],BWV=[A,I,CU],BmI=[A,G,MG],BXV=[A,G,CU],CJS=[A,G,Fi],BXc=[A,I,Fi],BWz=[A,E,MS],BWs=[A,E,Lw],BZh=[A,E,OQ],BWe=[A,E,Ev],BWn=[A,E,Gy],BjU=[A,C,Np],CJR=[A,E,'raw:-91.25'],Bgj=[A,I,RS],BxM=[A,G,fG],BbT=[A,I,Mt],CGh=[A,G,'raw:6400000'],CJQ=[A,E,'raw:-93.75'],Baz=[A,I,MN],BbS=[A,I,Mu],CGg=[A,G,'raw:7600000'],Bay=[A,I,MO],BbR=[A,I,Mv],BbQ=[A,I,Mw],BmH=[A,N,ZT],Bcf=[A,I,Om],CFp=[A,N,'raw:1.000039'],BbP=[A,I,Mx],CJP=[A,E,'raw:-92.25'],BbO=[A,I,My],Bad=[A,I,LW],CGf=[A,G,'raw:8600000'],COk=[A,E,'raw:-91.2'],Bax=[A,I,MP],CJO=[A,E,'raw:-92.75'],Bgi=[A,I,RT],CGe=[A,G,'raw:9800000'],CPo=[A,C,'raw:43.2'],CJN=[A,E,'raw:-95.25'],CFo=[A,N,'raw:1.000052'],Bdn=[A,I,Pp],BxL=[A,C,cL],BxK=[A,E,cM],BxJ=[A,N,oU],BxI=[A,I,kd],BxH=[A,G,oV],CJM=[A,W,Gy],BZM=[A,C,Qx],BmG=[A,E,hd],Bjb=[B,K,'9108'],CQl=[L,fb],CJL=[A,W,Gn],BeA=[L,DI],BxG=[A,BV,D],BVX=[A,C,Bn],Bpk=[A,BW,GV],Bpt=[A,W,Zj],BtX=[A,Y,Hh],BXT=[A,C,Go],BtW=[A,E,nY],BYa=[A,I,DT],Bdm=[A,W,Mo],Bdl=[A,Y,Dj],BWi=[A,C,Bc],BWB=[A,E,DJ],Bok=[A,I,Yf],BWL=[A,I,CI],Bdk=[A,W,PG],Bdj=[A,Y,FA],BYN=[A,C,CK],Boj=[A,I,Yg],BXy=[A,I,EU],BZg=[A,W,NX],BZu=[A,Y,Gx],BjT=[A,C,Ea],BXb=[A,E,HY],BXQ=[A,I,DO],Bdi=[A,W,IE],BjS=[A,Y,NO],BYM=[A,C,DK],BYZ=[A,E,OY],BYY=[A,I,Em],CJK=[A,N,'raw:0.9985'],BtV=[A,I,fH],BaF=[A,Y,IE],BZf=[A,C,NP],Boi=[A,I,Yh],BtU=[A,C,Vc],BtT=[A,E,nZ],BtS=[A,N,hI],BtR=[A,C,FA],BtQ=[A,E,Uk],BtP=[A,N,jV],BjR=[A,I,MI],Baw=[A,I,MG],BtO=[A,C,IE],BtN=[A,E,jW],BtM=[A,N,hJ],BtL=[A,C,Vd],Boh=[A,E,Qd],BtK=[A,N,hK],CJJ=[A,I,eq],BtJ=[A,I,dE],BtI=[A,C,jK],BtH=[A,E,Ul],CJI=[A,I,dI],CJH=[A,I,qr],BlD=[L,Gb],Bpj=[A,BW,dD],Bpi=[A,BV,jX],Bph=[A,IC,WW],CBU=[A,Eu,WW],CJG=[A,I,vW],CJF=[A,G,rW],BlC=[L,Bz],CBT=[A,I,AFp],CBS=[A,G,ADM],BtG=[A,C,jL],BXx=[A,E,JF],BtF=[A,N,na],BjQ=[A,I,Pa],Bgh=[A,I,YJ],BZE=[A,C,Ev],BbN=[A,E,TD],BtE=[A,N,jY],BmF=[A,I,UV],BjP=[A,I,aD],BtD=[A,E,Um],BtC=[A,N,jZ],CBR=[A,I,ABY],CBQ=[A,I,ABG],Bbz=[A,E,Fr],BtB=[A,C,jM],BtA=[A,E,Un],BjO=[A,C,Ux],Bsz=[A,E,JE],Bsy=[A,N,ja],BZt=[A,C,Co],Bsx=[A,N,hL],Bpg=[A,BW,RG],Bpf=[A,BV,Oi],Bpe=[A,IC,Yq],CBP=[A,Eu,Yq],CJE=[A,I,sq],CJD=[A,G,vX],BxF=[A,G,qc],BbM=[A,C,FB],Bsw=[A,N,hM],CJC=[A,G,eq],CJB=[A,W,FB],BxE=[A,G,dE],BYX=[A,C,Ls],Bsv=[A,N,jb],Bsu=[A,E,jc],BjN=[A,N,YC],CJA=[A,I,ww],CIz=[A,G,dI],Bdh=[A,W,CK],CBO=[A,I,AHw],CIy=[A,G,qr],Bst=[A,C,Ou],Bss=[A,E,jd],CIx=[A,G,wx],CIw=[A,W,Ou],CBN=[A,G,AHx],Bsr=[A,E,je],Bsq=[A,E,Uo],BXj=[A,E,MM],BWf=[A,E,Ki],BWk=[A,E,IF],CBM=[A,E,AHy],BYL=[A,G,CI],CGd=[A,G,'raw:1400000'],CBL=[A,E,AFq],BmE=[A,G,VL],BWR=[A,E,HI],BWH=[A,E,Gz],Bog=[A,E,bg],BYW=[A,E,OR],BYK=[A,E,Nm],BWd=[A,E,Gl],BWQ=[A,E,GO],BWU=[A,E,GU],BYm=[A,C,LR],Bsp=[A,E,qG],BxD=[A,C,hd],BmD=[A,E,Zz],Bdg=[A,E,bj],BxC=[A,E,sM],BmC=[A,E,fk],Buy=[A,E,AIq],BZL=[A,C,Mo],BxB=[A,E,wW],BxA=[A,E,wX],Bwz=[A,E,wY],BXM=[A,C,Gx],Bwy=[A,E,cN],Bwx=[A,E,cO],Bux=[A,E,ABH],Bww=[A,E,cP],Bwv=[A,E,cQ],Bdf=[A,C,HA],Bso=[A,E,qs],Bwu=[A,E,cR],Buw=[A,E,ABI],CIv=[A,C,ma],CIu=[A,E,Qr],CBK=[A,N,AHz],BXP=[A,I,Ci],CIt=[A,C,uB],CBJ=[A,E,AIA],BYV=[A,E,Mj],BZK=[A,E,OL],Bac=[A,E,Qs],Bkf=[A,C,NF],Bce=[A,E,SL],Bav=[A,N,NZ],Bsn=[A,C,Ve],Bsm=[A,E,Up],Bsl=[A,C,Vf],Bsk=[A,E,nb],Bsj=[A,C,Vg],Bsi=[A,E,Uq],BWN=[A,N,CT],Bsh=[A,C,Vh],Bsg=[A,E,nc],Bcd=[A,W,SB],Bcc=[A,Y,GI],BWJ=[A,C,Bb],BWm=[A,E,Ew],CBI=[A,G,AFr],BZD=[A,W,Db],Bcb=[A,Y,GJ],Bby=[A,C,GK],BjM=[A,G,Eb],Bca=[A,W,OW],BcZ=[A,Y,GL],BYl=[A,C,CY],BeL=[L,EX],BmB=[A,W,cr],Bbx=[A,Y,PG],BeK=[L,Pk],Bau=[A,E,OX],Bbw=[A,G,Em],BVg=[A,G,BN],BYH=[A,G,BJ],BWy=[A,C,Fy],Bgg=[A,E,St],BWF=[A,N,Cb],BVj=[A,I,CH],Bgf=[A,E,IP],BZC=[A,I,FE],BZB=[A,G,EV],Bge=[A,E,IQ],Bgd=[A,E,IR],BjL=[A,I,Pb],Bsf=[A,I,nd],Bse=[A,G,hN],BjK=[A,W,JH],BjJ=[A,Y,JI],Bde=[A,C,Pv],BjI=[A,W,JJ],BjH=[A,Y,JK],Bgc=[A,C,JL],BjG=[A,W,JM],BjF=[A,Y,JN],Bgb=[A,C,Xr],BVm=[A,E,EW],BjE=[A,W,Np],BjD=[A,Y,Gy],Bga=[A,C,aW],BZs=[A,E,Nq],BjC=[A,W,JO],BjB=[A,Y,Hm],BgZ=[A,C,JP],BXa=[A,I,Bq],BaE=[A,W,EG],BjA=[A,Y,Xl],BZA=[A,C,Qi],BgY=[A,E,IS],BZr=[A,W,EH],BgX=[A,Y,EI],BXr=[A,C,Cp],BZe=[A,E,Hv],Biz=[A,I,Op],Bbv=[A,G,LL],BXO=[A,I,Da],Biy=[A,W,aX],Bix=[A,Y,JQ],BXq=[A,C,Cq],Biw=[A,G,DX],Bsd=[A,W,Xr],Bsc=[A,Y,Zj],BgW=[A,E,YK],BgV=[A,N,ON],Biv=[A,W,JR],Biu=[A,Y,JS],BgU=[A,C,Dc],BXU=[A,E,Le],Bsb=[A,G,bR],BgT=[A,G,Kk],BcY=[A,W,Dc],BcX=[A,Y,GM],Bdd=[A,C,Hn],BXp=[A,E,Hw],BmA=[A,I,dt],Bsa=[A,G,bS],BVl=[A,I,By],Bdc=[A,G,Iz],Bit=[A,W,JT],Bis=[A,Y,JU],BgS=[A,C,JV],Bir=[A,W,JW],Biq=[A,Y,SC],BgR=[A,C,TQ],BgQ=[A,E,VC],BXZ=[A,I,EP],Bip=[A,W,ZB],Bio=[A,Y,QY],BgP=[A,C,Qj],CBH=[A,BW,Qj],Buv=[A,BV,HY],Bdb=[A,G,MB],Bin=[A,W,JX],Bim=[A,Y,JY],Bda=[A,C,Ho],BZd=[A,E,Dx],Bbu=[A,I,LM],Bil=[A,W,JZ],Bik=[A,Y,YL],BZq=[A,C,Cr],Bij=[A,W,Xk],Bii=[A,Y,Co],BgO=[A,C,Dj],Bih=[A,W,Ja],Big=[A,Y,Jb],Bif=[A,W,Li],Bie=[A,Y,NL],BgN=[A,C,Jc],BVW=[A,I,BJ],BsZ=[A,I,ne],BgM=[A,C,Jd],BZc=[A,E,Mg],Bid=[A,N,Qb],Bke=[A,W,NG],Bkd=[A,Y,NH],Bkc=[A,C,NI],Bkb=[A,E,Me],BgL=[A,W,Je],BgK=[A,Y,Jf],BXi=[A,C,Cl],BZb=[A,E,Lx],Bic=[A,W,YM],Bib=[A,Y,Jg],BZp=[A,C,Ec],Bia=[A,W,Jh],BiZ=[A,Y,Ji],BgJ=[A,C,Jj],BXh=[A,E,GQ],BgI=[A,W,EI],BiY=[A,Y,Jk],BgH=[A,C,QY],BiX=[A,W,Jl],BiW=[A,Y,Jm],BWT=[A,C,IN],BYk=[A,E,Lc],BiV=[A,W,aY],BiU=[A,Y,Jn],Bat=[A,C,FR],BiT=[A,W,Jo],BiS=[A,Y,Jp],BZa=[A,E,Ly],Bbt=[A,I,LN],BiR=[A,Y,Jq],BiQ=[A,W,FS],BiP=[A,Y,Cr],BgG=[A,C,YN],BdZ=[A,E,Zy],BsY=[A,I,fn],BgF=[A,E,IT],BsX=[A,I,dJ],Blz=[A,I,du],BgE=[A,W,Jr],BgD=[A,Y,Ff],BgC=[A,E,at],BZo=[A,C,Ed],BaD=[A,E,NQ],BiO=[A,I,YD],BgB=[A,E,IU],BWp=[A,I,Dq],BWA=[A,C,FP],BgA=[A,E,IV],Bfz=[A,N,OO],BsW=[A,I,dK],BsV=[A,I,nf],Bfy=[A,E,IW],BcW=[A,N,MJ],BsU=[A,I,hO],BsT=[A,I,ng],Bfx=[A,E,Su],Bfw=[A,E,IX],BXg=[A,C,Hb],Bfv=[A,E,IY],BsS=[A,G,aI],Bfu=[A,E,IZ],BsR=[A,G,Vi],BsQ=[A,G,VN],Bft=[A,E,Ia],BsP=[A,G,hP],BiN=[A,Y,Ev],BiM=[A,C,NO],BcV=[A,E,Rd],Bof=[A,C,FS],Boe=[A,E,jN],BWj=[A,N,Cu],BsO=[A,I,nh],BdY=[A,C,Hp],Bod=[A,E,jO],BWx=[A,N,DQ],Bas=[A,E,Pu],BaC=[A,C,Lt],BcU=[A,E,Ga],BWh=[A,N,EE],BdX=[A,C,NL],BsN=[A,E,ni],BsM=[A,N,fo],Bfs=[A,E,Ib],BiL=[A,W,Js],BiK=[A,Y,Jt],BdW=[A,E,bk],BiJ=[A,W,Ju],BiI=[A,Y,Jv],Bfr=[A,E,YO],BiH=[A,W,YP],BiG=[A,Y,Jw],Bfq=[A,E,VD],BiF=[A,Y,da],BaB=[A,E,Eg],BsL=[A,I,dL],Bfp=[A,I,Kk],Bpd=[A,BW,Vj],Bpc=[A,BV,RO],Bpb=[A,IC,Xx],CBG=[A,Eu,Xx],BsK=[A,I,dM],BsJ=[A,G,bT],BiE=[A,W,Lj],BiD=[A,Y,Lk],BiC=[A,C,Ll],BXS=[A,E,Fo],BsI=[A,I,dN],BsH=[A,I,VN],BiB=[A,W,db],BiA=[A,Y,Lm],Bhz=[A,C,Ln],BsG=[A,I,dO],Bly=[A,I,MB],Bhy=[A,W,Jx],Bfo=[A,Y,Hq],BsF=[A,G,jf],Boc=[A,G,VE],Bhx=[A,W,Jy],Bhw=[A,Y,Jz],BbL=[A,E,Qo],Bhv=[A,W,UK],Bhu=[A,Y,aZ],Bbs=[A,E,UQ],BsE=[A,I,dP],Bfn=[A,E,Ic],Bht=[A,I,VO],BdV=[A,I,NB],BsD=[A,E,jg],Bab=[A,N,Md],BsC=[A,E,jh],BsB=[A,C,uC],BsA=[A,E,ji],Bhs=[A,W,aa],Bhr=[A,Y,ab],Bhq=[A,C,ac],Bbr=[A,E,Fs],Bfm=[A,I,Eb],BWa=[A,I,BN],Bhp=[A,W,EJ],Bho=[A,Y,Gu],Bar=[A,C,Qt],Bhn=[A,W,KA],Bhm=[A,Y,KB],BZZ=[A,E,Lz],BXY=[A,G,Bq],BWE=[A,G,Z],Bhl=[A,W,Lo],Bhk=[A,Y,Lp],Bhj=[A,I,VP],Bfl=[A,Y,KC],BXf=[A,C,Hh],Bfk=[A,E,VF],Bfj=[A,W,KD],Bfi=[A,Y,KE],Bhi=[A,G,DT],Baa=[A,G,Bm],Bfh=[A,W,KF],Bfg=[A,Y,KG],Bff=[A,Y,KH],BZY=[A,E,NR],Bfe=[A,W,Gt],Bfd=[A,Y,KI],Bfc=[A,E,Id],CIs=[A,G,ke],Bfb=[A,E,Ie],Brz=[A,I,er],Bfa=[A,E,If],Bry=[A,I,Vk],BfZ=[A,E,Ig],BdU=[A,N,Pq],BfY=[A,E,Sv],Brx=[A,I,dQ],BfX=[A,E,Ih],BZX=[A,N,Fu],Bbq=[A,E,Uy],BXX=[A,C,Gn],BfW=[A,E,Ii],BfV=[A,E,Ij],BZW=[A,C,EK],BfU=[A,E,eT],BfT=[A,W,YQ],BfS=[A,Y,KJ],BfR=[A,C,Zd],BfQ=[A,E,YR],Brw=[A,W,NY],Brv=[A,Y,uD],CBF=[A,BW,NY],CBE=[A,BV,bl],CIr=[A,C,NY],Bhh=[A,E,bl],BfP=[A,E,Ik],BfO=[A,N,RU],BfN=[A,W,KK],BfM=[A,Y,ad],BfL=[A,C,KL],BfK=[A,E,VG],Bru=[A,I,Gq],Brt=[A,G,dR],BZV=[A,W,EL],BfJ=[A,Y,KM],Bbp=[A,I,LO],Bbo=[A,G,Gq],Bhg=[A,W,KN],Bhf=[A,Y,KO],BfI=[A,W,UL],BfH=[A,Y,UM],BdT=[A,C,Hr],BfG=[A,W,KP],BfF=[A,Y,KQ],BfE=[A,C,KR],BfD=[A,E,Sw],BYG=[A,I,DX],BfC=[A,W,KS],BfB=[A,Y,KT],BfA=[A,C,ae],Bez=[A,W,YS],Bey=[A,Y,Go],Bex=[A,C,KU],Bew=[A,E,Zi],Bev=[A,Y,KV],Beu=[A,C,af],Bet=[A,W,Ea],Bes=[A,Y,CY],BZU=[A,E,Oj],Ber=[A,W,Bc],Bob=[A,W,TQ],Boa=[A,Y,Fy],Bwt=[A,BW,D],Bxf=[A,BV,ag],BoZ=[A,G,dh],BlB=[A,E,ag],Beq=[A,W,KW],Bep=[A,Y,Pd],Beo=[A,C,EJ],BZT=[A,E,Og],Ben=[A,W,KX],Bem=[A,Y,KY],Bel=[A,E,Sx],Bbn=[A,I,QN],Bek=[A,E,Il],Bej=[A,E,Im],Brs=[A,W,Vl],Brr=[A,Y,Vm],Blx=[A,C,Iq],Brq=[A,E,uE],BXL=[A,C,Kt],BoY=[A,E,of],Brp=[A,E,gY],Bro=[A,E,uF],Bka=[A,E,ah],BkA=[A,E,dc],Brn=[A,E,uG],Brm=[A,E,uH],Bpa=[A,BW,Ny],BpZ=[A,BV,Ur],BpY=[A,IC,MW],BqI=[A,Eu,MW],Bei=[A,I,Iz],BZJ=[A,G,He],BnM=[A,W,gU],Beh=[A,Y,cq],CBD=[A,BW,fQ],CBC=[A,BV,ah],Bws=[A,C,fQ],CPn=[A,Y,'raw:19.7'],CGc=[A,I,'raw:2950000'],CGb=[A,G,'raw:1900000'],Bco=[P,wn,x,AC],BcC=[i,Xq,LT,Hv,D,CP,aC,D],BdS=[A,E,Go],BWg=[A,E,HA],BYz=[A,E,Gn],BYU=[A,E,NY],CBB=[A,W,AEg],CIq=[A,Y,Lt],Brl=[A,C,OY],Buu=[A,E,AEh],BYT=[A,E,NN],BZS=[A,E,Ok],BoX=[A,E,Qe],Bhe=[A,N,VQ],BcT=[A,W,CQ],BcS=[A,Y,ZF],BcR=[A,C,Gv],BYy=[A,E,Ne],BcQ=[A,G,Hf],BaZ=[A,E,Qu],BYj=[A,W,Bu],BYi=[A,Y,CQ],BYh=[A,C,Dd],BaY=[A,I,LX],BYS=[A,G,Di],CIp=[A,E,yj],Baq=[A,I,MQ],BoW=[A,W,Lt],Bxe=[A,BW,aq],Bxd=[A,BV,eU],Bxt=[A,C,aq],BlA=[A,E,eU],BWZ=[A,E,Ge],BWo=[A,E,IK],Bap=[A,E,Oi],BaA=[A,E,PH],BZz=[A,E,QC],BZn=[A,E,LT],BYF=[A,E,Lu],BXo=[A,E,Mn],BoV=[P,'bessel',Ai,AY],BbK=[A,I,MC],CFn=[A,G,'raw:-3500000'],BYx=[A,E,PC],BYg=[A,E,Oh],CIo=[A,I,vY],BXn=[B,K,aT],BXN=[Q,aS,BX],But=[A,E,AUo],Bwr=[A,I,qd],BYw=[A,W,JA],BaX=[A,Y,Bu],BaW=[A,C,FC],CPm=[A,E,'raw:-155'],BZm=[A,G,Du],BbJ=[A,W,DL],BYR=[A,Y,JA],BbI=[A,C,Fg],BbH=[A,G,Da],CQT=[A,E,'raw:176'],BdR=[A,W,Ep],BdQ=[A,Y,DL],BdP=[A,C,Hs],BcP=[A,G,EU],Brk=[A,E,wF],Bhd=[A,I,TJ],CQS=[A,E,'raw:133'],Bbm=[A,I,Ns],Blw=[A,W,LC],Blv=[A,Y,Ep],Blu=[A,C,Ov],Beg=[A,E,eV],BYP=[A,E,GV],Bbl=[A,I,Nt],CPl=[A,E,'raw:-113'],BkZ=[A,I,WL],BkY=[A,I,WM],BkX=[A,I,WN],CPk=[A,E,'raw:-131'],BdO=[A,I,Pr],Bbk=[A,I,Nu],BoU=[A,E,iE],Bus=[A,E,AIs],CQR=[A,E,'raw:158'],CBA=[A,E,Acv],CQY=[A,E,'raw:95'],BpX=[A,E,AHB],BkW=[A,E,Kt],BkV=[A,I,WO],BkU=[A,I,WP],CQQ=[A,E,'raw:130'],BkT=[A,I,WQ],BpW=[A,E,ABx],BkS=[A,I,WR],CQX=[A,E,'raw:82'],BcO=[A,I,On],BcN=[A,I,Oo],Bwq=[A,E,sL],BZy=[A,E,Rp],CQW=[A,E,'raw:83'],Bbj=[A,I,Nv],BoT=[A,E,TQ],Brj=[A,E,yQ],BcM=[A,E,Ze],Bri=[A,E,wD],CIn=[A,W,Vn],CIm=[A,Y,mc],CIl=[A,C,md],CAz=[A,E,ABy],CIk=[A,G,RD],CAy=[A,E,Acw],CIj=[A,W,ZF],CIi=[A,Y,Vn],CIh=[A,C,me],CQP=[A,E,'raw:-34'],Bwp=[A,G,MC],BXm=[A,E,Ld],CQO=[A,E,'raw:-20'],BpV=[A,E,ABz],BkR=[A,I,WS],CAx=[A,E,Acx],BkQ=[A,I,WT],BdN=[A,E,bm],BkP=[A,I,WU],CQN=[A,E,'raw:-14'],CQM=[A,E,'raw:-64'],Bur=[A,E,AIt],CAw=[A,E,Acy],BcF=[L,EZ],BWK=[A,E,Fl],BoS=[A,N,jP],BuP=[L,Nc],Buq=[A,W,GV],Bef=[A,E,Qj],BZx=[A,E,So],BoR=[A,W,OQ],BoQ=[A,Y,kL],BoP=[A,C,RH],BoO=[A,Y,OQ],BoN=[A,C,RI],BoM=[A,W,yR],BoL=[A,C,bK],CQc=[A,C,kK],CQb=[A,W,kK],Bxq=[L,hX],BdM=[A,E,aA],BWY=[A,E,GX],CFm=[A,N,'raw:1.000086'],BkO=[A,G,Be],BYv=[A,I,Di],BYJ=[A,I,Du],Blt=[A,E,kG],CIg=[A,I,'raw:500053'],CFl=[A,G,'raw:-3999820'],BUz=[B,K,DC],CIf=[A,I,'raw:815000'],CIe=[L,qe],BoK=[A,W,QY],BeJ=[A,C,YA],BoJ=[A,G,fI],Bxc=[A,BW,YA],Bup=[A,BV,Ze],BoI=[A,I,fJ],BoH=[A,G,fK],CId=[A,E,'raw:-88.75'],CIc=[A,E,lZ],CAv=[A,I,'raw:217259.26'],CAu=[A,G,'raw:445474.83'],BvI=[B,K,'9005'],BqE=[Q,qE+" "+bN,bU],Buo=[A,E,ABJ],BoG=[A,N,di],BdL=[A,I,Hf],BYu=[A,E,PZ],BWr=[A,E,GT],Bun=[A,E,AEi],BpU=[A,C,ACA],Brh=[A,E,nj],Bwo=[A,G,nk],BYq=[n,'X',PL],BYp=[n,'Y',Qv],BnL=[A,E,oO],Bhc=[L,FD],CQa=[A,W,Bn],BZI=[A,Y,Dk],BXW=[A,E,LD],BZR=[A,W,Dy],BZQ=[A,Y,Dz],CIb=[A,C,au],CQL=[A,E,'raw:163'],CPj=[A,C,'raw:8.25'],CAt=[A,G,'raw:1092972.1'],CQK=[A,E,'raw:-80'],CQJ=[A,E,'raw:-89'],CPi=[A,C,'raw:14.9'],CAs=[A,N,AAR],CQZ=[A,W,La],BaV=[A,E,Sp],Bhb=[A,E,gH],BoF=[A,E,sO],Bwn=[A,E,cS],Bum=[A,N,ABK],Bls=[A,I,bI],Blr=[A,G,NB],Bxp=[L,aU],Brg=[A,W,iY],CAr=[A,W,AMz],CAq=[A,Y,ANA],CIa=[A,C,cq],CAp=[A,E,Acz],BdK=[A,I,RE],BZw=[A,G,By],Brf=[A,W,Ux],CAo=[A,Y,AVN],CQV=[A,E,'raw:-7'],CAn=[A,N,ADO],CAm=[A,G,ADP],BYt=[A,G,HF],CIZ=[A,E,mf],CPh=[A,E,'raw:90.5'],COj=[A,E,'raw:91.75'],CAl=[A,E,ANB],CAk=[A,E,ANC],COi=[A,E,'raw:91.35'],COh=[A,E,'raw:89.35'],COg=[A,E,'raw:90.15'],BdJ=[A,E,Pv],Bha=[A,I,VR],BeI=[A,BW,gO],BmX=[A,BV,sP],CAj=[A,IC,wy],Bxb=[A,Eu,gF],BhZ=[A,N,VS],CIY=[A,W,mg],CIX=[A,Y,mh],Bre=[A,E,uI],CIW=[A,N,vZ],CAi=[A,BV,Ls],Blq=[A,E,kN],Blp=[A,E,oP],Bwm=[A,G,gd],CIV=[A,E,mi],BWq=[A,C,LV],CPg=[A,E,'raw:26.5'],CPf=[A,E,'raw:24.5'],CPe=[A,E,'raw:23.5'],CPd=[A,E,'raw:21.5'],CPc=[A,E,'raw:20.5'],CPb=[A,E,'raw:19.5'],CPa=[A,E,'raw:18.5'],Brd=[A,E,uJ],CPZ=[A,E,'raw:15.5'],CPY=[A,E,'raw:14.5'],CIU=[A,E,uB],CAh=[A,E,AVO],CAg=[A,E,AdA],CAf=[A,E,AdB],CQI=[A,E,'raw:7.5'],CQH=[A,E,'raw:6.5'],CQG=[A,E,'raw:5.5'],CIT=[A,E,la],BYE=[A,E,IB],CIS=[A,E,as],CAe=[A,I,'raw:161587.83'],BaU=[A,E,Sq],CQk=[B,K,'4812'],Bao=[A,E,VK],BbG=[A,E,TC],BWS=[A,E,GN],BWX=[A,E,GY],Bbi=[A,E,Yr],Ban=[A,E,UX],BbF=[A,E,ar],BXK=[A,E,LC],Bbh=[A,E,aN],Bam=[A,E,Zf],Blo=[A,I,ZU],Bln=[A,I,ZV],Bwl=[A,W,sQ],Brc=[A,Y,gz],BWI=[A,I,CV],BhY=[A,I,RD],CPX=[A,W,'raw:-6.5'],COf=[A,Y,'raw:-11.5'],BoE=[A,C,OG],Blm=[A,E,LR],CQj=[B,K,'4404'],Bja=[P,Au,IG,TA],Bgy=[L,IH],BjZ=[P,MU,IG,DU],Bgx=[L,QZ],Bal=[A,N,UY],CFk=[A,C,'raw:5.421325'],CAd=[A,G,'raw:55960.906'],CFj=[A,I,'raw:-242.005'],CFi=[A,G,'raw:-948.547'],CQi=[B,K,'4217'],COe=[A,E,'raw:11.75'],Bee=[A,E,aB],BhX=[A,E,kM],BoD=[A,E,yS],CPW=[A,E,'raw:28.4'],CGa=[A,N,'raw:0.99994'],CAc=[A,E,AdD],COd=[A,W,'raw:49.25'],COc=[A,Y,'raw:50.75'],CGZ=[A,G,'raw:9200000'],COb=[A,W,'raw:48.25'],COa=[A,Y,'raw:49.75'],CGY=[A,G,'raw:8200000'],COZ=[A,Y,'raw:48.75'],CGX=[A,G,'raw:7200000'],COY=[A,Y,'raw:47.75'],COX=[A,Y,'raw:46.75'],CIR=[A,C,PG],CGW=[A,G,'raw:5200000'],CIQ=[A,W,NO],COW=[A,Y,'raw:45.75'],CGV=[A,G,'raw:4200000'],CAb=[A,G,AFs],COV=[A,W,'raw:42.25'],CAa=[A,G,AFt],COU=[A,Y,'raw:42.75'],Bed=[A,E,FP],Brb=[A,E,Zd],BhW=[A,E,Xq],BkN=[A,E,aq],BhV=[A,E,eZ],CFh=[A,E,'raw:18.05787'],CQF=[A,E,'raw:157'],COT=[A,W,'raw:-37.5'],COS=[A,Y,'raw:-44.5'],CAZ=[A,N,'raw:1.0000049'],CFg=[A,G,'raw:-672.557'],CAY=[A,N,'raw:1.0000052'],CFf=[A,G,'raw:-670.706'],CGU=[A,E,'raw:18.0563'],CAX=[A,N,'raw:1.0000054'],CFe=[A,G,'raw:-668.844'],CFd=[A,G,'raw:-667.711'],CAW=[A,N,'raw:1.0000058'],CGT=[A,G,'raw:-667.13'],CFc=[A,E,'raw:11.30625'],CFb=[A,N,'raw:1.000006'],CFa=[A,G,'raw:-667.282'],Bll=[A,N,bJ],BpT=[A,E,ACB],Bra=[A,E,wE],BrZ=[A,W,RJ],BrY=[A,Y,Vo],CAV=[A,C,ABZ],CIP=[A,E,mj],CIO=[A,I,'raw:649328'],CIN=[A,G,'raw:665262'],BoC=[A,W,fQ],Bwk=[A,E,sR],CPV=[A,W,'raw:21.3'],CPU=[A,Y,'raw:21.7'],COR=[A,C,'raw:22.35'],CPT=[A,E,'raw:-178'],CQE=[A,E,'raw:169'],COQ=[A,I,'raw:14200'],COP=[A,G,'raw:15500'],CIM=[A,E,'raw:-64.75'],CIL=[A,I,gd],BWw=[A,G,Ci],CIK=[A,Y,'raw:-54.75'],CQD=[A,C,'raw:-55'],CIJ=[A,I,'raw:160000'],Blk=[A,G,Ow],Bec=[A,I,OP],Bwj=[A,G,ib],Bwi=[A,G,ic],Bwh=[A,G,cT],Bwg=[A,G,kf],BZP=[A,I,EM],Bwf=[A,I,KZ],BuO=[A,W,'raw:62'],CII=[A,Y,kK],CAU=[A,E,AVP],CIH=[A,W,mk],CIG=[A,Y,tC],CQC=[A,BW,'raw:59'],CQU=[A,C,'raw:59'],Blj=[A,G,KZ],BYQ=[A,E,OG],CQB=[A,C,'raw:-17'],CIF=[A,E,'raw:178.75'],CGS=[A,N,'raw:0.99985'],CAT=[A,C,AEj],BrX=[A,I,VE],Bxs=[A,W,Qj],CIE=[A,I,'raw:150328'],CID=[A,G,'raw:166262'],CIC=[A,C,Xl],BoB=[A,E,RK],CAS=[A,I,'raw:28001.642'],CAR=[A,G,'raw:38744.572'],CIB=[A,C,ml],CIA=[A,E,mm],CAQ=[A,I,'raw:132033.92'],CFZ=[A,G,'raw:62565.96'],BrW=[A,N,nl],Bwe=[A,N,hW],Bwd=[A,G,so],Bwc=[A,W,NL],CAP=[A,I,ADQ],CAO=[A,I,'raw:13227.851'],CFY=[A,G,'raw:8739.894'],CHz=[A,I,'raw:-1.769'],CGR=[A,I,'raw:-23.414'],CHy=[A,G,'raw:62.283'],CAN=[A,C,'raw:4.9762852'],CAM=[A,I,'raw:19594.245'],CFX=[A,G,'raw:3371.895'],CAL=[A,G,'raw:56464.049'],CAK=[A,I,'raw:-7368.228'],CFW=[A,G,'raw:6485.858'],CFV=[A,I,'raw:3673.785'],CAJ=[A,G,'raw:-4240.573'],CGQ=[A,G,'raw:8758.32'],Bul=[A,BV,wZ],CHx=[A,I,'raw:804671'],Bak=[A,E,Zg],CAI=[A,I,AIE],CAH=[A,G,AIF],Buk=[A,C,AIv],COO=[A,E,'raw:27.95'],CGP=[A,I,'raw:2250000'],CON=[A,E,'raw:24.95'],CGO=[A,I,'raw:1250000'],COM=[A,E,'raw:21.95'],CAG=[A,C,ABa],CHw=[A,E,lb],CHv=[A,I,fG],Bli=[A,N,dv],CFU=[A,N,'raw:0.999714'],CHu=[A,W,'raw:-30.75'],CHt=[A,Y,'raw:-35.75'],CHs=[A,C,'raw:-33.25'],CGN=[A,I,'raw:9300000'],CHr=[A,W,mn],CHq=[A,Y,LV],CHp=[A,C,mo],CAF=[A,G,AFu],BkM=[A,E,gG],BeH=[A,C,Dl],BeG=[A,W,Dl],BZl=[A,E,Rq],BoA=[A,E,sS],Bnz=[A,E,sT],Bny=[A,E,gT],BkL=[A,E,eY],CPS=[A,E,'raw:-144'],Bnx=[A,E,ZA],BZO=[A,W,EA],BYf=[A,W,DV],BYe=[A,Y,DW],Bnw=[A,E,oJ],Blh=[A,E,hA],Blg=[A,E,tD],Baj=[A,W,FI],Bai=[A,Y,FJ],BVt=[A,I,Cx],BcL=[n,tp,k],BcK=[n,tq,g],BrV=[A,E,qt],BrU=[A,E,qu],BrT=[A,E,qv],Bnv=[A,E,jQ],Bnu=[A,E,jR],BrS=[A,E,qw],Buj=[A,E,AIw],Bnt=[A,E,og],Bwb=[A,W,bC],Bwa=[A,Y,bD],BrR=[A,C,Ff],CHo=[A,Y,EG],COL=[A,E,'raw:-97.5'],CHn=[A,W,SC],CAE=[A,N,'raw:0.9999938'],COK=[A,E,'raw:-99.5'],COJ=[A,W,'raw:41.85'],CPR=[A,W,'raw:46.4'],COI=[A,Y,'raw:46.45'],COH=[A,Y,'raw:47.85'],Blf=[A,E,pb],BpS=[A,E,AHC],BrQ=[A,E,tB],CHm=[A,N,'raw:0.9965'],CAD=[A,W,ABb],CAC=[A,Y,ADR],CAB=[A,IC,wz],CAA=[A,I,'raw:804670.24'],CFT=[A,E,'raw:166.4425'],COG=[A,I,'raw:8.313'],CHl=[A,G,'raw:-2.354'],CPQ=[A,I,'raw:0.66'],CPP=[A,G,'raw:1.02'],COF=[A,C,'raw:-21.5'],CHk=[A,Y,iF],Byz=[A,I,AIG],Byy=[A,G,AFv],CPO=[A,C,'raw:45.9'],Byx=[A,N,'raw:0.9996667'],Byw=[A,Y,AVR],CQA=[A,BW,Ev],CFS=[A,E,'raw:18.05779'],CPz=[A,E,'raw:178'],CHj=[A,I,'raw:544000'],CHi=[A,G,'raw:704000'],BwZ=[A,I,wa],BwY=[A,E,cU],BwX=[A,E,cV],CHh=[A,C,'raw:50.625'],CGM=[A,I,'raw:4637000'],CGL=[A,G,'raw:5467000'],COE=[A,N,'raw:0.999'],Bns=[A,C,RL],CHg=[A,E,lc],CPy=[A,E,'raw:134'],CHf=[A,W,gz],CHe=[A,Y,qF],Byv=[A,C,ABy],CHd=[A,C,'raw:49.225'],CHc=[A,E,'raw:-2.135'],Byu=[A,N,'raw:0.9999999'],COD=[A,G,'raw:70000'],COC=[A,I,'raw:47000'],CPx=[A,C,'raw:-32'],Byt=[A,G,'raw:312234.65'],CHb=[A,W,mp],CHa=[A,Y,mq],CHZ=[A,C,Gu],Bnr=[A,C,Pd],Ble=[A,E,oQ],Bnq=[A,N,Yi],Bys=[A,I,AIH],Byr=[A,G,AII],Bxr=[A,W,Pd],BrP=[A,N,dS],CHY=[A,W,Go],CFR=[A,G,'raw:-4500000'],CPN=[A,E,'raw:-8.5'],CFQ=[A,G,'raw:-7800000'],CHX=[A,E,kK],CHW=[A,E,mr],CHV=[A,E,ms],CHU=[A,E,bn],CHT=[A,E,mt],CHS=[A,E,mu],CHR=[A,E,mv],CHQ=[A,C,mw],CHP=[A,E,ld],CHO=[A,I,'raw:430000'],CHN=[A,G,'raw:325000'],CQh=[B,K,'9039'],COB=[Q,qE+' link',rX],COA=[A,E,'raw:23.25'],CNz=[A,E,'raw:21.75'],CNy=[A,E,'raw:20.25'],CNx=[A,E,'raw:18.75'],CNw=[A,E,'raw:17.25'],CNv=[A,E,'raw:15.75'],CNu=[A,E,'raw:14.25'],CGK=[A,I,'raw:2520000'],BwW=[A,E,iX],Bui=[A,IC,cW],Byq=[A,I,'raw:590476.87'],Byp=[A,G,'raw:442857.65'],Byo=[A,BW,aB],Byn=[A,BV,Pw],Bym=[A,IC,HI],BcJ=[A,N,Re],Byl=[A,C,ABL],BwV=[A,C,bE],BZk=[L,BY],BhU=[A,C,dV],Bki=[B,K,'9031'],BaN=[Q,Aar+' legal'+" "+s,Oq],BrO=[A,C,Us],Byk=[A,C,AND],CHM=[A,E,mx],CHL=[A,G,xA],Byj=[A,C,ABM],Byi=[A,N,AAS],Byh=[A,I,AFw],CHK=[A,N,xB],Byg=[A,N,AAT],BwU=[A,C,gU],CHJ=[A,N,xC],CGJ=[A,I,'raw:180.598'],CHI=[A,G,'raw:-86.99'],BpR=[A,E,ACC],CHH=[A,E,my],CPw=[A,E,'raw:2.5'],CNt=[A,E,'raw:171.5'],CQg=[B,K,'9040'],BvG=[Q,ASj+' yard (Sears 1922)',le],CNs=[A,E,'raw:175.5'],Byf=[A,I,'raw:300002.66'],Bye=[A,G,'raw:699999.58'],BXe=[A,G,Ch],BrN=[A,E,cr],Byd=[A,I,ADT],Byc=[A,I,ADU],Byb=[A,I,ADV],Bya=[A,I,ADW],ByZ=[A,I,ADX],ByY=[A,I,ADY],ByX=[A,I,ADZ],ByW=[A,I,ADa],ByV=[A,I,ADb],ByU=[A,I,ADc],ByT=[A,I,ADd],ByS=[A,I,ADe],ByR=[A,I,ADf],ByQ=[A,I,ADg],ByP=[A,I,ADh],ByO=[A,I,ADi],ByN=[A,I,ADj],BwT=[A,C,gO],ByM=[A,I,'raw:1110369.7'],ByL=[A,I,'raw:670553.98'],ByK=[A,I,'raw:230738.26'],BrM=[A,E,uK],CPM=[A,C,'raw:26.1'],CPL=[A,C,'raw:29.7'],CHG=[A,C,mz],Buh=[A,E,AEr],ByJ=[A,I,'raw:274319.51'],ByI=[A,C,AVT],CGI=[A,I,'raw:1324000'],CHF=[A,I,'raw:720000'],CNr=[A,E,'raw:-80.5'],CHE=[A,I,'raw:222000'],BpQ=[A,E,AHD],BbE=[A,N,LE],Bnp=[A,I,bL],Bno=[A,G,dj],Bnn=[B,K,'9084'],Bjz=[Q,ik+' yard',OT],BwS=[A,W,LR],CHD=[A,C,eZ],BrL=[A,E,tC],ByH=[A,I,ABe],ByG=[A,G,ADl],ByF=[A,G,'raw:914395.23'],CGH=[A,I,'raw:2355500'],CGG=[A,G,'raw:2590000'],CNq=[A,E,'raw:139.5'],CNp=[A,E,'raw:136.5'],CNo=[A,E,'raw:130.5'],CNn=[A,E,'raw:121.5'],CNm=[A,E,'raw:118.5'],CNl=[A,E,'raw:115.5'],CNk=[A,E,'raw:112.5'],CNj=[A,E,'raw:109.5'],CNi=[A,E,'raw:106.5'],CNh=[A,E,'raw:103.5'],CNg=[A,E,'raw:100.5'],CPK=[A,E,'raw:97.5'],CPJ=[A,E,'raw:94.5'],CGF=[A,N,'raw:0.99993'],ByE=[A,I,'raw:836694.05'],CFP=[A,G,'raw:819069.8'],CFO=[A,C,'raw:25.08951'],CHC=[A,I,'raw:283800'],CHB=[A,G,'raw:214500'],CPv=[A,E,'raw:109'],CGE=[A,G,'raw:1100000'],CPI=[A,C,'raw:34.2'],ByD=[A,N,'raw:0.9995341'],CHA=[A,C,SC],ByC=[A,E,ANE],ByB=[A,N,ABf],ByA=[A,E,AdE],CFN=[A,C,'raw:38.81973'],CGD=[A,E,'raw:7.83445'],CPu=[A,I,'raw:270'],CPt=[A,G,'raw:582'],BrK=[A,C,Vp],CGz=[A,N,'raw:0.9993'],CFM=[A,G,'raw:-5300000'],BrJ=[A,N,hR],CFL=[A,N,'raw:0.999983'],CGy=[A,I,'raw:237000'],CFK=[A,G,'raw:-4700000'],CGC=[A,I,'raw:3703000'],CGB=[A,G,'raw:5627000'],CGA=[A,I,'raw:3501000'],CFz=[A,G,'raw:5999000'],CFy=[A,I,'raw:4603000'],CFx=[A,G,'raw:5806000'],CGx=[A,C,nA],Bxz=[B,K,'9094'],Bni=[Q,'Gold Coast'+" "+bN,bF],CFw=[A,N,'raw:0.99982'],CFv=[A,G,'raw:5400000'],CNf=[A,C,'raw:-46.6'],CFJ=[A,E,'raw:170.2825'],Bxy=[A,N,'raw:0.9999986'],CNe=[A,G,'raw:75000'],CFu=[A,C,'raw:-44.735'],CFI=[A,E,'raw:169.4675'],CGw=[A,C,'raw:-43.11'],CGv=[A,E,'raw:173.01'],CGu=[A,E,'raw:175.64'],BrI=[A,C,NJ],BrH=[A,E,Ut],CGt=[A,I,'raw:-17044'],Bxx=[A,G,'raw:-23139.97'],CGs=[A,W,NJ],CPs=[A,E,X],CGr=[A,I,'raw:187500'],CGq=[A,G,'raw:180000'];

/* pass 9 (array) */
const CWB=[P,'WGS 84',R,r,BVE],CVw=[T,M,D,BUZ],CVv=[Q,d,J,BUY],CWK=[V,BH,BUw],CWW=[P,'GRS 1967'+MF,Bw,Cy,Baf],CXM=[V,LB,BXk],CWE=[V,Ao,BUe],CWD=[V,AT,BUe],CWg=[V,Ao,BUe,BUV],CZu=[V,AT,Bld],CXz=[V,AT,BaT],Cbk=[V,Ao,BaT,BnF],Cbj=[V,Ao,Bld,BdA],CVx=[P,'GRS'+Bp,R,O,BUi],CWJ=[P,Ajn,Ai,AY,BVi],CZM=[V,YH,BVM],CWA=[P,AjY,x,AC,BUv],CXy=[V,bX,BUn],CZt=[V,Zt,BUh],CXu=[V,Mq,BXk],CWC=[P,Ajd,AK,Ap,BVF],CZL=[V,gA,BUs],CWG=[P,Aji,AN,AR,BVL],CbP=[V,AAW,BUx],CWq=[P,Cg+' 1858',Hk,Hl,Bmy],CYJ=[V,aG,BUx],CbO=[V,AGp,BUw],CZg=[V,AUp,BUh],CbN=[V,AGq,BUh],CZs=[V,gp,BUh],CYI=[V,Mh,BUh],CZr=[V,rV,BUh],CXD=[V,EY,BUh],CXL=[V,FV,BUh],CWX=[P,PO+' 1830 (1937'+Qh,Es,DU,Bcl],CXI=[T,fB,FH,BhP],CZK=[V,wb,BVM],CYl=[V,Qp,BUh],CYv=[T,jo,Uh,BwF],CaJ=[V,'D_Lisbon_1890',BVM],CYL=[P,'Struve 1860',oS,wJ,CFA],Cbi=[T,Aaw,kg,CVf],CaI=[V,'D_Madrid_1870',Bxw],CYC=[P,'Plessis 1817',sg,wK,CEz],Cac=[T,bV+' RGS',ls,CVc],CWv=[Q,gy,Dn,Bct],Cbg=[V,'D_ATF',Bxv],CWO=[P,Cg+' 1880'+Zv,CL,Cf,BXd],CXB=[T,bV,HZ,Beb],CZf=[V,ABO,BWG],CXv=[T,iW,NE,Bmx],CZJ=[V,pq,BVM],CYZ=[V,AEZ,BVM],CXF=[P,ApQ,MH,AY,BlT],CXa=[T,ARw,JG,Bjv],CXt=[V,gc,BeZ],CYW=[V,rJ,BWG],CbZ=[V,'D_Greek',BVM],CYH=[V,bQ,BVM],CYG=[V,qh,BVM],CZe=[V,ABP,BWG],CYk=[V,gJ,BUs],Cbf=[T,AUr,ACt,CVT],CbM=[V,ANI,BUs],CaH=[V,'D_Padang_1884',BVM],CXh=[V,AMK,BWG],CZI=[V,ta,BUs],CXE=[V,kH,BVM],CZd=[V,AHS,BVM],CYt=[V,AJA,BUs],CYV=[V,ye,BUs],CbY=[T,'Bern',RF,CVO],CaX=[V,'D_Bern_1898',BVM],CYj=[V,Qq,BUh],CZH=[V,UJ,BUh],CYb=[P,'NWL 9D',sh,Cy,CEs],CWM=[V,v,BUh],CZq=[V,yy,BUw],CbX=[V,'D_SVY21',BUw],CbL=[V,AGr,BUw],CWp=[V,DS,BUw],CXV=[V,Hj,BUs],CXm=[P,Cg+' 1880'+AdG+' foot)',hS,Or,CEp],CXq=[P,PO+' 1830 (RSO 1969)',iZ,DU,CEn],CbK=[V,ANN,CEk],CaP=[V,'D_ST87_Ouvea',BUw],CZG=[V,Qf,BUh],CWo=[V,GP,BUh],CZF=[V,iu,BVM],CZE=[V,gg,BVM],CWH=[P,Cg+' 1880'+Nn,An,BR,BVr],CZp=[V,hY,BVV],CXg=[V,dp,BUh],CXl=[V,az,BUh],CbJ=[V,ATo,BUs],CWF=[P,'WGS 72',AZ,Al,BVS],CaW=[V,'D_Fiji_1986',BVA],CWh=[P,ApV,Bw,Cy,BcB],CWk=[P,yM+' 1906',OD,AC,Bjp],CZo=[V,sp,BUh],CZD=[V,Ry,BVV],CZn=[V,uU,BVV],CXk=[V,HM,BVV],CbI=[V,ANP,BVV],CYi=[V,ka,BUx],CYF=[V,fl,BUw],CaG=[V,'D_Moorea_1987',BUs],CaF=[V,'D_Tahiti_1979',BUs],CZC=[V,RA,BUh],CYY=[V,AIj,BUh],CYh=[V,SH,BUx],CaE=[V,'D_Gulshan_303',BZG],CWz=[V,MY,BUh],CbH=[V,AXq,BUw],CaD=[V,'D_Latvia_1992',BUh],CaO=[V,'D_Helle_1954',BUs],CZc=[V,AAI,BUs],CZb=[V,AAJ,BUs],CaN=[V,'D_ST71_Belep',BUs],CbG=[V,ANQ,BUs],CbW=[V,'D_MOP78',BUs],CaC=[V,'D_IGN56_Lifou',BUs],CaM=[V,'D_Tahaa_1954',BUs],CaB=[V,'D_Tahiti_1952',BUs],CbF=[V,AXu,BUh],CaA=[V,'D_Fort_Desaix',BUs],CbE=[V,ATr,BUh],CbD=[V,AXv,BUs],CZz=[V,'D_Sainte_Anne',BUs],CXC=[V,Rc,BUh],CWZ=[V,Bg,BUh],Cab=[V,'D_QND_1995',BUs],CWy=[V,Pe,BUh],CWR=[P,'IAG'+ex,CR,CC,BXJ],CWd=[V,Et,BVs],CXU=[V,PX,BUx],CXT=[V,Iw,BUx],CaV=[V,'D_RRAF_1991',BUh],CWa=[V,Dt,BUn],CWV=[P,Ce,R,O,BXA],CWc=[V,ES,BWM],CYU=[V,Xo,BUh],CWS=[V,Bv,BVA],CWT=[V,Cs,BVA],CZa=[V,'D_NGN',BUw],CbC=[V,AGs,BWG],CXf=[V,LQ,BVM],CbB=[V,ANU,BUs],CYs=[V,ACP,BUs],Cbe=[V,'D_Yoff',BWG],CYT=[V,bZ,BVV],CbA=[V,AAB,BcH],Caz=[V,AGB,BhF],CWx=[V,YB,BVM],CXK=[P,'Airy'+MF+' 1849',Yc,LK,Bql],Cbd=[V,'D_TM75',Bqk],Cbc=[V,'D_TM65',Bqk],CWt=[P,PO+' 1830 (1967'+Kg,RV,DU,Bmp],CYg=[V,ia,Bmo],CWi=[P,ID+' Namibia (GLM)',Gs,AY,BeX],CXs=[V,dg,BeW],Cay=[V,ABi,BUs],Cax=[V,ANW,BVM],CaL=[V,'D_Qatar_1948',BcH],CbV=[V,'D_Qatar',BUs],CWP=[V,BM,BUn],CXJ=[V,VB,BUh],CXQ=[P,Cg+' 1880'+AML,UU,Os,Bqj],CZm=[V,uV,Bqi],CXH=[P,'Airy 1830',RW,LK,Bmn],CaU=[V,'D_OSGB_1936',Bmm],Caw=[V,AYB,BUs],CWl=[V,FF,BUs],Cav=[V,AGt,BVV],CWI=[V,AM,BUh],CWN=[V,Ar,BUx],Cau=[V,AUD,BWG],CYX=[V,AIm,BVV],Cat=[V,'D_Massawa',BVM],CYr=[V,ACR,BWG],CWU=[V,Ck,BUh],Cas=[V,ACZ,BUs],CYf=[V,qU,BUx],Cbb=[V,'D_Lome',BWG],CbT=[V,'D_Leigon',BVV],CYq=[V,AcU,BUs],CXP=[V,Gm,BUs],CZZ=[V,AHX,BUs],CXW=[P,PO+' 1830'+MF,IG,DU,Bqd],CZY=[V,AUu,Bqc],CaT=[V,'D_Kandawala',BZG],CWu=[P,PO+' (1830'+Kg,MR,Lg,Bkt],CYS=[V,et,Bks],CYR=[P,Cg+' 1880',bo,Or,CDr],Car=[V,AJd,BZG],CZX=[V,ABQ,BZG],CWm=[P,ArA,Bw,LP,BdF],CXO=[V,OE,Bag],CYQ=[P,'GRS 1967',Bw,gK,CDo],CZy=[V,'D_Hu_Tzu_Shan',BUs],CZB=[V,'D_Fahud',BVV],CWn=[V,Gp,BUs],CZA=[V,we,BcH],CZW=[V,ABR,BWG],CYe=[V,hT,BUs],Cba=[V,'D_Chua',BUs],CWe=[P,Cg+' 1880'+Aap,An,Ft,Bcq],CXc=[V,rG,BaP],CXr=[V,VT,BUs],CYp=[V,ACU,BVV],CWb=[V,Df,BUn],Caa=[V,'D_Beduaram',BWG],Caq=[V,AGG,BVV],CYP=[V,rP,BVV],CZV=[V,AHZ,BaP],CYo=[V,ATQ,BUs],Cap=[V,AdM,BUn],CYE=[V,aH,BUs],CXx=[V,YG,BYd],CXb=[V,Qc,BYd],CYn=[V,AFP,BVV],CWQ=[V,BS,BUn],CaZ=[V,'D_Kousseri',BVV],CbS=[V,'D_Garoua',BVV],Cao=[V,AJf,BUs],CZx=[V,'D_Manoca_1962',BWG],CZw=[V,'D_Douala_1948',BUs],CYD=[V,fm,BUh],CZU=[V,AUx,BUh],CaS=[V,'D_OSNI_1952',Bmm],CWw=[V,FY,BUn],CXS=[V,LU,BUn],Can=[V,AAX,BVV],CXG=[P,'War Office',YY,eS,Bmg],Cam=[V,AAY,Bmf],Cal=[V,AYF,BUh],CXj=[V,fX,BUh],CXN=[V,dY,BUh],CYz=[V,'D_Accra',Bmf],CWj=[V,Ht,BUh],CbR=[V,'D_Bissau',BUs],Cak=[V,AJg,BUn],CYy=[V,nn,BUw],CXe=[V,QA,BVM],CXR=[V,MA,BUs],Caj=[V,AJh,BWG],CYx=[V,gh,BUs],CaK=[V,'D_Rassadiran',BUs],CWL=[V,AP,BUh],Cai=[V,'D_CH1903+',BVM],CYu=[V,'D_CH1903',BVM],CXi=[V,Ps,BUw],CZT=[V,ADA,BUn],CWf=[P,PO+' 1830 (1975'+Kg,JD,FW,Bjc],CXd=[V,Ss,BcG],CWs=[P,PO+' 1830 (1962'+Kg,RX,FW,Bme],CYd=[V,hU,Bmd],CZl=[V,uW,BZG],CZS=[V,AAM,BVV],CZR=[V,AAN,BVV],CbQ=[V,'D_Israel',BUh],CZQ=[V,ABS,BUx],CYc=[V,kc,BUx],Cah=[V,AYH,BVV],Cag=[V,'D_FD_1958',BVV],CZP=[V,ABT,BZG],CZO=[V,AVA,BUw],CZN=[V,'D_Tete',BUx],CYO=[V,uP,BVM],CYK=[V,AcR,BUs],CXA=[P,BEb+' 1977',AZ,CC,Bkl],CYN=[V,rU,Bkj],CaR=[V,'D_GGRS_1987',BUh],CYw=[V,YI,BUh],CXo=[P,'Hughes'+Bp,jS,Xn,BvO],CZk=[V,Vz,BvE],CYa=[P,Arv,jT,D,BvM],CZj=[V,RN,Bxj],CbU=[P,BHY,AFf,D,CQs],CZv=[P,'GRS'+BIa,AFg,D,CQq],CXX=[V,Gd,BUh],Caf=[V,AAC,BUh],CaY=[V,'D_MGI_1901',BVM],CZi=[V,bM,BUh],Cae=[V,AAZ,BUh],Cad=[V,AAa,BXk],CVy=[Q,s,X,BUb],CZh=[V,Ao,BaT,BeV],CXp=[Q,d,J,Bjb],CXn=[V,Ao,Bco,BcC],CYM=[V,AT,Bco],Cbh=[V,Ao,BoV,BYO],CWY=[Q,bN,BX,BXn],CVz=[Q,'US'+GD+" "+bN,p,BUz],CYB=[Q,qE+" "+bN,bU,BvI],CXZ=[V,Ao,Bja,BYo],CXw=[V,AT,BjZ],CaQ=[Q,qE+' link',rX,CQh],CWr=[Q,Aar+' legal'+" "+s,Oq,Bki],CYm=[Q,ASj+' yard (Sears 1922)',le,CQg],CXY=[Q,ik+' yard',OT,Bnn],CYA=[Q,'Gold Coast'+" "+bN,bF,Bxz];

/* pass 10 (array) */
const Cbu=[V,Af,CWB,BVK],Cbp=[S,BB,CWK,BUU,BUW],Ccu=[V,Hg,CWW,BXl,BhL],Cce=[S,'GRS'+AjV,CWD,BUU,BUW],Cgl=[S,BB,CZu,BUU,BUW],Cei=[S,Cg+' 1880 mod.',CXz,BUU,BUW],ClQ=[V,AGx,CVx,CVu],Cgp=[V,ZG,CWJ,BrG],Ckx=[V,AJw,CVx,BUV,CVs],CeE=[V,fY,CWA,BZv,Bjy],Cgk=[V,ai,CVx,BUV,BwN],Cdp=[V,No,CWW,BaS,BhH],Cgo=[V,hr,CWC,BrE],ClF=[V,th,CVx,BUV,CVq],CjU=[V,ACY,CWG,CFH],ClP=[V,AbJ,CWq,CVo],CeQ=[V,dG,CWG,Bbg,Bkz],Chg=[V,ANF,CWB,BUV,CFF],Cgj=[V,xP,CVx,BUV,BwL],Ckw=[V,AdX,CWB,BUV,CVm],Chf=[V,ANG,CVx,BUV,CFD],Cgi=[V,iO,CVx,BUV,BwJ],CeP=[V,NS,CVx,BUV,Bkx],Cgh=[V,uT,CVx,BUV,BwH],Cco=[V,Eq,CVx,BUV,Bcn],Cct=[V,Fe,CVx,BUV,BdH],ClT=[V,yG,CVx,CVk],Ckv=[V,ASX,CWX,BdC,CVi],CgZ=[V,ACF,CWJ,BrC],CfA=[V,Rs,CVx,BUV,BpO],ClO=[V,AVW,CYL,CVg],ClN=[V,AAA,CYC,CVd],Cku=[V,ANe,CWJ,BhT,CVa],CiB=[V,aQ,CWJ,Bdy,CEy],CeD=[V,dw,CXF,BZF,Bjw],Ckt=[V,Agk,CWO,BcI,CVY],Cks=[V,AdY,CWJ,BbD,CVW],CiA=[V,xq,CWC,Bdx,CEw],ClM=[V,AAq,CWC,CVU],CeC=[V,Lb,CWO,BaR,Bjt],Cdo=[V,Kz,CWJ,BYO,Bmw],Ckr=[V,AbK,CWJ,BlS,CVR],Che=[V,ABg,CWC,Bjr,CEu],Ciq=[V,'CH1903_Bern',CWJ,BhK,CVP],Ckq=[V,AEm,CVx,BUV,CVM],Cez=[V,Rt,CVx,BUV,BpM],CiS=[V,'Pitcairn_2006',CWB,BUV,CVK],Cig=[V,'Bermuda_2000',CWB,BUV,CVI],Cfj=[V,Uw,CVx,BUV,Bqz],Cbt=[V,w,CVx,BUV,BVO],CgY=[V,ACu,CWB,BUV,BwE],Ckp=[V,'SVY21',CWB,CVG],Chd=[V,ANJ,CWB,Blb,CEr],CcZ=[V,De,CWB,BUV,BaM],CdG=[V,Iv,CWC,BYD,Bgw],Cko=[V,Agn,CXm,Bne,CVE],CjT=[V,AXo,CXq,CEm],Ciy=[V,'ST87_Ouvea',CWB,BnW,CVC],Cfi=[V,Qz,CVx,BUV,Bqx],CcY=[V,Ha,CVx,BUV,BaK],Cgn=[V,nm,CWJ,Bqv],Cgm=[V,iv,CWJ,Bqt],Cja=[V,'Nahrwan_1934',CWH,CVA],CgX=[V,ACv,CWH,Bjq,BwC],Cdw=[V,Kf,CVx,BkK],ClL=[V,AbM,CWC,CUy],ClK=[V,Agp,CWq,CUw],Cdg=[V,Nx,CVx,BUV,BlR],CiR=[V,'Pitcairn_1967',CWC,Bxo,CUu],Ckn=[V,AAw,CWG,BeE,CUs],Ckm=[V,ABp,CWG,Bdz,CUq],Chc=[V,AdI,CWC,BqD,CEj],Ckl=[V,AIK,CWF,BVC,CUo],Ckk=[V,AGI,CWk,Bnm,CUm],ClJ=[V,Agq,CWC,CUk],CjS=[V,'Mhast_onshore',CWC,CUi],Cgg=[V,wq,CVx,BUV,BwA],Cfh=[V,Sn,CWH,BhS,Bqr],Cgx=[V,yz,CWH,Bvy],CiQ=[V,'Le_Pouce_1934',CWH,Bnl,CUg],Ckj=[V,AVY,CWC,BuZ,CUe],CeI=[V,Hu,CWH,BeY],CjR=[V,AXp,CWH,CEh],Cey=[V,qS,CWG,Bgm,BpK],CeO=[V,NT,CWB,BUV,Bkv],Cki=[V,Agr,CWB,BuW,CUc],Cix=[V,'Maupiti_83',CWC,Bnd,CUa],CjQ=[V,'Moorea_87',CWC,BdE,CUY],CjP=[V,'Tahiti_79',CWC,BdD,CUW],CiP=[V,'IGN63_Hiva_Oa',CWC,BeB,CUU],Cip=[V,'Fatu_Iva_72',CWC,Bcz,CUS],Cfg=[V,Rz,CVx,Bcy,Bqp],Cex=[V,Pt,CVx,BUV,BpI],Cew=[V,TM,CWG,Bbf,BpG],Cio=[V,'Gulshan_303',CWX,BpP,CUQ],Cck=[V,CD,CVx,BUV,Bbe],Ckh=[V,AGb,CWC,BnJ,CUO],Ckg=[V,AGc,CWC,Bxn,CUM],CjO=[V,ATp,CWO,CEf],Chz=[V,jC,CWB,BUV,CEd],Ckf=[V,ANi,CVx,BUV,CUK],Cke=[V,AGK,CWC,BnI,CUI],Ckd=[V,AEn,CWC,BnR,CUG],Ckc=[V,AbR,CWC,BnE,CUE],Ckb=[V,AVa,CWC,Bnh,CUC],Cin=[V,'Latvia_1992',CVx,BUV,CUA],Ciw=[V,'Helle_1954',CWC,Bcx,CTy],Cka=[V,AbS,CVx,BUV,CTw],CgW=[V,ACw,CWC,BnH,Bvw],CiO=[V,'Grand_Comoros',CWC,BqC,CTu],CgV=[V,ACx,CWC,BlO,Bvu],Civ=[V,'ST71_Belep',CWC,BdB,CTs],CkZ=[V,AYS,CWC,BuV,CTq],Chb=[V,AXr,CWC,BqB,CEb],Cje=[V,'MOP78',CWC,BwR,CTo],CkY=[V,AEU,CWG,Bug,CTm],Cim=[V,'IGN56_Lifou',CWC,Bnc,CTk],Cif=[V,'Combani_1950',CWC,BqA,CTi],CkX=[V,Adg,CWC,Bxm,CTg],CjZ=[V,'Tahaa_54',CWC,BeC,CTe],CjN=[V,'Tahiti_52',CWC,CFt,CTc],Chy=[V,hu,CVx,BUV,CEZ],Cie=[V,'Reunion_1947',CWC,Bpz,CTa],CkW=[V,Adh,CWC,BqG,CTY],Chx=[V,gq,CVx,BUV,CEX],Chw=[V,ps,CWC,BnD,CEV],CkV=[V,Adi,CWC,Bpy,CTW],Cid=[V,'Fort_Marigot',CWC,BuU,CTU],Ccn=[V,IO,CVx,BUV,Bck],CcL=[V,BG,CVx,BUV,BWv],CkU=[V,Adj,CWC,BuT,CTS],CkT=[V,AbT,CWC,Bpx,CTQ],CkS=[V,AGy,CWC,Bcv,CTO],Cha=[V,AJa,CWJ,BhT,CET],Ccj=[V,Ee,CVx,BUV,Bbc],CkR=[V,Agx,CWC,Bci,CTM],CcQ=[V,GB,CWR,BXI],Cda=[V,Gi,CWG,Bgu],CdZ=[V,HE,CWG,Bgs],CkQ=[V,Adk,CWH,BnQ,CTK],CiN=[V,'St_Lucia_1955',CWH,BuY,CTI],CiM=[V,'St_Kitts_1955',CWH,Buf,CTG],CkP=[V,Adn,CWH,Bue,CTE],Cic=[V,'Grenada_1953',CWH,BwQ,CTC],CiL=[V,'Dominica_1945',CWH,BqF,CTA],Cib=[V,'Antigua_1943',CWH,Bud,CSy],CjM=[V,'Anguilla_1957',CWH,CSw],ClE=[V,sG,CVx,BUV,CSu],CcO=[V,Er,CWA,BXC],CcP=[V,FT,CWV,BXG],Ceg=[V,ZC,CVx,BUV,Bmv],CiK=[V,'Cadastre_1997',CWC,BnC,CSs],CkO=[V,ABm,CVx,BUV,CSq],ClD=[V,rb,CVx,BUV,CSo],CcD=[V,Ah,CWF,BVB,BVo],CcE=[V,BO,CWF,BVC,BVq],CkN=[V,AhA,CVx,Bps,CSm],Chv=[V,sE,CWB,BhJ,CER],CkM=[V,ASc,CWC,Bnb,CSk],ChZ=[V,ANR,CWO,BnP,CEP],CdW=[V,ME,CWJ,BYI,BkI],Chu=[V,rY,CWC,Bla,CEN],Cdf=[V,LY,CWJ,BYc,BlN],Cff=[V,fu,CWC,BhR,Bqn],ClC=[V,'Yoff',CWO,CSi],CfG=[V,ge,CWJ,Bmt],Cef=[V,es,CWH,BbC,Bmr],ChY=[V,ATu,CWO,BlX,CEL],CjL=[V,ABh,CWk,CEJ],ChX=[V,AJb,CWq,Bpw,CEH],Cci=[V,QL,CWJ,BWc,Bba],CkL=[V,AKH,CXK,BbY,CSg],Cjh=[V,'TM65',CXK,BbY,CSe],Cev=[V,oT,CWt,Bdw,BpE],ChW=[V,AGC,CWC,Bdx,CEF],Cdn=[V,Od,CWi,BaQ,BhD],ChV=[V,AEP,CWC,BnO,CED],Cht=[V,kR,CWJ,BlZ,CEB],Cjd=[V,'Qatar_1948',CWk,CSc],Ciu=[V,'Qatar_1974',CWC,Bna,CSa],Cbx=[V,Ba,CWA,BUp,BVc],Ccr=[V,FG,CVx,BUV,Bcr],CkK=[V,AJp,CWO,Bxa,CSY],CgU=[V,AAK,CXQ,Bjo,Bvs],CjK=[V,'OSGB_1936',CXH,BeD,CSW],Cgc=[V,'Datum_73',CWC,Bpv,CDz],CcW=[V,Cn,CWC,BVk,BZj],CcV=[S,Ej,CWl,BUU,BUW],CiJ=[V,'Naparima_1972',CWC,BxZ,CSU],ChU=[V,ANY,CWH,BeV,CDx],Cbo=[V,AE,CVx,BUV,BVI],Cbn=[S,AH,CWI,BUU,BUW],CcB=[V,Ad,CWG,BVa],Cbw=[S,Ak,CWN,BUU,BUW],ChT=[V,AYC,CWO,BuN,CDv],CgT=[V,AFW,CWC,BcE,Bvq],Ceu=[V,vh,CWH,BeU,BpC],CkJ=[V,AMM,CWJ,Buc,CSS],Cfe=[V,fv,CWO,Bjn,Bqh],Cia=[V,'Malongo_1987',CWC,Bng,CSQ],CcF=[V,Ab,CVx,BUV,BVz],ClB=[V,tE,CWJ,BlS,CSO],ChS=[V,AGD,CWC,BnZ,CDt],Cet=[V,wV,CWG,Bgk,BpA],ClA=[V,'Lome',CWO,CSM],CkI=[V,Aax,CWH,Bxl,CSK],Cfd=[V,'Lake',CWC,Bqf],CdA=[V,FO,CWC,BXv,BeT],CgS=[V,AUt,CWC,BlL,Bvo],CkH=[V,AVc,CWH,Bnk,CSI],CgR=[V,AFX,CXW,BYo,Bvm],CkG=[V,ACD,CWX,BqH,CSG],CfF=[V,gf,CWu,Bml],CiZ=[V,'Jamaica_1969',CWG,BuS,CSE],CjY=[V,'Jamaica_1875',CYR,CSC],ChR=[V,AUF,CWX,BhQ,CDq],CgQ=[V,AFY,CWX,BlK,Bvk],Ccz=[V,Lh,CWm,BXu,BeR],CkF=[V,ASg,CYQ,Boy,CSA],CkE=[V,AbX,CWC,BuR,CRy],ChQ=[V,AcG,CWH,BkG,CDn],CcX=[V,FM,CWC,BWC,BaI],CfM=[V,ACS,CWk,Bjm,Bqb],CgP=[V,AFZ,CWO,BlJ,Bvi],Ces=[V,bA,CWC,Bdv,Box],Cjg=[V,'Chua',CWC,Bub,CRw],Cfc=[V,cs,CWO,BcI,BqZ],CdQ=[V,py,CWe,BYn,Bjl],Cdm=[V,Yd,CWC,BaO,BhB],Cfb=[V,fw,CWH,BhI,BqX],Cer=[V,sk,CWC,BcD,Bov],CiY=[V,'Bermuda_1957',CWG,Bxk,CRu],CcN=[V,ET,CWA,BVU,BXE],CkD=[V,AGW,CWO,BuX,CRs],ChP=[V,AJe,CWH,Bpu,CDl],Ceq=[V,eD,CWJ,BbD,Bot],Cee=[V,yg,CWH,Bcp,Bmj],CgO=[V,AUv,CWe,Bmh,Bvg],CfL=[V,AIQ,CWC,Bjj,BqV],Cil=[V,'Lisbon_1937',CWC,Bjr,CRq],Chs=[V,yT,CWA,BqT,CDj],CeN=[V,dH,CWC,BbB,Bkr],CeB=[V,OK,CWh,Bah,Bji],CdP=[V,Iy,CWh,BXw,Bjg],Cfa=[V,jp,CWH,Bje,BqS],Cbz=[V,Bd,CWA,BUq,BVf],ClI=[V,AGX,CWH,CRo],ClH=[V,Aay,CWH,CRm],ChO=[V,AUG,CWC,BnY,CDh],Cik=[V,'Manoca_1962',CWO,Bor,CRk],Cij=[V,'Douala_1948',CWC,Bnj,CRi],CjJ=[V,'Albanian_1987',CWA,CRg],CeM=[V,NU,CVx,BUV,Bkp],Cgf=[V,iP,CVx,BUV,Bve],CjI=[V,'OSNI_1952',CXH,BbY,CRe],CkC=[V,AEq,CWC,CFs,CRc],CkB=[V,AGL,CWC,BxY,CRa],CkA=[V,ADs,CWC,BuQ,CRY],Cjz=[V,Adt,CWC,Bcu,CRW],CiX=[V,'Estonia_1997',CVx,BUV,CRU],Cch=[V,Ko,CWA,BWD,BbX],CdF=[V,QT,CWA,BYC,Bgq],ChN=[V,ACa,CWH,BnN,CDf],Cjc=[V,tg,CXG,CDd],Chr=[V,tF,CVx,BUV,CDb],Cde=[V,LZ,CVx,BUV,BeP],Ccy=[V,DM,CVx,BUV,BeO],Cjy=[V,AUT,CWG,Bua,CRS],ChM=[V,AcH,CXG,BnB,CDZ],CcS=[V,CS,CVx,BUV,BYs],CcR=[S,GG,CWj,BUU,BUW],Cjx=[V,Aaz,CWC,BwP,CRQ],ChL=[V,AUH,CWA,BnA,CDX],CfZ=[V,VJ,CWB,BUV,BqQ],Cdv=[V,Rr,CWJ,BkF],Cjw=[V,AVd,CWC,BwO,CRO],ClG=[V,Adu,CWC,CRM],CdE=[V,Ix,CWC,BYB,Bgo],CiI=[V,'Naparima_1955',CWC,BnV,CRK],CjX=[V,'Mount_Dillon',CWq,CRI],Chq=[V,dB,CWJ,Bdy,CDV],ChK=[V,AUI,CWO,BnX,CDT],CfY=[V,eA,CWC,Bjd,BqO],Ckz=[V,xm,CWC,BnU,CRG],Cbr=[V,AA,CVx,BUV,BVR],Cjv=[V,AMN,CWJ,BnT,CRE],ChJ=[V,AIU,CWJ,BhK,CDR],Cdd=[V,GS,CWB,BUV,BeM],CgN=[V,AHa,CWA,BlG,Bvc],CdV=[V,Vw,CWf,BZH,BkD],Cep=[V,kb,CWs,Bdu,Boq],CgM=[V,AAL,CWX,BlF,Bva],CgL=[V,ADB,CWH,BlW,BvY],CgK=[V,ADC,CWH,BlV,BvW],Cju=[V,AbA,CVx,CFr,CRC],CgJ=[V,AFc,CWG,Bmc,BvU],Ceo=[V,qV,CWG,Bdt,Bmz],Chp=[V,xu,CWH,BlY,CDP],CiW=[V,'Estonia_1992',CVx,Bgz,CRA],Cjt=[V,AbY,CWH,BnS,CQy],CgI=[V,AFd,CWX,BlE,BvS],CgH=[V,ABU,CWB,BnG,BvQ],Cgr=[V,'Tete',CWG,BkB,CDN],Ced=[V,TL,CWJ,BbV,Bkn],Cec=[V,PK,CWC,BbA,Bkm],CfE=[V,Gj,CXA,Bkk],Cjs=[V,AAV,CVx,Bnf,CDL],CfX=[V,ZJ,CVx,BUV,BqM],Cgw=[V,Xp,CXo,BqK],Cgv=[V,Ru,CYa,BqJ],ClS=[V,re,CbU,CDK],ClR=[V,sr,CZv,CQp],CdN=[V,HG,CVx,BUV,BhN],Cho=[V,oh,CVx,BUV,CDJ],Cky=[S,oh,Caf,BUU,BUW],CjW=[V,'MGI_1901',CWJ,BYO,CQn],Cge=[V,cg,CVx,BUV,BvK],ChI=[V,ACb,CVx,BUV,CDH],CjH=[V,ACc,CWW,CDF],Cdl=[S,jH,CXj,BUU,BUW],Cjr=[S,ASG,CYZ,BUU,BUW],Cit=[S,'GCS_CH1903',CYu,BUU,BUW],CiE=[S,'GCS_Belge 1972',CbB,BUU,BUW],Cjq=[S,AhL,Cax,BUU,BUW],CcG=[S,CM,CWU,BUU,BUW],Ccc=[S,Fz,CWn,BUU,BUW],Cbl=[S,'GRS'+AjV,CWE,BUU,BUu],Cbm=[S,Ajw,CWD,BUU,BUW],CcT=[S,'GRS'+AjV,CWg,BUU,BUu],Cfm=[S,Cg+' 1880 mod.',CZh,BUU,BUu],CeF=[S,AMO+' 1880 mod.',CXz,BUU,BUW],Cen=[V,Af,CWB,BUV,BVK],CeX=[S,BBu,CXn,BUU,BUu],CeW=[S,BBt,CYM,BUU,BUW],Cjp=[S,Ajn,Cbh,BUU,BUu],CcM=[S,DR,CWZ,BUU,BUW],Cbq=[S,Ac,CWM,BUU,BUW],Ccb=[S,Qa,CWo,BUU,BUW],CeS=[S,gI+' datum based upon the Hughes'+Aro,CZk,BUU,BUW],CcU=[S,OC+' 2000',CWz,BUU,BUW],CeA=[S,dx,CXu,BUU,BUW],Ccq=[S,ll+' 2005',CXX,BUU,BUW],ChH=[S,AYL,CZg,BUU,BUW],Ceb=[S,'GCS_Yemen NGN96',CYy,BUU,BUW],CdU=[S,QB,CXb,BUU,BUW],CgG=[S,AIB,CZM,BUU,BUW],Cdc=[S,kQ,CXf,BUU,BUW],CdH=[S,Aok,CXS,BUU,BUW],Ccf=[S,Aln,CWw,BUU,BUW],CgF=[S,AMw,CZE,BUU,BUW],CgE=[S,AMx,CZF,BUU,BUW],CfW=[S,'GCS_Monte Mario',CZI,BUU,BUW],Cbs=[S,BA,CWL,BUU,BUW],CjG=[S,'GCS_RGR92',CbF,BUU,BUW],ChG=[S,AUM,CZr,BUU,BUW],Ccx=[S,aE,CXL,BUU,BUW],CgD=[S,ADN,CYw,BUU,BUW],CfK=[S,ACW,CYl,BUU,BUW],ChF=[S,AYM,CZO,BUU,BUW],CeL=[S,hQ,CXy,BUU,BUW],Cdi=[S,ln+' 1935',CYJ,BUU,BUW],ChE=[S,AdU,CZt,BUU,BUW],Cea=[S,oi+' Alegre 1961',CZL,BUU,BUW],CfV=[S,tb,CYj,BUU,BUW],Cgs=[S,'GCS_Panama-Colon 1911',CbP,BUU,BUW],Ccw=[S,aF,CXM,BUU,BUW],Cjo=[S,Abd,CbO,BUU,BUW],Cjn=[S,Abe,CbN,BUU,BUW],ChD=[S,AYN,CZs,BUU,BUW],Cdh=[S,YU+' 2007',CYI,BUU,BUW],CgC=[S,AMy,CYo,BUU,BUW],Ccd=[S,Uz+' 03',CXD,BUU,BUW],Cjf=[S,ASG+cj,CYZ,BhO,BUW],CdI=[S,tk+' 2000',CXl,BUU,BUW],Ccv=[S,lm+' 1985',CXe,BUU,BUW],CfC=[S,QX+' 1892',CZK,BUU,BUW],CcI=[S,Pj+" "+DP,CWa,BUU,BUW],CcH=[S,Ala+' 2000',CWc,BUU,BUW],CdT=[S,ACE+' Datum of 1993',CYU,BUU,BUW],CeV=[S,AGo+' 1955',CYi,BUU,BUW],Cds=[S,Apw,CXZ,BUU,BUu],Cdr=[S,Ark,CXw,BUU,BUW],CfU=[S,'GCS_Puerto Rico',CZQ,BUU,BUW],Cgb=[S,'GCS_IGRS',CZi,BUU,BUW],Ccp=[S,PS,CXC,BUU,BUW],CjF=[S,'GCS_TWD67',Cad,BUU,BUW],CjE=[S,'GCS_TWD97',Cae,BUU,BUW],CgB=[S,AIC,CZH,BUU,BUW],Ccs=[S,SF,CXJ,BUU,BUW],CeR=[S,'GCS_Old'+he,CYc,BUU,BUW],Chn=[S,'GCS_Dabola 1981',Caj,BUU,BUW],ChC=[S,AUN,CZq,BUU,BUW],CjD=[S,'GCS_PSD93',Cah,BUU,BUW],CcC=[S,AkA,CWS,BUU,BUW],CeY=[S,gI+' datum based upon the'+" "+Arv,CZj,BUU,BUW],Cii=[S,'GCS_VN-2000',CbL,BUU,BUW],CfQ=[S,'GCS_Karbala 1979',CZp,BUU,BUW],Cby=[S,Ajm,CWQ,BUU,BUW],Cbv=[S,Ajk,CWP,BUU,BUW],Cem=[S,AIu,CYK,BUU,BUW],Cdb=[S,df,CXg,BUU,BUW],CfD=[S,'GCS_IGN Astro 1960',CZn,BUU,BUW],CgA=[S,AUO+' 1999',CZo,BUU,BUW],Ceh=[S,'GCS_IGCB 1955',CZD,BUU,BUW],Ccg=[S,ASt+' 1962 6th'+lg+' South',CXk,BUU,BUW],CiD=[S,'GCS_Kasai 1953',CbI,BUU,BUW],Cis=[S,'GCS_RGFG95',CbE,BUU,BUW],CjC=[S,'GCS_CSG67',CbD,BUU,BUW],Cfz=[S,AVQ,CZC,BUU,BUW],CcA=[S,Ds+' 72',CWT,BUU,BUW],CdM=[S,YZ,CXV,BUU,BUW],CdB=[S,Anr,CXN,BUU,BUW],Cjb=[S,'GCS_NGN',CZa,BUU,BUW],Cfy=[S,AGZ+' 1960',CZP,BUU,BUW],CiC=[S,'GCS_IGN53 Mare',CbG,BUU,BUW],Cfx=[S,ABd,CZG,BUU,BUW],Cir=[S,AMP+' (RSO)',CbK,BUU,BUW],Cfl=[S,'GCS_NEA74'+AcC,CZb,BUU,BUW],Chi=[S,'GCS_Conakry 1905',CbC,BUU,BUW],CiH=[S,'GCS_Fiji 1956',CbJ,BUU,BUW],Cdz=[S,dy,CXE,BhO,BUW],Cdk=[S,rH,CXE,BUU,BUW],CfJ=[S,AFR,CYh,BUU,BUW],CfT=[S,nq,CYY,BUU,BUW],Cfw=[S,ADS,CYs,BUU,BUW],Ccm=[S,Nw,CWy,BUU,BUW],Ccl=[S,QX,CWx,BUU,BUW],CdY=[S,AbB+' Sahara 1959',CYT,BUU,BUW],CjB=[S,'GCS_IGM95',CbH,BUU,BUW],CfP=[S,'GCS_Hjorsey 1955',CZc,BUU,BUW],Chm=[S,'GCS_Voirol 1879',CZf,BUU,BUW],Cjm=[S,AKu,CZe,BUU,BUW],CiV=[S,'GCS_TC(1948)',CbA,BUU,BUW],Cel=[S,AEk,CYH,BUU,BUW],Cek=[S,AEl,CYO,BUU,BUW],ChB=[S,'GCS_Trinidad 1903',Caz,BUU,BUW],CfS=[S,tl,CYG,BUU,BUW],Cjl=[S,AdV,CZJ,BUU,BUW],CeU=[S,AEI+' 1948',CYg,BUU,BUW],Cjk=[S,AUV,CYk,BUU,BUW],ChA=[S,'GCS_Tananarive'+WJ,CYk,Bea,Bcs],Cdy=[S,bY,CXs,BUU,BUW],Cgt=[S,'GCS_Sapper Hill 1943',Cay,BUU,BUW],Cfv=[S,AYO+' 1923',CZm,BUU,BUW],CeK=[S,fp,CXh,Bea,Bcs],CiU=[S,'GCS_Datum 73',Caw,BUU,BUW],CdO=[S,AcQ+' 1948'+lr,CXt,Blc,BUW],CjV=[S,'GCS_Tete',CZN,BUU,BUW],Chh=[S,'GCS_Nahrwan 1967',Cav,BUU,BUW],Cjj=[S,AjL,Cau,BUU,BUW],CfI=[S,AFS,CYX,BUU,BUW],Cfu=[S,ADk,CYr,BUU,BUW],CeT=[S,AXO+' 1911',CYf,BUU,BUW],CdD=[S,Gk,CXP,BUU,BUW],Cfn=[S,'GCS_La Canoa',CZZ,BUU,BUW],Cft=[S,AMP+' 1968',CZY,BUU,BUW],CcK=[S,AkP,CWb,BUU,BUW],CdX=[S,AqT,CXd,BUU,BUW],CeG=[S,Oe+' 1880',CYS,BUU,BUW],CeZ=[S,Oe+' 1962',CYd,BUU,BUW],Cga=[S,Oe+' 1937',CZl,BUU,BUW],Cji=[S,AfY,Car,BUU,BUW],Chl=[S,'GCS_South Yemen',Cak,BUU,BUW],Cgq=[S,AGZ+gr,CZX,BUU,BUW],CcJ=[S,AkN,CWd,BUU,BUW],CdC=[S,ea,CXO,BUU,BUW],Cca=[S,Ol,CWp,BUU,BUW],CjA=[S,'GCS_Fahud',CZB,BUU,BUW],CdR=[S,'GCS_Ain el Abd',CYE,BUU,BUW],Cdq=[S,AsF,CXr,BUU,BUW],CfB=[S,AXN+' 1907',CZA,BUU,BUW],Cej=[S,ABN,CYN,BUU,BUW],CfR=[S,'GCS_Deir ez Zor',CZW,BUU,BUW],CeH=[S,oi+' Alegre'+pX,CYe,BUU,BUW],Cgd=[S,xn,CYW,BUU,BUW],CdS=[S,iI,CXc,BUU,BUW],Cdu=[S,YU+' 94',CYF,BUU,BUW],Cdt=[S,YU+' 98',CYD,BUU,BUW],Chk=[S,'GCS_Qornoq 1927',Cao,BUU,BUW],Cfs=[S,ADm,CYp,BUU,BUW],Cgz=[S,AYP,CZU,BUU,BUW],CfH=[S,BBB,CYV,BUU,BUW],CfO=[S,'GCS_Abidjan 1987',CZS,BUU,BUW],CfN=[S,'GCS_Locodjo 1965',CZR,BUU,BUW],Chj=[S,AbI+' Leone 1968',Can,BUU,BUW],CiG=[S,AbI+' Leone'+IA,Cam,BUU,BUW],CiT=[S,'GCS_IRENET95',Cal,BUU,BUW],CdL=[S,QU,CXU,BUU,BUW],Ciz=[S,'GCS_Accra',CYz,BUU,BUW],Cgy=[S,'GCS_Barbados 1938',Caq,BUU,BUW],Cdx=[S,AXG+' 1960',CYP,BUU,BUW],Cfr=[S,AVU,CYq,BUU,BUW],Cfq=[S,AXG+' 1950',CZV,BUU,BUW],Cfk=[S,'GCS_Hanoi 1972',CZT,BUU,BUW],CdK=[S,dF,CXR,BUU,BUW],Cgu=[S,'GCS_Hito XVIII 1963',Cas,BUU,BUW],CiF=[S,'GCS_Lisbon'+wo,CYt,CFB,BUW],Cfp=[S,AAU,CYx,BUU,BUW],Cdj=[S,SA,CXi,BUU,BUW],Cih=[S,'GCS_Afgooye',Cap,BUU,BUW],CeJ=[S,YT,CXx,BUU,BUW],CdJ=[S,UT,CXT,BUU,BUW],Cfo=[S,AFx,CYn,BUU,BUW];

/* pass 11 (array) */
const ClU=[S,'WGS 84',Cbu,CVw,CVv,BVJ],Clz=[S,hv,Ccu,CVw,CVv,BdI],Cpj=[Cce],Crl=[S,'TGD2005',ClQ,CVw,CVv,CVt],Cne=[S,AJs,Cgp,CVw,CVv,BrF],Crk=[S,'FEH2010',Ckx,CVw,CVv,CVr],Cmk=[S,eJ,CeE,CVw,CVv,Bjx],Cno=[S,'PNG94',Cgk,CVw,CVv,BwM],Cmd=[S,Ys,Cdp,CVw,CVv,BhG],Cmo=[S,jx+' Alegre 1961',Cgo,CVw,CVv,BrD],Crr=[S,'RGAF09',ClF,CVw,CVv,CVp],CoP=[S,xl+' 1911',CjU,CVw,CVv,CFG],Cpo=[S,'Sibun Gorge 1922',ClP,CVw,CVv,CVn],CmZ=[S,dm+' 1935',CeQ,CVw,CVv,Bky],CpU=[S,sB,Chg,CVw,CVv,CFE],CoH=[S,xP,Cgj,CVw,CVv,BwK],CsL=[S,'CR05',Ckw,CVw,CVv,CVl],CpT=[S,sC,Chf,CVw,CVv,CFC],CoC=[S,AUj,Cgi,CVw,CVv,BwI],CmY=[S,ch+' 2007',CeP,CVw,CVv,Bkw],CoB=[S,AGk,Cgh,CVw,CVv,BwG],Clp=[S,Xg+' 03',Cco,CVw,CVv,Bcm],Cly=[S,hw,Cct,CVw,CVv,BdG],Csd=[S,AbC,ClT,CVw,CVv,CVj],CsC=[S,'SLD99',Ckv,CVw,CVv,CVh],Cmz=[S,QL+' 1892',CgZ,CVw,CVv,BrB],CnC=[S,AGN,CfA,CVw,CVv,BpN],Cqn=[S,Aaw+' 1870'+AcS,ClO,Cbi,CVv,CVe],Crq=[S,'ATF'+WJ,ClN,Cac,CWv,CVb],Csc=[S,BGV,Cku,CXv,CVv,CVZ],Con=[S,AwD,CiB,CXI,CVv,CEx],CmL=[S,'NGO 1948'+lr,CeD,CXa,CVv,Bju],CsP=[S,cs+WJ,Ckt,CXB,CWv,CVX],CsO=[S,eD+eB,Cks,CXv,CVv,CVV],Com=[S,BEM,CiA,CXB,CWv,CEv],Cqd=[S,'Belge 1950'+AIy,ClM,Cbf,CVv,CVS],CmV=[S,'NTF'+WJ,CeC,CXB,CWv,Bjs],CmO=[S,'MGI'+cj,Cdo,CXI,CVv,BhE],CsN=[S,tE+eB,Ckr,CXv,CVv,CVQ],Col=[S,BEL,Che,CYv,CVv,CEt],Cpn=[S,'Bern 1898 (Bern)',Ciq,CbY,CVv,CVN],Cqm=[S,'Slovenia 1996',Ckq,CVw,CVv,CVL],CnJ=[S,hy,Cez,CVw,CVv,BpL],Cre=[S,AIT+' 2006',CiS,CVw,CVv,CVJ],Crj=[S,'BDA2000',Cig,CVw,CVv,CVH],Cnd=[S,AJt,Cfj,CVw,CVv,Bqy],ClW=[S,AL,Cbt,CVw,CVv,BVN],CoA=[S,AGl,CgY,CVw,CVv,BwD],CsB=[S,'SVY21',Ckp,CVw,CVv,CVF],Cok=[S,ASy,Chd,CVw,CVv,CEq],Clo=[S,Xf,CcZ,CVw,CVv,BaL],CmI=[S,YX,CdG,CVw,CVv,Bgv],Cqc=[S,'Viti Levu 1912',Cko,CVw,CVv,CVD],CoG=[S,Afc+' (RSO)',CjT,CVw,CVv,CEl],CrK=[S,'ST87 Ouvea',Ciy,CVw,CVv,CVB],Cnm=[S,oR,Cfi,CVw,CVv,Bqw],Cln=[S,ii,CcY,CVw,CVv,BaJ],CnF=[S,'PD/83',Cgn,CVw,CVv,Bqu],CnE=[S,'RD/83',Cgm,CVw,CVv,Bqs],Crd=[S,ASs+' 1934',Cja,CVw,CVv,CUz],CnV=[S,AcM+' 1979',CgX,CVw,CVv,BwB],CmT=[S,cf,Cdw,CVw,CVv,BkJ],CsK=[S,'FD54',ClL,CVw,CVv,CUx],Cqb=[S,'Hong Kong 1963',ClK,CVw,CVv,CUv],CmC=[S,'Korea 2000',Cdg,CVw,CVv,BlQ],Crc=[S,AIT+' 1967',CiR,CVw,CVv,CUt],Crp=[S,'SIGD61',Ckn,CVw,CVv,CUr],Cro=[S,'GCGD59',Ckm,CVw,CVv,CUp],CoN=[S,'Fiji 1956',Chc,CVw,CVv,CEi],Crb=[S,'Fiji 1986',Ckl,CVw,CVv,CUn],Coa=[S,'Egypt Gulf of Suez S-650 TL',Ckk,CVw,CVv,CUl],Cra=[S,'Mhast'+AJD,ClJ,CVw,CVv,CUj],CrZ=[S,'Mhast'+ATM,CjS,CVw,CVv,CUh],Cnb=[S,wG+' 1999',Cgg,CVw,CVv,Bvz],Cmy=[S,'IGCB 1955',Cfh,CVw,CVv,Bqq],CnD=[S,'IGN Astro 1960',Cgx,CVw,CVv,Bvx],Cql=[S,'Le Pouce 1934',CiQ,CVw,CVv,CUf],Cqz=[S,'IGN 1962'+ATN,Ckj,CVw,CVv,CUd],Clt=[S,'IGC 1962 6th'+lg+' South',CeI,CVw,CVv,BlP],CoF=[S,'Kasai 1953',CjR,CVw,CVv,CEg],Cmr=[S,yL+' 1955',Cey,CVw,CVv,BpJ],Cmb=[S,ch+' 94',CeO,CVw,CVv,Bku],Cqa=[S,'Nakhl-e Ghanem',Cki,CVw,CVv,CUb],CrJ=[S,'Maupiti 83',Cix,CVw,CVv,CUZ],CrY=[S,'Moorea 87',CjQ,CVw,CVv,CUX],CrX=[S,'Tahiti 79',CjP,CVw,CVv,CUV],Cqk=[S,'IGN63 Hiva Oa',CiP,CVw,CVv,CUT],CrF=[S,'Fatu Iva 72',Cip,CVw,CVv,CUR],CnL=[S,'RGPF',Cfg,CVw,CVv,Bqo],CnI=[S,ay,Cex,CVw,CVv,BpH],CnB=[S,AcD,Cew,CVw,CVv,BpF],CrE=[S,'Gulshan 303',Cio,CVw,CVv,CUP],Clk=[S,SD+' 2000',Cck,CVw,CVv,Bbd],CpS=[S,'Chatham'+AUX+' 1979',Ckh,CVw,CVv,CUN],CpR=[S,'Chatham'+AUX+' 1971',Ckg,CVw,CVv,CUL],CoM=[S,Aaq+' 1879',CjO,CVw,CVv,CEe],CoY=[S,'IGM95',Chz,CVw,CVv,CEc],CsA=[S,'LKS94',Ckf,CVw,CVv,CUJ],Csb=[S,BPy,Cke,CVw,CVv,CUH],Csa=[S,BPx,Ckd,CVw,CVv,CUF],CqZ=[S,'Porto Santo'+PP,Ckc,CVw,CVv,CUD],CpV=[S,'IGN72 Grande Terre',Ckb,CVw,CVv,CUB],Crz=[S,'LKS92',Cin,CVw,CVv,CTz],Crh=[S,'Helle'+gr,Ciw,CVw,CVv,CTx],Cry=[S,'ISN93',Cka,CVw,CVv,CTv],CnU=[S,AcN+' 1955',CgW,CVw,CVv,Bvv],Cqj=[S,'Grand Comoros',CiO,CVw,CVv,CTt],CnT=[S,'NEA74'+AcC,CgV,CVw,CVv,Bvt],CrI=[S,'ST71 Belep',Civ,CVw,CVv,CTr],Cpi=[S,'ST84 Ile des Pins',CkZ,CVw,CVv,CTp],CoE=[S,'IGN53 Mare',Chb,CVw,CVv,CEa],Crx=[S,'MOP78',Cje,CVw,CVv,CTn],CoX=[S,'Saint Pierre et Miquelon 1950',CkY,CVw,CVv,CTl],CrD=[S,'IGN56 Lifou',Cim,CVw,CVv,CTj],Cqy=[S,'Combani 1950',Cif,CVw,CVv,CTh],CqW=[S,'IGN72 Nuku Hiva',CkX,CVw,CVv,CTf],Crg=[S,'Tahaa 54',CjZ,CVw,CVv,CTd],CrW=[S,'Tahiti 52',CjN,CVw,CVv,CTb],CoW=[S,'RGR92',Chy,CVw,CVv,CEY],Cqx=[S,'Reunion 1947',Cie,CVw,CVv,CTZ],CrV=[S,AbD+' 1938',CkW,CVw,CVv,CTX],Coj=[S,Afo,Chx,CVw,CVv,CEW],CoV=[S,'CSG67',Chw,CVw,CVv,CEU],CrU=[S,AbE+' 1948',CkV,CVw,CVv,CTV],Cqw=[S,'Fort Marigot',Cid,CVw,CVv,CTT],Clu=[S,IO,Ccn,CVw,CVv,Bcj],Cli=[S,Cc,CcL,CVw,CVv,BWu],CqV=[S,'Selvagem Grande',CkU,CVw,CVv,CTR],CrC=[S,'Porto Santo',CkT,CVw,CVv,CTP],Crw=[S,'QND95',CkS,CVw,CVv,CTN],Coi=[S,AUi,Cha,CVw,CVv,CES],Cls=[S,PV,Ccj,CVw,CVv,Bbb],Cqv=[S,'Hong Kong'+Bp,CkR,CVw,CVv,CTL],Clg=[S,'Xian'+Bp,CcQ,CVw,CVv,BXH],CmH=[S,MZ,Cda,CVw,CVv,Bgt],CmG=[S,Qn,CdZ,CVw,CVv,Bgr],Cpm=[S,'St. Vincent 1945',CkQ,CVw,CVv,CTJ],CqY=[S,'St. Lucia 1955',CiN,CVw,CVv,CTH],CqX=[S,'St. Kitts 1955',CiM,CVw,CVv,CTF],CrT=[S,AbF+' 1958',CkP,CVw,CVv,CTD],Cqu=[S,'Grenada 1953',Cic,CVw,CVv,CTB],Cqi=[S,'Dominica 1945',CiL,CVw,CVv,CSz],Cqt=[S,'Antigua 1943',Cib,CVw,CVv,CSx],Cqh=[S,'Anguilla 1957',CjM,CVw,CVv,CSv],CrS=[S,'RRAF 1991',ClE,CVw,CVv,CSt],Cle=[S,'New'+" "+DP,CcO,CVw,CVv,BXB],Clf=[S,AlZ+' 2000',CcP,CVw,CVv,BXF],CmR=[S,yF+' Datum of 1993',Ceg,CVw,CVv,Bmu],Cqg=[S,'Cadastre 1997',CiK,CVw,CVv,CSr],Crv=[S,'RGM04',CkO,CVw,CVv,CSp],Cri=[S,'RGSPM06',ClD,CVw,CVv,CSn],Clb=[S,'WGS'+Xv,CcD,CVw,CVv,BVn],Clc=[S,'WGS 72',CcE,CVw,CVv,BVp],Crn=[S,'KUDAMS',CkN,CVw,CVv,CSl],Cob=[S,'NGN',Chv,CVw,CVv,CEQ],Cos=[S,'Dealul Piscului 1930',CkM,CVw,CVv,CSj],Cnt=[S,'Conakry 1905',ChZ,CVw,CVv,CEO],CmJ=[S,'DHDN',CdW,CVw,CVv,BkH],CoD=[S,'Belge 1972',Chu,CVw,CVv,CEM],CmQ=[S,'MGI',Cdf,CVw,CVv,BlM],Cnl=[S,fu,Cff,CVw,CVv,Bqm],CsJ=[S,'Yoff',ClC,CVw,CVv,CSh],Cmn=[S,'RT38',CfG,CVw,CVv,Bms],CmS=[S,'Nord Sahara 1959',Cef,CVw,CVv,Bmq],CoL=[S,Aaq+' 1875',ChY,CVw,CVv,CEK],Coh=[S,AHE,CjL,CVw,CVv,CEI],CoK=[S,AUk+' 1903',ChX,CVw,CVv,CEG],Clr=[S,QL,Cci,CVw,CVv,BbZ],CsI=[S,'TM75',CkL,CVw,CVv,CSf],CsH=[S,'TM65',Cjh,CVw,CVv,CSd],Cmq=[S,tr+' 1948',Cev,CVw,CVv,BpD],CpQ=[S,gZ,ChW,CVw,CVv,CEE],Cmc=[S,Od,Cdn,CVw,CVv,BhC],Cnp=[S,'Sapper Hill 1943',ChV,CVw,CVv,CEC],CpP=[S,kR,Cht,CVw,CVv,CEA],CrH=[S,'Qatar 1948',Cjd,CVw,CVv,CSb],CrG=[S,'Qatar 1974',Ciu,CVw,CVv,CSZ],ClY=[S,Aje,Cbx,CVw,CVv,BVb],Clx=[S,gs,Ccr,CVw,CVv,Bgl],Cqs=[S,'Pointe Noire',CkK,CVw,CVv,CSX],Cna=[S,wp+' 1923',CgU,CVw,CVv,Bvr],CrR=[S,'OSGB 1936',CjK,CVw,CVv,CSV],CoO=[S,'Datum 73',Cgc,CVw,CVv,CDy],Cll=[S,PF,CcW,CVw,CVv,BZi],CrQ=[S,AJu+' 1972',CiJ,CVw,CVv,CST],CoJ=[S,ASs+' 1967',ChU,CVw,CVv,CDw],ClV=[S,Bx,Cbo,CVw,CVv,BVH],ClZ=[S,Dg,CcB,CVw,CVv,BVZ],CpO=[S,yl,ChT,CVw,CVv,CDu],CnO=[S,'Monte Mario',CgT,CVw,CVv,Bvp],CnH=[S,vh,Ceu,CVw,CVv,BpB],CsZ=[S,AMM,CkJ,CVw,CVv,CSR],Cnk=[S,fv,Cfe,CVw,CVv,Bqg],Cqr=[S,'Malongo 1987',Cia,CVw,CVv,CSP],Cld=[S,ED,CcF,CVw,CVv,BVy],Csg=[S,tE,ClB,CVw,CVv,CSN],Cns=[S,'Hito XVIII 1963',ChS,CVw,CVv,CDs],Cml=[S,'Luzon 1911',Cet,CVw,CVv,Boz],CsG=[S,'Lome',ClA,CVw,CVv,CSL],CsY=[S,Aax,CkI,CVw,CVv,CSJ],CnK=[S,'Lake',Cfd,CVw,CVv,Bqe],CmD=[S,ca,CdA,CVw,CVv,BeS],CnZ=[S,'La Canoa',CgS,CVw,CVv,Bvn],CsM=[S,'KOC',CkH,CVw,CVv,CSH],CnS=[S,Afc+' 1968',CgR,CVw,CVv,Bvl],CsX=[S,ACD,CkG,CVw,CVv,CSF],Cmg=[S,Lr+' 1880',CfF,CVw,CVv,Bmk],Cru=[S,'JAD69',CiZ,CVw,CVv,CSD],Cqq=[S,'Jamaica 1875',CjY,CVw,CVv,CSB],Cog=[S,BEE,ChR,CVw,CVv,CDp],Cnz=[S,BAr,CgQ,CVw,CVv,Bvj],Clw=[S,'ID74',Ccz,CVw,CVv,BeQ],CsF=[S,'HD72',CkF,CVw,CVv,CRz],Cpl=[S,'Hu Tzu Shan 1950',CkE,CVw,CVv,CRx],Cof=[S,AcG,ChQ,CVw,CVv,CDm],Clm=[S,ij,CcX,CVw,CVv,BaH],Cmx=[S,'Egypt 1907',CfM,CVw,CVv,Bqa],CnN=[S,'Deir ez Zor',CgP,CVw,CVv,Bvh],Cmi=[S,jx+' Alegre'+pX,Ces,CVw,CVv,Bow],CsE=[S,'Chua',Cjg,CVw,CVv,CRv],Cnj=[S,cs,Cfc,CVw,CVv,BqY],CmN=[S,py,CdQ,CVw,CVv,Bjk],CmK=[S,'Campo'+TS,Cdm,CVw,CVv,BhA],Cni=[S,fw,Cfb,CVw,CVv,BqW],CnA=[S,AmU,Cer,CVw,CVv,Bou],Cqp=[S,'Bermuda 1957',CiY,CVw,CVv,CRt],Clh=[S,Ajv,CcN,CVw,CVv,BXD],CsW=[S,AGW,CkD,CVw,CVv,CRr],CoI=[S,AXJ+' 1938',ChP,CVw,CVv,CDk],CnG=[S,eD,Ceq,CVw,CVv,Bos],Cmf=[S,'Arc 1960',Cee,CVw,CVv,Bmi],CnY=[S,'Arc 1950',CgO,CVw,CVv,Bvf],Cnc=[S,AIQ,CfL,CVw,CVv,BqU],Csf=[S,jo,Cil,CVw,CVv,CRp],CpN=[S,yT,Chs,CVw,CVv,CDi],CmU=[S,'Ain el Abd',CeN,CVw,CVv,Bkq],Cmh=[S,AMD,CeB,CVw,CVv,Bjh],CmM=[S,pt,CdP,CVw,CVv,Bjf],Cnh=[S,jp,Cfa,CVw,CVv,BqR],Cla=[S,Ajf,Cbz,CVw,CVv,BVe],CsV=[S,AGX,ClI,CVw,CVv,CRn],CsU=[S,Aay,ClH,CVw,CVv,CRl],Cny=[S,'Qornoq 1927',ChO,CVw,CVv,CDg],CrB=[S,'Manoca 1962',Cik,CVw,CVv,CRj],CrA=[S,'Douala 1948',Cij,CVw,CVv,CRh],Cqf=[S,'Albanian 1987',CjJ,CVw,CVv,CRf],Cma=[S,ch+' 98',CeM,CVw,CVv,Bko],Cnx=[S,AUl,Cgf,CVw,CVv,Bvd],CrP=[S,'OSNI 1952',CjI,CVw,CVv,CRd],CsT=[S,BPv,CkC,CVw,CVv,CRb],CrO=[S,BAt+' 1948',CkB,CVw,CVv,CRZ],CrN=[S,BGU+' 1939',CkA,CVw,CVv,CRX],CrM=[S,AbG+' 1930',Cjz,CVw,CVv,CRV],Crt=[S,'EST97',CiX,CVw,CVv,CRT],Clq=[S,Akd,Cch,CVw,CVv,BbW],CmE=[S,AlK,CdF,CVw,CVv,Bgp],Cnn=[S,'Sierra Leone 1968',ChN,CVw,CVv,CDe],Cnr=[S,'Sierra Leone'+IA,Cjc,CVw,CVv,CDc],CpM=[S,tF,Chr,CVw,CVv,CDa],CmX=[S,ti,Cde,CVw,CVv,BlI],CmA=[S,AlD,Ccy,CVw,CVv,BeN],CpL=[S,'American Samoa 1962',Cjy,CVw,CVv,CRR],Coe=[S,AcH,ChM,CVw,CVv,CDY],Clj=[S,Gr,CcS,CVw,CVv,BYr],CsS=[S,Aaz,Cjx,CVw,CVv,CRP],Cnw=[S,'South Yemen',ChL,CVw,CVv,CDW],Cmw=[S,'Yemen NGN96',CfZ,CVw,CVv,BqP],CmB=[S,qy+' 1985',Cdv,CVw,CVv,BkE],Cqe=[S,'Pampa del'+AcY,Cjw,CVw,CVv,CRN],CqU=[S,'Chos Malal 1914',ClG,CVw,CVv,CRL],CmF=[S,lf,CdE,CVw,CVv,Bgn],CrL=[S,AJu+' 1955',CiI,CVw,CVv,CRJ],Cqo=[S,'Mount Dillon',CjX,CVw,CVv,CRH],Cod=[S,ARx,Chq,CVw,CVv,CDU],Cnv=[S,'Dabola 1981',ChK,CVw,CVv,CDS],Cng=[S,is,CfY,CVw,CVv,BqN],Cse=[S,xm,Ckz,CVw,CVv,CRF],ClX=[S,Aj,Cbr,CVw,CVv,BVQ],CsR=[S,AMN,Cjv,CVw,CVv,CRD],Coc=[S,AIU,ChJ,CVw,CVv,CDQ],CmW=[S,GS,Cdd,CVw,CVv,BlH],CnP=[S,'Hanoi 1972',CgN,CVw,CVv,Bvb],CmP=[S,Alw,CdV,CVw,CVv,BkC],Cmp=[S,Lr+' 1962',Cep,CVw,CVv,Bop],CnX=[S,Lr+' 1937',CgM,CVw,CVv,BvZ],CnR=[S,AcO+' 1987',CgL,CVw,CVv,BvX],CnQ=[S,AcP+' 1965',CgK,CVw,CVv,BvV],CsQ=[S,AbA,Cju,CVw,CVv,CRB],CnM=[S,'Puerto Rico',CgJ,CVw,CVv,BvT],Cmu=[S,'Old'+he,Ceo,CVw,CVv,Boo],CoU=[S,'PSD93',Chp,CVw,CVv,CDO],Crs=[S,'EST92',CiW,CVw,CVv,CQz],CsD=[S,'FD58',Cjt,CVw,CVv,CQx],CnW=[S,ik+' 1960',CgI,CVw,CVv,BvR],Cnu=[S,AUm,CgH,CVw,CVv,BvP],CoZ=[S,'Tete',Cgr,CVw,CVv,CDM],Cmm=[S,'RT90',Ced,CVw,CVv,Bmb],Cms=[S,'KKJ',Cec,CVw,CVv,Bma],Cmv=[S,AXA,CfE,CVw,CVv,BmZ],Crm=[S,'GGRS87',Cjs,CVw,CVv,CQu],Cnf=[S,sA,CfX,CVw,CVv,BqL],Cme=[S,aR+' datum based upon the Hughes'+Aro,Cgw,CVw,CVv,BvN],Cmj=[S,aR+' datum based upon the'+" "+Arv,Cgv,CVw,CVv,BvL],CoR=[S,aR+' datum based upon the'+" "+BHY,ClS,CVw,CVv,CQr],CoQ=[S,aR+' datum based upon the GRS'+BIa,ClR,CVw,CVv,CQo],Clv=[S,'RGRDC 2005',CdN,CVw,CVv,BhM],CpK=[S,oh,Cho,CVw,CVv,CDI],Crf=[S,'MGI 1901',CjW,CVw,CVv,CQm],Cnq=[S,'IGRS',Cge,CVw,CVv,BvJ],CoT=[S,'TWD97',ChI,CVw,CVv,CDG],CoS=[S,'TWD67',CjH,CVw,CVv,CDE],CqT=[U,F,Cbm,BUd,BxL,BxK,BxJ,BxI,BxH,BUa],Cmt=[S,'WGS 84',Cen,CVw,CXp,BVJ],CpJ=[S,Bx,Cbo,CVw,CXp,BVH],CpI=[U,b,Cbm,BVD,Bdm,Bdl,BWi,BWB,Bok,BUT,BVd],CpH=[U,b,Cbm,BVD,Bdm,Bdl,BWi,BWB,BWL,BUT,BUa],CpG=[U,b,Cbm,BVD,Bdk,Bdj,BYN,BWB,Boj,BUT,BVd],CpF=[U,b,Cbm,BVD,Bdk,Bdj,BYN,BWB,BXy,BUT,BUa],CpE=[U,b,Cbm,BVD,BZg,BaF,BZf,BWB,Boi,BUT,BVd],CpD=[U,b,Cbm,BVD,BZg,BaF,BZf,BWB,BVh,BUT,BUa],CqS=[U,F,Cbm,BUd,BtU,BtT,BtS,BUy,BUT,BVd],CqR=[U,F,Cbm,BUd,BtU,BtT,BtS,BUy,BUT,BUa],CqQ=[U,F,Cbm,BUd,BtR,BtQ,BtP,BjR,BUT,BVd],CqP=[U,F,Cbm,BUd,BtR,BtQ,BtP,Baw,BUT,BUa],CpC=[U,b,Cbm,BVD,BtO,BtN,BtM,Bol,BxN,BVd,Bdi],CpB=[U,b,Cbm,BVD,BtO,BtN,BtM,BWV,BmI,BUa,Bdi],CqO=[U,F,Cbm,BUd,BtL,Boh,BtK,CJJ,BUT,BVd],CqN=[U,F,Cbm,BUd,BtL,Boh,BtK,BtJ,BUT,BUa],CqM=[U,F,Cbm,BUd,BtI,BtH,BmH,CJI,BUT,BVd],CqL=[U,F,Cbm,BUd,BtI,BtH,BmH,CJH,BUT,BUa],Cor=[U,Bz,Cbm,BlC,Bpj,Bpi,Bph,BUf,CJG,CJF,BVd],Coq=[U,Bz,Cbm,BlC,Bpj,Bpi,Bph,BUf,CBT,CBS,BUa],CqK=[U,F,Cbm,BUd,BtG,BXx,BtF,BjQ,BUT,BVd],CqJ=[U,F,Cbm,BUd,BtG,BXx,BtF,Bgh,BUT,BUa],CqI=[U,F,Cbm,BUd,BZE,BbN,BtE,BmF,BUT,BVd],CqH=[U,F,Cbm,BUd,BZE,BbN,BtE,BjP,BUT,BUa],CqG=[U,F,Cbm,BUd,BZE,BtD,BtC,CBR,BUT,BVd],CqF=[U,F,Cbm,BUd,BZE,BtD,BtC,CBQ,BUT,BUa],CqE=[U,F,Cbm,BUd,BZf,Bbz,Bkg,BjR,BUT,BVd],CqD=[U,F,Cbm,BUd,BZf,Bbz,Bkg,Baw,BUT,BUa],CqC=[U,F,Cbm,BUd,BtB,BtA,Bdq,BjR,BUT,BVd],CqB=[U,F,Cbm,BUd,BtB,BtA,Bdq,Baw,BUT,BUa],CqA=[U,F,Cbm,BUd,BjO,Bsz,Bsy,BjQ,BUT,BVd],Cpz=[U,F,Cbm,BUd,BjO,Bsz,Bsy,Bgh,BUT,BUa],Cpy=[U,F,Cbm,BUd,BZt,Bbz,Bsx,BjR,BUT,BVd],Cpx=[U,F,Cbm,BUd,BZt,Bbz,Bsx,Baw,BUT,BUa],Cop=[U,Bz,Cbm,BlC,Bpg,Bpf,Bpe,BUf,CJE,CJD,BVd],Coo=[U,Bz,Cbm,BlC,Bpg,Bpf,Bpe,BUf,BtV,BxF,BUa],CpA=[U,b,Cbm,BVD,BbM,BWB,Bsw,Bta,CJC,BVd,CJB],Coz=[U,b,Cbm,BVD,BbM,BWB,Bsw,BXc,BxE,BUa,CJB],Cpw=[U,F,Cbm,BUd,BYX,Bbz,Bsv,BmF,BUT,BVd],Cpv=[U,F,Cbm,BUd,BYX,Bbz,Bsv,BjP,BUT,BUa],Coy=[U,b,Cbm,BVD,BYN,Bsu,BjN,CJA,CIz,BVd,Bdh],Cox=[U,b,Cbm,BVD,BYN,Bsu,BjN,CBO,CIy,BUa,Bdh],Cow=[U,b,Cbm,BVD,Bst,Bss,BjV,BjQ,CIx,BVd,CIw],Cov=[U,b,Cbm,BVD,Bst,Bss,BjV,Bgh,CBN,BUa,CIw],Cpu=[U,F,Cbm,BUd,BZf,Bsr,BjN,BjQ,BUT,BVd],Cpt=[U,F,Cbm,BUd,BZf,Bsr,BjN,Bgh,BUT,BUa],Cps=[U,F,Cbm,BUd,BjO,Bsq,BmJ,BmF,BUT,BVd],Cpr=[U,F,Cbm,BUd,BjO,Bsq,BmJ,BjP,BUT,BUa],Cph=[U,ADu,Cbm,BUd,BUX,BZK,BUg,BUc,BUT,BUa],Cpg=[U,ADv,Cbm,BUd,BUX,Bac,BUg,BUc,BUT,BUa],Cou=[U,b,Cbm,BVD,Bke,Bkd,Bkc,Bkb,BVP,Bae,BUa],Cpq=[U,F,Cbm,BUd,BZo,BaD,BUt,BiO,BUT,BUr],Cpp=[U,F,Cbm,BUd,BZo,BaD,BUt,BXc,BUT,BUa],Cot=[U,b,Cbm,BVD,CBB,CIq,Brl,Buu,BXy,BUT,BUa],Cpf=[U,ACn,Cbm,BUd,BUX,BXS,BUg,BUc,BUT,BUa],Cpe=[U,ACo,Cbm,BUd,BUX,BYT,BUg,BUc,BUT,BUa],Cpd=[U,ACp,Cbm,BUd,BUX,BXU,BUg,BUc,BUT,BUa],Cpc=[U,ACq,Cbm,BUd,BUX,BZS,BUg,BUc,BUT,BUa],Cpb=[U,ACr,Cbm,BUd,BUX,BXs,BUg,BUc,BUT,BUa],Cpa=[U,ACs,Cbm,BUd,BUX,BXx,BUg,BUc,BUT,BUa],Cpk=[U,xF,CcI,BUd,BUX,BaU,BUf,BUc,BUT,BUa],CpZ=[U,AaK,Cbw,BUd,BUX,Bac,BUg,BWI,BUT,BUr],CpY=[U,AWs,Cbn,BUd,BUX,BXj,BUg,BWI,BUT,BUr],CpX=[U,APP,Cbp,BUd,BUX,BWg,BUg,BUc,BUT,BUa],CpW=[U,APQ,Cbp,BUd,BUX,BWP,BUg,BUc,BUT,BUa];

/* pass 12 (array) */
const Csh=[U,'New'+" "+DP+' /'+Ajc+' CM 132E',Cle,BUd,BUX,BaU,BUf,BUc,BUT,CVy,CQk],Csj=[U,Dg+' / BLM 4N'+DE,ClZ,BUd,BUX,Bac,BUg,BWI,BUT,CVz,BUl,BUk,CQj],Csi=[U,Bx+' / BLM 59N'+DE,ClV,BUd,BUX,BXj,BUg,BWI,BUT,CVz,BUl,BUk,CQi];
module.exports = [[Ei,Ag+BT+a,[ClU],[Cbp]],[ARr,BCo+JC+a,[Clz],[[S,hv,CXM,BUU,BUW]]],['7686',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'7686']]],Cpj],['7373',AuO,[[S,'GRS'+AjV,CWg,BUU,BUu,[B,Bo,'7373']]],Cpj],['7139',AmC+a,[[S,'WGS 84',[V,Ao,Bld],BUU,BUu,[B,Bo,'7139']]],[Cgl]],['7136',AmC+a,[[S,'WGS 84',[V,Ao,Bld],BUU,BUu,[B,Bo,'7136']]],[Cgl]],['7133',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'7133']]],Cpj],['7086',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'7086']]],Cpj],['7084',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'7084']]],Cpj],['7073',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'7073']]],Cpj],['7041',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'7041']]],Cpj],['7039',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'7039']]],Cpj],['7037',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'7037']]],Cpj],['7035',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'7035']]],Cpj],['6990',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'6990']]],Cpj],['6983',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'6983']]],Cpj],['6894',BPz+' +towgs84=-63,176,185,0,0,0,0'+a,[[S,Cg+' 1880 mod.',[V,Ao,BaT,[i,GX,'raw:176','raw:185',D,D,D,D]],BUU,BUu,[B,Bo,'6894']]],[Cei]],['6892',BPz+AAp+a,[[S,Cg+' 1880 mod.',Cbk,BUU,BUu,[B,Bo,'6892']]],[Cei]],['6883',AkB+' +towgs84=-235,-110,393,0,0,0,0'+a,[[S,Av+' 1909 (Hayford)',[V,Ao,CPr,[i,'raw:-235','raw:-110','raw:393',D,D,D,D]],BUU,BUu,[B,Bo,'6883']]],[[S,Av+' 1909 (Hayford)',[V,AT,CPr],BUU,BUW]]],['6882',BPz+' +towgs84=-183,-15,273,0,0,0,0'+a,[[S,Cg+' 1880 mod.',[V,Ao,BaT,[i,'raw:-183',IB,'raw:273',D,D,D,D]],BUU,BUu,[B,Bo,'6882']]],[Cei]],['6881',BPz+' +towgs84=-24,-203,268,0,0,0,0'+a,[[S,Cg+' 1880 mod.',[V,Ao,BaT,[i,as,Zh,ATK,D,D,D,D]],BUU,BUu,[B,Bo,'6881']]],[Cei]],['6783',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'6783']]],Cpj],['6706',AuO,[[S,'GRS'+AjV,CWg,BUU,BUu,[B,Bo,'6706']]],Cpj],['6668',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'6668']]],Cpj],['6365',AuO,[[S,'GRS'+AjV,CWg,BUU,BUu,[B,Bo,'6365']]],Cpj],['6325',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'6325']]],Cpj],[NV,Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,NV]]],Cpj],['6318',Asj,[[S,'GRS'+AjV,CWE,BUU,BUu,[B,Bo,'6318']]],Cpj],['6311',AmC+oH+a,[[S,'WGS 84',Cbj,BUU,BUu,[B,Bo,'6311']]],[Cgl]],['6207',BFU+' +towgs84=293.17,726.18,245.36,0,0,0,0'+a,[[S,Apw,[V,Ao,[P,Au,Es,ANd],[i,'raw:293.17','raw:726.18','raw:245.36',D,D,D,D]],BUU,BUu,[B,Bo,'6207']]],[[S,Apw,[V,AT,[P,MU,Es,ANd]],BUU,BUW]]],['6135',AuO,[[S,'CIGD11',[V,'Cayman_Islands_Geodetic_Datum_2011',CVx,BUV,[B,K,'1100']],CVw,CVv,Bmz]],[[S,'CIGD11',[V,'D_Cayman_Islands_Geodetic_Datum_2011',BUh],BUU,BUW]]],['5886',Asj,[Crl],[[S,'TGD2005',[V,AGH,BUh],BUU,BUW]]],['5681',BHZ,[Cne],[[S,AJs,CZM,BUU,BUW]]],['5593',AuO,[Crk],[[S,'FEH2010',[V,AIJ,BUh],BUU,BUW]]],['5561',AoR+Mf+a,[Cmk],[[S,eJ,CXy,BUU,BUW]]],['5546',AuO,[Cno],[[S,'PNG94',CZt,BUU,BUW]]],['5527',BCo+MX+a,[Cmd],[[S,Ys,CXu,BUU,BUW]]],['5524',BFS,[Cmo],[[S,jx+' Alegre 1961',CZL,BUU,BUW]]],['5489',AuO,[Crr],[[S,'RGAF09',[V,sF,BUh],BUU,BUW]]],['5467',BIQ,[CoP],[[S,xl+' 1911',CbP,BUU,BUW]]],['5464',BMv+a,[Cpo],[[S,'Sibun Gorge 1922',[V,AVV,BhF],BUU,BUW]]],['5451',Alx+PB+a,[CmZ],[[S,dm+' 1935',CYJ,BUU,BUW]]],['5393',AuO,[[S,AdW,[V,'SIRGAS_ES2007_8',CVx,BUV,[B,K,'1069']],CVw,CVv,[B,K,'5393']]],[[S,AdW,[V,'D_SIRGAS_ES2007_8',BUh],BUU,BUW]]],['5381',BIC,[CpU],[[S,sB,CbO,BUU,BUW]]],['5373',AuO,[CoH],[[S,xP,CZg,BUU,BUW]]],['5371',AuO,[[S,'MACARIO SOLIS',[V,'Sistema_Geodesico_Nacional_de_Panama_MACARIO_SOLIS',CVx,BUV,[B,K,'1066']],CVw,CVv,[B,K,'5371']]],[[S,'MACARIO SOLIS',[V,'D_Sistema_Geodesico_Nacional_de_Panama_MACARIO_SOLIS',BUh],BUU,BUW]]],['5365',BIC,[CsL],[[S,'CR05',[V,AYQ,BUw],BUU,BUW]]],['5360',AuO,[CpT],[[S,sC,CbN,BUU,BUW]]],['5354',AuO,[CoC],[[S,AUj,CZs,BUU,BUW]]],['5340',AuO,[CmY],[[S,ch+' 2007',CYI,BUU,BUW]]],['5324',AuO,[CoB],[[S,AGk,CZr,BUU,BUW]]],[su,AuO,[Clp],[[S,Xg+' 03',CXD,BUU,BUW]]],[ARs,AuO,[Cly],[[S,hw,CXL,BUU,BUW]]],['5246',Asj,[Csd],[[S,AbC,[V,xD,BUh],BUU,BUW]]],['5233',BFU+oW+a,[CsC],[[S,'SLD99',[V,AJx,BZG],BUU,BUW]]],['5229',Ako+rZ+rB+a,[[S,AXP+cj,[V,'System_Jednotne_Trigonometricke_Site_Katastralni_05_Ferro',CWJ,BeF,[B,K,'1055']],CXI,CVv,[B,K,'5229']]],[[S,AXP+cj,[V,'D_System_Jednotne_Trigonometricke_Site_Katastralni_05_Ferro',BVM],BhO,BUW]]],['5228',Ako+rZ+a,[[S,AXP,[V,'System_Jednotne_Trigonometricke_Site_Katastralni_05',CWJ,BeF,[B,K,'1052']],CVw,CVv,[B,K,'5228']]],[[S,AXP,[V,'D_System_Jednotne_Trigonometricke_Site_Katastralni_05',BVM],BUU,BUW]]],['5132',BHZ,[Cmz],[[S,QL+' 1892',CZK,BUU,BUW]]],['5013',AuO,[CnC],[[S,AGN,CYl,BUU,BUW]]],['4904',Ako+AAv+' +pm=lisbon'+a,[[S,jo+' 1890'+wo,[V,'Lisbon_1890_Lisbon',CWJ,BnK,[B,K,'6904']],CYv,CVv,[B,K,'4904']]],[[S,jo+' 1890'+wo,CaJ,CFB,BUW]]],['4903',Ag+' +a=6378298.3'+AFy+' +pm=madrid'+a,[Cqn],[[S,Aaw+' 1870'+AcS,CaI,[T,Aaw,kg],BUW]]],['4901',Ag+' +a=6376523'+AFz+Agj+a,[Crq],[[S,'ATF'+WJ,Cbg,CPq,Bcs]]],['4824',BFS,[[S,'Principe',[V,'Principe',CWC,[B,K,'1046']],CVw,CVv,[B,K,'4824']]],[[S,'Principe',[V,'D_Principe',BUs],BUU,BUW]]],['4823',BFS,[[S,'Sao Tome',[V,'Sao_Tome',CWC,[B,K,'1044']],CVw,CVv,[B,K,'4823']]],[[S,'Sao Tome',[V,'D_Sao_Tome',BUs],BUU,BUW]]],['4821',ArZ+rC+a,[[S,Aaq+' 1879'+WJ,[V,'Voirol_1879_Paris',CWO,[B,K,'6821']],CXB,CWv,[B,K,'4821']]],[[S,Aaq+' 1879'+WJ,CZf,Bea,Bcs]]],['4820',Ako+dz+ADw+a,[Csc],[[S,BGV,CZJ,BrA,BUW]]],['4818',Ako+Zw+rB+a,[Con],[[S,AwD,CYZ,BhO,BUW]]],['4817',Ag+AxF+a,[CmL],[[S,'NGO 1948'+lr,CXt,Blc,BUW]]],['4816',AmQ+BEN+rC+a,[CsP],[[S,cs+WJ,CYW,Bea,Bcs]]],['4815',Ako+' +pm=athens'+a,[[S,'Greek (Athens)',[V,'Greek_Athens',CWJ,[B,K,'6815']],[T,'Athens',Agl,[B,K,'8912']],CVv,[B,K,'4815']]],[[S,'Greek (Athens)',CbZ,[T,'Athens',Agl],BUW]]],['4814',Ako+' +pm=stockholm'+a,[[S,'RT38 (Stockholm)',[V,'Stockholm_1938_Stockholm',CWJ,[B,K,'6814']],[T,'Stockholm',bn,[B,K,'8911']],CVv,[B,K,'4814']]],[[S,'RT38 (Stockholm)',CYH,[T,'Stockholm',bn],BUW]]],['4813',Ako+Rx+ADw+a,[CsO],[[S,eD+eB,CYG,BrA,BUW]]],['4811',ArZ+hs+rC+a,[[S,Aaq+' 1875'+WJ,[V,'Voirol_1875_Paris',CWO,BlX,[B,K,'6811']],CXB,CWv,[B,K,'4811']]],[[S,Aaq+' 1875'+WJ,CZe,Bea,Bcs]]],['4810',AkB+bb+rC+a,[Com],[[S,BEM,CYk,Bea,Bcs]]],['4809',AkB+' +pm=brussels'+a,[Cqd],[[S,'Belge 1950'+AIy,CbM,[T,AUr,ACt],BUW]]],['4808',Ako+ADw+a,[[S,'Padang'+eB,[V,'Padang_1884_Jakarta',CWJ,[B,K,'6808']],CXv,CVv,[B,K,'4808']]],[[S,'Padang'+eB,CaH,BrA,BUW]]],['4807',AmQ+Aru+rC+a,[CmV],[[S,'NTF'+WJ,CXh,Bea,Bcs]]],['4806',AkB+QO+' +pm=rome'+a,[[S,'Monte Mario (Rome)',[V,'Monte_Mario_Rome',CWC,BcE,[B,K,'6806']],[T,'Rome',ANf,[B,K,'8906']],CVv,[B,K,'4806']]],[[S,'Monte Mario (Rome)',CZI,[T,'Rome',ANf],BUW]]],['4805',Ako+Art+a,[CmO],[[S,'MGI'+cj,CXE,BhO,BUW]]],['4804',Ako+dA+ADw+a,[CsN],[[S,tE+eB,CZd,BrA,BUW]]],['4803',AkB+VH+' +pm=lisbon'+a,[Col],[[S,BEL,CYt,CFB,BUW]]],['4802',AkB+Uu+' +pm=bogota'+a,[[S,AmU+' (Bogota)',[V,'Bogota_1975_Bogota',CWC,BcD,[B,K,'6802']],[T,AUY,kh,[B,K,'8904']],CVv,[B,K,'4802']]],[[S,AmU+' (Bogota)',CYV,[T,AUY,kh],BUW]]],['4801',Ako+Zs+' +pm=bern'+a,[Cpn],[[S,'Bern 1898 (Bern)',CaX,CQf,BUW]]],['4765',AuO,[Cqm],[[S,'Slovenia 1996',[V,ADn,BUh],BUU,BUW]]],['4764',AuO,[CnJ],[[S,hy,CYj,BUU,BUW]]],['4763',BIC,[Cre],[[S,AIT+' 2006',[V,AdZ,BUw],BUU,BUW]]],['4762',BIC,[Crj],[[S,'BDA2000',[V,Agm,BUw],BUU,BUW]]],['4761',AuO,[Cnd],[[S,AJt,CZH,BUU,BUW]]],['4760',Ag+' +ellps=WGS66'+a,[[S,'WGS 66',[V,'World_Geodetic_System_1966',CYb,[B,K,'6760']],CVw,CVv,[B,K,'4760']]],[[S,'WGS 66',[V,'D_World_Geodetic_System_1966',BvF],BUU,BUW]]],[FK,AuO,[ClW],[[S,AL,CWM,BUU,BUW]]],['4758',BIC,[CoA],[[S,AGl,CZq,BUU,BUW]]],['4757',AmC+a,[CsB],[[S,'SVY21',CbX,BUU,BUW]]],['4756',AmC+YV+a,[Cok],[[S,ASy,CbL,BUU,BUW]]],[io,BIC,[Clo],[[S,Xf,CWp,BUU,BUW]]],[AUd,AkB+FQ+a,[CmI],[[S,YX,CXV,BUU,BUW]]],['4753',BFS,[[S,'fk89',[V,'fk89',CWC,[B,K,'6753']],CVw,CVv,[B,K,'4753']]],[[S,'fk89',[V,'D_fk89',BUs],BUU,BUW]]],['4752',Ag+AXn+AdF+wg+a,[Cqc],[[S,'Viti Levu 1912',[V,AbL,CEo],BUU,BUW]]],['4751',Ag+AdH+AGA+a,[CoG],[[S,Afc+' (RSO)',CbK,BUU,BUW]]],['4750',AmC+ABo+a,[CrK],[[S,'ST87 Ouvea',CaP,BUU,BUW]]],['4749',AuO,[Cnm],[[S,oR,CZG,BUU,BUW]]],['4748',Ag+AXn+AdF+wg+a,[[S,'Vanua Levu 1915',[V,'Vanua_Levu_1915',CXm,Bne,[B,K,'6748']],CVw,CVv,[B,K,'4748']]],[[S,'Vanua Levu 1915',[V,'D_Vanua_Levu_1915',CEo],BUU,BUW]]],[im,AuO,[Cln],[[S,ii,CWo,BUU,BUW]]],['4746',BHZ,[CnF],[[S,'PD/83',CZF,BUU,BUW]]],['4745',BHZ,[CnE],[[S,'RD/83',CZE,BUU,BUW]]],['4744',BIP,[Crd],[[S,ASs+' 1934',[V,Ago,BVV],BUU,BUW]]],['4743',Akm+VI+a,[CnV],[[S,AcM+' 1979',CZp,BUU,BUW]]],[Abu,Asj,[CmT],[[S,cf,CXg,BUU,BUW]]],['4741',BFS,[CsK],[[S,'FD54',[V,AVX,BUs],BUU,BUW]]],['4740',Ag+' +a=6378136 +b=6356751.361745712 +towgs84=0,0,1.5,-0,-0,0.076,0'+a,[[S,'PZ-90',[V,'Parametrop_Zemp_1990',[P,'PZ-90','raw:6378136',AYR,[B,K,'7054']],[i,D,D,'raw:1.5',BK,BK,'raw:0.076',D],[B,K,'6740']],CVw,CVv,[B,K,'4740']]],[[S,'PZ-90',[V,'D_Parametrop_Zemp_1990',[P,'PZ_90','raw:6378136',AYR]],BUU,BUW]]],['4739',AkB+' +towgs84=-156,-271,-189,0,0,0,0'+a,[[S,'Hong Kong 1963(67)',[V,'Hong_Kong_1963_67',CWC,[i,'raw:-156','raw:-271',ob,D,D,D,D],[B,K,'6739']],CVw,CVv,[B,K,'4739']]],[[S,'Hong Kong 1963(67)',[V,'D_Hong_Kong_1963_67',BUs],BUU,BUW]]],['4738',BMv+a,[Cqb],[[S,'Hong Kong 1963',[V,AbN,BhF],BUU,BUW]]],[Afh,AuO,[CmC],[[S,'Korea 2000',CXl,BUU,BUW]]],['4736',Akm+' +towgs84=260,12,-147,0,0,0,0'+a,[[S,'Deception'+fA,[V,'Deception_Island',CWH,[i,'raw:260',OY,Ne,D,D,D,D],[B,K,'6736']],CVw,CVv,[B,K,'4736']]],[[S,'Deception'+fA,[V,'D_Deception_Island',BVV],BUU,BUW]]],['4735',AkB+' +towgs84=647,1777,-1124,0,0,0,0'+a,[[S,'Kusaie 1951',[V,'Kusaie_1951',CWC,[i,'raw:647','raw:1777','raw:-1124',D,D,D,D],[B,K,'6735']],CVw,CVv,[B,K,'4735']]],[[S,'Kusaie 1951',[V,'D_Kusaie_1951',BUs],BUU,BUW]]],['4734',AkB+' +towgs84=-632,438,-609,0,0,0,0'+a,[[S,'Tristan 1968',[V,'Tristan_1968',CWC,[i,'raw:-632','raw:438','raw:-609',D,D,D,D],[B,K,'6734']],CVw,CVv,[B,K,'4734']]],[[S,'Tristan 1968',[V,'D_Tristan_1968',BUs],BUU,BUW]]],['4733',AkB+' +towgs84=276,-57,149,0,0,0,0'+a,[[S,'Wake'+fA+' 1952',[V,'Wake_Island_1952',CWC,[i,'raw:276',GT,sK,D,D,D,D],[B,K,'6733']],CVw,CVv,[B,K,'4733']]],[[S,'Wake'+fA+' 1952',[V,'D_Wake_Island_1952',BUs],BUU,BUW]]],['4732',Ag+' +a=6378270 +b=6356794.343434343 +towgs84=102,52,-38,0,0,0,0'+a,[[S,'Marshall'+AUX+' 1960',[V,'Marshall_Islands_1960',[P,'Hough 1960','raw:6378270',Ap,[B,K,'7053']],[i,UX,YA,qF,D,D,D,D],[B,K,'6732']],CVw,CVv,[B,K,'4732']]],[[S,'Marshall'+AUX+' 1960',[V,'D_Marshall_Islands_1960',[P,'Hough_1960','raw:6378270',Ap]],BUU,BUW]]],['4730',AkB+' +towgs84=170,42,84,0,0,0,0'+a,[[S,'Santo 1965',[V,'Santo_1965',CWC,[i,'raw:170',Pv,aN,D,D,D,D],[B,K,'6730']],CVw,CVv,[B,K,'4730']]],[[S,'Santo 1965',[V,'D_Santo_DOS_1965',BUs],BUU,BUW]]],['4729',AkB+ASY+a,[Crc],[[S,AIT+' 1967',[V,Ada,BUs],BUU,BUW]]],['4728',AkB+' +towgs84=-307,-92,127,0,0,0,0'+a,[[S,'Pico de las Nieves 1984',[V,'Pico_de_las_Nieves_1984',CWC,[i,'raw:-307',Og,kN,D,D,D,D],[B,K,'6728']],CVw,CVv,[B,K,'4728']]],[[S,'Pico de las Nieves 1984',[V,'D_Pico_de_Las_Nieves',BUs],BUU,BUW]]],['4727',AkB+' +towgs84=403,-81,277,0,0,0,0'+a,[[S,'Midway 1961',[V,'Midway_1961',CWC,[i,'raw:403',EW,'raw:277',D,D,D,D],[B,K,'6727']],CVw,CVv,[B,K,'4727']]],[[S,'Midway 1961',[V,'D_Midway_1961',BUs],BUU,BUW]]],['4726',Alx+ra+a,[Crp],[[S,'SIGD61',[V,ASZ,BUx],BUU,BUW]]],['4725',AkB+' +towgs84=189,-79,-202,0,0,0,0'+a,[[S,'Johnston'+fA+' 1961',[V,'Johnston_Island_1961',CWC,[i,'raw:189',Zy,'raw:-202',D,D,D,D],[B,K,'6725']],CVw,CVv,[B,K,'4725']]],[[S,'Johnston'+fA+' 1961',[V,'D_Johnston_Island_1961',BUs],BUU,BUW]]],['4724',AkB+' +towgs84=208,-435,-229,0,0,0,0'+a,[[S,'Diego Garcia 1969',[V,'Diego_Garcia_1969',CWC,[i,'raw:208','raw:-435','raw:-229',D,D,D,D],[B,K,'6724']],CVw,CVv,[B,K,'4724']]],[[S,'Diego Garcia 1969',[V,'D_Diego_Garcia_1969',BUs],BUU,BUW]]],['4723',Alx+px+a,[Cro],[[S,'GCGD59',[V,AUP,BUx],BUU,BUW]]],['4722',AkB+' +towgs84=-794,119,-298,0,0,0,0'+a,[[S,'South'+Abp+' 1968',[V,'South_Georgia_1968',CWC,[i,'raw:-794',wE,'raw:-298',D,D,D,D],[B,K,'6722']],CVw,CVv,[B,K,'4722']]],[[S,'South'+Abp+' 1968',[V,'D_South_Georgia_1968',BUs],BUU,BUW]]],['4721',AkB+ht+a,[CoN],[[S,'Fiji 1956',CbJ,BUU,BUW]]],['4720',Ag+Ajz+a,[Crb],[[S,'Fiji 1986',CaW,BUU,BUW]]],['4719',AkB+' +towgs84=211,147,111,0,0,0,0'+a,[[S,'Easter'+fA+' 1967',[V,'Easter_Island_1967',CWC,[i,'raw:211',OR,GY,D,D,D,D],[B,K,'6719']],CVw,CVv,[B,K,'4719']]],[[S,'Easter'+fA+' 1967',[V,'D_Easter_Island_1967',BUs],BUU,BUW]]],['4718',AkB+' +towgs84=230,-199,-752,0,0,0,0'+a,[[S,'Solomon 1968',[V,'Solomon_1968',CWC,[i,Ach,AUs,'raw:-752',D,D,D,D],[B,K,'6718']],CVw,CVv,[B,K,'4718']]],[[S,'Solomon 1968',[V,'D_Solomon_1968',BUs],BUU,BUW]]],['4717',Alx+' +towgs84=-2,151,181,0,0,0,0'+a,[[S,py+' Canaveral',[V,'Cape_Canaveral',CWG,[i,AcT,'raw:151','raw:181',D,D,D,D],[B,K,'6717']],CVw,CVv,[B,K,'4717']]],[[S,py+' Canaveral',[V,'D_Cape_Canaveral',BUx],BUU,BUW]]],['4716',AkB+' +towgs84=298,-304,-375,0,0,0,0'+a,[[S,'Phoenix'+AUX+' 1966',[V,'Phoenix_Islands_1966',CWC,[i,'raw:298','raw:-304','raw:-375',D,D,D,D],[B,K,'6716']],CVw,CVv,[B,K,'4716']]],[[S,'Phoenix'+AUX+' 1966',[V,'D_Phoenix_Islands_1966',BUs],BUU,BUW]]],['4715',AkB+' +towgs84=-104,-129,239,0,0,0,0'+a,[[S,'Camp Area Astro',[V,'Camp_Area_Astro',CWC,[i,AJC,PH,'raw:239',D,D,D,D],[B,K,'6715']],CVw,CVv,[B,K,'4715']]],[[S,'Camp Area Astro',[V,'D_Camp_Area',BUs],BUU,BUW]]],['4714',AkB+' +towgs84=-127,-769,472,0,0,0,0'+a,[[S,'Bellevue',[V,'Bellevue',CWC,[i,'raw:-127','raw:-769','raw:472',D,D,D,D],[B,K,'6714']],CVw,CVv,[B,K,'4714']]],[[S,'Bellevue',[V,'D_Bellevue_IGN',BUs],BUU,BUW]]],['4713',Akm+' +towgs84=-79,-129,145,0,0,0,0'+a,[[S,'Ayabelle Lighthouse',[V,'Ayabelle_Lighthouse',CWH,[i,Zy,PH,sL,D,D,D,D],[B,K,'6713']],CVw,CVv,[B,K,'4713']]],[[S,'Ayabelle Lighthouse',[V,'D_Ayabelle',BVV],BUU,BUW]]],['4712',AkB+' +towgs84=-205,107,53,0,0,0,0'+a,[[S,'Ascension'+fA+' 1958',[V,'Ascension_Island_1958',CWC,[i,'raw:-205','raw:107',rF,D,D,D,D],[B,K,'6712']],CVw,CVv,[B,K,'4712']]],[[S,'Ascension'+fA+' 1958',[V,'D_Ascension_Island_1958',BUs],BUU,BUW]]],['4711',AkB+' +towgs84=124,-234,-25,0,0,0,0'+a,[[S,'Marcus'+fA+' 1952',[V,'Marcus_Island_1952',CWC,[i,sM,'raw:-234','raw:-25',D,D,D,D],[B,K,'6711']],CVw,CVv,[B,K,'4711']]],[[S,'Marcus'+fA+' 1952',[V,'D_Marcus_Island_1952',BUs],BUU,BUW]]],['4710',AkB+' +towgs84=-320,550,-494,0,0,0,0'+a,[[S,'St. Helena 1971',[V,'St_Helena_1971',CWC,[i,'raw:-320','raw:550','raw:-494',D,D,D,D],[B,K,'6710']],CVw,CVv,[B,K,'4710']]],[[S,'St. Helena 1971',[V,'D_St_Helena_1971',BUs],BUU,BUW]]],['4709',AkB+' +towgs84=145,75,-272,0,0,0,0'+a,[[S,'Iwo Jima 1945',[V,'Iwo_Jima_1945',CWC,[i,sL,Lw,'raw:-272',D,D,D,D],[B,K,'6709']],CVw,CVv,[B,K,'4709']]],[[S,'Iwo Jima 1945',[V,'D_Iwo_Jima_1945',BUs],BUU,BUW]]],['4708',BCo+' +towgs84=-491,-22,435,0,0,0,0'+a,[[S,'Cocos'+AUX+' 1965',[V,'Cocos_Islands_1965',CWh,[i,'raw:-491',dV,'raw:435',D,D,D,D],[B,K,'6708']],CVw,CVv,[B,K,'4708']]],[[S,'Cocos'+AUX+' 1965',[V,'D_Cocos_Islands_1965',BYd],BUU,BUW]]],['4707',AkB+' +towgs84=114,-116,-333,0,0,0,0'+a,[[S,'Tern'+fA+' 1961',[V,'Tern_Island_1961',CWC,[i,Rp,'raw:-116','raw:-333',D,D,D,D],[B,K,'6707']],CVw,CVv,[B,K,'4707']]],[[S,'Tern'+fA+' 1961',[V,'D_Tern_Island_1961',BUs],BUU,BUW]]],['4706',Ag+aO+AEQ+a,[Coa],[[S,'Egypt Gulf of Suez S-650 TL',[V,AER,BcH],BUU,BUW]]],['4705',BFS,[Cra],[[S,'Mhast'+AJD,[V,AbO,BUs],BUU,BUW]]],['4704',BFS,[CrZ],[[S,'Mhast'+ATM,[V,Adb,BUs],BUU,BUW]]],['4703',BIP,[[S,'Mhast 1951',[V,'Missao_Hidrografico_Angola_y_Sao_Tome_1951',CWH,[B,K,'6703']],CVw,CVv,[B,K,'4703']]],[[S,'Mhast 1951',[V,'D_Mhast_1951',BVV],BUU,BUW]]],['4702',AuO,[Cnb],[[S,wG+' 1999',CZo,BUU,BUW]]],['4701',Akm+ZH+a,[Cmy],[[S,'IGCB 1955',CZD,BUU,BUW]]],['4700',BIP,[CnD],[[S,'IGN Astro 1960',CZn,BUU,BUW]]],['4699',Akm+AES+a,[Cql],[[S,'Le Pouce 1934',[V,Adc,BVV],BUU,BUW]]],['4698',AkB+AJy+a,[Cqz],[[S,'IGN 1962'+ATN,[V,AJi,BUs],BUU,BUW]]],[Afg,BIP,[Clt],[[S,'IGC 1962 6th'+lg+' South',CXk,BUU,BUW]]],['4696',BIP,[CoF],[[S,'Kasai 1953',CbI,BUU,BUW]]],['4695',Alx+RM+a,[Cmr],[[S,yL+' 1955',CYi,BUU,BUW]]],['4694',BIC,[Cmb],[[S,ch+' 94',CYF,BUU,BUW]]],['4693',AmC+AJz+a,[Cqa],[[S,'Nakhl-e Ghanem',[V,AbP,BUw],BUU,BUW]]],['4692',AkB+ACg+a,[CrJ],[[S,'Maupiti 83',[V,Ags,BUs],BUU,BUW]]],['4691',AkB+on+a,[CrY],[[S,'Moorea 87',CaG,BUU,BUW]]],['4690',AkB+oo+a,[CrX],[[S,'Tahiti 79',CaF,BUU,BUW]]],['4689',AkB+qf+a,[Cqk],[[S,'IGN63 Hiva Oa',[V,Add,BUs],BUU,BUW]]],['4688',AkB+oI+a,[CrF],[[S,'Fatu Iva 72',[V,Ade,BUs],BUU,BUW]]],['4687',Akl+Oy+a,[CnL],[[S,'RGPF',CZC,BUU,BUW]]],['4686',AuO,[CnI],[[S,ay,CYY,BUU,BUW]]],['4684',AkB+' +towgs84=-133,-321,50,0,0,0,0'+a,[[S,'Gan 1970',[V,'Gan_1970',CWC,[i,yf,'raw:-321',fQ,D,D,D,D],[B,K,'6684']],CVw,CVv,[B,K,'4684']]],[[S,'Gan 1970',[V,'D_Gan_1970',BUs],BUU,BUW]]],['4683',Alx+NM+a,[CnB],[[S,AcD,CYh,BUU,BUW]]],['4682',BFU+AGJ+a,[CrE],[[S,'Gulshan 303',CaE,BUU,BUW]]],['4680',Akm+' +towgs84=124.5,-63.5,-281,0,0,0,0'+a,[[S,'Nouakchott 1965',[V,'Nouakchott_1965',CWH,[i,AdJ,'raw:-63.5','raw:-281',D,D,D,D],[B,K,'6680']],CVw,CVv,[B,K,'4680']]],[[S,'Nouakchott 1965',[V,'D_Nouakchott_1965',BVV],BUU,BUW]]],['4679',Akm+' +towgs84=-80.01,253.26,291.19,0,0,0,0'+a,[[S,'Jouik 1961',[V,'Jouik_1961',CWH,[i,'raw:-80.01','raw:253.26','raw:291.19',D,D,D,D],[B,K,'6679']],CVw,CVv,[B,K,'4679']]],[[S,'Jouik 1961',[V,'D_Jouik_1961',BVV],BUU,BUW]]],['4678',AoR+' +towgs84=44.585,-131.212,-39.544,0,0,0,0'+a,[[S,'Lao 1997',[V,'Lao_National_Datum_1997',CWA,[i,'raw:44.585','raw:-131.212','raw:-39.544',D,D,D,D],[B,K,'6678']],CVw,CVv,[B,K,'4678']]],[[S,'Lao 1997',[V,'D_Lao_National_Datum_1997',BUn],BUU,BUW]]],['4677',AoR+a,[[S,'Lao 1993',[V,'Lao_1993',CWA,[B,K,'6677']],CVw,CVv,[B,K,'4677']]],[[S,'Lao 1993',[V,'D_Lao_1993',BUn],BUU,BUW]]],['4676',AoR+a,[[S,'Vientiane 1982',[V,'Vientiane_1982',CWA,[B,K,'6676']],CVw,CVv,[B,K,'4676']]],[[S,'Vientiane 1982',[V,'D_Vientiane_1982',BUn],BUU,BUW]]],['4675',Alx+' +towgs84=-100,-248,259,0,0,0,0'+a,[[S,'Guam 1963',[V,'Guam_1963',CWG,[i,HY,'raw:-248',Aci,D,D,D,D],[B,K,'6675']],CVw,CVv,[B,K,'4675']]],[[S,'Guam 1963',[V,'D_Guam_1963',BUx],BUU,BUW]]],[qD,AuO,[Clk],[[S,SD+' 2000',CWz,BUU,BUW]]],['4673',AkB+xE+a,[CpS],[[S,'Chatham'+AUX+' 1979',[V,AKA,BUs],BUU,BUW]]],['4672',AkB+ANg+a,[CpR],[[S,'Chatham'+AUX+' 1971',[V,ANh,BUs],BUU,BUW]]],['4671',ArZ+a,[CoM],[[S,Aaq+' 1879',CZf,BUU,BUW]]],['4670',BIC,[CoY],[[S,'IGM95',CbH,BUU,BUW]]],['4669',AuO,[CsA],[[S,'LKS94',[V,AbQ,BUh],BUU,BUW]]],['4668',AkB+' +towgs84=-86,-98,-119,0,0,0,0'+a,[[S,'ED79',[V,'European_Datum_1979',CWC,[i,RO,GQ,Zi,D,D,D,D],[B,K,'6668']],CVw,CVv,[B,K,'4668']]],[[S,'ED79',[V,'D_European_1979',BUs],BUU,BUW]]],['4667',BIC,[[S,'IKBD-92',[V,'Iraq_Kuwait_Boundary_Datum_1992',CWB,BUV,[B,K,'6667']],CVw,CVv,[B,K,'4667']]],[[S,'IKBD-92',[V,'D_Iraq_Kuwait_Boundary_1992',BUw],BUU,BUW]]],['4666',Ako+AAv+a,[[S,jo+' 1890',[V,'Lisbon_1890',CWJ,BnK,[B,K,'6666']],CVw,CVv,[B,K,'4666']]],[[S,jo+' 1890',CaJ,BUU,BUW]]],['4665',AkB+AAx+a,[Csb],[[S,BPy,[V,AET,BUs],BUU,BUW]]],['4664',AkB+ABk+a,[Csa],[[S,BPx,[V,ADo,BUs],BUU,BUW]]],['4663',AkB+AAr+a,[CqZ],[[S,'Porto Santo'+PP,[V,AVZ,BUs],BUU,BUW]]],['4662',AkB+ADp+a,[CpV],[[S,'IGN72 Grande Terre',[V,ASa,BUs],BUU,BUW]]],['4661',AuO,[Crz],[[S,'LKS92',CaD,BUU,BUW]]],['4660',AkB+nB+a,[Crh],[[S,'Helle'+gr,CaO,BUU,BUW]]],['4659',AuO,[Cry],[[S,'ISN93',[V,AKB,BUh],BUU,BUW]]],['4658',AkB+js+a,[CnU],[[S,AcN+' 1955',CZc,BUU,BUW]]],['4657',Ag+' +a=6377019.27 +b=6355762.5391 +towgs84=-28,199,5,0,0,0,0'+a,[[S,'Reykjavik 1900',[V,'Reykjavik_1900',[P,'Danish 1876',Agt,'raw:300',[B,K,'7051']],[i,ATO,'raw:199',WW,D,D,D,D],[B,K,'6657']],CVw,CVv,[B,K,'4657']]],[[S,'Reykjavik 1900',[V,'D_Reykjavik_1900',[P,'Danish_1876',Agt,'raw:300']],BUU,BUW]]],['4646',AkB+AJj+a,[Cqj],[[S,'Grand Comoros',[V,Adf,BUs],BUU,BUW]]],['4644',AkB+cX+a,[CnT],[[S,'NEA74'+AcC,CZb,BUU,BUW]]],['4643',AkB+oX+a,[CrI],[[S,'ST71 Belep',CaN,BUU,BUW]]],['4642',AkB+AKC+a,[Cpi],[[S,'ST84 Ile des Pins',[V,AUQ,BUs],BUU,BUW]]],['4641',AkB+ju+a,[CoE],[[S,'IGN53 Mare',CbG,BUU,BUW]]],['4639',AkB+AJk+a,[Crx],[[S,'MOP78',CbW,BUU,BUW]]],['4638',Alx+ASb+a,[CoX],[[S,'Saint Pierre et Miquelon 1950',[V,ACh,BUx],BUU,BUW]]],['4637',AkB+' +towgs84=325,154,172,0,0,0,0'+a,[[S,'Perroud 1950',[V,'Pointe_Geologie_Perroud_1950',CWC,[i,'raw:325',qG,AFE,D,D,D,D],[B,K,'6637']],CVw,CVv,[B,K,'4637']]],[[S,'Perroud 1950',[V,'D_Pointe_Geologie_Perroud_1950',BUs],BUU,BUW]]],['4636',AkB+' +towgs84=365,194,166,0,0,0,0'+a,[[S,'Petrels 1972',[V,'Petrels_1972',CWC,[i,'raw:365','raw:194',wF,D,D,D,D],[B,K,'6636']],CVw,CVv,[B,K,'4636']]],[[S,'Petrels 1972',[V,'D_Petrels_1972',BUs],BUU,BUW]]],['4633',AkB+ACi+a,[CrD],[[S,'IGN56 Lifou',CaC,BUU,BUW]]],['4632',AkB+AJl+a,[Cqy],[[S,'Combani 1950',[V,Agu,BUs],BUU,BUW]]],['4630',AkB+AUR+a,[CqW],[[S,'IGN72 Nuku Hiva',[V,AYT,BUs],BUU,BUW]]],['4629',AkB+qx+a,[Crg],[[S,'Tahaa 54',CaM,BUU,BUW]]],['4628',AkB+ANj+a,[CrW],[[S,'Tahiti 52',CaB,BUU,BUW]]],['4627',AuO,[CoW],[[S,'RGR92',CbF,BUU,BUW]]],['4626',AkB+AJm+a,[Cqx],[[S,'Reunion 1947',[V,Agv,BUs],BUU,BUW]]],['4625',AkB+ANk+a,[CrV],[[S,AbD+' 1938',CaA,BUU,BUW]]],['4624',AuO,[Coj],[[S,Afo,CbE,BUU,BUW]]],['4623',AkB+te+a,[CoV],[[S,'CSG67',CbD,BUU,BUW]]],['4622',AkB+AJn+a,[CrU],[[S,AbE+' 1948',CZz,BUU,BUW]]],['4621',AkB+AKD+a,[Cqw],[[S,'Fort Marigot',[V,Agw,BUs],BUU,BUW]]],['4620',Akm+' +towgs84=-106,-129,165,0,0,0,0'+a,[[S,'Point 58',[V,'Point_58',CWH,[i,'raw:-106',PH,LD,D,D,D,D],[B,K,'6620']],CVw,CVv,[B,K,'4620']]],[[S,'Point 58',[V,'D_Point_58',BVV],BUU,BUW]]],[st,AuO,[Clu],[[S,IO,CXC,BUU,BUW]]],[VU,AuO,[Cli],[[S,Cc,CWZ,BUU,BUW]]],['4616',AkB+AKE+a,[CqV],[[S,'Selvagem Grande',[V,AYU,BUs],BUU,BUW]]],['4615',AkB+AJo+a,[CrC],[[S,'Porto Santo',[V,AVb,BUs],BUU,BUW]]],['4614',AkB+lp+a,[Crw],[[S,'QND95',Cab,BUU,BUW]]],['4613',Ako+dz+a,[Coi],[[S,AUi,CZJ,BUU,BUW]]],[qC,AuO,[Cls],[[S,PV,CWy,BUU,BUW]]],['4611',AkB+jv+a,[Cqv],[[S,'Hong Kong'+Bp,[V,AbU,BUs],BUU,BUW]]],[WI,Ag+AkM+a,[Clg],[[S,'Xian'+Bp,CWd,BUU,BUW]]],[AUc,BIQ,[CmH],[[S,MZ,CXU,BUU,BUW]]],[AUb,BIQ,[CmG],[[S,Qn,CXT,BUU,BUW]]],['4607',Akm+ABl+a,[Cpm],[[S,'St. Vincent 1945',[V,AYV,BVV],BUU,BUW]]],['4606',Akm+AKF+a,[CqY],[[S,'St. Lucia 1955',[V,Adl,BVV],BUU,BUW]]],['4605',Akm+AUS+a,[CqX],[[S,'St. Kitts 1955',[V,Adm,BVV],BUU,BUW]]],['4604',Akm+ANl+a,[CrT],[[S,AbF+' 1958',[V,AYW,BVV],BUU,BUW]]],['4603',Akm+ANm+a,[Cqu],[[S,'Grenada 1953',[V,Agy,BVV],BUU,BUW]]],['4602',Akm+ANn+a,[Cqi],[[S,'Dominica 1945',[V,Ado,BVV],BUU,BUW]]],['4601',Akm+ANo+a,[Cqt],[[S,'Antigua 1943',[V,Agz,BVV],BUU,BUW]]],['4600',BIP,[Cqh],[[S,'Anguilla 1957',[V,Adp,BVV],BUU,BUW]]],['4558',AuO,[CrS],[[S,'RRAF 1991',CaV,BUU,BUW]]],[Vq,AoR+a,[Cle],[[S,'New'+" "+DP,CWa,BUU,BUW]]],[WH,Asj,[Clf],[[S,AlZ+' 2000',CWc,BUU,BUW]]],['4483',AuO,[CmR],[[S,yF+' Datum of 1993',CYU,BUU,BUW]]],['4475',AkB+AAs+a,[Cqg],[[S,'Cadastre 1997',[V,Adq,BUs],BUU,BUW]]],['4470',AuO,[Crv],[[S,'RGM04',[V,AAt,BUh],BUU,BUW]]],['4463',AuO,[Cri],[[S,'RGSPM06',[V,qg,BUh],BUU,BUW]]],[NK,Ag+Ajy+a,[Clb],[[S,'WGS'+Xv,CWS,BUU,BUW]]],[Nb,Ag+Ajz+a,[Clc],[[S,'WGS 72',CWT,BUU,BUW]]],['4319',Akl+AIL+a,[Crn],[[S,'KUDAMS',[V,AbV,BUh],BUU,BUW]]],['4318',AmC+sD+a,[Cob],[[S,'NGN',CZa,BUU,BUW]]],['4316',AkB+ACj+a,[Cos],[[S,'Dealul Piscului 1930',[V,AKG,BUs],BUU,BUW]]],['4315',ArZ+wh+a,[Cnt],[[S,'Conakry 1905',CbC,BUU,BUW]]],[Abt,Ako+Fn+a,[CmJ],[[S,'DHDN',CXf,BUU,BUW]]],['4313',AkB+ZK+a,[CoD],[[S,'Belge 1972',CbB,BUU,BUW]]],[Aff,Ako+FX+a,[CmQ],[[S,'MGI',CXE,BUU,BUW]]],['4311',AkB+bc+a,[Cnl],[[S,fu,CYs,BUU,BUW]]],['4310',ArZ+a,[CsJ],[[S,'Yoff',Cbe,BUU,BUW]]],['4309',AkB+' +towgs84=-155,171,37,0,0,0,0'+a,[[S,'Yacare',[V,'Yacare',CWC,[i,'raw:-155',MM,Xr,D,D,D,D],[B,K,'6309']],CVw,CVv,[B,K,'4309']]],[[S,'Yacare',[V,'D_Yacare',BUs],BUU,BUW]]],['4308',BHZ,[Cmn],[[S,'RT38',CYH,BUU,BUW]]],['4307',Akm+Ip+a,[CmS],[[S,'Nord Sahara 1959',CYT,BUU,BUW]]],['4306',BHZ,[[S,'Bern 1938',[V,'Bern_1938',CWJ,[B,K,'6306']],CVw,CVv,[B,K,'4306']]],[[S,'Bern 1938',[V,'D_Bern_1938',BVM],BUU,BUW]]],['4304',ArZ+hs+a,[CoL],[[S,Aaq+' 1875',CZe,BUU,BUW]]],['4303',Ag+aO+a,[Coh],[[S,AHE,CbA,BUU,BUW]]],['4302',BMv+iQ+a,[CoK],[[S,AUk+' 1903',Caz,BUU,BUW]]],[qB,Ako+DH+a,[Clr],[[S,QL,CWx,BUU,BUW]]],['4300',Ag+yt+Nl+a,[CsI],[[S,'TM75',Cbd,BUU,BUW]]],['4299',Ag+yt+Nl+a,[CsH],[[S,'TM65',Cbc,BUU,BUW]]],['4298',Ag+BEI+a,[Cmq],[[S,tr+' 1948',CYg,BUU,BUW]]],['4297',AkB+bb+a,[CpQ],[[S,gZ,CYk,BUU,BUW]]],['4295',BHZ,[[S,AdK,[V,AdK,CWJ,[B,K,'6295']],CVw,CVv,[B,K,'4295']]],[[S,AdK,[V,'D_Serindung',BVM],BUU,BUW]]],['4293',Ag+Ars+a,[Cmc],[[S,Od,CXs,BUU,BUW]]],['4292',AkB+wi+a,[Cnp],[[S,'Sapper Hill 1943',Cay,BUU,BUW]]],['4289',Ako+YW+a,[CpP],[[S,kR,Cax,BUU,BUW]]],['4288',BFS,[[S,'Loma Quintana',[V,'Loma_Quintana',CWC,[B,K,'6288']],CVw,CVv,[B,K,'4288']]],[[S,'Loma Quintana',[V,'D_Loma_Quintana',BUs],BUU,BUW]]],['4286',Ag+aO+a,[CrH],[[S,'Qatar 1948',CaL,BUU,BUW]]],['4285',AkB+ACk+a,[CrG],[[S,'Qatar 1974',CbV,BUU,BUW]]],[HX,AoR+AD+a,[ClY],[[S,Aje,CWP,BUU,BUW]]],[yJ,AuO,[Clx],[[S,gs,CXJ,BUU,BUW]]],['4282',ArZ+AKI+a,[Cqs],[[S,'Pointe Noire',[V,AhB,BWG],BUU,BUW]]],['4281',Ag+BPw+a,[Cna],[[S,wp+' 1923',CZm,BUU,BUW]]],['4280',BHZ,[[S,'Padang',[V,'Padang_1884',CWJ,[B,K,'6280']],CVw,CVv,[B,K,'4280']]],[[S,'Padang',CaH,BUU,BUW]]],['4279',BCi+a,[[S,'OS(SN)80',[V,'OS_SN_1980',CXH,[B,K,'6279']],CVw,CVv,[B,K,'4279']]],[[S,'OS(SN)80',[V,'D_OS_SN_1980',Bmm],BUU,BUW]]],['4278',BCi+a,[[S,'OSGB70',[V,'OSGB_1970_SN',CXH,[B,K,'6278']],CVw,CVv,[B,K,'4278']]],[[S,'OSGB70',[V,'D_OSGB_1970_SN',Bmm],BUU,BUW]]],['4277',BCi+rc+a,[CrR],[[S,'OSGB 1936',CaU,BUU,BUW]]],['4276',Ag+' +ellps=WGS66'+a,[[S,'NSWC 9Z-2',[V,'NSWC_9Z_2',CYb,[B,K,'6276']],CVw,CVv,[B,K,'4276']]],[[S,'NSWC 9Z-2',[V,'D_NSWC_9Z_2',BvF],BUU,BUW]]],['4275',AmQ+Aru+a,[[S,'NTF',[V,'Nouvelle_Triangulation_Francaise',CWO,BaR,[B,K,'6275']],CVw,CVv,[B,K,'4275']]],[[S,'NTF',CXh,BUU,BUW]]],['4274',AkB+iR+a,[CoO],[[S,'Datum 73',Caw,BUU,BUW]]],['4273',Ag+Aqt+Hz+a,[[S,'NGO 1948',[V,'NGO_1948',CXF,BZF,[B,K,'6273']],CVw,CVv,[B,K,'4273']]],[[S,'NGO 1948',CXt,BUU,BUW]]],[gx,AkB+Bk+a,[Cll],[CcV]],['4271',AkB+ANp+a,[CrQ],[[S,AJu+' 1972',[V,Adr,BUs],BUU,BUW]]],['4270',Akm+TB+a,[CoJ],[[S,ASs+' 1967',Cav,BUU,BUW]]],[EN,AuO,[ClV],[Cbn]],[HO,Ag+CA+a,[ClZ],[Cbw]],['4266',ArZ+va+a,[CpO],[[S,yl,Cau,BUU,BUW]]],['4265',AkB+QO+a,[CnO],[[S,'Monte Mario',CZI,BUU,BUW]]],['4263',Akm+ZL+a,[CnH],[[S,vh,CYX,BUU,BUW]]],['4262',Ako+ASd+a,[CsZ],[[S,AMM,Cat,BUU,BUW]]],['4261',ArZ+fa+a,[Cnk],[[S,fv,CYr,BUU,BUW]]],['4259',AkB+ADq+a,[Cqr],[[S,'Malongo 1987',[V,AhC,BUs],BUU,BUW]]],[OA,AuO,[Cld],[[S,ED,CWU,BUU,BUW]]],['4257',Ako+dA+a,[Csg],[[S,tE,CZd,BUU,BUW]]],['4256',Akm+' +towgs84=41,-220,-134,0,0,0,0'+a,[[S,'Mahe 1971',[V,'Mahe_1971',CWH,[i,Qx,'raw:-220',iC,D,D,D,D],[B,K,'6256']],CVw,CVv,[B,K,'4256']]],[[S,'Mahe 1971',[V,'D_Mahe_1971',BVV],BUU,BUW]]],['4255',AkB+' +towgs84=-333,-222,114,0,0,0,0'+a,[[S,'Herat'+QM,[V,'Herat_North',CWC,[i,'raw:-333','raw:-222',Rp,D,D,D,D],[B,K,'6255']],CVw,CVv,[B,K,'4255']]],[[S,'Herat'+QM,[V,'D_Herat_North',BUs],BUU,BUW]]],['4254',AkB+xs+a,[Cns],[[S,'Hito XVIII 1963',Cas,BUU,BUW]]],['4253',Alx+Yo+a,[Cml],[[S,'Luzon 1911',CYf,BUU,BUW]]],['4252',ArZ+a,[CsG],[[S,'Lome',Cbb,BUU,BUW]]],['4251',Akm+' +towgs84=-90,40,88,0,0,0,0'+a,[[S,'Liberia 1964',[V,'Liberia_1964',CWH,[i,Bn,Gx,'raw:88',D,D,D,D],[B,K,'6251']],CVw,CVv,[B,K,'4251']]],[[S,'Liberia 1964',[V,'D_Liberia_1964',BVV],BUU,BUW]]],['4250',Akm+ANq+a,[CsY],[[S,Aax,CbT,BUU,BUW]]],['4249',BFS,[CnK],[[S,'Lake',CYq,BUU,BUW]]],[ASn,AkB+Hc+a,[CmD],[[S,ca,CXP,BUU,BUW]]],['4247',AkB+dk+a,[CnZ],[[S,'La Canoa',CZZ,BUU,BUW]]],['4246',Akm+AEV+a,[CsM],[[S,'KOC',[V,ASe,BVV],BUU,BUW]]],['4245',Ag+Aop+NC+a,[CnS],[[S,Afc+' 1968',CZY,BUU,BUW]]],['4244',BFU+ASf+a,[CsX],[[S,ACD,CaT,BUU,BUW]]],['4243',Ag+BAs+a,[Cmg],[[S,Lr+' 1880',CYS,BUU,BUW]]],['4242',Alx+AKJ+a,[Cru],[[S,'JAD69',[V,AhD,BUx],BUU,BUW]]],['4241',Ag+AGE+AGF+a,[Cqq],[[S,'Jamaica 1875',[V,AhE,Bxu],BUU,BUW]]],['4240',BFU+vb+a,[Cog],[[S,BEE,Car,BUU,BUW]]],['4239',BFU+id+a,[Cnz],[[S,BAr,CZX,BUU,BUW]]],[ASm,Ag+AnL+Kr+a,[Clw],[[S,'ID74',CXO,BUU,BUW]]],['4237',Ag+' +ellps=GRS67'+AEo+a,[CsF],[[S,'HD72',[V,AbW,BuM],BUU,BUW]]],['4236',AkB+AIM+a,[Cpl],[[S,'Hu Tzu Shan 1950',CZy,BUU,BUW]]],['4232',Akm+vc+a,[Cof],[[S,AcG,CZB,BUU,BUW]]],['4231',AkB+' +towgs84=-83.11,-97.38,-117.22,0.00569291,-0.0446976,0.0442851,0.1218'+a,[[S,'ED87',[V,'European_Datum_1987',CWC,[i,'raw:-83.11','raw:-97.38','raw:-117.22','raw:0.00569291','raw:-0.0446976','raw:0.0442851','raw:0.1218'],[B,K,'6231']],CVw,CVv,[B,K,'4231']]],[[S,'ED87',[V,'D_European_1987',BUs],BUU,BUW]]],[il,AkB+Dm+a,[Clm],[[S,ij,CWn,BUU,BUW]]],['4229',Ag+aO+cy+a,[Cmx],[[S,'Egypt 1907',CZA,BUU,BUW]]],['4227',ArZ+cY+a,[CnN],[[S,'Deir ez Zor',CZW,BUU,BUW]]],['4225',AkB+ZM+a,[Cmi],[[S,jx+' Alegre'+pX,CYe,BUU,BUW]]],['4224',AkB+AKK+a,[CsE],[[S,'Chua',Cba,BUU,BUW]]],['4223',AmQ+BEN+a,[Cnj],[[S,cs,CYW,BUU,BUW]]],[Aau,BCn+ApO+a,[CmN],[[S,py,CXc,BUU,BUW]]],['4221',AkB+PN+a,[CmK],[[S,'Campo'+TS,CXr,BUU,BUW]]],['4220',Akm+ZI+a,[Cni],[[S,fw,CYp,BUU,BUW]]],['4219',Ako+' +towgs84=-384,664,-48,0,0,0,0'+a,[[S,'Bukit Rimpah',[V,'Bukit_Rimpah',CWJ,[i,'raw:-384','raw:664',bi,D,D,D,D],[B,K,'6219']],CVw,CVv,[B,K,'4219']]],[[S,'Bukit Rimpah',[V,'D_Bukit_Rimpah',BVM],BUU,BUW]]],['4218',AkB+Uu+a,[CnA],[[S,AmU,CYV,BUU,BUW]]],['4216',Alx+ANr+a,[Cqp],[[S,'Bermuda 1957',[V,AhF,BUx],BUU,BUW]]],['4215',BFS,[[S,'Belge 1950',[V,'Reseau_National_Belge_1950',CWC,[B,K,'6215']],CVw,CVv,[B,K,'4215']]],[[S,'Belge 1950',CbM,BUU,BUW]]],[WG,AoR+BZ+a,[Clh],[[S,Ajv,CWb,BUU,BUW]]],['4213',ArZ+AKL+a,[CsW],[[S,AGW,Caa,BUU,BUW]]],['4212',Akm+lo+a,[CoI],[[S,AXJ+' 1938',Caq,BUU,BUW]]],['4211',Ako+Rx+a,[CnG],[[S,eD,CYG,BUU,BUW]]],['4210',Akm+Uv+a,[Cmf],[[S,'Arc 1960',CYP,BUU,BUW]]],['4209',BCn+Mr+gw+a,[CnY],[[S,'Arc 1950',CZV,BUU,BUW]]],['4208',AkB+Vy+a,[Cnc],[[S,AIQ,CYo,BUU,BUW]]],['4207',AkB+VH+a,[Csf],[[S,jo,CYt,BUU,BUW]]],['4206',ArZ+a,[[S,'Agadez',[V,'Agadez',CWO,[B,K,'6206']],CVw,CVv,[B,K,'4206']]],[[S,'Agadez',[V,'D_Agadez',BWG],BUU,BUW]]],['4205',AoR+vd+a,[CpN],[[S,yT,Cap,BUU,BUW]]],['4204',AkB+SK+a,[CmU],[[S,'Ain el Abd',CYE,BUU,BUW]]],['4203',BCo+Py+a,[Cmh],[[S,AMD,CXx,BUU,BUW]]],[Aat,BCo+Eh+a,[CmM],[[S,pt,CXb,BUU,BUW]]],['4201',Akm+cz+a,[Cnh],[[S,jp,CYn,BUU,BUW]]],[II,AoR+AF+a,[Cla],[[S,Ajf,CWQ,BUU,BUW]]],['4199',BFS,[[S,'Egypt 1930',[V,'Egypt_1930',CWC,[B,K,'6199']],CVw,CVv,[B,K,'4199']]],[[S,'Egypt 1930',[V,'D_Egypt_1930',BUs],BUU,BUW]]],['4198',BIP,[CsV],[[S,AGX,CaZ,BUU,BUW]]],['4197',BIP,[CsU],[[S,Aay,CbS,BUU,BUW]]],['4196',AkB+' +towgs84=-45,417,-3.5,0,0,0.814,-0.6'+a,[[S,'Ammassalik 1958',[V,'Ammassalik_1958',CWC,[i,Oh,'raw:417','raw:-3.5',D,D,DG,'raw:-0.6'],[B,K,'6196']],CVw,CVv,[B,K,'4196']]],[[S,'Ammassalik 1958',[V,'D_Ammassalik_1958',BUs],BUU,BUW]]],['4195',AkB+' +towgs84=105,326,-102.5,0,0,0.814,-0.6'+a,[[S,'Scoresbysund 1952',[V,'Scoresbysund_1952',CWC,[i,Fl,'raw:326','raw:-102.5',D,D,DG,'raw:-0.6'],[B,K,'6195']],CVw,CVv,[B,K,'4195']]],[[S,'Scoresbysund 1952',[V,'D_Scoresbysund_1952',BUs],BUU,BUW]]],['4194',AkB+tf+a,[Cny],[[S,'Qornoq 1927',Cao,BUU,BUW]]],['4193',ArZ+AEp+a,[CrB],[[S,'Manoca 1962',CZx,BUU,BUW]]],['4192',AkB+AEW+a,[CrA],[[S,'Douala 1948',CZw,BUU,BUW]]],['4191',AoR+a,[Cqf],[[S,'Albanian 1987',[V,Ads,BUn],BUU,BUW]]],['4190',AuO,[Cma],[[S,ch+' 98',CYD,BUU,BUW]]],['4189',AuO,[Cnx],[[S,AUl,CZU,BUU,BUW]]],['4188',BCi+Nl+a,[CrP],[[S,'OSNI 1952',CaS,BUU,BUW]]],['4184',AkB+ANs+a,[CsT],[[S,BPv,[V,ADr,BUs],BUU,BUW]]],['4183',AkB+AKM+a,[CrO],[[S,BAt+' 1948',[V,AEX,BUs],BUU,BUW]]],['4182',AkB+AKN+a,[CrN],[[S,BGU+' 1939',[V,ABq,BUs],BUU,BUW]]],['4181',AkB+lq+a,[CrM],[[S,AbG+' 1930',[V,AYX,BUs],BUU,BUW]]],['4180',AuO,[Crt],[[S,'EST97',[V,AhG,BUh],BUU,BUW]]],[qA,AoR+CX+a,[Clq],[[S,Akd,CWw,BUU,BUW]]],[AUa,AoR+Kh+a,[CmE],[[S,AlK,CXS,BUU,BUW]]],['4176',AuO,[[S,BGT,[V,'Australian_Antarctic_Datum_1998',CVx,BUV,[B,K,'6176']],CVw,CVv,[B,K,'4176']]],[[S,BGT,[V,'D_Australian_Antarctic_1998',BUh],BUU,BUW]]],['4175',Akm+xt+a,[Cnn],[[S,'Sierra Leone 1968',Can,BUU,BUW]]],['4174',Ag+Arq+a,[Cnr],[[S,'Sierra Leone'+IA,Cam,BUU,BUW]]],['4173',AuO,[CpM],[[S,tF,Cal,BUU,BUW]]],[Afe,AuO,[CmX],[[S,ti,CXj,BUU,BUW]]],[ASl,AuO,[CmA],[[S,AlD,CXN,BUU,BUW]]],['4169',Alx+AKO+a,[CpL],[[S,'American Samoa 1962',[V,ANt,BUx],BUU,BUW]]],['4168',Ag+Arq+ve+a,[Coe],[[S,AcH,CYz,BUU,BUW]]],[ey,AuO,[Clj],[CcR]],['4166',BIC,[[S,qy+PP,[V,'Korean_Datum_1995',CWB,BUV,[B,K,'6166']],CVw,CVv,[B,K,'4166']]],[[S,qy+PP,[V,'D_Korean_Datum_1995',BUw],BUU,BUW]]],['4165',AkB+ANu+a,[CsS],[[S,Aaz,CbR,BUU,BUW]]],['4164',AoR+vf+a,[Cnw],[[S,'South Yemen',Cak,BUU,BUW]]],['4163',BIC,[Cmw],[[S,'Yemen NGN96',CYy,BUU,BUW]]],[Abs,BHZ,[CmB],[[S,qy+' 1985',CXe,BUU,BUW]]],['4161',AkB+AJq+a,[Cqe],[[S,'Pampa del'+AcY,[V,ASh,BUs],BUU,BUW]]],['4160',BFS,[CqU],[[S,'Chos Malal 1914',[V,AYY,BUs],BUU,BUW]]],[AUZ,AkB+FL+a,[CmF],[[S,lf,CXR,BUU,BUW]]],['4158',AkB+ABr+a,[CrL],[[S,AJu+' 1955',[V,Adv,BUs],BUU,BUW]]],['4157',BMv+a,[Cqo],[[S,'Mount Dillon',[V,AhH,BhF],BUU,BUW]]],['4156',Ako+Zw+a,[Cod],[[S,ARx,CYZ,BUU,BUW]]],['4155',ArZ+wj+a,[Cnv],[[S,'Dabola 1981',Caj,BUU,BUW]]],['4154',AkB+bG+a,[Cng],[[S,is,CYx,BUU,BUW]]],['4153',AkB+ABs+a,[Cse],[[S,xm,CaK,BUU,BUW]]],[FZ,AuO,[ClX],[[S,Aj,CWL,BUU,BUW]]],['4151',AuO,[[S,'CHTRF95',[V,'Swiss_Terrestrial_Reference_Frame_1995',CVx,BUV,[B,K,'6151']],CVw,CVv,[B,K,'4151']]],[[S,'CHTRF95',[V,'D_Swiss_TRF_1995',BUh],BUU,BUW]]],['4150',Ako+ABt+a,[CsR],[[S,AMN,Cai,BUU,BUW]]],['4149',Ako+Zs+a,[Coc],[[S,AIU,CYu,BUU,BUW]]],[Afd,BIC,[CmW],[[S,GS,CXi,BUU,BUW]]],['4147',AoR+cZ+a,[CnP],[[S,'Hanoi 1972',CZT,BUU,BUW]]],[Abr,Ag+ApM+Mz+a,[CmP],[[S,Alw,CXd,BUU,BUW]]],['4145',Ag+BIb+a,[Cmp],[[S,Lr+' 1962',CYd,BUU,BUW]]],['4144',BFU+ie+a,[CnX],[[S,Lr+' 1937',CZl,BUU,BUW]]],['4143',Akm+ew+a,[CnR],[[S,AcO+' 1987',CZS,BUU,BUW]]],['4142',Akm+ig+a,[CnQ],[[S,AcP+' 1965',CZR,BUU,BUW]]],['4141',Akl+AUU+a,[CsQ],[[S,AbA,CbQ,BUU,BUW]]],['4139',Alx+jt+a,[CnM],[[S,'Puerto Rico',CZQ,BUU,BUW]]],['4138',BIQ,[[S,'St. George'+fA,[V,'St_George_Island',CWG,[B,K,'6138']],CVw,CVv,[B,K,'4138']]],[[S,'St. George'+fA,[V,'D_St_George_Island',BUx],BUU,BUW]]],['4137',BIQ,[[S,'St. Paul'+fA,[V,'St_Paul_Island',CWG,[B,K,'6137']],CVw,CVv,[B,K,'4137']]],[[S,'St. Paul'+fA,[V,'D_St_Paul_Island',BUx],BUU,BUW]]],['4136',BIQ,[[S,'St. Lawrence'+fA,[V,'St_Lawrence_Island',CWG,[B,K,'6136']],CVw,CVv,[B,K,'4136']]],[[S,'St. Lawrence'+fA,[V,'D_St_Lawrence_Island',BUx],BUU,BUW]]],['4135',Alx+Yp+a,[Cmu],[[S,'Old'+he,CYc,BUU,BUW]]],['4134',Akm+Zu+a,[CoU],[[S,'PSD93',Cah,BUU,BUW]]],['4133',Akl+rd+a,[Crs],[[S,'EST92',[V,AhI,BUh],BUU,BUW]]],['4132',Akm+ABu+a,[CsD],[[S,'FD58',Cag,BUU,BUW]]],['4131',BFU+ih+a,[CnW],[[S,ik+' 1960',CZP,BUU,BUW]]],['4130',AmC+nr+a,[Cnu],[[S,AUm,CZO,BUU,BUW]]],['4129',BIQ,[[S,ANb,[V,ANb,CWG,CQw],CVw,CVv,[B,K,'4129']]],[[S,ANb,[V,'D_Observatario',BUx],BUU,BUW]]],['4128',BIQ,[[S,AdP,[V,AdP,CWG,CQv],CVw,CVv,[B,K,'4128']]],[[S,AdP,[V,'D_Madzansua',BUx],BUU,BUW]]],['4127',Alx+be+a,[CoZ],[[S,'Tete',CZN,BUU,BUW]]],['4124',Ako+ND+a,[Cmm],[[S,'RT90',CYO,BUU,BUW]]],['4123',AkB+Km+a,[Cms],[[S,'KKJ',CYK,BUU,BUW]]],['4122',Ag+AqR+a,[Cmv],[[S,AXA,CYN,BUU,BUW]]],['4121',Akl+ADt+a,[Crm],[[S,'GGRS87',CaR,BUU,BUW]]],['4120',BHZ,[[S,'Greek',[V,'Greek',CWJ,CQt],CVw,CVv,[B,K,'4120']]],[[S,'Greek',CbZ,BUU,BUW]]],['4081',AuO,[Cnf],[[S,sA,CYw,BUU,BUW]]],['4075',AuO,[[S,'SREF98',[V,'Serbian_Reference_Network_1998',CVx,BUV,[B,K,'1034']],CVw,CVv,[B,K,'4075']]],[[S,'SREF98',[V,'D_Serbian_Reference_Network_1998',BUh],BUU,BUW]]],['4054',Ag+' +a=6378273'+AJR+a,[Cme],[[S,aR+' datum based upon the Hughes'+Aro,CZk,BUU,BUW]]],['4053',Ag+' +a=6371228 +b=6371228'+a,[Cmj],[[S,aR+' datum based upon the'+" "+Arv,CZj,BUU,BUW]]],['4052',Ag+' +a=6370997 +b=6370997'+a,[CoR],[[S,aR+' datum based upon the'+" "+BHY,[V,AEY,CQe],BUU,BUW]]],['4047',Ag+' +a=6371007 +b=6371007'+a,[CoQ],[[S,aR+' datum based upon the GRS'+BIa,[V,ru,CQd],BUU,BUW]]],[AWw,AuO,[Clv],[[S,'RGRDC 2005',CXX,BUU,BUW]]],['4045',Ag+ApM+a,[[S,MU+' datum based upon the'+" "+PO+' 1830 (1975'+BAp,[V,'Not_specified_based_on_Everest_1830_1975_Definition_ellipsoid',CWf,[B,K,'6045']],CVw,CVv,[B,K,'4045']]],[[S,MU+' datum based upon the'+" "+PO+' 1830 (1975'+BAp,[V,'D_Everest_Def_1975',BcG],BUU,BUW]]],['4044',Ag+BCf+a,[[S,MU+' datum based upon the'+" "+PO+' 1830 (1962'+BAp,[V,'Not_specified_based_on_Everest_1830_1962_Definition_ellipsoid',CWs,[B,K,'6044']],CVw,CVv,[B,K,'4044']]],[[S,MU+' datum based upon the'+" "+PO+' 1830 (1962'+BAp,[V,'D_Everest_Def_1962',Bmd],BUU,BUW]]],['4043',Ag+Bf+a,[[S,MU+' datum based upon the WGS 72'+GA,[V,'Not_specified_based_on_WGS_72_ellipsoid',CWF,[B,K,'6043']],CVw,CVv,[B,K,'4043']]],[[S,MU+' datum based upon the WGS 72'+GA,[V,'D_Not_specified_based_on_WGS_72_ellipsoid',BVA],BUU,BUW]]],['4042',Ag+BAs+a,[[S,MU+' datum based upon the'+" "+PO+' (1830'+BAp,[V,'Not_specified_based_on_Everest_1830_Definition_ellipsoid',CWu,[B,K,'6042']],CVw,CVv,[B,K,'4042']]],[[S,MU+' datum based upon the'+" "+PO+' (1830'+BAp,[V,'D_Everest_1830',Bks],BUU,BUW]]],['4041',Ag+AqR+a,[[S,MU+' datum based upon the'+" "+BEb+' 1977'+GA,[V,'Not_specified_based_on_Average_Terrestrial_System_1977_ellipsoid',CXA,[B,K,'6041']],CVw,CVv,[B,K,'4041']]],[[S,MU+' datum based upon the'+" "+BEb+' 1977'+GA,[V,'D_Not_specified_based_on_Average_Terrestrial_System_1977_ellipsoid',Bkj],BUU,BUW]]],['4036',Ag+' +ellps=GRS67'+a,[[S,MU+' datum based upon the GRS 1967'+GA,[V,'Not_specified_based_on_GRS_1967_ellipsoid',CYQ,[B,K,'6036']],CVw,CVv,[B,K,'4036']]],[[S,MU+' datum based upon the GRS 1967'+GA,[V,'D_GRS_1967',BuM],BUU,BUW]]],['4034',Ag+AGE+AGF+a,[[S,MU+' datum based upon the'+" "+Cg+' 1880'+GA,[V,'Not_specified_based_on_Clarke_1880_ellipsoid',CYR,[B,K,'6034']],CVw,CVv,[B,K,'4034']]],[[S,MU+' datum based upon the'+" "+Cg+' 1880'+GA,[V,'D_Clarke_1880',Bxu],BUU,BUW]]],['4033',Ag+' +a=6378136.3 +b=6356751.616592146'+a,[[S,MU+' datum based upon the OSU91A'+GA,[V,'Not_specified_based_on_OSU91A_ellipsoid',[P,'OSU91A','raw:6378136.3',r,[B,K,'7033']],[B,K,'6033']],CVw,CVv,[B,K,'4033']]],[[S,MU+' datum based upon the OSU91A'+GA,[V,'D_OSU_91A',[P,'OSU91A','raw:6378136.3',r]],BUU,BUW]]],['4032',Ag+' +a=6378136.2 +b=6356751.516927429'+a,[[S,MU+' datum based upon the OSU86F'+GA,[V,'Not_specified_based_on_OSU86F_ellipsoid',[P,'OSU86F','raw:6378136.2',r,[B,K,'7032']],[B,K,'6032']],CVw,CVv,[B,K,'4032']]],[[S,MU+' datum based upon the OSU86F'+GA,[V,'D_OSU_86F',[P,'OSU86F','raw:6378136.2',r]],BUU,BUW]]],['4031',AmC+a,[[S,MU+' datum based upon the GEM 10C'+GA,[V,'Not_specified_based_on_GEM_10C_ellipsoid',[P,'GEM 10C',R,r,[B,K,'7031']],[B,K,'6031']],CVw,CVv,[B,K,'4031']]],[[S,MU+' datum based upon the GEM 10C'+GA,[V,'D_GEM_10C',[P,'GEM_10C',R,r]],BUU,BUW]]],['4030',AmC+a,[[S,MU+' datum based upon the WGS 84'+GA,[V,'Not_specified_based_on_WGS_84_ellipsoid',CWB,[B,K,'6030']],CVw,CVv,[B,K,'4030']]],[[S,MU+' datum based upon the WGS 84'+GA,[V,'D_Not_specified_based_on_WGS_84_ellipsoid',BUw],BUU,BUW]]],['4029',Ag+Arq+a,[[S,MU+' datum based upon the War Office'+GA,[V,'Not_specified_based_on_War_Office_ellipsoid',CXG,[B,K,'6029']],CVw,CVv,[B,K,'4029']]],[[S,MU+' datum based upon the War Office'+GA,[V,'D_War_Office',Bmf],BUU,BUW]]],['4028',Ag+' +a=6378298.3'+AFy+a,[[S,MU+' datum based upon the Struve 1860'+GA,[V,'Not_specified_based_on_Struve_1860_ellipsoid',CYL,[B,K,'6028']],CVw,CVv,[B,K,'4028']]],[[S,MU+' datum based upon the Struve 1860'+GA,[V,'D_Struve_1860',Bxw],BUU,BUW]]],['4027',Ag+' +a=6376523'+AFz+a,[[S,MU+' datum based upon the Plessis 1817'+GA,[V,'Not_specified_based_on_Plessis_1817_ellipsoid',CYC,[B,K,'6027']],CVw,CVv,[B,K,'4027']]],[[S,MU+' datum based upon the Plessis 1817'+GA,[V,'D_Plessis_1817',Bxv],BUU,BUW]]],['4025',Ag+' +ellps=WGS66'+a,[[S,MU+' datum based upon the NWL 9D'+GA,[V,'Not_specified_based_on_NWL_9D_ellipsoid',CYb,[B,K,'6025']],CVw,CVv,[B,K,'4025']]],[[S,MU+' datum based upon the NWL 9D'+GA,[V,'D_NWL_9D',BvF],BUU,BUW]]],['4024',AoR+a,[[S,MU+' datum based upon the'+" "+AjY+GA,[V,'Not_specified_based_on_Krassowsky_1940_ellipsoid',CWA,[B,K,'6024']],CVw,CVv,[B,K,'4024']]],[[S,MU+' datum based upon the'+" "+AjY+GA,[V,'D_Krasovsky_1940',BUn],BUU,BUW]]],['4023',AuO,[CpK],[Cky]],['4022',BFS,[[S,MU+' datum based upon the'+" "+Ajd+GA,[V,'Not_specified_based_on_International_1924_ellipsoid',CWC,[B,K,'6022']],CVw,CVv,[B,K,'4022']]],[[S,MU+' datum based upon the'+" "+Ajd+GA,[V,'D_International_1924',BUs],BUU,BUW]]],['4021',Ag+AnL+a,[[S,MU+' datum based upon the'+" "+ArA,[V,'Not_specified_based_on_Indonesian_National_Spheroid',CWm,[B,K,'6021']],CVw,CVv,[B,K,'4021']]],[[S,MU+' datum based upon the'+" "+ArA,[V,'D_Indonesian',Bag],BUU,BUW]]],['4020',Ag+aO+a,[[S,MU+' datum based upon the'+" "+yM+' 1906'+GA,[V,'Not_specified_based_on_Helmert_1906_ellipsoid',CWk,[B,K,'6020']],CVw,CVv,[B,K,'4020']]],[[S,MU+' datum based upon the'+" "+yM+' 1906'+GA,[V,'D_Helmert_1906',BcH],BUU,BUW]]],['4019',Asj,[[S,MU+' datum based upon the GRS'+Aro,[V,'Not_specified_based_on_GRS_1980_ellipsoid',CVx,[B,K,'6019']],CVw,CVv,[B,K,'4019']]],[[S,MU+' datum based upon the GRS'+Aro,[V,'D_GRS_1980',BUh],BUU,BUW]]],['4018',Ag+Aop+a,[[S,MU+' datum based upon the'+" "+PO+' 1830'+MF+GA,[V,'Not_specified_based_on_Everest_1830_Modified_ellipsoid',CXW,[B,K,'6018']],CVw,CVv,[B,K,'4018']]],[[S,MU+' datum based upon the'+" "+PO+' 1830'+MF+GA,[V,'D_Everest_Modified',Bqc],BUU,BUW]]],['4016',Ag+qQ+a,[[S,MU+' datum based upon the'+" "+PO+' 1830 (1967'+BAp,[V,'Not_specified_based_on_Everest_1830_1967_Definition_ellipsoid',CWt,[B,K,'6016']],CVw,CVv,[B,K,'4016']]],[[S,MU+' datum based upon the'+" "+PO+' 1830 (1967'+BAp,[V,'D_Everest_Def_1967',Bmo],BUU,BUW]]],['4015',BFU+a,[[S,MU+' datum based upon the'+" "+PO+' 1830 (1937'+Qh+GA,[V,'Not_specified_based_on_Everest_1830_1937_Adjustment_ellipsoid',CWX,[B,K,'6015']],CVw,CVv,[B,K,'4015']]],[[S,MU+' datum based upon the'+" "+PO+' 1830 (1937'+Qh+GA,[V,'D_Not_specified_based_on_Everest_1830_1937_Adjustment_ellipsoid',BZG],BUU,BUW]]],['4014',AmQ+' +b=6356514.996941779'+a,[[S,MU+' datum based upon the'+" "+Cg+' 1880 (SGA 1922)'+GA,[V,'Not_specified_based_on_Clarke_1880_SGA_1922_ellipsoid',[P,Cg+' 1880 (SGA 1922)',CL,'raw:293.46598',[B,K,'7014']],[B,K,'6014']],CVw,CVv,[B,K,'4014']]],[[S,MU+' datum based upon the'+" "+Cg+' 1880 (SGA 1922)'+GA,[V,'D_Clarke_1880_SGA',[P,'Clarke_1880_SGA_1922',CL,'raw:293.46598']],BUU,BUW]]],['4013',BCn+Mr+a,[[S,MU+' datum based upon the'+" "+Cg+' 1880'+Aap+GA,[V,'Not_specified_based_on_Clarke_1880_Arc_ellipsoid',CWe,[B,K,'6013']],CVw,CVv,[B,K,'4013']]],[[S,MU+' datum based upon the'+" "+Cg+' 1880'+Aap+GA,[V,'D_Clarke_1880_Arc',BaP],BUU,BUW]]],['4012',BIP,[[S,MU+' datum based upon the'+" "+Cg+' 1880'+Nn+GA,[V,'Not_specified_based_on_Clarke_1880_RGS_ellipsoid',CWH,[B,K,'6012']],CVw,CVv,[B,K,'4012']]],[[S,MU+' datum based upon the'+" "+Cg+' 1880'+Nn+GA,[V,'D_Clarke_1880_RGS',BVV],BUU,BUW]]],['4011',ArZ+a,[[S,MU+' datum based upon the'+" "+Cg+' 1880'+Zv+GA,[V,'Not_specified_based_on_Clarke_1880_IGN_ellipsoid',CWO,[B,K,'6011']],CVw,CVv,[B,K,'4011']]],[[S,MU+' datum based upon the'+" "+Cg+' 1880'+Zv+GA,[V,'D_Clarke_1880_IGN',BWG],BUU,BUW]]],['4010',Ag+BEH+a,[[S,MU+' datum based upon the'+" "+Cg+' 1880'+AML+GA,[V,'Not_specified_based_on_Clarke_1880_Benoit_ellipsoid',CXQ,[B,K,'6010']],CVw,CVv,[B,K,'4010']]],[[S,MU+' datum based upon the'+" "+Cg+' 1880'+AML+GA,[V,'D_Clarke_1880_Benoit',Bqi],BUU,BUW]]],['4008',BIQ,[[S,MU+' datum based upon the'+" "+Aji+GA,[V,'Not_specified_based_on_Clarke_1866_ellipsoid',CWG,[B,K,'6008']],CVw,CVv,[B,K,'4008']]],[[S,MU+' datum based upon the'+" "+Aji+GA,[V,'D_Clarke_1866',BUx],BUU,BUW]]],['4007',BMv+a,[[S,MU+' datum based upon the'+" "+Cg+' 1858'+GA,[V,'Not_specified_based_on_Clarke_1858_ellipsoid',CWq,[B,K,'6007']],CVw,CVv,[B,K,'4007']]],[[S,MU+' datum based upon the'+" "+Cg+' 1858'+GA,[V,'D_Clarke_1858',BhF],BUU,BUW]]],['4006',Ag+bW+a,[[S,MU+' datum based upon the'+" "+ID+' Namibia'+GA,[V,'Not_specified_based_on_Bessel_Namibia_ellipsoid',CWi,[B,K,'6006']],CVw,CVv,[B,K,'4006']]],[[S,MU+' datum based upon the'+" "+ID+' Namibia'+GA,[V,'D_Bessel_Namibia',BeW],BUU,BUW]]],['4005',Ag+Aqt+a,[[S,MU+' datum based upon the'+" "+ApQ+GA,[V,'Not_specified_based_on_Bessel_Modified_ellipsoid',CXF,[B,K,'6005']],CVw,CVv,[B,K,'4005']]],[[S,MU+' datum based upon the'+" "+ApQ+GA,[V,'D_Bessel_Modified',BeZ],BUU,BUW]]],['4004',BHZ,[[S,MU+' datum based upon the'+" "+Ajn+GA,[V,'Not_specified_based_on_Bessel_1841_ellipsoid',CWJ,[B,K,'6004']],CVw,CVv,[B,K,'4004']]],[[S,MU+' datum based upon the'+" "+Ajn+GA,[V,'D_Bessel_1841',BVM],BUU,BUW]]],['4003',BCo+a,[[S,MU+' datum based upon the'+" "+ApV,[V,'Not_specified_based_on_Australian_National_Spheroid',CWh,[B,K,'6003']],CVw,CVv,[B,K,'4003']]],[[S,MU+' datum based upon the'+" "+ApV,[V,'D_Australian',BYd],BUU,BUW]]],['4002',Ag+yt+a,[[S,MU+' datum based upon the Airy'+MF+' 1849'+GA,[V,'Not_specified_based_on_Airy_Modified_1849_ellipsoid',CXK,[B,K,'6002']],CVw,CVv,[B,K,'4002']]],[[S,MU+' datum based upon the Airy'+MF+' 1849'+GA,[V,'D_Airy_Modified',Bqk],BUU,BUW]]],['4001',BCi+a,[[S,MU+' datum based upon the Airy 1830'+GA,[V,'Not_specified_based_on_Airy_1830_ellipsoid',CXH,[B,K,'6001']],CVw,CVv,[B,K,'4001']]],[[S,MU+' datum based upon the Airy 1830'+GA,[V,'D_Airy_1830',Bmm],BUU,BUW]]],['3906',Ako+Ku+a,[Crf],[[S,'MGI 1901',CaY,BUU,BUW]]],['3889',AuO,[Cnq],[[S,'IGRS',CZi,BUU,BUW]]],['3824',AuO,[CoT],[[S,'TWD97',Cae,BUU,BUW]]],['3821',BCo+a,[CoS],[[S,'TWD67',Cad,BUU,BUW]]],['3819',Ako+' +towgs84=595.48,121.69,515.35,4.115,-2.9383,0.853,-3.408'+a,[[S,'HD1909',[V,'Hungarian_Datum_1909',CWJ,[i,'raw:595.48','raw:121.69','raw:515.35','raw:4.115','raw:-2.9383','raw:0.853','raw:-3.408'],BXA],CVw,CVv,[B,K,'3819']]],[[S,'HD1909',[V,'D_Hungarian_Datum_1909',BVM],BUU,BUW]]],['4023',AuO,[CpK],[Cky]],['3857',hB+' +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0'+BQ+' +k=1.0'+q+' +nadgrids=@null +wktext '+a,[[U,'WGS 84 / Pseudo-Mercator',ClU,Bxi,BYA,BUf,BUy,BUT,CVy,BUl,BUk,['EXTENSION','PROJ4',hB+' +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0'+BQ+' +k=1.0'+q+' +nadgrids=@null +wktext '+a],[B,K,'3857']]],[[U,'WGS_1984_Web_Mercator_Auxiliary_Sphere',[S,BB,[V,BH,[P,Af,'raw:6378137.0',r]],[T,M,iY],BUW],[L,'Mercator_Auxiliary_Sphere'],[A,'False_Easting',iY],[A,'False_Northing',iY],[A,'Central_Meridian',iY],[A,'Standard_Parallel_1',iY],[A,'Auxiliary_Sphere_Type',iY],[Q,m,UY]]]],['27700',l+' +lat_0=49 +lon_0=-2 +k=0.9996012717'+Fm+' +y_0=-100000'+ADx+rc+q+a,[[U,'OSGB 1936 /'+" "+ASj+AoN,CrR,BUd,BmW,[A,E,AcT],[A,N,AbZ],BVh,CGp,CVy,BUj,BUm,[B,K,'27700']]],[[U,'OSGB_1936_British_National_Grid',[S,'GCS_OSGB 1936',CaU,BUU,BUW],BUd,BmW,[A,E,AcT],[A,N,AbZ],BVh,CGp,BUa]]],['2154',AoM+' +lat_2=44'+hf+AGd+VV+' +y_0=6600000'+j+c+q+a,[[U,ti+' / Lambert-93',CmX,BVG,BaG,CNd,BbU,BXt,BWl,CGo,CVy,BUl,BUk,[B,K,'2154']]],[[U,'RGF93_Lambert_93',Cdl,BVD,BaG,CNd,BbU,BXt,BWl,CGo,BUa]]],['5514',BCc+AYZ+BRv+q+a,[[U,ARx+' /'+" "+AGz+' East'+QM,Cod,BvH,Bpr,CDD,Bpq,Bpp,BUt,BUy,BUT,CVy,BUl,BUk,[B,K,'5514']]],[[U,'S_JTSK_Krovak_East_North',Cjr,BvH,Bpr,CDD,Bpq,Bpp,BUt,BUy,BUT,BUa]]],['21781',BGS+AAb+' +k_0=1'+Cj+fR+CJ+Zs+q+a,[[U,AIU+' / LV03',Coc,BlU,Bpo,BvD,BmY,Bxh,BUf,BVY,Bae,CVy,BvC,BvB,[B,K,'21781']]],[[U,'CH1903_LV03',Cit,BlU,Bpo,BvD,BmY,BUf,BVY,Bae,BUa]]],['27200','+proj=nzmg +lat_0=-41 +lon_0=173 +x_0=2510000 +y_0=6023150'+Aqu+a,[[U,PF+' / New Zealand Map'+op,Cll,[L,ASi],CNc,Bxg,CGn,CGm,CVy,BUj,BUm,[B,K,'27200']]],[[U,'NZGD49_New_Zealand_Map_Grid',CcV,[L,ASi],CNc,[A,'Longitude_Of_Origin',AIp],CGn,CGm,BUa]]],['31370',AU+' +lat_1=51.16666723333333 +lat_2=49.8333339'+eW+' +lon_0=4.367486666666666 +x_0=150000.013 +y_0=5400088.438'+BP+ZK+q+a,[[U,'Belge 1972 / Belgian'+PW+' 72',CoD,BVG,[A,W,ANv],[A,Y,AhJ],Bcw,[A,E,ANw],[A,I,AhK],[A,G,Adw],CVy,BUl,BUk,[B,K,'31370']]],[[U,'Belge_1972_Belgian_Lambert_72',CiE,BVD,[A,W,ANv],[A,Y,AhJ],Bcw,[A,E,ANw],[A,I,AhK],[A,G,Adw],BUa]]],['28992',ZQ+AYa+Aba+' +k=0.9999079 +x_0=155000 +y_0=463000'+CJ+YW+q+a,[[U,kR+' / RD New',CpP,Bpn,CNb,CNa,CDC,CNZ,CNY,CVy,BUl,BUk,[B,K,'28992']]],[[U,'Amersfoort_RD_New',Cjq,Bpm,CNb,CNa,CDC,CNZ,CNY,BUa]]],['3067',Amc+j+c+q+a,[[U,ED+' / TM35FIN(E,N)',Cld,BUd,BUX,BWP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3067']]],[[U,'ETRS89_TM35FIN_E_N',CcG,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['29902',l+Afy+' +lon_0=-8 +k=1.000035'+Dp+nL+yt+Nl+q+a,[[U,'TM65 / Irish'+op,CsH,BUd,BuL,Bpl,BxX,BVP,Bch,CVy,BUj,BUm,[B,K,'29902']]],[[U,'TM65_Irish_Grid',[S,'GCS_TM65',Cbc,BUU,BUW],BUd,BuL,Bpl,BxX,BVP,Bch,BUa]]],['2056',BGS+AAb+' +k_0=1 +x_0=2600000'+AXQ+CJ+ABt+q+a,[[U,AMN+' / LV95',CsR,BlU,Bpo,BvD,BmY,Bxh,BUf,CGl,BuK,CVy,BvC,BvB,[B,K,'2056']]],[[U,'CH1903+_LV95',[S,'GCS_CH1903+',Cai,BUU,BUW],BlU,Bpo,BvD,BmY,BUf,CGl,BuK,BUa]]],['23032',Alu+BDH,[[U,ij+' / UTM zone 32N',Clm,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23032']]],[[U,'ED50_UTM_zone_32N',Ccc,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['2193',AjX+' +lon_0=173'+HH+' +x_0=1600000'+Ati+q+a,[[U,Gr+' / New Zealand'+AEt+" "+aU+' 2000',Clj,BUd,BUX,Bxg,BUg,CGk,BUo,CVy,[B,K,'2193']]],[[U,'NZGD2000_New_Zealand_Transverse_Mercator_2000',CcR,BUd,BUX,Bxg,BUg,CGk,BUo,BUa]]],['7696',AjX+' +lon_0=80.51666666666667 +k=1 +x_0=5300000'+AJI+j+q+a,[[U,Au,Cbl,BUd,BUX,[A,E,ANx],BUf,CGj,Bon,BUa,[B,Bo,'7696']]],[[U,F,Cbm,BUd,BUX,[A,E,ANx],BUf,CGj,Bon,BUa]]],['7695',AjX+' +lon_0=77.51666666666667 +k=1 +x_0=4300000'+AJI+j+q+a,[[U,Au,Cbl,BUd,BUX,[A,E,ANy],BUf,BxW,Bon,BUa,[B,Bo,'7695']]],[[U,F,Cbm,BUd,BUX,[A,E,ANy],BUf,BxW,Bon,BUa]]],['7694',AjX+' +lon_0=74.51666666666667 +k=1 +x_0=3300000'+AJI+j+q+a,[[U,Au,Cbl,BUd,BUX,[A,E,ANz],BUf,BxV,Bon,BUa,[B,Bo,'7694']]],[[U,F,Cbm,BUd,BUX,[A,E,ANz],BUf,BxV,Bon,BUa]]],['7693',AjX+' +lon_0=71.51666666666667 +k=1 +x_0=2300000'+AJI+j+q+a,[[U,Au,Cbl,BUd,BUX,[A,E,AOA],BUf,BxU,Bon,BUa,[B,Bo,'7693']]],[[U,F,Cbm,BUd,BUX,[A,E,AOA],BUf,BxU,Bon,BUa]]],['7692',AjX+' +lon_0=68.51666666666667 +k=1 +x_0=1300000'+AJI+j+q+a,[[U,Au,Cbl,BUd,BUX,[A,E,AOB],BUf,CNX,Bon,BUa,[B,Bo,'7692']]],[[U,F,Cbm,BUd,BUX,[A,E,AOB],BUf,CNX,Bon,BUa]]],['7645',AU+AYb+AYc+PQ+' +k_0=1.0000421209 +x_0=208483.6172720346 +y_0=134589.7539243078'+AlX,[[U,Au,Cbl,BWW,CNW,BWb,CNV,[A,I,AOC],[A,G,AhM],BVT,[B,Bo,'7645']]],[[U,b,Cbm,BVD,CNW,BWb,CNV,[A,I,AOC],[A,G,AhM],BUr,[A,W,bp]]]],['7644',AU+AYd+AYe+ns+' +k_0=1.0000392096'+Adx+' +y_0=45069.7588011176'+AlX,[[U,Au,Cbl,BWW,CNU,BuJ,CNT,CDB,[A,G,AhN],BVT,[B,Bo,'7644']]],[[U,b,Cbm,BVD,CNU,BuJ,CNT,CDB,[A,G,AhN],BUr,[A,W,bq]]]],['7643',l+AYf+AVe+' +k=1.0000333645 +x_0=185013.9709423419 +y_0=0.007010414020828041'+AlX,[[U,Au,Cbl,BUd,CNS,CNR,CNQ,[A,I,AhO],CPH,BVT,[B,Bo,'7643']]],[[U,F,Cbm,BUd,CNS,CNR,CNQ,[A,I,AhO],CPH,BUr]]],['7642',l+AYg+AVf+' +k=1.0000346179 +x_0=208788.4178816358'+AAD+AlX,[[U,Au,Cbl,BUd,CNP,CDA,CNO,[A,I,AOD],BvA,BVT,[B,Bo,'7642']]],[[U,F,Cbm,BUd,CNP,CDA,CNO,[A,I,AOD],BvA,BUr]]],['7641',l+AYh+AVg+' +k=1.00003738 +x_0=120091.4414020828'+BMu+a,[[U,Au,Cbl,BUd,CNN,CNM,CCz,[A,I,AhP],BmV,BVT,[B,Bo,'7641']]],[[U,F,Cbm,BUd,CNN,CNM,CCz,[A,I,AhP],BmV,BUr]]],['7640',AU+AYi+AYj+AVh+' +k_0=1.0000475376 +x_0=234086.8681737363 +y_0=188358.6059436119'+AlX,[[U,Au,Cbl,BWW,CNL,CNK,CNJ,CNI,[A,G,AhQ],BVT,[B,Bo,'7640']]],[[U,b,Cbm,BVD,CNL,CNK,CNJ,CNI,[A,G,AhQ],BUr,[A,W,br]]]],['7639',AU+AYk+AYl+AVi+' +k_0=1.0000367192 +x_0=232562.8651257302 +y_0=111088.2224028448'+AlX,[[U,Au,Cbl,BWW,CNH,CNG,CNF,CNE,[A,G,AhR],BVT,[B,Bo,'7639']]],[[U,b,Cbm,BVD,CNH,CNG,CNF,CNE,[A,G,AhR],BUr,[A,W,bs]]]],['7638',AU+AYm+AYn+AVj+' +k_0=1.0000730142 +x_0=134417.0688341377 +y_0=50337.10927101854'+AlX,[[U,Au,Cbl,BWW,CND,CNC,CNB,CNA,[A,G,AhS],BVT,[B,Bo,'7638']]],[[U,b,Cbm,BVD,CND,CNC,CNB,CNA,[A,G,AhS],BUr,[A,W,bt]]]],['7637',AU+AYo+AYp+AVk+' +k_0=1.0000408158 +x_0=222504.44500889 +y_0=47532.0603505207'+AlX,[[U,Au,Cbl,BWW,CMz,CMy,CMx,CMw,[A,G,AhT],BVT,[B,Bo,'7637']]],[[U,b,Cbm,BVD,CMz,CMy,CMx,CMw,[A,G,AhT],BUr,[A,W,bu]]]],['7636',l+AYq+AVl+' +k=1.0000361538 +x_0=256946.9138938278'+AVm+AlX,[[U,Au,Cbl,BUd,CMv,CMu,CMt,CMs,CCy,BVT,[B,Bo,'7636']]],[[U,F,Cbm,BUd,CMv,CMu,CMt,CMs,CCy,BUr]]],['7635',AU+AYr+AYs+AVn+' +k_0=1.0000597566 +x_0=187147.5742951486 +y_0=107746.7521463043'+AlX,[[U,Au,Cbl,BWW,CMr,CMq,CMp,CMo,[A,G,AhU],BVT,[B,Bo,'7635']]],[[U,b,Cbm,BVD,CMr,CMq,CMp,CMo,[A,G,AhU],BUr,[A,W,bv]]]],['7634',l+ou+nt+' +k=1.0000381803 +x_0=165506.7300990602 +y_0=0.01036322072644145'+AlX,[[U,Au,Cbl,BUd,BuI,BuH,CMn,[A,I,AhV],CPG,BVT,[B,Bo,'7634']]],[[U,F,Cbm,BUd,BuI,BuH,CMn,[A,I,AhV],CPG,BUr]]],['7633',l+ou+AVo+' +k=1.000032144 +x_0=262433.3251714504 +y_0=0.009448818897637795'+AlX,[[U,Au,Cbl,BUd,BuI,CMm,CMl,[A,I,AOE],CPF,BVT,[B,Bo,'7633']]],[[U,F,Cbm,BUd,BuI,CMm,CMl,[A,I,AOE],CPF,BUr]]],['7632',AU+AYt+AYu+AVp+' +k_0=1.0000573461 +x_0=216713.2337312675 +y_0=120734.1631699263'+AlX,[[U,Au,Cbl,BWW,CMk,CMj,CMi,[A,I,AOF],[A,G,AhW],BVT,[B,Bo,'7632']]],[[U,b,Cbm,BVD,CMk,CMj,CMi,[A,I,AOF],[A,G,AhW],BUr,[A,W,bw]]]],['7631',l+AYv+AVq+' +k=1.0000373868 +x_0=185623.5715519431 +y_0=0.005181610363220727'+AlX,[[U,Au,Cbl,BUd,CMh,CCx,CMg,[A,I,AhX],CPE,BVT,[B,Bo,'7631']]],[[U,F,Cbm,BUd,CMh,CCx,CMg,[A,I,AhX],CPE,BUr]]],['7630',l+AYw+AVr+' +k=1.0000495976 +x_0=250546.1013970028 +y_0=0.02346964693929388'+AlX,[[U,Au,Cbl,BUd,CMf,CMe,CMd,[A,I,AOG],CPD,BVT,[B,Bo,'7630']]],[[U,F,Cbm,BUd,CMf,CMe,CMd,[A,I,AOG],CPD,BUr]]],['7629',l+AYx+AVs+' +k=1.0000337311 +x_0=146304.2926085852 +y_0=0.006705613411226822'+AlX,[[U,Au,Cbl,BUd,CMc,CMb,CMa,CMZ,CPC,BVT,[B,Bo,'7629']]],[[U,F,Cbm,BUd,CMc,CMb,CMa,CMZ,CPC,BUr]]],['7628',AU+' +lat_1=43.3223129275 +lat_0=43.3223129275'+AVt+' +k_0=1.0000375653 +x_0=202387.6047752095 +y_0=134255.4254508509'+AlX,[[U,Au,Cbl,BWW,CMY,CMX,CMW,CMV,[A,G,AhY],BVT,[B,Bo,'7628']]],[[U,b,Cbm,BVD,CMY,CMX,CMW,CMV,[A,G,AhY],BUr,[A,W,gL]]]],['7627',l+AYy+AVu+' +k=1.0000649554 +x_0=227990.8544577089 +y_0=0.01097282194564389'+AlX,[[U,Au,Cbl,BUd,CMU,CMT,CMS,[A,I,AhZ],CPB,BVT,[B,Bo,'7627']]],[[U,F,Cbm,BUd,CMU,CMT,CMS,[A,I,AhZ],CPB,BUr]]],['7626',AU+AYz+AZA+' +lon_0=-89.5 +k_0=1.000039936 +x_0=56388.11277622555 +y_0=50022.1874523749'+AlX,[[U,Au,Cbl,BWW,CMR,CCw,CMQ,CMP,CCv,BVT,[B,Bo,'7626']]],[[U,b,Cbm,BVD,CMR,CCw,CMQ,CMP,CCv,BUr,[A,W,bx]]]],['7625',l+AZB+nt+' +k=1.0000433849 +x_0=141732.2822453645'+AVv+AlX,[[U,Au,Cbl,BUd,CMO,BuH,CMN,[A,I,Aha],CCu,BVT,[B,Bo,'7625']]],[[U,F,Cbm,BUd,CMO,BuH,CMN,[A,I,Aha],CCu,BUr]]],['7624',AU+AZC+AZD+AVw+' +k_0=1.0000362977 +x_0=167640.3352806706 +y_0=86033.08773177546'+AlX,[[U,Au,Cbl,BWW,CMM,CML,CMK,[A,I,AOH],[A,G,Ahb],BVT,[B,Bo,'7624']]],[[U,b,Cbm,BVD,CMM,CML,CMK,[A,I,AOH],[A,G,Ahb],BUr,[A,W,by]]]],['7623',AU+AZE+AZF+AVx+' +k_0=1.0000686968 +x_0=70104.14020828041 +y_0=57588.03474726949'+AlX,[[U,Au,Cbl,BWW,CMJ,CMI,CMH,CMG,[A,G,Ahc],BVT,[B,Bo,'7623']]],[[U,b,Cbm,BVD,CMJ,CMI,CMH,CMG,[A,G,Ahc],BUr,[A,W,bz]]]],['7622',l+AZG+AVy+' +k=1.0000236869 +x_0=182880.3675895352'+AAD+AlX,[[U,Au,Cbl,BUd,CMF,CME,CMD,[A,I,Ahd],BvA,BVT,[B,Bo,'7622']]],[[U,F,Cbm,BUd,CMF,CME,CMD,[A,I,Ahd],BvA,BUr]]],['7621',AU+AZH+AZI+AVz+' +k_0=1.0000434122 +x_0=204521.2090424181 +y_0=121923.9861823724'+AlX,[[U,Au,Cbl,BWW,CMC,CMB,CMA,CLz,[A,G,AOI],BVT,[B,Bo,'7621']]],[[U,b,Cbm,BVD,CMC,CMB,CMA,CLz,[A,G,AOI],BUr,[A,W,cA]]]],['7620',l+AZJ+AWA+' +k=1.0000362499 +x_0=105461.0121412243'+BMu+a,[[U,Au,Cbl,BUd,CLy,CLx,CLw,[A,I,Ahe],BmV,BVT,[B,Bo,'7620']]],[[U,F,Cbm,BUd,CLy,CLx,CLw,[A,I,Ahe],BmV,BUr]]],['7619',l+AZK+AWB+' +k=1.0000234982 +x_0=238658.8794513589'+BMu+a,[[U,Au,Cbl,BUd,CLv,CLu,CLt,[A,I,Ahf],BmV,BVT,[B,Bo,'7619']]],[[U,F,Cbm,BUd,CLv,CLu,CLt,[A,I,Ahf],BmV,BUr]]],['7618',AU+AZL+AZM+' +lon_0=-89.77 +k_0=1.000053289 +x_0=74676.1493522987 +y_0=55049.26695453391'+AlX,[[U,Au,Cbl,BWW,CLs,CCt,CLr,CLq,CCs,BVT,[B,Bo,'7618']]],[[U,b,Cbm,BVD,CLs,CCt,CLr,CLq,CCs,BUr,[A,W,cB]]]],['7617',l+AZN+AWC+' +k=1.0000599003 +x_0=116129.0322580645'+AVv+AlX,[[U,Au,Cbl,BUd,CLp,CLo,CLn,CLm,CCu,BVT,[B,Bo,'7617']]],[[U,F,Cbm,BUd,CLp,CLo,CLn,CLm,CCu,BUr]]],['7616',AU+AZO+AZP+AWD+' +k_0=1.0000627024 +x_0=198425.1968503937 +y_0=105279.7828803657'+AlX,[[U,Au,Cbl,BWW,CLl,CLk,CLj,CLi,[A,G,Ahg],BVT,[B,Bo,'7616']]],[[U,b,Cbm,BVD,CLl,CLk,CLj,CLi,[A,G,Ahg],BUr,[A,W,cC]]]],['7615',l+AZQ+AWE+' +k=1.0000319985 +x_0=130454.6596901194'+AAD+AlX,[[U,Au,Cbl,BUd,CLh,CLg,CLf,[A,I,Ahh],BvA,BVT,[B,Bo,'7615']]],[[U,F,Cbm,BUd,CLh,CLg,CLf,[A,I,Ahh],BvA,BUr]]],['7614',l+AZR+ASH+' +k=1.0000233704 +x_0=79857.76154432308 +y_0=0.001219202438404877'+AlX,[[U,Au,Cbl,BUd,CLe,BuG,CLd,[A,I,Ahi],CPA,BVT,[B,Bo,'7614']]],[[U,F,Cbm,BUd,CLe,BuG,CLd,[A,I,Ahi],CPA,BUr]]],['7613',l+AZS+AWF+' +k=1.0000260649 +x_0=185928.3727711455 +y_0=0.0009144018288036576'+AlX,[[U,Au,Cbl,BUd,CLc,CLb,CLa,[A,I,Ahj],Buz,BVT,[B,Bo,'7613']]],[[U,F,Cbm,BUd,CLc,CLb,CLa,[A,I,Ahj],Buz,BUr]]],['7612',l+AZT+AWG+' +k=1.0000353 +x_0=27000 +y_0=24999.99989839979'+AlX,[[U,Au,Cbl,BUd,CLZ,CLY,CCr,CGi,[A,G,AOJ],BVT,[B,Bo,'7612']]],[[U,F,Cbm,BUd,CLZ,CLY,CCr,CGi,[A,G,AOJ],BUr]]],['7611',l+AZU+AWH+' +k=1.0000677153 +x_0=220980.4419608839'+AWI+AlX,[[U,Au,Cbl,BUd,CLX,CLW,CLV,CLU,CCq,BVT,[B,Bo,'7611']]],[[U,F,Cbm,BUd,CLX,CLW,CLV,CLU,CCq,BUr]]],['7610',l+AZV+AWJ+' +k=1.0000394961 +x_0=113081.0261620523 +y_0=0.004572009144018288'+AlX,[[U,Au,Cbl,BUd,CLT,CLS,CLR,CLQ,COz,BVT,[B,Bo,'7610']]],[[U,F,Cbm,BUd,CLT,CLS,CLR,CLQ,COz,BUr]]],['7609',AU+AZW+AZX+ns+' +k_0=1.0000344057 +x_0=150876.3017526035 +y_0=79170.77937515875'+AlX,[[U,Au,Cbl,BWW,CLP,BuJ,CLO,CLN,[A,G,Ahk],BVT,[B,Bo,'7609']]],[[U,b,Cbm,BVD,CLP,BuJ,CLO,CLN,[A,G,Ahk],BUr,[A,W,cD]]]],['7608',AU+AZY+AZZ+AWK+' +k_0=1.0000390487 +x_0=170078.7401574803 +y_0=45830.29484378968'+AlX,[[U,Au,Cbl,BWW,CLM,CLL,CLK,CLJ,[A,G,Ahl],BVT,[B,Bo,'7608']]],[[U,b,Cbm,BVD,CLM,CLL,CLK,CLJ,[A,G,Ahl],BUr,[A,W,cE]]]],['7607',l+AZa+' +lon_0=-90.8 +k=1.0000349452 +x_0=242316.484023368 +y_0=0.01005842011684023'+AlX,[[U,Au,Cbl,BUd,CLI,CCp,CLH,[A,I,AOK],COy,BVT,[B,Bo,'7607']]],[[U,F,Cbm,BUd,CLI,CCp,CLH,[A,I,AOK],COy,BUr]]],['7606',l+AZb+AWL+' +k=1.0000673004 +x_0=275844.5532131065 +y_0=0.0158496316992634'+AlX,[[U,Au,Cbl,BUd,CLG,CLF,CLE,[A,I,AOL],COx,BVT,[B,Bo,'7606']]],[[U,F,Cbm,BUd,CLG,CLF,CLE,[A,I,AOL],COx,BUr]]],['7605',l+AZc+AWM+' +k=1.0000552095 +x_0=133502.6682245364 +y_0=0.006400812801625603'+AlX,[[U,Au,Cbl,BUd,CLD,CLC,CLB,[A,I,Ahm],COw,BVT,[B,Bo,'7605']]],[[U,F,Cbm,BUd,CLD,CLC,CLB,[A,I,Ahm],COw,BUr]]],['7604',AU+AZd+AZe+AWN+' +k_0=1.000035079'+Adx+' +y_0=91687.92390144781'+AlX,[[U,Au,Cbl,BWW,CLA,CKz,CKy,CDB,[A,G,Ahn],BVT,[B,Bo,'7604']]],[[U,b,Cbm,BVD,CLA,CKz,CKy,CDB,[A,G,Ahn],BUr,[A,W,cF]]]],['7603',l+AZf+AWO+' +k=1.0000410324 +x_0=51816.10393700787'+BMu+a,[[U,Au,Cbl,BUd,CKx,CKw,CKv,[A,I,Aho],BmV,BVT,[B,Bo,'7603']]],[[U,F,Cbm,BUd,CKx,CKw,CKv,[A,I,Aho],BmV,BUr]]],['7602',l+AZg+AAE+' +k=1.0000385418 +x_0=59131.31826263652'+AVm+AlX,[[U,Au,Cbl,BUd,CKu,BxT,CKt,CKs,CCy,BVT,[B,Bo,'7602']]],[[U,F,Cbm,BUd,CKu,BxT,CKt,CKs,CCy,BUr]]],['7601',l+' +lat_0=44.4'+AWP+' +k=1.0000187521 +x_0=158801.1176022352 +y_0=0.002438404876809754'+AlX,[[U,Au,Cbl,BUd,CKr,CKq,CKp,CKo,[A,G,AIO],BVT,[B,Bo,'7601']]],[[U,F,Cbm,BUd,CKr,CKq,CKp,CKo,[A,G,AIO],BUr]]],['7600',l+AZh+AWQ+' +k=1.0000346418 +x_0=263347.7263906528 +y_0=0.00762001524003048'+AlX,[[U,Au,Cbl,BUd,CKn,CCo,CKm,[A,I,AOM],COv,BVT,[B,Bo,'7600']]],[[U,F,Cbm,BUd,CKn,CCo,CKm,[A,I,AOM],COv,BUr]]],['7599',AU+' +lat_1=43.0695160375 +lat_0=43.0695160375'+AWR+' +k_0=1.0000384786 +x_0=247193.2943865888 +y_0=146591.9896367793'+AlX,[[U,Au,Cbl,BWW,CKl,CKk,CKj,CKi,[A,G,Ahp],BVT,[B,Bo,'7599']]],[[U,b,Cbm,BVD,CKl,CKk,CKj,CKi,[A,G,Ahp],BUr,[A,W,gM]]]],['7598',AU+' +lat_1=43.200055605 +lat_0=43.200055605'+AZi+' +k_0=1.0000349151 +x_0=113690.6273812548 +y_0=53703.12024384048'+AlX,[[U,Au,Cbl,BWW,CKh,CKg,CKf,[A,I,AON],[A,G,Ahq],BVT,[B,Bo,'7598']]],[[U,b,Cbm,BVD,CKh,CKg,CKf,[A,I,AON],[A,G,Ahq],BUr,[A,W,hV]]]],['7597',AU+AZj+AZk+AWS+' +k_0=1.00003498 +x_0=169164.338023876 +y_0=111569.613512827'+AlX,[[U,Au,Cbl,BWW,CKe,CKd,CCn,[A,I,AOO],[A,G,Ahr],BVT,[B,Bo,'7597']]],[[U,b,Cbm,BVD,CKe,CKd,CCn,[A,I,AOO],[A,G,Ahr],BUr,[A,W,cG]]]],['7596',l+' +lat_0=43.6'+AWT+' +k=1.0000463003 +x_0=199949.198983998'+AWI+AlX,[[U,Au,Cbl,BUd,CCm,CKc,CKb,[A,I,AOP],CCq,BVT,[B,Bo,'7596']]],[[U,F,Cbm,BUd,CCm,CKc,CKb,[A,I,AOP],CCq,BUr]]],['7595',AU+AZl+AZm+AWU+' +k_0=1.0000391127 +x_0=60045.72009144018 +y_0=44091.43449326898'+AlX,[[U,Au,Cbl,BWW,CKa,CKZ,CKY,CKX,[A,G,Ahs],BVT,[B,Bo,'7595']]],[[U,b,Cbm,BVD,CKa,CKZ,CKY,CKX,[A,G,Ahs],BUr,[A,W,cH]]]],['7594',l+AZn+' +lon_0=-88.5 +k=1.0000286569 +x_0=244754.8892049784'+AWV+AlX,[[U,Au,Cbl,BUd,CKW,CCl,CKV,[A,I,Aht],CCk,BVT,[B,Bo,'7594']]],[[U,F,Cbm,BUd,CKW,CCl,CKV,[A,I,Aht],CCk,BUr]]],['7593',AU+AZo+AZp+AWW+' +k_0=1.0000383841 +x_0=64008.12771145543 +y_0=59445.90419100838'+AlX,[[U,Au,Cbl,BWW,CKU,CKT,CKS,[A,I,Ahu],[A,G,Ahv],BVT,[B,Bo,'7593']]],[[U,b,Cbm,BVD,CKU,CKT,CKS,[A,I,Ahu],[A,G,Ahv],BUr,[A,W,cI]]]],['7592',l+AZq+AWX+' +k=1.0000382778 +x_0=175260.3502159004'+AWV+AlX,[[U,Au,Cbl,BUd,CKR,CKQ,CKP,[A,I,Ahw],CCk,BVT,[B,Bo,'7592']]],[[U,F,Cbm,BUd,CKR,CKQ,CKP,[A,I,Ahw],CCk,BUr]]],['7591',l+wA+' +lon_0=-88'+yU+' +x_0=31599.99989839979 +y_0=4599.999898399797'+AlX,[[U,Au,Cbl,BUd,BcA,CCj,Bds,[A,I,Ahx],CCi,BVT,[B,Bo,'7591']]],[[U,F,Cbm,BUd,BcA,CCj,Bds,[A,I,Ahx],CCi,BUr]]],['7590',AU+AZr+AZs+AWY+' +k_0=1.0000331195 +x_0=228600.4575057151 +y_0=148551.4835661671'+AlX,[[U,Au,Cbl,BWW,CKO,CKN,CKM,[A,I,AOQ],[A,G,Ahy],BVT,[B,Bo,'7590']]],[[U,b,Cbm,BVD,CKO,CKN,CKM,[A,I,AOQ],[A,G,Ahy],BUr,[A,W,cJ]]]],['7589',l+AZt+AWZ+' +k=1.0000486665 +x_0=93150'+BMu+a,[[U,Au,Cbl,BUd,CKL,CCh,CKK,[A,I,Ahz],BmV,BVT,[B,Bo,'7589']]],[[U,F,Cbm,BUd,CKL,CCh,CKK,[A,I,Ahz],BmV,BUr]]],['7588',l+AZu+AWa+' +k=1.0000495683 +x_0=172821.945948692 +y_0=0.001828803657607315'+AlX,[[U,Au,Cbl,BUd,CKJ,CKI,CKH,[A,I,AOR],COu,BVT,[B,Bo,'7588']]],[[U,F,Cbm,BUd,CKJ,CKI,CKH,[A,I,AOR],COu,BUr]]],['7587',l+AZv+PQ+' +k=1.0000365285 +x_0=147218.6941325883 +y_0=0.00365760731521463'+AlX,[[U,Au,Cbl,BUd,CKG,BWb,CKF,[A,I,AOS],COt,BVT,[B,Bo,'7587']]],[[U,F,Cbm,BUd,CKG,BWb,CKF,[A,I,AOS],COt,BUr]]],['7586',AU+AYb+AYc+PQ+' +k_0=1.0000421209 +x_0=208483.6173 +y_0=134589.754'+j+q+a,[[U,Au,Cbl,BWW,CNW,BWb,CNV,[A,I,Ady],[A,G,AiA],BUa,[B,Bo,'7586']]],[[U,b,Cbm,BVD,CNW,BWb,CNV,[A,I,Ady],[A,G,AiA],BUa,[A,W,bp]]]],['7585',AU+AYd+AYe+ns+' +k_0=1.0000392096 +x_0=120091.4402 +y_0=45069.7587'+j+q+a,[[U,Au,Cbl,BWW,CNU,BuJ,CNT,CKE,[A,G,AiB],BUa,[B,Bo,'7585']]],[[U,b,Cbm,BVD,CNU,BuJ,CNT,CKE,[A,G,AiB],BUa,[A,W,bq]]]],['7584',l+AYf+AVe+' +k=1.0000333645 +x_0=185013.9709 +y_0=0.007'+j+q+a,[[U,Au,Cbl,BUd,CNS,CNR,CNQ,[A,I,Adz],COs,BUa,[B,Bo,'7584']]],[[U,F,Cbm,BUd,CNS,CNR,CNQ,[A,I,Adz],COs,BUa]]],['7583',l+AYg+AVf+' +k=1.0000346179 +x_0=208788.418 +y_0=0.0034'+j+q+a,[[U,Au,Cbl,BUd,CNP,CDA,CNO,[A,I,AiC],CKD,BUa,[B,Bo,'7583']]],[[U,F,Cbm,BUd,CNP,CDA,CNO,[A,I,AiC],CKD,BUa]]],['7582',l+AYh+AVg+' +k=1.00003738 +x_0=120091.4415 +y_0=0.003'+j+q+a,[[U,Au,Cbl,BUd,CNN,CNM,CCz,[A,I,AeA],Buz,BUa,[B,Bo,'7582']]],[[U,F,Cbm,BUd,CNN,CNM,CCz,[A,I,AeA],Buz,BUa]]],['7581',AU+AYi+AYj+AVh+' +k_0=1.0000475376 +x_0=234086.8682 +y_0=188358.6058'+j+q+a,[[U,Au,Cbl,BWW,CNL,CNK,CNJ,[A,I,AeB],[A,G,AeC],BUa,[B,Bo,'7581']]],[[U,b,Cbm,BVD,CNL,CNK,CNJ,[A,I,AeB],[A,G,AeC],BUa,[A,W,br]]]],['7580',AU+AYk+AYl+AVi+' +k_0=1.0000367192 +x_0=232562.8651 +y_0=111088.2224'+j+q+a,[[U,Au,Cbl,BWW,CNH,CNG,CNF,[A,I,AeD],[A,G,AeE],BUa,[B,Bo,'7580']]],[[U,b,Cbm,BVD,CNH,CNG,CNF,[A,I,AeD],[A,G,AeE],BUa,[A,W,bs]]]],['7579',AU+AYm+AYn+AVj+' +k_0=1.0000730142 +x_0=134417.0689 +y_0=50337.1092'+j+q+a,[[U,Au,Cbl,BWW,CND,CNC,CNB,[A,I,AeF],[A,G,AiD],BUa,[B,Bo,'7579']]],[[U,b,Cbm,BVD,CND,CNC,CNB,[A,I,AeF],[A,G,AiD],BUa,[A,W,bt]]]],['7578',AU+AYo+AYp+AVk+' +k_0=1.0000408158 +x_0=222504.4451 +y_0=47532.0602'+j+q+a,[[U,Au,Cbl,BWW,CMz,CMy,CMx,[A,I,AeG],[A,G,AiE],BUa,[B,Bo,'7578']]],[[U,b,Cbm,BVD,CMz,CMy,CMx,[A,I,AeG],[A,G,AiE],BUa,[A,W,bu]]]],['7577',l+AYq+AVl+' +k=1.0000361538 +x_0=256946.9138 +y_0=0.0041'+j+q+a,[[U,Au,Cbl,BUd,CMv,CMu,CMt,[A,I,AeH],CCg,BUa,[B,Bo,'7577']]],[[U,F,Cbm,BUd,CMv,CMu,CMt,[A,I,AeH],CCg,BUa]]],['7576',AU+AYr+AYs+AVn+' +k_0=1.0000597566 +x_0=187147.5744 +y_0=107746.7522'+j+q+a,[[U,Au,Cbl,BWW,CMr,CMq,CMp,[A,I,AeI],[A,G,AeJ],BUa,[B,Bo,'7576']]],[[U,b,Cbm,BVD,CMr,CMq,CMp,[A,I,AeI],[A,G,AeJ],BUa,[A,W,bv]]]],['7575',l+ou+nt+' +k=1.0000381803 +x_0=165506.7302 +y_0=0.0103'+j+q+a,[[U,Au,Cbl,BUd,BuI,BuH,CMn,[A,I,AeK],CKC,BUa,[B,Bo,'7575']]],[[U,F,Cbm,BUd,BuI,BuH,CMn,[A,I,AeK],CKC,BUa]]],['7574',l+ou+AVo+' +k=1.000032144 +x_0=262433.3253 +y_0=0.009599999999999999'+j+q+a,[[U,Au,Cbl,BUd,BuI,CMm,CMl,[A,I,AeL],CKB,BUa,[B,Bo,'7574']]],[[U,F,Cbm,BUd,BuI,CMm,CMl,[A,I,AeL],CKB,BUa]]],['7573',AU+AYt+AYu+AVp+' +k_0=1.0000573461 +x_0=216713.2336 +y_0=120734.1631'+j+q+a,[[U,Au,Cbl,BWW,CMk,CMj,CMi,[A,I,AeM],[A,G,AeN],BUa,[B,Bo,'7573']]],[[U,b,Cbm,BVD,CMk,CMj,CMi,[A,I,AeM],[A,G,AeN],BUa,[A,W,bw]]]],['7572',l+AYv+AVq+' +k=1.0000373868 +x_0=185623.5716 +y_0=0.0051'+j+q+a,[[U,Au,Cbl,BUd,CMh,CCx,CMg,[A,I,AeO],CKA,BUa,[B,Bo,'7572']]],[[U,F,Cbm,BUd,CMh,CCx,CMg,[A,I,AeO],CKA,BUa]]],['7571',l+AYw+AVr+' +k=1.0000495976 +x_0=250546.1013 +y_0=0.0234'+j+q+a,[[U,Au,Cbl,BUd,CMf,CMe,CMd,[A,I,AeP],CJz,BUa,[B,Bo,'7571']]],[[U,F,Cbm,BUd,CMf,CMe,CMd,[A,I,AeP],CJz,BUa]]],['7570',l+AYx+AVs+' +k=1.0000337311 +x_0=146304.2926 +y_0=0.0068'+j+q+a,[[U,Au,Cbl,BUd,CMc,CMb,CMa,[A,I,AeQ],CJy,BUa,[B,Bo,'7570']]],[[U,F,Cbm,BUd,CMc,CMb,CMa,[A,I,AeQ],CJy,BUa]]],['7569',AU+' +lat_1=43.3223129275 +lat_0=43.3223129275'+AVt+' +k_0=1.0000375653 +x_0=202387.6048 +y_0=134255.4253'+j+q+a,[[U,Au,Cbl,BWW,CMY,CMX,CMW,[A,I,AeR],[A,G,AeS],BUa,[B,Bo,'7569']]],[[U,b,Cbm,BVD,CMY,CMX,CMW,[A,I,AeR],[A,G,AeS],BUa,[A,W,gL]]]],['7568',l+AYy+AVu+' +k=1.0000649554 +x_0=227990.8546 +y_0=0.0109'+j+q+a,[[U,Au,Cbl,BUd,CMU,CMT,CMS,[A,I,AeT],CJx,BUa,[B,Bo,'7568']]],[[U,F,Cbm,BUd,CMU,CMT,CMS,[A,I,AeT],CJx,BUa]]],['7567',AU+AYz+AZA+' +lon_0=-89.5 +k_0=1.000039936 +x_0=56388.1128 +y_0=50022.1874'+j+q+a,[[U,Au,Cbl,BWW,CMR,CCw,CMQ,[A,I,AiF],[A,G,AiG],BUa,[B,Bo,'7567']]],[[U,b,Cbm,BVD,CMR,CCw,CMQ,[A,I,AiF],[A,G,AiG],BUa,[A,W,bx]]]],['7566',l+AZB+nt+' +k=1.0000433849 +x_0=141732.2823 +y_0=0.0059'+j+q+a,[[U,Au,Cbl,BUd,CMO,BuH,CMN,[A,I,AeU],CJw,BUa,[B,Bo,'7566']]],[[U,F,Cbm,BUd,CMO,BuH,CMN,[A,I,AeU],CJw,BUa]]],['7565',AU+AZC+AZD+AVw+' +k_0=1.0000362977 +x_0=167640.3354 +y_0=86033.0876'+j+q+a,[[U,Au,Cbl,BWW,CMM,CML,CMK,[A,I,AeV],[A,G,AiH],BUa,[B,Bo,'7565']]],[[U,b,Cbm,BVD,CMM,CML,CMK,[A,I,AeV],[A,G,AiH],BUa,[A,W,by]]]],['7564',AU+AZE+AZF+AVx+' +k_0=1.0000686968 +x_0=70104.1401 +y_0=57588.0346'+j+q+a,[[U,Au,Cbl,BWW,CMJ,CMI,CMH,[A,I,AiI],[A,G,AiJ],BUa,[B,Bo,'7564']]],[[U,b,Cbm,BVD,CMJ,CMI,CMH,[A,I,AiI],[A,G,AiJ],BUa,[A,W,bz]]]],['7563',l+AZG+AVy+' +k=1.0000236869 +x_0=182880.3676 +y_0=0.0033'+j+q+a,[[U,Au,Cbl,BUd,CMF,CME,CMD,[A,I,AeW],CCf,BUa,[B,Bo,'7563']]],[[U,F,Cbm,BUd,CMF,CME,CMD,[A,I,AeW],CCf,BUa]]],['7562',AU+AZH+AZI+AVz+' +k_0=1.0000434122 +x_0=204521.209 +y_0=121923.9861'+j+q+a,[[U,Au,Cbl,BWW,CMC,CMB,CMA,[A,I,AiK],[A,G,AeX],BUa,[B,Bo,'7562']]],[[U,b,Cbm,BVD,CMC,CMB,CMA,[A,I,AiK],[A,G,AeX],BUa,[A,W,cA]]]],['7561',l+AZJ+AWA+' +k=1.0000362499 +x_0=105461.0121 +y_0=0.0029'+j+q+a,[[U,Au,Cbl,BUd,CLy,CLx,CLw,[A,I,AeY],CCe,BUa,[B,Bo,'7561']]],[[U,F,Cbm,BUd,CLy,CLx,CLw,[A,I,AeY],CCe,BUa]]],['7560',l+AZK+AWB+' +k=1.0000234982 +x_0=238658.8794 +y_0=0.0032'+j+q+a,[[U,Au,Cbl,BUd,CLv,CLu,CLt,[A,I,AeZ],CJv,BUa,[B,Bo,'7560']]],[[U,F,Cbm,BUd,CLv,CLu,CLt,[A,I,AeZ],CJv,BUa]]],['7559',AU+AZL+AZM+' +lon_0=-89.77 +k_0=1.000053289 +x_0=74676.1493 +y_0=55049.2669'+j+q+a,[[U,Au,Cbl,BWW,CLs,CCt,CLr,[A,I,AiL],[A,G,AiM],BUa,[B,Bo,'7559']]],[[U,b,Cbm,BVD,CLs,CCt,CLr,[A,I,AiL],[A,G,AiM],BUa,[A,W,cB]]]],['7558',l+AZN+AWC+' +k=1.0000599003 +x_0=116129.0323 +y_0=0.0058'+j+q+a,[[U,Au,Cbl,BUd,CLp,CLo,CLn,[A,I,Aea],CJu,BUa,[B,Bo,'7558']]],[[U,F,Cbm,BUd,CLp,CLo,CLn,[A,I,Aea],CJu,BUa]]],['7557',AU+AZO+AZP+AWD+' +k_0=1.0000627024 +x_0=198425.197 +y_0=105279.7829'+j+q+a,[[U,Au,Cbl,BWW,CLl,CLk,CLj,[A,I,AiN],[A,G,Aeb],BUa,[B,Bo,'7557']]],[[U,b,Cbm,BVD,CLl,CLk,CLj,[A,I,AiN],[A,G,Aeb],BUa,[A,W,cC]]]],['7556',l+AZQ+AWE+' +k=1.0000319985 +x_0=130454.6598 +y_0=0.0033'+j+q+a,[[U,Au,Cbl,BUd,CLh,CLg,CLf,[A,I,Aec],CCf,BUa,[B,Bo,'7556']]],[[U,F,Cbm,BUd,CLh,CLg,CLf,[A,I,Aec],CCf,BUa]]],['7555',l+AZR+ASH+' +k=1.0000233704 +x_0=79857.7614 +y_0=0.0012'+j+q+a,[[U,Au,Cbl,BUd,CLe,BuG,CLd,[A,I,AiO],CJt,BUa,[B,Bo,'7555']]],[[U,F,Cbm,BUd,CLe,BuG,CLd,[A,I,AiO],CJt,BUa]]],['7554',l+AZS+AWF+' +k=1.0000260649 +x_0=185928.3728 +y_0=0.0009'+j+q+a,[[U,Au,Cbl,BUd,CLc,CLb,CLa,[A,I,Aed],CJs,BUa,[B,Bo,'7554']]],[[U,F,Cbm,BUd,CLc,CLb,CLa,[A,I,Aed],CJs,BUa]]],['7553',l+AZT+AWG+' +k=1.0000353 +x_0=27000 +y_0=25000'+j+q+a,[[U,Au,Cbl,BUd,CLZ,CLY,CCr,COr,COq,BUa,[B,Bo,'7553']]],[[U,F,Cbm,BUd,CLZ,CLY,CCr,COr,COq,BUa]]],['7552',l+AZU+AWH+' +k=1.0000677153 +x_0=220980.4419 +y_0=0.008500000000000001'+j+q+a,[[U,Au,Cbl,BUd,CLX,CLW,CLV,[A,I,Aee],CJr,BUa,[B,Bo,'7552']]],[[U,F,Cbm,BUd,CLX,CLW,CLV,[A,I,Aee],CJr,BUa]]],['7551',l+AZV+AWJ+' +k=1.0000394961 +x_0=113081.0261 +y_0=0.0045'+j+q+a,[[U,Au,Cbl,BUd,CLT,CLS,CLR,[A,I,Aef],CJq,BUa,[B,Bo,'7551']]],[[U,F,Cbm,BUd,CLT,CLS,CLR,[A,I,Aef],CJq,BUa]]],['7550',AU+AZW+AZX+ns+' +k_0=1.0000344057 +x_0=150876.3018 +y_0=79170.7795'+j+q+a,[[U,Au,Cbl,BWW,CLP,BuJ,CLO,[A,I,Aeg],[A,G,AiP],BUa,[B,Bo,'7550']]],[[U,b,Cbm,BVD,CLP,BuJ,CLO,[A,I,Aeg],[A,G,AiP],BUa,[A,W,cD]]]],['7549',AU+AZY+AZZ+AWK+' +k_0=1.0000390487 +x_0=170078.7403 +y_0=45830.2947'+j+q+a,[[U,Au,Cbl,BWW,CLM,CLL,CLK,[A,I,Aeh],[A,G,AiQ],BUa,[B,Bo,'7549']]],[[U,b,Cbm,BVD,CLM,CLL,CLK,[A,I,Aeh],[A,G,AiQ],BUa,[A,W,cE]]]],['7548',l+AZa+' +lon_0=-90.8 +k=1.0000349452 +x_0=242316.4841 +y_0=0.01'+j+q+a,[[U,Au,Cbl,BUd,CLI,CCp,CLH,[A,I,Aei],BmV,BUa,[B,Bo,'7548']]],[[U,F,Cbm,BUd,CLI,CCp,CLH,[A,I,Aei],BmV,BUa]]],['7547',l+AZb+AWL+' +k=1.0000673004 +x_0=275844.5533 +y_0=0.0157'+j+q+a,[[U,Au,Cbl,BUd,CLG,CLF,CLE,[A,I,Aej],CJp,BUa,[B,Bo,'7547']]],[[U,F,Cbm,BUd,CLG,CLF,CLE,[A,I,Aej],CJp,BUa]]],['7546',l+AZc+AWM+' +k=1.0000552095 +x_0=133502.6683 +y_0=0.0063'+j+q+a,[[U,Au,Cbl,BUd,CLD,CLC,CLB,[A,I,Aek],CJo,BUa,[B,Bo,'7546']]],[[U,F,Cbm,BUd,CLD,CLC,CLB,[A,I,Aek],CJo,BUa]]],['7545',AU+AZd+AZe+AWN+' +k_0=1.000035079 +x_0=120091.4402 +y_0=91687.92389999999'+j+q+a,[[U,Au,Cbl,BWW,CLA,CKz,CKy,CKE,[A,G,AiR],BUa,[B,Bo,'7545']]],[[U,b,Cbm,BVD,CLA,CKz,CKy,CKE,[A,G,AiR],BUa,[A,W,cF]]]],['7544',l+AZf+AWO+' +k=1.0000410324 +x_0=51816.104 +y_0=0.003'+j+q+a,[[U,Au,Cbl,BUd,CKx,CKw,CKv,CCd,Buz,BUa,[B,Bo,'7544']]],[[U,F,Cbm,BUd,CKx,CKw,CKv,CCd,Buz,BUa]]],['7543',l+AZg+AAE+' +k=1.0000385418 +x_0=59131.3183 +y_0=0.0041'+j+q+a,[[U,Au,Cbl,BUd,CKu,BxT,CKt,[A,I,AiS],CCg,BUa,[B,Bo,'7543']]],[[U,F,Cbm,BUd,CKu,BxT,CKt,[A,I,AiS],CCg,BUa]]],['7542',l+' +lat_0=44.4'+AWP+' +k=1.0000187521 +x_0=158801.1176 +y_0=0.0023'+j+q+a,[[U,Au,Cbl,BUd,CKr,CKq,CKp,[A,I,Ael],CJn,BUa,[B,Bo,'7542']]],[[U,F,Cbm,BUd,CKr,CKq,CKp,[A,I,Ael],CJn,BUa]]],['7541',l+AZh+AWQ+' +k=1.0000346418 +x_0=263347.7263 +y_0=0.0076'+j+q+a,[[U,Au,Cbl,BUd,CKn,CCo,CKm,[A,I,Aem],CJm,BUa,[B,Bo,'7541']]],[[U,F,Cbm,BUd,CKn,CCo,CKm,[A,I,Aem],CJm,BUa]]],['7540',AU+' +lat_1=43.0695160375 +lat_0=43.0695160375'+AWR+' +k_0=1.0000384786 +x_0=247193.2944 +y_0=146591.9896'+j+q+a,[[U,Au,Cbl,BWW,CKl,CKk,CKj,[A,I,Aen],[A,G,Aeo],BUa,[B,Bo,'7540']]],[[U,b,Cbm,BVD,CKl,CKk,CKj,[A,I,Aen],[A,G,Aeo],BUa,[A,W,gM]]]],['7539',AU+' +lat_1=43.200055605 +lat_0=43.200055605'+AZi+' +k_0=1.0000349151 +x_0=113690.6274 +y_0=53703.1201'+j+q+a,[[U,Au,Cbl,BWW,CKh,CKg,CKf,[A,I,Aep],[A,G,AiT],BUa,[B,Bo,'7539']]],[[U,b,Cbm,BVD,CKh,CKg,CKf,[A,I,Aep],[A,G,AiT],BUa,[A,W,hV]]]],['7538',AU+AZj+AZk+AWS+' +k_0=1.00003498 +x_0=169164.3381 +y_0=111569.6134'+j+q+a,[[U,Au,Cbl,BWW,CKe,CKd,CCn,[A,I,Aeq],[A,G,Aer],BUa,[B,Bo,'7538']]],[[U,b,Cbm,BVD,CKe,CKd,CCn,[A,I,Aeq],[A,G,Aer],BUa,[A,W,cG]]]],['7537',l+' +lat_0=43.6'+AWT+' +k=1.0000463003 +x_0=199949.1989 +y_0=0.0086'+j+q+a,[[U,Au,Cbl,BUd,CCm,CKc,CKb,[A,I,Aes],CJl,BUa,[B,Bo,'7537']]],[[U,F,Cbm,BUd,CCm,CKc,CKb,[A,I,Aes],CJl,BUa]]],['7536',AU+AZl+AZm+AWU+' +k_0=1.0000391127 +x_0=60045.72 +y_0=44091.4346'+j+q+a,[[U,Au,Cbl,BWW,CKa,CKZ,CKY,CFq,[A,G,AiU],BUa,[B,Bo,'7536']]],[[U,b,Cbm,BVD,CKa,CKZ,CKY,CFq,[A,G,AiU],BUa,[A,W,cH]]]],['7535',l+AZn+' +lon_0=-88.5 +k=1.0000286569 +x_0=244754.8893 +y_0=0.0049'+j+q+a,[[U,Au,Cbl,BUd,CKW,CCl,CKV,[A,I,Aet],CJk,BUa,[B,Bo,'7535']]],[[U,F,Cbm,BUd,CKW,CCl,CKV,[A,I,Aet],CJk,BUa]]],['7534',AU+AZo+AZp+AWW+' +k_0=1.0000383841 +x_0=64008.1276 +y_0=59445.9043'+j+q+a,[[U,Au,Cbl,BWW,CKU,CKT,CKS,[A,I,AiV],[A,G,AiW],BUa,[B,Bo,'7534']]],[[U,b,Cbm,BVD,CKU,CKT,CKS,[A,I,AiV],[A,G,AiW],BUa,[A,W,cI]]]],['7533',l+AZq+AWX+' +k=1.0000382778 +x_0=175260.3502 +y_0=0.0048'+j+q+a,[[U,Au,Cbl,BUd,CKR,CKQ,CKP,[A,I,Aeu],CJj,BUa,[B,Bo,'7533']]],[[U,F,Cbm,BUd,CKR,CKQ,CKP,[A,I,Aeu],CJj,BUa]]],['7532',l+wA+' +lon_0=-88'+yU+' +x_0=31600 +y_0=4600'+j+q+a,[[U,Au,Cbl,BUd,BcA,CCj,Bds,COp,CPp,BUa,[B,Bo,'7532']]],[[U,F,Cbm,BUd,BcA,CCj,Bds,COp,CPp,BUa]]],['7531',AU+AZr+AZs+AWY+' +k_0=1.0000331195 +x_0=228600.4575 +y_0=148551.4837'+j+q+a,[[U,Au,Cbl,BWW,CKO,CKN,CKM,[A,I,Aev],[A,G,Aew],BUa,[B,Bo,'7531']]],[[U,b,Cbm,BVD,CKO,CKN,CKM,[A,I,Aev],[A,G,Aew],BUa,[A,W,cJ]]]],['7530',l+AZt+AWZ+' +k=1.0000486665 +x_0=93150 +y_0=0.0029'+j+q+a,[[U,Au,Cbl,BUd,CKL,CCh,CKK,COo,CCe,BUa,[B,Bo,'7530']]],[[U,F,Cbm,BUd,CKL,CCh,CKK,COo,CCe,BUa]]],['7529',l+AZu+AWa+' +k=1.0000495683 +x_0=172821.9461 +y_0=0.0017'+j+q+a,[[U,Au,Cbl,BUd,CKJ,CKI,CKH,[A,I,Aex],CJi,BUa,[B,Bo,'7529']]],[[U,F,Cbm,BUd,CKJ,CKI,CKH,[A,I,Aex],CJi,BUa]]],['7528',l+AZv+PQ+' +k=1.0000365285 +x_0=147218.6942 +y_0=0.0037'+j+q+a,[[U,Au,Cbl,BUd,CKG,BWb,CKF,[A,I,Aey],CJh,BUa,[B,Bo,'7528']]],[[U,F,Cbm,BUd,CKG,BWb,CKF,[A,I,Aey],CJh,BUa]]],['7376',Aoc+j+c+q+a,[[U,'UTM Zone 41,'+Akj,CcT,BUd,BUX,BZN,BUg,BUc,BUT,BUa,[B,Bo,'7376']]],[[U,'UTM_Zone_41_Northern_Hemisphere',Cbm,BUd,BUX,BZN,BUg,BUc,BUT,BUa]]],['7375',AnK+j+c+q+a,[[U,'UTM Zone 40,'+Akj,CcT,BUd,BUX,BXz,BUg,BUc,BUT,BUa,[B,Bo,'7375']]],[[U,ACl,Cbm,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['7374',Alt+j+c+q+a,[[U,'UTM Zone 39,'+Akj,CcT,BUd,BUX,BWt,BUg,BUc,BUT,BUa,[B,Bo,'7374']]],[[U,ACm,Cbm,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['7370',BDy+' +lon_0=-85.25'+BKw,[[U,Au,Cbl,BUd,BmU,CCc,Bdr,BVx,BVw,BVT,[B,Bo,'7370']]],[[U,F,Cbm,BUd,BmU,CCc,Bdr,BVx,BVw,BUr]]],['7369',BDy+' +lon_0=-85.25'+Atc+q+a,[[U,Au,Cbl,BUd,BmU,CCc,Bdr,BVv,BVu,BUa,[B,Bo,'7369']]],[[U,F,Cbm,BUd,BmU,CCc,Bdr,BVv,BVu,BUa]]],['7368',l+AXR+ASI+BHX+Ajg,[[U,Au,Cbl,BUd,BuF,BuE,Bds,BVx,BVw,BVT,[B,Bo,'7368']]],[[U,F,Cbm,BUd,BuF,BuE,Bds,BVx,BVw,BUr]]],['7367',l+AXR+ASI+BHX+q+a,[[U,Au,Cbl,BUd,BuF,BuE,Bds,BVv,BVu,BUa,[B,Bo,'7367']]],[[U,F,Cbm,BUd,BuF,BuE,Bds,BVv,BVu,BUa]]],['7366',l+Afz+ASH+BHW+Ajg,[[U,Au,Cbl,BUd,BuD,BuG,Bdq,BVx,BVw,BVT,[B,Bo,'7366']]],[[U,F,Cbm,BUd,BuD,BuG,Bdq,BVx,BVw,BUr]]],['7365',l+Afz+ASH+BHW+q+a,[[U,Au,Cbl,BUd,BuD,BuG,Bdq,BVv,BVu,BUa,[B,Bo,'7365']]],[[U,F,Cbm,BUd,BuD,BuG,Bdq,BVv,BVu,BUa]]],['7364',l+' +lat_0=40.2'+BPs+All,[[U,Au,Cbl,BUd,CCb,BuC,Bdp,BVx,BVw,BVT,[B,Bo,'7364']]],[[U,F,Cbm,BUd,CCb,BuC,Bdp,BVx,BVw,BUr]]],['7363',l+' +lat_0=40.2'+BPs+AoZ+a,[[U,Au,Cbl,BUd,CCb,BuC,Bdp,BVv,BVu,BUa,[B,Bo,'7363']]],[[U,F,Cbm,BUd,CCb,BuC,Bdp,BVv,BVu,BUa]]],['7362',l+AgA+xk+' +k=1.000017'+BHB,[[U,Au,Cbl,BUd,BuB,Bkh,CCa,BVx,BVw,BVT,[B,Bo,'7362']]],[[U,F,Cbm,BUd,BuB,Bkh,CCa,BVx,BVw,BUr]]],['7361',l+AgA+xk+' +k=1.000017'+BLB,[[U,Au,Cbl,BUd,BuB,Bkh,CCa,BVv,BVu,BUa,[B,Bo,'7361']]],[[U,F,Cbm,BUd,BuB,Bkh,CCa,BVv,BVu,BUa]]],['7360',l+Xs+ASz+' +k=1.000041'+BHB,[[U,Au,Cbl,BUd,BYb,BmT,CCZ,BVx,BVw,BVT,[B,Bo,'7360']]],[[U,F,Cbm,BUd,BYb,BmT,CCZ,BVx,BVw,BUr]]],['7359',l+Xs+ASz+' +k=1.000041'+BLB,[[U,Au,Cbl,BUd,BYb,BmT,CCZ,BVv,BVu,BUa,[B,Bo,'7359']]],[[U,F,Cbm,BUd,BYb,BmT,CCZ,BVv,BVu,BUa]]],['7358',BDv+' +lon_0=-87.05 +k=1.000014'+BHB,[[U,Au,Cbl,BUd,BmS,CCY,CCX,BVx,BVw,BVT,[B,Bo,'7358']]],[[U,F,Cbm,BUd,BmS,CCY,CCX,BVx,BVw,BUr]]],['7357',BDv+' +lon_0=-87.05 +k=1.000014'+BLB,[[U,Au,Cbl,BUd,BmS,CCY,CCX,BVv,BVu,BUa,[B,Bo,'7357']]],[[U,F,Cbm,BUd,BmS,CCY,CCX,BVv,BVu,BUa]]],['7356',l+AgB+AWb+' +k=1.00003'+BHB,[[U,Au,Cbl,BUd,BuA,CCW,Btz,BVx,BVw,BVT,[B,Bo,'7356']]],[[U,F,Cbm,BUd,BuA,CCW,Btz,BVx,BVw,BUr]]],['7355',l+AgB+AWb+' +k=1.00003'+BLB,[[U,Au,Cbl,BUd,BuA,CCW,Btz,BVv,BVu,BUa,[B,Bo,'7355']]],[[U,F,Cbm,BUd,BuA,CCW,Btz,BVv,BVu,BUa]]],['7354',l+AgA+' +lon_0=-85.3'+BRu,[[U,Au,Cbl,BUd,BuB,CCV,BjY,BVx,BVw,BVT,[B,Bo,'7354']]],[[U,F,Cbm,BUd,BuB,CCV,BjY,BVx,BVw,BUr]]],['7353',l+AgA+' +lon_0=-85.3'+BET+q+a,[[U,Au,Cbl,BUd,BuB,CCV,BjY,BVv,BVu,BUa,[B,Bo,'7353']]],[[U,F,Cbm,BUd,BuB,CCV,BjY,BVv,BVu,BUa]]],['7352',l+' +lat_0=39.7'+ym+' +k=1.000044'+BHB,[[U,Au,Cbl,BUd,CCU,BmR,CCT,BVx,BVw,BVT,[B,Bo,'7352']]],[[U,F,Cbm,BUd,CCU,BmR,CCT,BVx,BVw,BUr]]],['7351',l+' +lat_0=39.7'+ym+' +k=1.000044'+BLB,[[U,Au,Cbl,BUd,CCU,BmR,CCT,BVv,BVu,BUa,[B,Bo,'7351']]],[[U,F,Cbm,BUd,CCU,BmR,CCT,BVv,BVu,BUa]]],['7350',BDv+' +lon_0=-87.95'+BMt+Ajg,[[U,Au,Cbl,BUd,BmS,CCS,Bty,BVx,BVw,BVT,[B,Bo,'7350']]],[[U,F,Cbm,BUd,BmS,CCS,Bty,BVx,BVw,BUr]]],['7349',BDv+' +lon_0=-87.95'+BMt+q+a,[[U,Au,Cbl,BUd,BmS,CCS,Bty,BVv,BVu,BUa,[B,Bo,'7349']]],[[U,F,Cbm,BUd,BmS,CCS,Bty,BVv,BVu,BUa]]],['7348',l+' +lat_0=37.85'+AEA+BHW+Ajg,[[U,Au,Cbl,BUd,CCR,BmQ,Bdq,BVx,BVw,BVT,[B,Bo,'7348']]],[[U,F,Cbm,BUd,CCR,BmQ,Bdq,BVx,BVw,BUr]]],['7347',l+' +lat_0=37.85'+AEA+BHW+q+a,[[U,Au,Cbl,BUd,CCR,BmQ,Bdq,BVv,BVu,BUa,[B,Bo,'7347']]],[[U,F,Cbm,BUd,CCR,BmQ,Bdq,BVv,BVu,BUa]]],['7346',l+Afz+' +lon_0=-86.7'+BHX+Ajg,[[U,Au,Cbl,BUd,BuD,CCQ,Bds,BVx,BVw,BVT,[B,Bo,'7346']]],[[U,F,Cbm,BUd,BuD,CCQ,Bds,BVx,BVw,BUr]]],['7345',l+Afz+' +lon_0=-86.7'+BHX+q+a,[[U,Au,Cbl,BUd,BuD,CCQ,Bds,BVv,BVu,BUa,[B,Bo,'7345']]],[[U,F,Cbm,BUd,BuD,CCQ,Bds,BVv,BVu,BUa]]],['7344',l+AgD+AWc+BMs+Ajg,[[U,Au,Cbl,BUd,Btx,CCP,Btw,BVx,BVw,BVT,[B,Bo,'7344']]],[[U,F,Cbm,BUd,Btx,CCP,Btw,BVx,BVw,BUr]]],['7343',l+AgD+AWc+BMs+q+a,[[U,Au,Cbl,BUd,Btx,CCP,Btw,BVv,BVu,BUa,[B,Bo,'7343']]],[[U,F,Cbm,BUd,Btx,CCP,Btw,BVv,BVu,BUa]]],['7342',l+AXS+BPs+All,[[U,Au,Cbl,BUd,Btv,BuC,Bdp,BVx,BVw,BVT,[B,Bo,'7342']]],[[U,F,Cbm,BUd,Btv,BuC,Bdp,BVx,BVw,BUr]]],['7341',l+AXS+BPs+AoZ+a,[[U,Au,Cbl,BUd,Btv,BuC,Bdp,BVv,BVu,BUa,[B,Bo,'7341']]],[[U,F,Cbm,BUd,Btv,BuC,Bdp,BVv,BVu,BUa]]],['7340',l+' +lat_0=39.45'+ASJ+AtX+Ajg,[[U,Au,Cbl,BUd,CJg,Btu,Bdo,BVx,BVw,BVT,[B,Bo,'7340']]],[[U,F,Cbm,BUd,CJg,Btu,Bdo,BVx,BVw,BUr]]],['7339',l+' +lat_0=39.45'+ASJ+AtX+q+a,[[U,Au,Cbl,BUd,CJg,Btu,Bdo,BVv,BVu,BUa,[B,Bo,'7339']]],[[U,F,Cbm,BUd,CJg,Btu,Bdo,BVv,BVu,BUa]]],['7338',l+' +lat_0=38.95'+AEB+BHV+Ajg,[[U,Au,Cbl,BUd,CCO,BmP,BmO,BVx,BVw,BVT,[B,Bo,'7338']]],[[U,F,Cbm,BUd,CCO,BmP,BmO,BVx,BVw,BUr]]],['7337',l+' +lat_0=38.95'+AEB+BHV+q+a,[[U,Au,Cbl,BUd,CCO,BmP,BmO,BVv,BVu,BUa,[B,Bo,'7337']]],[[U,F,Cbm,BUd,CCO,BmP,BmO,BVv,BVu,BUa]]],['7336',BDu+' +lon_0=-86.75'+BHU+Ajg,[[U,Au,Cbl,BUd,BmN,CCN,BjX,BVx,BVw,BVT,[B,Bo,'7336']]],[[U,F,Cbm,BUd,BmN,CCN,BjX,BVx,BVw,BUr]]],['7335',BDu+' +lon_0=-86.75'+BHU+q+a,[[U,Au,Cbl,BUd,BmN,CCN,BjX,BVv,BVu,BUa,[B,Bo,'7335']]],[[U,F,Cbm,BUd,BmN,CCN,BjX,BVv,BVu,BUa]]],['7334',l+AgF+AWd+AtZ+Ajg,[[U,Au,Cbl,BUd,Btt,CCM,Bdp,BVx,BVw,BVT,[B,Bo,'7334']]],[[U,F,Cbm,BUd,Btt,CCM,Bdp,BVx,BVw,BUr]]],['7333',l+AgF+AWd+AtZ+q+a,[[U,Au,Cbl,BUd,Btt,CCM,Bdp,BVv,BVu,BUa,[B,Bo,'7333']]],[[U,F,Cbm,BUd,Btt,CCM,Bdp,BVv,BVu,BUa]]],['7332',l+AXT+ASK+' +k=1.000037'+BHB,[[U,Au,Cbl,BUd,Bts,Btr,BxS,BVx,BVw,BVT,[B,Bo,'7332']]],[[U,F,Cbm,BUd,Bts,Btr,BxS,BVx,BVw,BUr]]],['7331',l+AXT+ASK+' +k=1.000037'+BLB,[[U,Au,Cbl,BUd,Bts,Btr,BxS,BVv,BVu,BUa,[B,Bo,'7331']]],[[U,F,Cbm,BUd,Bts,Btr,BxS,BVv,BVu,BUa]]],['7330',l+' +lat_0=38.4'+ASI+BHW+Ajg,[[U,Au,Cbl,BUd,CCL,BuE,Bdq,BVx,BVw,BVT,[B,Bo,'7330']]],[[U,F,Cbm,BUd,CCL,BuE,Bdq,BVx,BVw,BUr]]],['7329',l+' +lat_0=38.4'+ASI+BHW+q+a,[[U,Au,Cbl,BUd,CCL,BuE,Bdq,BVv,BVu,BUa,[B,Bo,'7329']]],[[U,F,Cbm,BUd,CCL,BuE,Bdq,BVv,BVu,BUa]]],['7328',l+AgB+BPr+All,[[U,Au,Cbl,BUd,BuA,BmM,Bdo,BVx,BVw,BVT,[B,Bo,'7328']]],[[U,F,Cbm,BUd,BuA,BmM,Bdo,BVx,BVw,BUr]]],['7327',l+AgB+BPr+AoZ+a,[[U,Au,Cbl,BUd,BuA,BmM,Bdo,BVv,BVu,BUa,[B,Bo,'7327']]],[[U,F,Cbm,BUd,BuA,BmM,Bdo,BVv,BVu,BUa]]],['7326',l+' +lat_0=38.8'+AXU+BHT+Ajg,[[U,Au,Cbl,BUd,CCK,Btq,BmL,BVx,BVw,BVT,[B,Bo,'7326']]],[[U,F,Cbm,BUd,CCK,Btq,BmL,BVx,BVw,BUr]]],['7325',l+' +lat_0=38.8'+AXU+BHT+q+a,[[U,Au,Cbl,BUd,CCK,Btq,BmL,BVv,BVu,BUa,[B,Bo,'7325']]],[[U,F,Cbm,BUd,CCK,Btq,BmL,BVv,BVu,BUa]]],['7324',l+' +lat_0=38.55'+AWe+BHV+Ajg,[[U,Au,Cbl,BUd,CCJ,CCI,BmO,BVx,BVw,BVT,[B,Bo,'7324']]],[[U,F,Cbm,BUd,CCJ,CCI,BmO,BVx,BVw,BUr]]],['7323',l+' +lat_0=38.55'+AWe+BHV+q+a,[[U,Au,Cbl,BUd,CCJ,CCI,BmO,BVv,BVu,BUa,[B,Bo,'7323']]],[[U,F,Cbm,BUd,CCJ,CCI,BmO,BVv,BVu,BUa]]],['7322',l+' +lat_0=40.3'+ASz+BRu,[[U,Au,Cbl,BUd,CCH,BmT,BjY,BVx,BVw,BVT,[B,Bo,'7322']]],[[U,F,Cbm,BUd,CCH,BmT,BjY,BVx,BVw,BUr]]],['7321',l+' +lat_0=40.3'+ASz+BET+q+a,[[U,Au,Cbl,BUd,CCH,BmT,BjY,BVv,BVu,BUa,[B,Bo,'7321']]],[[U,F,Cbm,BUd,CCH,BmT,BjY,BVv,BVu,BUa]]],['7320',l+AgF+nv+BHU+Ajg,[[U,Au,Cbl,BUd,Btt,Btp,BjX,BVx,BVw,BVT,[B,Bo,'7320']]],[[U,F,Cbm,BUd,Btt,Btp,BjX,BVx,BVw,BUr]]],['7319',l+AgF+nv+BHU+q+a,[[U,Au,Cbl,BUd,Btt,Btp,BjX,BVv,BVu,BUa,[B,Bo,'7319']]],[[U,F,Cbm,BUd,Btt,Btp,BjX,BVv,BVu,BUa]]],['7318',l+' +lat_0=38.7 +lon_0=-85.95'+BMs+Ajg,[[U,Au,Cbl,BUd,CCG,CCF,Btw,BVx,BVw,BVT,[B,Bo,'7318']]],[[U,F,Cbm,BUd,CCG,CCF,Btw,BVx,BVw,BUr]]],['7317',l+' +lat_0=38.7 +lon_0=-85.95'+BMs+q+a,[[U,Au,Cbl,BUd,CCG,CCF,Btw,BVv,BVu,BUa,[B,Bo,'7317']]],[[U,F,Cbm,BUd,CCG,CCF,Btw,BVv,BVu,BUa]]],['7316',l+AXV+AXW+BKw,[[U,Au,Cbl,BUd,Bto,Btn,Bdr,BVx,BVw,BVT,[B,Bo,'7316']]],[[U,F,Cbm,BUd,Bto,Btn,Bdr,BVx,BVw,BUr]]],['7315',l+AXV+AXW+Atc+q+a,[[U,Au,Cbl,BUd,Bto,Btn,Bdr,BVv,BVu,BUa,[B,Bo,'7315']]],[[U,F,Cbm,BUd,Bto,Btn,Bdr,BVv,BVu,BUa]]],['7314',l+AXX+BPr+All,[[U,Au,Cbl,BUd,Btm,BmM,Bdo,BVx,BVw,BVT,[B,Bo,'7314']]],[[U,F,Cbm,BUd,Btm,BmM,Bdo,BVx,BVw,BUr]]],['7313',l+AXX+BPr+AoZ+a,[[U,Au,Cbl,BUd,Btm,BmM,Bdo,BVv,BVu,BUa,[B,Bo,'7313']]],[[U,F,Cbm,BUd,Btm,BmM,Bdo,BVv,BVu,BUa]]],['7312',l+' +lat_0=39.75'+ASK+AHI+BHB,[[U,Au,Cbl,BUd,CJf,Btr,Bkg,BVx,BVw,BVT,[B,Bo,'7312']]],[[U,F,Cbm,BUd,CJf,Btr,Bkg,BVx,BVw,BUr]]],['7311',l+' +lat_0=39.75'+ASK+AHI+BLB,[[U,Au,Cbl,BUd,CJf,Btr,Bkg,BVv,BVu,BUa,[B,Bo,'7311']]],[[U,F,Cbm,BUd,CJf,Btr,Bkg,BVv,BVu,BUa]]],['7310',l+' +lat_0=37.95'+ba+BHU+Ajg,[[U,Au,Cbl,BUd,CCE,BmM,BjX,BVx,BVw,BVT,[B,Bo,'7310']]],[[U,F,Cbm,BUd,CCE,BmM,BjX,BVx,BVw,BUr]]],['7309',l+' +lat_0=37.95'+ba+BHU+q+a,[[U,Au,Cbl,BUd,CCE,BmM,BjX,BVv,BVu,BUa,[B,Bo,'7309']]],[[U,F,Cbm,BUd,CCE,BmM,BjX,BVv,BVu,BUa]]],['7308',l+' +lat_0=39.65'+AXU+BRt,[[U,Au,Cbl,BUd,CCD,Btq,BjW,BVx,BVw,BVT,[B,Bo,'7308']]],[[U,F,Cbm,BUd,CCD,Btq,BjW,BVx,BVw,BUr]]],['7307',l+' +lat_0=39.65'+AXU+BES+q+a,[[U,Au,Cbl,BUd,CCD,Btq,BjW,BVv,BVu,BUa,[B,Bo,'7307']]],[[U,F,Cbm,BUd,CCD,Btq,BjW,BVv,BVu,BUa]]],['7306',l+' +lat_0=39.9'+ry+BKw,[[U,Au,Cbl,BUd,CCC,Bcg,Bdr,BVx,BVw,BVT,[B,Bo,'7306']]],[[U,F,Cbm,BUd,CCC,Bcg,Bdr,BVx,BVw,BUr]]],['7305',l+' +lat_0=39.9'+ry+Atc+q+a,[[U,Au,Cbl,BUd,CCC,Bcg,Bdr,BVv,BVu,BUa,[B,Bo,'7305']]],[[U,F,Cbm,BUd,CCC,Bcg,Bdr,BVv,BVu,BUa]]],['7304',l+AXX+' +lon_0=-85.7'+BKw,[[U,Au,Cbl,BUd,Btm,CCB,Bdr,BVx,BVw,BVT,[B,Bo,'7304']]],[[U,F,Cbm,BUd,Btm,CCB,Bdr,BVx,BVw,BUr]]],['7303',l+AXX+' +lon_0=-85.7'+Atc+q+a,[[U,Au,Cbl,BUd,Btm,CCB,Bdr,BVv,BVu,BUa,[B,Bo,'7303']]],[[U,F,Cbm,BUd,Btm,CCB,Bdr,BVv,BVu,BUa]]],['7302',l+AXY+AWf+BMt+Ajg,[[U,Au,Cbl,BUd,Btl,CCA,Bty,BVx,BVw,BVT,[B,Bo,'7302']]],[[U,F,Cbm,BUd,Btl,CCA,Bty,BVx,BVw,BUr]]],['7301',l+AXY+AWf+BMt+q+a,[[U,Au,Cbl,BUd,Btl,CCA,Bty,BVv,BVu,BUa,[B,Bo,'7301']]],[[U,F,Cbm,BUd,Btl,CCA,Bty,BVv,BVu,BUa]]],['7300',BDu+AXZ+AtX+Ajg,[[U,Au,Cbl,BUd,BmN,Btk,Bdo,BVx,BVw,BVT,[B,Bo,'7300']]],[[U,F,Cbm,BUd,BmN,Btk,Bdo,BVx,BVw,BUr]]],['7299',BDu+AXZ+AtX+q+a,[[U,Au,Cbl,BUd,BmN,Btk,Bdo,BVv,BVu,BUa,[B,Bo,'7299']]],[[U,F,Cbm,BUd,BmN,Btk,Bdo,BVv,BVu,BUa]]],['7298',l+' +lat_0=39.95'+AEA+BHT+Ajg,[[U,Au,Cbl,BUd,CBz,BmQ,BmL,BVx,BVw,BVT,[B,Bo,'7298']]],[[U,F,Cbm,BUd,CBz,BmQ,BmL,BVx,BVw,BUr]]],['7297',l+' +lat_0=39.95'+AEA+BHT+q+a,[[U,Au,Cbl,BUd,CBz,BmQ,BmL,BVv,BVu,BUa,[B,Bo,'7297']]],[[U,F,Cbm,BUd,CBz,BmQ,BmL,BVv,BVu,BUa]]],['7296',l+AXR+ym+BRu,[[U,Au,Cbl,BUd,BuF,BmR,BjY,BVx,BVw,BVT,[B,Bo,'7296']]],[[U,F,Cbm,BUd,BuF,BmR,BjY,BVx,BVw,BUr]]],['7295',l+AXR+ym+BET+q+a,[[U,Au,Cbl,BUd,BuF,BmR,BjY,BVv,BVu,BUa,[B,Bo,'7295']]],[[U,F,Cbm,BUd,BuF,BmR,BjY,BVv,BVu,BUa]]],['7294',l+AXV+nw+' +k=1.000033'+BHB,[[U,Au,Cbl,BUd,Bto,Btj,BxR,BVx,BVw,BVT,[B,Bo,'7294']]],[[U,F,Cbm,BUd,Bto,Btj,BxR,BVx,BVw,BUr]]],['7293',l+AXV+nw+' +k=1.000033'+BLB,[[U,Au,Cbl,BUd,Bto,Btj,BxR,BVv,BVu,BUa,[B,Bo,'7293']]],[[U,F,Cbm,BUd,Bto,Btj,BxR,BVv,BVu,BUa]]],['7292',l+' +lat_0=38.2'+ASJ+BHX+Ajg,[[U,Au,Cbl,BUd,CBy,Btu,Bds,BVx,BVw,BVT,[B,Bo,'7292']]],[[U,F,Cbm,BUd,CBy,Btu,Bds,BVx,BVw,BUr]]],['7291',l+' +lat_0=38.2'+ASJ+BHX+q+a,[[U,Au,Cbl,BUd,CBy,Btu,Bds,BVv,BVu,BUa,[B,Bo,'7291']]],[[U,F,Cbm,BUd,CBy,Btu,Bds,BVv,BVu,BUa]]],['7290',l+AXT+ASL+BRt,[[U,Au,Cbl,BUd,Bts,Bti,BjW,BVx,BVw,BVT,[B,Bo,'7290']]],[[U,F,Cbm,BUd,Bts,Bti,BjW,BVx,BVw,BUr]]],['7289',l+AXT+ASL+BES+q+a,[[U,Au,Cbl,BUd,Bts,Bti,BjW,BVv,BVu,BUa,[B,Bo,'7289']]],[[U,F,Cbm,BUd,Bts,Bti,BjW,BVv,BVu,BUa]]],['7288',l+' +lat_0=39.1'+AWg+BRt,[[U,Au,Cbl,BUd,CBx,CBw,BjW,BVx,BVw,BVT,[B,Bo,'7288']]],[[U,F,Cbm,BUd,CBx,CBw,BjW,BVx,BVw,BUr]]],['7287',l+' +lat_0=39.1'+AWg+BES+q+a,[[U,Au,Cbl,BUd,CBx,CBw,BjW,BVv,BVu,BUa,[B,Bo,'7287']]],[[U,F,Cbm,BUd,CBx,CBw,BjW,BVv,BVu,BUa]]],['7286',l+' +lat_0=38.65'+AWh+BMr+Ajg,[[U,Au,Cbl,BUd,CBv,CBu,Bth,BVx,BVw,BVT,[B,Bo,'7286']]],[[U,F,Cbm,BUd,CBv,CBu,Bth,BVx,BVw,BUr]]],['7285',l+' +lat_0=38.65'+AWh+BMr+q+a,[[U,Au,Cbl,BUd,CBv,CBu,Bth,BVv,BVu,BUa,[B,Bo,'7285']]],[[U,F,Cbm,BUd,CBv,CBu,Bth,BVv,BVu,BUa]]],['7284',l+' +lat_0=38.45'+nv+' +k=1.000018'+BHB,[[U,Au,Cbl,BUd,CJe,Btp,BxQ,BVx,BVw,BVT,[B,Bo,'7284']]],[[U,F,Cbm,BUd,CJe,Btp,BxQ,BVx,BVw,BUr]]],['7283',l+' +lat_0=38.45'+nv+' +k=1.000018'+BLB,[[U,Au,Cbl,BUd,CJe,Btp,BxQ,BVv,BVu,BUa,[B,Bo,'7283']]],[[U,F,Cbm,BUd,CJe,Btp,BxQ,BVv,BVu,BUa]]],['7282',l+' +lat_0=38.1'+AEB+BHT+Ajg,[[U,Au,Cbl,BUd,CBt,BmP,BmL,BVx,BVw,BVT,[B,Bo,'7282']]],[[U,F,Cbm,BUd,CBt,BmP,BmL,BVx,BVw,BUr]]],['7281',l+' +lat_0=38.1'+AEB+BHT+q+a,[[U,Au,Cbl,BUd,CBt,BmP,BmL,BVv,BVu,BUa,[B,Bo,'7281']]],[[U,F,Cbm,BUd,CBt,BmP,BmL,BVv,BVu,BUa]]],['7280',l+' +lat_0=40.15'+AWi+' +k=1.000032'+BHB,[[U,Au,Cbl,BUd,CBs,CBr,BxP,BVx,BVw,BVT,[B,Bo,'7280']]],[[U,F,Cbm,BUd,CBs,CBr,BxP,BVx,BVw,BUr]]],['7279',l+' +lat_0=40.15'+AWi+' +k=1.000032'+BLB,[[U,Au,Cbl,BUd,CBs,CBr,BxP,BVv,BVu,BUa,[B,Bo,'7279']]],[[U,F,Cbm,BUd,CBs,CBr,BxP,BVv,BVu,BUa]]],['7278',l+AXS+AWj+' +k=1.000024'+BHB,[[U,Au,Cbl,BUd,Btv,CBq,BxO,BVx,BVw,BVT,[B,Bo,'7278']]],[[U,F,Cbm,BUd,Btv,CBq,BxO,BVx,BVw,BUr]]],['7277',l+AXS+AWj+' +k=1.000024'+BLB,[[U,Au,Cbl,BUd,Btv,CBq,BxO,BVv,BVu,BUa,[B,Bo,'7277']]],[[U,F,Cbm,BUd,Btv,CBq,BxO,BVv,BVu,BUa]]],['7276',l+AXY+AWk+' +k=1.000021'+BHB,[[U,Au,Cbl,BUd,Btl,CBp,CBo,BVx,BVw,BVT,[B,Bo,'7276']]],[[U,F,Cbm,BUd,Btl,CBp,CBo,BVx,BVw,BUr]]],['7275',l+AXY+AWk+' +k=1.000021'+BLB,[[U,Au,Cbl,BUd,Btl,CBp,CBo,BVv,BVu,BUa,[B,Bo,'7275']]],[[U,F,Cbm,BUd,Btl,CBp,CBo,BVv,BVu,BUa]]],['7274',BDy+AWl+BHV+Ajg,[[U,Au,Cbl,BUd,BmU,CBn,BmO,BVx,BVw,BVT,[B,Bo,'7274']]],[[U,F,Cbm,BUd,BmU,CBn,BmO,BVx,BVw,BUr]]],['7273',BDy+AWl+BHV+q+a,[[U,Au,Cbl,BUd,BmU,CBn,BmO,BVv,BVu,BUa,[B,Bo,'7273']]],[[U,F,Cbm,BUd,BmU,CBn,BmO,BVv,BVu,BUa]]],['7272',l+' +lat_0=40.4'+AWm+AtZ+Ajg,[[U,Au,Cbl,BUd,CBm,CBl,Bdp,BVx,BVw,BVT,[B,Bo,'7272']]],[[U,F,Cbm,BUd,CBm,CBl,Bdp,BVx,BVw,BUr]]],['7271',l+' +lat_0=40.4'+AWm+AtZ+q+a,[[U,Au,Cbl,BUd,CBm,CBl,Bdp,BVv,BVu,BUa,[B,Bo,'7271']]],[[U,F,Cbm,BUd,CBm,CBl,Bdp,BVv,BVu,BUa]]],['7270',l+' +lat_0=39'+AXZ+' +k=1.00003'+BHB,[[U,Au,Cbl,BUd,Btg,Btk,Btz,BVx,BVw,BVT,[B,Bo,'7270']]],[[U,F,Cbm,BUd,Btg,Btk,Btz,BVx,BVw,BUr]]],['7269',l+' +lat_0=39'+AXZ+' +k=1.00003'+BLB,[[U,Au,Cbl,BUd,Btg,Btk,Btz,BVv,BVu,BUa,[B,Bo,'7269']]],[[U,F,Cbm,BUd,Btg,Btk,Btz,BVv,BVu,BUa]]],['7268',l+AgD+AEB+BRt,[[U,Au,Cbl,BUd,Btx,BmP,BjW,BVx,BVw,BVT,[B,Bo,'7268']]],[[U,F,Cbm,BUd,Btx,BmP,BjW,BVx,BVw,BUr]]],['7267',l+AgD+AEB+BES+q+a,[[U,Au,Cbl,BUd,Btx,BmP,BjW,BVv,BVu,BUa,[B,Bo,'7267']]],[[U,F,Cbm,BUd,Btx,BmP,BjW,BVv,BVu,BUa]]],['7266',l+' +lat_0=40.05'+AWn+BRu,[[U,Au,Cbl,BUd,CBk,CBj,BjY,BVx,BVw,BVT,[B,Bo,'7266']]],[[U,F,Cbm,BUd,CBk,CBj,BjY,BVx,BVw,BUr]]],['7265',l+' +lat_0=40.05'+AWn+BET+q+a,[[U,Au,Cbl,BUd,CBk,CBj,BjY,BVv,BVu,BUa,[B,Bo,'7265']]],[[U,F,Cbm,BUd,CBk,CBj,BjY,BVv,BVu,BUa]]],['7264',l+' +lat_0=40.45'+AEA+BMr+Ajg,[[U,Au,Cbl,BUd,CBi,BmQ,Bth,BVx,BVw,BVT,[B,Bo,'7264']]],[[U,F,Cbm,BUd,CBi,BmQ,Bth,BVx,BVw,BUr]]],['7263',l+' +lat_0=40.45'+AEA+BMr+q+a,[[U,Au,Cbl,BUd,CBi,BmQ,Bth,BVv,BVu,BUa,[B,Bo,'7263']]],[[U,F,Cbm,BUd,CBi,BmQ,Bth,BVv,BVu,BUa]]],['7262',l+' +lat_0=39'+nw+AtZ+Ajg,[[U,Au,Cbl,BUd,Btg,Btj,Bdp,BVx,BVw,BVT,[B,Bo,'7262']]],[[U,F,Cbm,BUd,Btg,Btj,Bdp,BVx,BVw,BUr]]],['7261',l+' +lat_0=39'+nw+AtZ+q+a,[[U,Au,Cbl,BUd,Btg,Btj,Bdp,BVv,BVu,BUa,[B,Bo,'7261']]],[[U,F,Cbm,BUd,Btg,Btj,Bdp,BVv,BVu,BUa]]],['7260',BDu+ym+AtX+Ajg,[[U,Au,Cbl,BUd,BmN,BmR,Bdo,BVx,BVw,BVT,[B,Bo,'7260']]],[[U,F,Cbm,BUd,BmN,BmR,Bdo,BVx,BVw,BUr]]],['7259',BDu+ym+AtX+q+a,[[U,Au,Cbl,BUd,BmN,BmR,Bdo,BVv,BVu,BUa,[B,Bo,'7259']]],[[U,F,Cbm,BUd,BmN,BmR,Bdo,BVv,BVu,BUa]]],['7258',BDy+ASL+BKw,[[U,Au,Cbl,BUd,BmU,Bti,Bdr,BVx,BVw,BVT,[B,Bo,'7258']]],[[U,F,Cbm,BUd,BmU,Bti,Bdr,BVx,BVw,BUr]]],['7257',BDy+ASL+Atc+q+a,[[U,Au,Cbl,BUd,BmU,Bti,Bdr,BVv,BVu,BUa,[B,Bo,'7257']]],[[U,F,Cbm,BUd,BmU,Bti,Bdr,BVv,BVu,BUa]]],['7142',l+ov+ow+' +k=1'+AGa+' +y_0=126867.909'+BEH+' +towgs84=-275.7224,94.7824,340.8944,-8.001,-4.42,-11.821,1'+q+a,[[U,Au,[S,Apw,[V,Ao,[P,Au,UU,Os],[i,'raw:-275.7224',yu,'raw:340.8944',ACQ,AFN,yv,X]],BUU,BUu],BUd,Btf,Bte,BUf,Btd,CBh,BUa,[B,Bo,'7142']]],[[U,F,[S,Ark,[V,AT,[P,MU,UU,Os]],BUU,BUW],BUd,Btf,Bte,BUf,Btd,CBh,BUa]]],['7132',BDv+' +lon_0=-122.45 +k=1.000007 +x_0=48000 +y_0=24000'+AlX,[[U,Au,Cbl,BUd,BmS,CBg,CBf,CJd,COn,BVT,[B,Bo,'7132']]],[[U,F,Cbm,BUd,BmS,CBg,CBf,CJd,COn,BUr]]],['7131',BDv+' +lon_0=-122.45 +k=1.000007 +x_0=48000 +y_0=24000'+j+q+a,[[U,Au,Cbl,BUd,BmS,CBg,CBf,COm,COl,BUa,[B,Bo,'7131']]],[[U,F,Cbm,BUd,BmS,CBg,CBf,COm,COl,BUa]]],['7128',l+AZw+AWo+' +k=1.00024'+BMq+Ajg,[[U,Au,Cbl,BUd,CJc,CJb,CBe,Bom,BUT,BVT,[B,Bo,'7128']]],[[U,F,Cbm,BUd,CJc,CJb,CBe,Bom,BUT,BUr]]],['7127',AU+AZx+AZy+AWp+' +k_0=1.0001515'+xo+AGu+Aov,[[U,Au,Cbl,BWW,CJa,CJZ,CBd,Btc,BxN,BVd,[B,Bo,'7127']]],[[U,b,Cbm,BVD,CJa,CJZ,CBd,Btc,BxN,BVd,[A,W,cK]]]],['7126',AU+' +lat_1=46.25 +lat_0=46.25 +lon_0=-111.25 +k_0=1.000185'+iz+Aez+Aov,[[U,Au,Cbl,BWW,CJY,CBc,CBb,Bol,CJX,BVd,[B,Bo,'7126']]],[[U,b,Cbm,BVD,CJY,CBc,CBb,Bol,CJX,BVd,CJW]]],['7125',l+AEC+' +lon_0=-107.75 +k=1.000148'+xo+AoX,[[U,Au,Cbl,BUd,CJV,CBa,CBZ,Btc,BUT,BVd,[B,Bo,'7125']]],[[U,F,Cbm,BUd,CJV,CBa,CBZ,Btc,BUT,BVd]]],['7124',AU+ox+oy+Nk+' +k_0=1.00009'+iz+' +y_0=49999.99971024'+Aov,[[U,Au,Cbl,BWW,Btb,BXR,CBY,Bol,[A,G,AfA],BVd,[B,Bo,'7124']]],[[U,b,Cbm,BVD,Btb,BXR,CBY,Bol,[A,G,AfA],BVd,CJU]]],['7123',AU+ox+oy+Nk+sU+xo+Aez+Aov,[[U,Au,Cbl,BWW,Btb,BXR,BjV,Btc,CJX,BVd,[B,Bo,'7123']]],[[U,b,Cbm,BVD,Btb,BXR,BjV,Btc,CJX,BVd,CJU]]],['7122',BMp+' +lon_0=-108.5'+sU+xo+' +y_0=150000.00001464'+Aov,[[U,Au,Cbl,BWW,BmK,CBX,BjV,Btc,[A,G,Ye],BVd,[B,Bo,'7122']]],[[U,b,Cbm,BVD,BmK,CBX,BjV,Btc,[A,G,Ye],BVd,CJT]]],['7121',BMp+nM+' +k_0=1.000145'+vx+' +y_0=199999.9999992'+Aov,[[U,Au,Cbl,BWW,BmK,BXs,CBW,Bta,[A,G,Zp],BVd,[B,Bo,'7121']]],[[U,b,Cbm,BVD,BmK,BXs,CBW,Bta,[A,G,Zp],BVd,CJT]]],['7120',l+' +lat_0=48'+ASM+' +k=1.00019'+iz+AoX,[[U,Au,Cbl,BUd,BtZ,BtY,CBV,Bol,BUT,BVd,[B,Bo,'7120']]],[[U,F,Cbm,BUd,BtZ,BtY,CBV,Bol,BUT,BVd]]],['7119',l+AHJ+ASM+ATA+vx+AoX,[[U,Au,Cbl,BUd,BmK,BtY,BmJ,Bta,BUT,BVd,[B,Bo,'7119']]],[[U,F,Cbm,BUd,BmK,BtY,BmJ,Bta,BUT,BVd]]],['7118',l+AZw+AWo+' +k=1.00024'+BNN+q+a,[[U,Au,Cbl,BUd,CJc,CJb,CBe,BWV,BUT,BUa,[B,Bo,'7118']]],[[U,F,Cbm,BUd,CJc,CJb,CBe,BWV,BUT,BUa]]],['7117',AU+AZx+AZy+AWp+' +k_0=1.0001515'+Dp+ATB+j+q+a,[[U,Au,Cbl,BWW,CJa,CJZ,CBd,BVP,BmI,BUa,[B,Bo,'7117']]],[[U,b,Cbm,BVD,CJa,CJZ,CBd,BVP,BmI,BUa,[A,W,cK]]]],['7116',AU+' +lat_1=46.25 +lat_0=46.25 +lon_0=-111.25 +k_0=1.000185'+NA+Aps+q+a,[[U,Au,Cbl,BWW,CJY,CBc,CBb,BWV,BXV,BUa,[B,Bo,'7116']]],[[U,b,Cbm,BVD,CJY,CBc,CBb,BWV,BXV,BUa,CJW]]],['7115',l+AEC+' +lon_0=-107.75 +k=1.000148'+BLV+a,[[U,Au,Cbl,BUd,CJV,CBa,CBZ,BVP,BUT,BUa,[B,Bo,'7115']]],[[U,F,Cbm,BUd,CJV,CBa,CBZ,BVP,BUT,BUa]]],['7114',AU+ox+oy+Nk+' +k_0=1.00009'+NA+ATB+j+q+a,[[U,Au,Cbl,BWW,Btb,BXR,CBY,BWV,BmI,BUa,[B,Bo,'7114']]],[[U,b,Cbm,BVD,Btb,BXR,CBY,BWV,BmI,BUa,CJU]]],['7113',AU+ox+oy+Nk+sU+Dp+Aps+q+a,[[U,Au,Cbl,BWW,Btb,BXR,BjV,BVP,BXV,BUa,[B,Bo,'7113']]],[[U,b,Cbm,BVD,Btb,BXR,BjV,BVP,BXV,BUa,CJU]]],['7112',BMp+' +lon_0=-108.5'+sU+Dp+' +y_0=150000'+j+q+a,[[U,Au,Cbl,BWW,BmK,CBX,BjV,BVP,CJS,BUa,[B,Bo,'7112']]],[[U,b,Cbm,BVD,BmK,CBX,BjV,BVP,CJS,BUa,CJT]]],['7111',BMp+nM+' +k_0=1.000145'+Oz+fR+j+q+a,[[U,Au,Cbl,BWW,BmK,BXs,CBW,BXc,Bae,BUa,[B,Bo,'7111']]],[[U,b,Cbm,BVD,BmK,BXs,CBW,BXc,Bae,BUa,CJT]]],['7110',l+' +lat_0=48'+ASM+' +k=1.00019'+BNN+q+a,[[U,Au,Cbl,BUd,BtZ,BtY,CBV,BWV,BUT,BUa,[B,Bo,'7110']]],[[U,F,Cbm,BUd,BtZ,BtY,CBV,BWV,BUT,BUa]]],['7109',l+AHJ+ASM+ATA+ArI+q+a,[[U,Au,Cbl,BUd,BmK,BtY,BmJ,BXc,BUT,BUa,[B,Bo,'7109']]],[[U,F,Cbm,BUd,BmK,BtY,BmJ,BXc,BUT,BUa]]],['7081',AV+' +zone=44'+BKv,[[U,'UTM Zone 44,'+AnB,Cbl,BUd,BUX,BWz,BUg,BUc,BUo,BUa,[B,Bo,'7081']]],[[U,'UTM_Zone_44_Southern_Hemisphere',Cbm,BUd,BUX,BWz,BUg,BUc,BUo,BUa]]],['7080',ApL+BKv,[[U,'UTM Zone 43,'+AnB,Cbl,BUd,BUX,BWs,BUg,BUc,BUo,BUa,[B,Bo,'7080']]],[[U,'UTM_Zone_43_Southern_Hemisphere',Cbm,BUd,BUX,BWs,BUg,BUc,BUo,BUa]]],['7079',Aob+BKv,[[U,'UTM Zone 42,'+AnB,Cbl,BUd,BUX,BZh,BUg,BUc,BUo,BUa,[B,Bo,'7079']]],[[U,'UTM_Zone_42_Southern_Hemisphere',Cbm,BUd,BUX,BZh,BUg,BUc,BUo,BUa]]],['7078',Aoc+BKv,[[U,'UTM Zone 41,'+AnB,Cbl,BUd,BUX,BZN,BUg,BUc,BUo,BUa,[B,Bo,'7078']]],[[U,'UTM_Zone_41_Southern_Hemisphere',Cbm,BUd,BUX,BZN,BUg,BUc,BUo,BUa]]],['7077',AnK+BKv,[[U,'UTM Zone 40,'+AnB,Cbl,BUd,BUX,BXz,BUg,BUc,BUo,BUa,[B,Bo,'7077']]],[[U,'UTM_Zone_40_Southern_Hemisphere',Cbm,BUd,BUX,BXz,BUg,BUc,BUo,BUa]]],['7076',Alt+BKv,[[U,'UTM Zone 39,'+AnB,Cbl,BUd,BUX,BWt,BUg,BUc,BUo,BUa,[B,Bo,'7076']]],[[U,'UTM_Zone_39_Southern_Hemisphere',Cbm,BUd,BUX,BWt,BUg,BUc,BUo,BUa]]],['7075',AmA+BKv,[[U,'UTM Zone 38,'+AnB,Cbl,BUd,BUX,BWe,BUg,BUc,BUo,BUa,[B,Bo,'7075']]],[[U,'UTM_Zone_38_Southern_Hemisphere',Cbm,BUd,BUX,BWe,BUg,BUc,BUo,BUa]]],['7074',AmP+BKv,[[U,'UTM Zone 37,'+AnB,Cbl,BUd,BUX,BWn,BUg,BUc,BUo,BUa,[B,Bo,'7074']]],[[U,'UTM_Zone_37_Southern_Hemisphere',Cbm,BUd,BUX,BWn,BUg,BUc,BUo,BUa]]],['7070',l+sV+' +lon_0=-91.25 +k=1.000018 +x_0=7467614.93522987'+AfB+AlX,[[U,Au,Cbl,BUd,BjU,CJR,BxQ,Bgj,BxM,BVT,[B,Bo,'7070']]],[[U,F,Cbm,BUd,BjU,CJR,BxQ,Bgj,BxM,BUr]]],['7069',l+sV+AAE+yU+' +x_0=7162814.325628651 +y_0=1950723.901447803'+AlX,[[U,Au,Cbl,BUd,BjU,BxT,Bds,BbT,CGh,BVT,[B,Bo,'7069']]],[[U,F,Cbm,BUd,BjU,BxT,Bds,BbT,CGh,BUr]]],['7068',AU+' +lat_1=40.91666666666666 +lat_0=40.91666666666666 +lon_0=-93.75 +k_0=1.000037 +x_0=6858013.716027432'+AfB+AlX,[[U,Au,Cbl,BWW,[A,C,xv],CJQ,BxS,Baz,BxM,BVT,[B,Bo,'7068']]],[[U,b,Cbm,BVD,[A,C,xv],CJQ,BxS,Baz,BxM,BUr,[A,W,xv]]]],['7067',l+sV+' +lon_0=-90.53333333333333'+xS+' +x_0=6553213.106426213 +y_0=2316484.632969266'+AlX,[[U,Au,Cbl,BUd,BjU,[A,E,AKP],BjX,BbS,CGg,BVT,[B,Bo,'7067']]],[[U,F,Cbm,BUd,BjU,[A,E,AKP],BjX,BbS,CGg,BUr]]],['7066',AU+' +lat_1=41.83333333333334 +lat_0=41.83333333333334 +lon_0=-91.66666666666667 +k_0=1.00002 +x_0=6248412.496824994 +y_0=2438404.876809754'+AlX,[[U,Au,Cbl,BWW,[A,C,xw],[A,E,AKQ],Bds,Bay,[A,G,AOT],BVT,[B,Bo,'7066']]],[[U,b,Cbm,BVD,[A,C,xw],[A,E,AKQ],Bds,Bay,[A,G,AOT],BUr,[A,W,xw]]]],['7065',l+sV+' +lon_0=-92.81666666666666'+xS+' +x_0=5943611.887223775 +y_0=2194564.389128779'+AlX,[[U,Au,Cbl,BUd,BjU,[A,E,AKR],BjX,BbR,[A,G,AOU],BVT,[B,Bo,'7065']]],[[U,F,Cbm,BUd,BjU,[A,E,AKR],BjX,BbR,[A,G,AOU],BUr]]],['7064',l+sV+' +lon_0=-93.71666666666667 +k=1.000033 +x_0=5638811.277622555 +y_0=2133604.267208535'+AlX,[[U,Au,Cbl,BUd,BjU,[A,E,AKS],BxR,BbQ,[A,G,AOV],BVT,[B,Bo,'7064']]],[[U,F,Cbm,BUd,BjU,[A,E,AKS],BxR,BbQ,[A,G,AOV],BUr]]],['7063',l+sV+' +lon_0=-94.63333333333334'+ATV+' +x_0=5334010.668021336 +y_0=2072644.145288291'+AlX,[[U,Au,Cbl,BUd,BjU,[A,E,AKT],BmH,Bcf,[A,G,AOW],BVT,[B,Bo,'7063']]],[[U,F,Cbm,BUd,BjU,[A,E,AKT],BmH,Bcf,[A,G,AOW],BUr]]],['7062',l+sV+' +lon_0=-95.73333333333333 +k=1.000039 +x_0=5029210.058420117 +y_0=2011684.023368047'+AlX,[[U,Au,Cbl,BUd,BjU,[A,E,AKU],CFp,BbP,[A,G,AOX],BVT,[B,Bo,'7062']]],[[U,F,Cbm,BUd,BjU,[A,E,AKU],CFp,BbP,[A,G,AOX],BUr]]],['7061',AU+' +lat_1=42.65 +lat_0=42.65 +lon_0=-92.25 +k_0=1.000032 +x_0=4724409.448818898 +y_0=2712725.425450851'+AlX,[[U,Au,Cbl,BWW,[A,C,AdS],CJP,BxP,BbO,[A,G,AOY],BVT,[B,Bo,'7061']]],[[U,b,Cbm,BVD,[A,C,AdS],CJP,BxP,BbO,[A,G,AOY],BUr,[A,W,AdS]]]],['7060',AU+' +lat_1=42.53333333333333 +lat_0=42.53333333333333 +lon_0=-94.83333333333333 +k_0=1.000045 +x_0=4419608.839217679 +y_0=2621285.242570485'+AlX,[[U,Au,Cbl,BWW,[A,C,xx],[A,E,AKV],BmH,Bad,CGf,BVT,[B,Bo,'7060']]],[[U,b,Cbm,BVD,[A,C,xx],[A,E,AKV],BmH,Bad,CGf,BUr,[A,W,xx]]]],['7059',l+sV+' +lon_0=-91.2 +k=1.000035 +x_0=4114808.229616459 +y_0=2529845.05969012'+AlX,[[U,Au,Cbl,BUd,BjU,COk,BxX,Bax,[A,G,AOZ],BVT,[B,Bo,'7059']]],[[U,F,Cbm,BUd,BjU,COk,BxX,Bax,[A,G,AOZ],BUr]]],['7058',AU+' +lat_1=43.16666666666666 +lat_0=43.16666666666666 +lon_0=-92.75 +k_0=1.000043 +x_0=3810007.62001524 +y_0=2987045.974091948'+AlX,[[U,Au,Cbl,BWW,[A,C,xy],CJO,Bkg,Bgi,CGe,BVT,[B,Bo,'7058']]],[[U,b,Cbm,BVD,[A,C,xy],CJO,Bkg,Bgi,CGe,BUr,[A,W,xy]]]],['7057',AU+' +lat_1=43.2 +lat_0=43.2 +lon_0=-95.25 +k_0=1.000052 +x_0=3505207.010414021 +y_0=2926085.852171705'+AlX,[[U,Au,Cbl,BWW,CPo,CJN,CFo,Bdn,[A,G,AOa],BVT,[B,Bo,'7057']]],[[U,b,Cbm,BVD,CPo,CJN,CFo,Bdn,[A,G,AOa],BUr,[A,W,'raw:43.2']]]],[Afn,Alt+Avj+TB+q+a,[[U,'UTM Zone 39,'+Akj,Cfm,BUd,BUX,BWt,BUg,BUc,BUT,BUa,[B,Bo,Afn]]],[[U,ACm,CeF,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['7006',AmA+Avj+TB+q+a,[[U,'UTM Zone 38,'+Akj,Cfm,BUd,BUX,BWe,BUg,BUc,BUT,BUa,[B,Bo,'7006']]],[[U,'UTM_Zone_38_Northern_Hemisphere',CeF,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],[Abz,AmP+Avj+TB+q+a,[[U,'UTM Zone 37,'+Akj,Cfm,BUd,BUX,BWn,BUg,BUc,BUT,BUa,[B,Bo,Abz]]],[[U,'UTM_Zone_37_Northern_Hemisphere',CeF,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['6991',l+AAc+AAd+' +k=1.0000067'+AYK+AdT+j+q+a,[[U,Au,Cbl,BUd,BxL,BxK,BxJ,BxI,BxH,BUa,[B,Bo,'6991']]],[CqT]],['6984',l+AAc+AAd+' +k=1.0000067'+AYK+AdT+j+q+a,[[U,Au,Cbl,BUd,BxL,BxK,BxJ,BxI,BxH,BUa,[B,Bo,'6984']]],[CqT]],['6962',AU+' +lat_1=39 +lat_2=43'+hb+Afp+BTr,[[U,Au,CcT,BVG,CJM,[A,Y,NX],BZM,BmG,BUy,BUT,BUa,[B,Bo,'6962']]],[[U,b,Cbm,BVD,CJM,[A,Y,NX],BZM,BmG,BUy,BUT,BUa]]],['6933','+proj=cea'+ci+' +lat_ts=30'+Ajh+BAy,[[U,Au,Cmt,CQl,CJL,BYA,BUy,BUT,BUa,[B,Bo,'6933']]],[[U,fb,Cbp,CQl,CJL,BYA,BUy,BUT,BUa]]],['6932',dn+ER+BCY+Aqr+c+q+a,[[U,Au,Cmt,BeA,[A,BW,Bn],BxG,BUy,BUT,BUa,[B,Bo,'6932']]],[[U,DI,Cbp,BeA,BVX,BYA,BUy,BUT,BUa]]],['6931',BAm+BCY+Aqr+c+q+a,[[U,Au,Cmt,BeA,Bpk,BxG,BUy,BUT,BUa,[B,Bo,'6931']]],[[U,DI,Cbp,BeA,Bcw,BYA,BUy,BUT,BUa]]],['6925',BRs+Ari+AlX,[[U,Au,Cbl,BVG,Bpt,BtX,BXT,BtW,BYa,BUT,BVT,[B,Bo,'6925']]],[[U,b,Cbm,BVD,Bpt,BtX,BXT,BtW,BYa,BUT,BUr]]],['6924',BRs+AtW+q+a,[[U,Au,Cbl,BVG,Bpt,BtX,BXT,BtW,BVh,BUT,BUa,[B,Bo,'6924']]],[[U,b,Cbm,BVD,Bpt,BtX,BXT,BtW,BVh,BUT,BUa]]],['6923',BRs+Ari+AnX,[[U,Au,CpJ,BVG,Bpt,BtX,BXT,BtW,BYa,BUT,BVT,[B,Bo,'6923']]],[[U,b,Cbn,BVD,Bpt,BtX,BXT,BtW,BYa,BUT,BUr]]],['6922',BRs+AtW+c+q+a,[[U,Au,CpJ,BVG,Bpt,BtX,BXT,BtW,BVh,BUT,BUa,[B,Bo,'6922']]],[[U,b,Cbn,BVD,Bpt,BtX,BXT,BtW,BVh,BUT,BUa]]],['6915',AnK+Avj+AAp+q+a,[[U,'UTM Zone 40,'+Akj,[S,Cg+' 1880 mod.',Cbk,BUU,BUu],BUd,BUX,BXz,BUg,BUc,BUT,BUa,[B,Bo,'6915']]],[[U,ACl,CeF,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['6887',BSc+AkW,[[U,Au,Cbl,BVG,Bdm,Bdl,BWi,BWB,Bok,BUT,BVd,[B,Bo,'6887']]],[CpI]],['6886',BKu+j+q+a,[[U,Au,Cbl,BVG,Bdm,Bdl,BWi,BWB,BWL,BUT,BUa,[B,Bo,'6886']]],[CpH]],['6885',BSa+AkW,[[U,Au,Cbl,BVG,Bdk,Bdj,BYN,BWB,Boj,BUT,BVd,[B,Bo,'6885']]],[CpG]],['6884',BKt+j+q+a,[[U,Au,Cbl,BVG,Bdk,Bdj,BYN,BWB,BXy,BUT,BUa,[B,Bo,'6884']]],[CpF]],['6880',BRn+AlX,[[U,Au,Cbl,BVG,BZg,BZu,BjT,BXb,BXQ,BUT,BVT,[B,Bo,'6880']]],[[U,b,Cbm,BVD,BZg,BZu,BjT,BXb,BXQ,BUT,BUr]]],['6879',BGf+q+a,[[U,Au,Cbl,BVG,Bdi,BjS,BYM,BWb,BVY,BUT,BUa,[B,Bo,'6879']]],[[U,b,Cbm,BVD,Bdi,BjS,BYM,BWb,BVY,BUT,BUa]]],['6876',AqA+' +k=1 +x_0=3000000'+BRq,[[U,Au,CcT,BUd,BUX,BYZ,BUf,BYY,BUT,BUa,[B,Bo,'6876']]],[[U,F,Cbm,BUd,BUX,BYZ,BUf,BYY,BUT,BUa]]],['6875',AqA+' +k=0.9985000000000001'+AXa+BRq,[[U,Au,CcT,BUd,BUX,BYZ,CJK,BtV,BUT,BUa,[B,Bo,'6875']]],[[U,F,Cbm,BUd,BUX,BYZ,CJK,BtV,BUT,BUa]]],['6870',BIM+' +k=1'+BSv,[[U,Au,CcT,BUd,BUX,BmG,BUf,BUc,BUT,BUa,[B,Bo,'6870']]],[[U,F,Cbm,BUd,BUX,BmG,BUf,BUc,BUT,BUa]]],['6868',BSY+AkW,[[U,Au,Cbl,BVG,BZg,BaF,BZf,BWB,Boi,BUT,BVd,[B,Bo,'6868']]],[CpE]],['6867',BKs+j+q+a,[[U,Au,Cbl,BVG,BZg,BaF,BZf,BWB,BVh,BUT,BUa,[B,Bo,'6867']]],[CpD]],['6863',l+BMe+AoX,[[U,Au,Cbl,BUd,BtU,BtT,BtS,BUy,BUT,BVd,[B,Bo,'6863']]],[CqS]],['6862',l+BMe+BKr,[[U,Au,Cbl,BUd,BtU,BtT,BtS,BUy,BUT,BUa,[B,Bo,'6862']]],[CqR]],['6861',l+BMe+AoX,[[U,Au,Cbl,BUd,BtU,BtT,BtS,BUy,BUT,BVd,[B,Bo,'6861']]],[CqS]],['6860',l+BMe+BKr,[[U,Au,Cbl,BUd,BtU,BtT,BtS,BUy,BUT,BUa,[B,Bo,'6860']]],[CqR]],['6859',l+pA+nx+' +k=1.00001'+BLT,[[U,Au,Cbl,BUd,BtR,BtQ,BtP,BjR,BUT,BVd,[B,Bo,'6859']]],[CqQ]],['6858',l+pA+nx+' +k=1.00001'+BSt,[[U,Au,Cbl,BUd,BtR,BtQ,BtP,Baw,BUT,BUa,[B,Bo,'6858']]],[CqP]],['6857',l+pA+nx+' +k=1.00001'+BLT,[[U,Au,Cbl,BUd,BtR,BtQ,BtP,BjR,BUT,BVd,[B,Bo,'6857']]],[CqQ]],['6856',l+pA+nx+' +k=1.00001'+BSt,[[U,Au,Cbl,BUd,BtR,BtQ,BtP,Baw,BUT,BUa,[B,Bo,'6856']]],[CqP]],['6855',BRk+iz+AGu+Aov,[[U,Au,Cbl,BWW,BtO,BtN,BtM,Bol,BxN,BVd,[B,Bo,'6855']]],[CpC]],['6854',BRk+NA+ATB+j+q+a,[[U,Au,Cbl,BWW,BtO,BtN,BtM,BWV,BmI,BUa,[B,Bo,'6854']]],[CpB]],['6853',BRk+iz+AGu+Aov,[[U,Au,Cbl,BWW,BtO,BtN,BtM,Bol,BxN,BVd,[B,Bo,'6853']]],[CpC]],['6852',BRk+NA+ATB+j+q+a,[[U,Au,Cbl,BWW,BtO,BtN,BtM,BWV,BmI,BUa,[B,Bo,'6852']]],[CpB]],['6851',l+BPp+' +x_0=30000.00001512'+AoX,[[U,Au,Cbl,BUd,BtL,Boh,BtK,CJJ,BUT,BVd,[B,Bo,'6851']]],[CqO]],['6850',l+BPp+' +x_0=30000'+BKr,[[U,Au,Cbl,BUd,BtL,Boh,BtK,BtJ,BUT,BUa,[B,Bo,'6850']]],[CqN]],['6849',l+BPp+' +x_0=30000.00001512'+AoX,[[U,Au,Cbl,BUd,BtL,Boh,BtK,CJJ,BUT,BVd,[B,Bo,'6849']]],[CqO]],['6848',l+BPp+' +x_0=30000'+BKr,[[U,Au,Cbl,BUd,BtL,Boh,BtK,BtJ,BUT,BUa,[B,Bo,'6848']]],[CqN]],['6847',l+BMa+' +x_0=59999.99999976'+AoX,[[U,Au,Cbl,BUd,BtI,BtH,BmH,CJI,BUT,BVd,[B,Bo,'6847']]],[CqM]],['6846',l+BMa+' +x_0=60000'+BKr,[[U,Au,Cbl,BUd,BtI,BtH,BmH,CJH,BUT,BUa,[B,Bo,'6846']]],[CqL]],['6845',l+BMa+' +x_0=59999.99999976'+AoX,[[U,Au,Cbl,BUd,BtI,BtH,BmH,CJI,BUT,BVd,[B,Bo,'6845']]],[CqM]],['6844',l+BMa+' +x_0=60000'+BKr,[[U,Au,Cbl,BUd,BtI,BtH,BmH,CJH,BUT,BUa,[B,Bo,'6844']]],[CqL]],['6843',BMZ+' +alpha=5 +k=1 +x_0=-299999.9999988'+AfC+nD+' +gamma=5'+Aov,[[U,Au,Cbl,BlD,Bpj,Bpi,Bph,CBU,BUf,CJG,CJF,BVd,[B,Bo,'6843']]],[Cor]],['6842',BMZ+' +alpha=5 +k=1 +x_0=-300000 +y_0=-4600000'+nD+' +gamma=5'+j+q+a,[[U,Au,Cbl,BlD,Bpj,Bpi,Bph,CBU,BUf,CBT,CBS,BUa,[B,Bo,'6842']]],[Coq]],['6841',BMZ+' +alpha=5 +k=1 +x_0=-299999.9999988'+AfC+nD+' +gamma=5'+Aov,[[U,Au,Cbl,BlD,Bpj,Bpi,Bph,CBU,BUf,CJG,CJF,BVd,[B,Bo,'6841']]],[Cor]],['6840',BMZ+' +alpha=5 +k=1 +x_0=-300000 +y_0=-4600000'+nD+' +gamma=5'+j+q+a,[[U,Au,Cbl,BlD,Bpj,Bpi,Bph,CBU,BUf,CBT,CBS,BUa,[B,Bo,'6840']]],[Coq]],['6839',l+BGC+' +k=1.0001'+BSP,[[U,Au,Cbl,BUd,BtG,BXx,BtF,BjQ,BUT,BVd,[B,Bo,'6839']]],[CqK]],['6838',l+BGC+' +k=1.0001'+BTb,[[U,Au,Cbl,BUd,BtG,BXx,BtF,Bgh,BUT,BUa,[B,Bo,'6838']]],[CqJ]],['6837',l+BGC+' +k=1.0001'+BSP,[[U,Au,Cbl,BUd,BtG,BXx,BtF,BjQ,BUT,BVd,[B,Bo,'6837']]],[CqK]],['6836',l+BGC+' +k=1.0001'+BTb,[[U,Au,Cbl,BUd,BtG,BXx,BtF,Bgh,BUT,BUa,[B,Bo,'6836']]],[CqJ]],['6835',l+fq+hg+' +k=1.00013'+BSN,[[U,Au,Cbl,BUd,BZE,BbN,BtE,BmF,BUT,BVd,[B,Bo,'6835']]],[CqI]],['6834',l+fq+hg+' +k=1.00013'+BTa,[[U,Au,Cbl,BUd,BZE,BbN,BtE,BjP,BUT,BUa,[B,Bo,'6834']]],[CqH]],['6833',l+fq+hg+' +k=1.00013'+BSN,[[U,Au,Cbl,BUd,BZE,BbN,BtE,BmF,BUT,BVd,[B,Bo,'6833']]],[CqI]],['6832',l+fq+hg+' +k=1.00013'+BTa,[[U,Au,Cbl,BUd,BZE,BbN,BtE,BjP,BUT,BUa,[B,Bo,'6832']]],[CqH]],['6831',l+fq+nz+' +k=1.00005 +x_0=10000.0000152'+AoX,[[U,Au,Cbl,BUd,BZE,BtD,BtC,CBR,BUT,BVd,[B,Bo,'6831']]],[CqG]],['6830',l+fq+nz+' +k=1.00005 +x_0=10000'+BKr,[[U,Au,Cbl,BUd,BZE,BtD,BtC,CBQ,BUT,BUa,[B,Bo,'6830']]],[CqF]],['6829',l+fq+nz+' +k=1.00005 +x_0=10000.0000152'+AoX,[[U,Au,Cbl,BUd,BZE,BtD,BtC,CBR,BUT,BVd,[B,Bo,'6829']]],[CqG]],['6828',l+fq+nz+' +k=1.00005 +x_0=10000'+BKr,[[U,Au,Cbl,BUd,BZE,BtD,BtC,CBQ,BUT,BUa,[B,Bo,'6828']]],[CqF]],['6827',l+BPo+BLT,[[U,Au,Cbl,BUd,BZf,Bbz,Bkg,BjR,BUT,BVd,[B,Bo,'6827']]],[CqE]],['6826',l+BPo+BSt,[[U,Au,Cbl,BUd,BZf,Bbz,Bkg,Baw,BUT,BUa,[B,Bo,'6826']]],[CqD]],['6825',l+BPo+BLT,[[U,Au,Cbl,BUd,BZf,Bbz,Bkg,BjR,BUT,BVd,[B,Bo,'6825']]],[CqE]],['6824',l+BPo+BSt,[[U,Au,Cbl,BUd,BZf,Bbz,Bkg,Baw,BUT,BUa,[B,Bo,'6824']]],[CqD]],['6823',l+BPn+BLT,[[U,Au,Cbl,BUd,BtB,BtA,Bdq,BjR,BUT,BVd,[B,Bo,'6823']]],[CqC]],['6822',l+BPn+BSt,[[U,Au,Cbl,BUd,BtB,BtA,Bdq,Baw,BUT,BUa,[B,Bo,'6822']]],[CqB]],['6821',l+BPn+BLT,[[U,Au,Cbl,BUd,BtB,BtA,Bdq,BjR,BUT,BVd,[B,Bo,'6821']]],[CqC]],['6820',l+BPn+BSt,[[U,Au,Cbl,BUd,BtB,BtA,Bdq,Baw,BUT,BUa,[B,Bo,'6820']]],[CqB]],['6819',l+BFz+' +k=1.00011'+BSP,[[U,Au,Cbl,BUd,BjO,Bsz,Bsy,BjQ,BUT,BVd,[B,Bo,'6819']]],[CqA]],['6818',l+BFz+' +k=1.00011'+BTb,[[U,Au,Cbl,BUd,BjO,Bsz,Bsy,Bgh,BUT,BUa,[B,Bo,'6818']]],[Cpz]],['6817',l+BFz+' +k=1.00011'+BSP,[[U,Au,Cbl,BUd,BjO,Bsz,Bsy,BjQ,BUT,BVd,[B,Bo,'6817']]],[CqA]],['6816',l+BFz+' +k=1.00011'+BTb,[[U,Au,Cbl,BUd,BjO,Bsz,Bsy,Bgh,BUT,BUa,[B,Bo,'6816']]],[Cpz]],['6815',BMY+BLT,[[U,Au,Cbl,BUd,BZt,Bbz,Bsx,BjR,BUT,BVd,[B,Bo,'6815']]],[Cpy]],['6814',BMY+BSt,[[U,Au,Cbl,BUd,BZt,Bbz,Bsx,Baw,BUT,BUa,[B,Bo,'6814']]],[Cpx]],['6813',BMY+BLT,[[U,Au,Cbl,BUd,BZt,Bbz,Bsx,BjR,BUT,BVd,[B,Bo,'6813']]],[Cpy]],['6812',BMY+BSt,[[U,Au,Cbl,BUd,BZt,Bbz,Bsx,Baw,BUT,BUa,[B,Bo,'6812']]],[Cpx]],['6811',Qw+pC+' +lonc=-123 +alpha=295 +k=1'+AiX+' +y_0=-2999999.999988'+nD+' +gamma=295'+Aov,[[U,Au,Cbl,BlD,Bpg,Bpf,Bpe,CBP,BUf,CJE,CJD,BVd,[B,Bo,'6811']]],[Cop]],['6810',Qw+pC+' +lonc=-123 +alpha=295 +k=1'+AXa+' +y_0=-3000000'+nD+' +gamma=295'+j+q+a,[[U,Au,Cbl,BlD,Bpg,Bpf,Bpe,CBP,BUf,BtV,BxF,BUa,[B,Bo,'6810']]],[Coo]],['6809',Qw+pC+' +lonc=-123 +alpha=295 +k=1'+AiX+' +y_0=-2999999.999988'+nD+' +gamma=295'+Aov,[[U,Au,Cbl,BlD,Bpg,Bpf,Bpe,CBP,BUf,CJE,CJD,BVd,[B,Bo,'6809']]],[Cop]],['6808',Qw+pC+' +lonc=-123 +alpha=295 +k=1'+AXa+' +y_0=-3000000'+nD+' +gamma=295'+j+q+a,[[U,Au,Cbl,BlD,Bpg,Bpf,Bpe,CBP,BUf,BtV,BxF,BUa,[B,Bo,'6808']]],[Coo]],['6807',BTl+vx+' +y_0=30000.00001512'+Aov,[[U,Au,Cbl,BWW,BbM,BWB,Bsw,Bta,CJC,BVd,[B,Bo,'6807']]],[CpA]],['6806',BTl+Oz+' +y_0=30000'+j+q+a,[[U,Au,Cbl,BWW,BbM,BWB,Bsw,BXc,BxE,BUa,[B,Bo,'6806']]],[Coz]],[Afm,BTl+vx+' +y_0=30000.00001512'+Aov,[[U,Au,Cbl,BWW,BbM,BWB,Bsw,Bta,CJC,BVd,[B,Bo,Afm]]],[CpA]],['6804',BTl+Oz+' +y_0=30000'+j+q+a,[[U,Au,Cbl,BWW,BbM,BWB,Bsw,BXc,BxE,BUa,[B,Bo,'6804']]],[Coz]],['6803',BPl+' +k=1.00007'+BSN,[[U,Au,Cbl,BUd,BYX,Bbz,Bsv,BmF,BUT,BVd,[B,Bo,'6803']]],[Cpw]],['6802',BPl+' +k=1.00007'+BTa,[[U,Au,Cbl,BUd,BYX,Bbz,Bsv,BjP,BUT,BUa,[B,Bo,'6802']]],[Cpv]],['6801',BPl+' +k=1.00007'+BSN,[[U,Au,Cbl,BUd,BYX,Bbz,Bsv,BmF,BUT,BVd,[B,Bo,'6801']]],[Cpw]],['6800',BPl+' +k=1.00007'+BTa,[[U,Au,Cbl,BUd,BYX,Bbz,Bsv,BjP,BUT,BUa,[B,Bo,'6800']]],[Cpv]],['6799',BRj+' +x_0=119999.99999952 +y_0=59999.99999976'+Aov,[[U,Au,Cbl,BWW,BYN,Bsu,BjN,CJA,CIz,BVd,[B,Bo,'6799']]],[Coy]],['6798',BRj+' +x_0=120000 +y_0=60000'+j+q+a,[[U,Au,Cbl,BWW,BYN,Bsu,BjN,CBO,CIy,BUa,[B,Bo,'6798']]],[Cox]],['6797',BRj+' +x_0=119999.99999952 +y_0=59999.99999976'+Aov,[[U,Au,Cbl,BWW,BYN,Bsu,BjN,CJA,CIz,BVd,[B,Bo,'6797']]],[Coy]],['6796',BRj+' +x_0=120000 +y_0=60000'+j+q+a,[[U,Au,Cbl,BWW,BYN,Bsu,BjN,CBO,CIy,BUa,[B,Bo,'6796']]],[Cox]],['6795',BTk+ce+' +y_0=130000.00001472'+Aov,[[U,Au,Cbl,BWW,Bst,Bss,BjV,BjQ,CIx,BVd,[B,Bo,'6795']]],[Cow]],['6794',BTk+yV+' +y_0=130000'+j+q+a,[[U,Au,Cbl,BWW,Bst,Bss,BjV,Bgh,CBN,BUa,[B,Bo,'6794']]],[Cov]],['6793',BTk+ce+' +y_0=130000.00001472'+Aov,[[U,Au,Cbl,BWW,Bst,Bss,BjV,BjQ,CIx,BVd,[B,Bo,'6793']]],[Cow]],['6792',BTk+yV+' +y_0=130000'+j+q+a,[[U,Au,Cbl,BWW,Bst,Bss,BjV,Bgh,CBN,BUa,[B,Bo,'6792']]],[Cov]],['6791',l+BFt+' +k=1.0002'+BSP,[[U,Au,Cbl,BUd,BZf,Bsr,BjN,BjQ,BUT,BVd,[B,Bo,'6791']]],[Cpu]],['6790',l+BFt+' +k=1.0002'+BTb,[[U,Au,Cbl,BUd,BZf,Bsr,BjN,Bgh,BUT,BUa,[B,Bo,'6790']]],[Cpt]],['6789',l+BFt+' +k=1.0002'+BSP,[[U,Au,Cbl,BUd,BZf,Bsr,BjN,BjQ,BUT,BVd,[B,Bo,'6789']]],[Cpu]],['6788',l+BFt+' +k=1.0002'+BTb,[[U,Au,Cbl,BUd,BZf,Bsr,BjN,Bgh,BUT,BUa,[B,Bo,'6788']]],[Cpt]],['6787',l+BPi+BSN,[[U,Au,Cbl,BUd,BjO,Bsq,BmJ,BmF,BUT,BVd,[B,Bo,'6787']]],[Cps]],['6786',l+BPi+BTa,[[U,Au,Cbl,BUd,BjO,Bsq,BmJ,BjP,BUT,BUa,[B,Bo,'6786']]],[Cpr]],['6785',l+BPi+BSN,[[U,Au,Cbl,BUd,BjO,Bsq,BmJ,BmF,BUT,BVd,[B,Bo,'6785']]],[Cps]],['6784',l+BPi+BTa,[[U,Au,Cbl,BUd,BjO,Bsq,BmJ,BjP,BUT,BUa,[B,Bo,'6784']]],[Cpr]],['6738',AoK+BEd,[[U,'UTM Zone 59,'+AnB,CcT,BUd,BUX,BXj,BUg,BUc,BUo,BUa,[B,Bo,'6738']]],[[U,'UTM_Zone_59_Southern_Hemisphere',Cbm,BUd,BUX,BXj,BUg,BUc,BUo,BUa]]],[Aby,AoJ+BEd,[[U,'UTM Zone 47,'+AnB,CcT,BUd,BUX,BWf,BUg,BUc,BUo,BUa,[B,Bo,Aby]]],[[U,'UTM_Zone_47_Southern_Hemisphere',Cbm,BUd,BUX,BWf,BUg,BUc,BUo,BUa]]],['6736',AnA+BEd,[[U,'UTM Zone 46,'+AnB,CcT,BUd,BUX,BWk,BUg,BUc,BUo,BUa,[B,Bo,'6736']]],[[U,'UTM_Zone_46_Southern_Hemisphere',Cbm,BUd,BUX,BWk,BUg,BUc,BUo,BUa]]],['6723',AjX+' +lon_0=96.875 +k=0.99999387'+jy+TE+j+c+q+a,[[U,Au,CcT,BUd,BUX,CBM,[A,N,AiY],Baw,BYL,BUa,[B,Bo,'6723']]],[[U,F,Cbm,BUd,BUX,CBM,[A,N,AiY],Baw,BYL,BUa]]],['6722',AjX+' +lon_0=96.875 +k=1'+jy+' +y_0=1400000'+BAy,[[U,Au,Cmt,BUd,BUX,CBM,BUf,Baw,CGd,BUa,[B,Bo,'6722']]],[[U,F,Cbp,BUd,BUX,CBM,BUf,Baw,CGd,BUa]]],['6721',AjX+' +lon_0=105.625 +k=1.00002514'+jy+AED+j+c+q+a,[[U,Au,CcT,BUd,BUX,CBL,[A,N,AiZ],Baw,BmE,BUa,[B,Bo,'6721']]],[[U,F,Cbm,BUd,BUX,CBL,[A,N,AiZ],Baw,BmE,BUa]]],['6720',AjX+' +lon_0=105.625 +k=1.000024'+jy+AED+BAy,[[U,Au,Cmt,BUd,BUX,CBL,BxO,Baw,BmE,BUa,[B,Bo,'6720']]],[[U,F,Cbp,BUd,BUX,CBL,BxO,Baw,BmE,BUa]]],['6709',Anl+j+c+q+a,[[U,'UTM Zone 34,'+Akj,CcT,BUd,BUX,BWR,BUg,BUc,BUT,BUa,[B,Bo,'6709']]],[[U,'UTM_Zone_34_Northern_Hemisphere',Cbm,BUd,BUX,BWR,BUg,BUc,BUT,BUa]]],['6708',AmO+j+c+q+a,[[U,'UTM Zone 33,'+Akj,CcT,BUd,BUX,BWH,BUg,BUc,BUT,BUa,[B,Bo,'6708']]],[[U,'UTM_Zone_33_Northern_Hemisphere',Cbm,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['6707',Alu+j+c+q+a,[[U,'UTM Zone 32,'+Akj,CcT,BUd,BUX,BWO,BUg,BUc,BUT,BUa,[B,Bo,'6707']]],[[U,'UTM_Zone_32_Northern_Hemisphere',Cbm,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['6703',AjX+AcZ+BIZ+BAy,[[U,Au,Cmt,BUd,BUX,Bog,BUg,BUc,BUo,BUa,[B,Bo,'6703']]],[[U,F,Cbp,BUd,BUX,Bog,BUg,BUc,BUo,BUa]]],['6692',Amg+j+q+a,[[U,'UTM Zone 55,'+Akj,Cbl,BUd,BUX,BYW,BUg,BUc,BUT,BUa,[B,Bo,'6692']]],[[U,'UTM_Zone_55_Northern_Hemisphere',Cbm,BUd,BUX,BYW,BUg,BUc,BUT,BUa]]],['6691',AoI+j+q+a,[[U,'UTM Zone 54,'+Akj,Cbl,BUd,BUX,BYK,BUg,BUc,BUT,BUa,[B,Bo,'6691']]],[[U,'UTM_Zone_54_Northern_Hemisphere',Cbm,BUd,BUX,BYK,BUg,BUc,BUT,BUa]]],['6690',AmT+j+q+a,[[U,'UTM Zone 53,'+Akj,Cbl,BUd,BUX,BWd,BUg,BUc,BUT,BUa,[B,Bo,'6690']]],[[U,'UTM_Zone_53_Northern_Hemisphere',Cbm,BUd,BUX,BWd,BUg,BUc,BUT,BUa]]],['6689',Ank+j+q+a,[[U,'UTM Zone 52,'+Akj,Cbl,BUd,BUX,BWQ,BUg,BUc,BUT,BUa,[B,Bo,'6689']]],[[U,'UTM_Zone_52_Northern_Hemisphere',Cbm,BUd,BUX,BWQ,BUg,BUc,BUT,BUa]]],['6688',AnJ+j+q+a,[[U,'UTM Zone 51,'+Akj,Cbl,BUd,BUX,BWU,BUg,BUc,BUT,BUa,[B,Bo,'6688']]],[[U,'UTM_Zone_51_Northern_Hemisphere',Cbm,BUd,BUX,BWU,BUg,BUc,BUT,BUa]]],['6687',BAd+' +lon_0=154'+BKh,[[U,Au,Cbl,BUd,BYm,Bsp,BUt,BUy,BUT,BUa,[B,Bo,'6687']]],[[U,F,Cbm,BUd,BYm,Bsp,BUt,BUy,BUT,BUa]]],['6686',l+' +lat_0=20'+BHQ+j+q+a,[[U,Au,Cbl,BUd,BxD,BmD,BUt,BUy,BUT,BUa,[B,Bo,'6686']]],[[U,F,Cbm,BUd,BxD,BmD,BUt,BUy,BUT,BUa]]],['6685',BAd+BHP+j+q+a,[[U,Au,Cbl,BUd,BYm,Bdg,BUt,BUy,BUT,BUa,[B,Bo,'6685']]],[[U,F,Cbm,BUd,BYm,Bdg,BUt,BUy,BUT,BUa]]],['6684',BAd+' +lon_0=124'+BKh,[[U,Au,Cbl,BUd,BYm,BxC,BUt,BUy,BUT,BUa,[B,Bo,'6684']]],[[U,F,Cbm,BUd,BYm,BxC,BUt,BUy,BUT,BUa]]],['6683',BAd+BFq+Api+q+a,[[U,Au,Cbl,BUd,BYm,BmC,BUt,BUy,BUT,BUa,[B,Bo,'6683']]],[[U,F,Cbm,BUd,BYm,BmC,BUt,BUy,BUT,BUa]]],['6682',BAd+' +lon_0=142'+BKh,[[U,Au,Cbl,BUd,BYm,Buy,BUt,BUy,BUT,BUa,[B,Bo,'6682']]],[[U,F,Cbm,BUd,BYm,Buy,BUt,BUy,BUT,BUa]]],['6681',l+gP+' +lon_0=144.25'+BKh,[[U,Au,Cbl,BUd,BZL,BxB,BUt,BUy,BUT,BUa,[B,Bo,'6681']]],[[U,F,Cbm,BUd,BZL,BxB,BUt,BUy,BUT,BUa]]],['6680',l+gP+' +lon_0=142.25'+BKh,[[U,Au,Cbl,BUd,BZL,BxA,BUt,BUy,BUT,BUa,[B,Bo,'6680']]],[[U,F,Cbm,BUd,BZL,BxA,BUt,BUy,BUT,BUa]]],['6679',l+gP+' +lon_0=140.25'+BKh,[[U,Au,Cbl,BUd,BZL,Bwz,BUt,BUy,BUT,BUa,[B,Bo,'6679']]],[[U,F,Cbm,BUd,BZL,Bwz,BUt,BUy,BUT,BUa]]],['6678',AqP+AAe+BKh,[[U,Au,Cbl,BUd,BXM,Bwy,BUt,BUy,BUT,BUa,[B,Bo,'6678']]],[[U,F,Cbm,BUd,BXM,Bwy,BUt,BUy,BUT,BUa]]],['6677',AsB+AAf+BKh,[[U,Au,Cbl,BUd,BXT,Bwx,BUt,BUy,BUT,BUa,[B,Bo,'6677']]],[[U,F,Cbm,BUd,BXT,Bwx,BUt,BUy,BUT,BUa]]],['6676',AsB+' +lon_0=138.5'+BKh,[[U,Au,Cbl,BUd,BXT,Bux,BUt,BUy,BUT,BUa,[B,Bo,'6676']]],[[U,F,Cbm,BUd,BXT,Bux,BUt,BUy,BUT,BUa]]],['6675',AsB+AAg+BKh,[[U,Au,Cbl,BUd,BXT,Bww,BUt,BUy,BUT,BUa,[B,Bo,'6675']]],[[U,F,Cbm,BUd,BXT,Bww,BUt,BUy,BUT,BUa]]],[pW,AsB+BHQ+j+q+a,[[U,Au,Cbl,BUd,BXT,BmD,BUt,BUy,BUT,BUa,[B,Bo,pW]]],[[U,F,Cbm,BUd,BXT,BmD,BUt,BUy,BUT,BUa]]],['6673',AsB+AAh+BKh,[[U,Au,Cbl,BUd,BXT,Bwv,BUt,BUy,BUT,BUa,[B,Bo,'6673']]],[[U,F,Cbm,BUd,BXT,Bwv,BUt,BUy,BUT,BUa]]],['6672',Avc+BFp+Api+q+a,[[U,Au,Cbl,BUd,Bdf,Bso,BUt,BUy,BUT,BUa,[B,Bo,'6672']]],[[U,F,Cbm,BUd,Bdf,Bso,BUt,BUy,BUT,BUa]]],['6671',AsB+AAi+BKh,[[U,Au,Cbl,BUd,BXT,Bwu,BUt,BUy,BUT,BUa,[B,Bo,'6671']]],[[U,F,Cbm,BUd,BXT,Bwu,BUt,BUy,BUT,BUa]]],['6670',Avc+BHP+j+q+a,[[U,Au,Cbl,BUd,Bdf,Bdg,BUt,BUy,BUT,BUa,[B,Bo,'6670']]],[[U,F,Cbm,BUd,Bdf,Bdg,BUt,BUy,BUT,BUa]]],['6669',Avc+' +lon_0=129.5'+BKh,[[U,Au,Cbl,BUd,Bdf,Buw,BUt,BUy,BUT,BUa,[B,Bo,'6669']]],[[U,F,Cbm,BUd,Bdf,Buw,BUt,BUy,BUT,BUa]]],['6646',l+AZz+' +lon_0=46.5 +k=0.9994'+Avb+Avj+VI+q+a,[[U,Au,[S,Cg+' 1880 mod.',[V,Ao,BaT,Bjq],BUU,BUu],BUd,CIv,CIu,CBK,BXP,BUT,BUa,[B,Bo,'6646']]],[[U,F,CeF,BUd,CIv,CIu,CBK,BXP,BUT,BUa]]],['6637',l+' +lat_0=13.5 +lon_0=144.75 +k=1'+NA+fR+j+q+a,[[U,Au,Cbl,BUd,CIt,CBJ,BUf,BWV,Bae,BUa,[B,Bo,'6637']]],[[U,F,Cbm,BUd,CIt,CBJ,BUf,BWV,Bae,BUa]]],['6636',AV+' +zone=2'+BKv,[[U,'UTM Zone 2,'+AnB,Cbl,BUd,BUX,BYV,BUg,BUc,BUo,BUa,[B,Bo,'6636']]],[[U,'UTM_Zone_2_Southern_Hemisphere',Cbm,BUd,BUX,BYV,BUg,BUc,BUo,BUa]]],['6635',AV+' +zone=5'+j+q+a,[[U,'UTM Zone 5,'+Akj,Cbl,BUd,BUX,BZK,BUg,BUc,BUT,BUa,[B,Bo,'6635']]],[Cph]],['6634',AV+' +zone=4'+j+q+a,[[U,'UTM Zone 4,'+Akj,Cbl,BUd,BUX,Bac,BUg,BUc,BUT,BUa,[B,Bo,'6634']]],[Cpg]],['6633',BSo+BMh+a,[[U,Au,Cbl,BUd,Bkf,Bce,Bav,BXQ,BUT,BVT,[B,Bo,'6633']]],[[U,F,Cbm,BUd,Bkf,Bce,Bav,BXQ,BUT,BUr]]],['6632',l+pG+oC+' +k=1'+BEy,[[U,Au,Cbl,BUd,Bsn,Bsm,BUf,BUc,BUT,BUa,[B,Bo,'6632']]],[[U,F,Cbm,BUd,Bsn,Bsm,BUf,BUc,BUT,BUa]]],['6631',l+BFo+BHO+q+a,[[U,Au,Cbl,BUd,Bsl,Bsk,Bav,BUc,BUT,BUa,[B,Bo,'6631']]],[[U,F,Cbm,BUd,Bsl,Bsk,Bav,BUc,BUT,BUa]]],['6630',BMV+BHO+q+a,[[U,Au,Cbl,BUd,Bkf,Bce,Bav,BUc,BUT,BUa,[B,Bo,'6630']]],[[U,F,Cbm,BUd,Bkf,Bce,Bav,BUc,BUT,BUa]]],['6629',l+pI+oD+BHN+q+a,[[U,Au,Cbl,BUd,Bsj,Bsi,BWN,BUc,BUT,BUa,[B,Bo,'6629']]],[[U,F,Cbm,BUd,Bsj,Bsi,BWN,BUc,BUT,BUa]]],['6628',l+BFm+BHN+q+a,[[U,Au,Cbl,BUd,Bsh,Bsg,BWN,BUc,BUT,BUa,[B,Bo,'6628']]],[[U,F,Cbm,BUd,Bsh,Bsg,BWN,BUc,BUT,BUa]]],['6627',BRi+Ajg,[[U,Au,Cbl,BVG,Bcd,Bcc,BWJ,BWm,BXQ,CBI,BVT,[B,Bo,'6627']]],[[U,b,Cbm,BVD,Bcd,Bcc,BWJ,BWm,BXQ,CBI,BUr]]],['6626',BRh+AlX,[[U,Au,Cbl,BVG,BZD,Bcb,Bby,BWm,BXQ,BjM,BVT,[B,Bo,'6626']]],[[U,b,Cbm,BVD,BZD,Bcb,Bby,BWm,BXQ,BjM,BUr]]],['6625',BRg+AlX,[[U,Au,Cbl,BVG,Bca,BcZ,BYl,BWm,BXQ,[A,G,Abb],BVT,[B,Bo,'6625']]],[[U,b,Cbm,BVD,Bca,BcZ,BYl,BWm,BXQ,[A,G,Abb],BUr]]],['6624',TR+Avz+BDj+BTr,[[U,Au,CcT,BeL,BmB,Bbx,[A,BW,Mo],[A,BV,OX],BUy,BUT,BUa,[B,Bo,'6624']]],[[U,Pk,Cbm,BeK,BmB,Bbx,BZL,Bau,BUy,BUT,BUa]]],['6623',TR+Avz+BDj+BTr,[[U,Au,CpJ,BeL,BmB,Bbx,[A,BW,Mo],[A,BV,OX],BUy,BUT,BUa,[B,Bo,'6623']]],[[U,Pk,Cbn,BeK,BmB,Bbx,BZL,Bau,BUy,BUT,BUa]]],['6622',BRf+BRq,[[U,Au,CcT,BVG,BmB,Bbx,BZL,Bau,BUy,BUT,BUa,[B,Bo,'6622']]],[[U,b,Cbm,BVD,BmB,Bbx,BZL,Bau,BUy,BUT,BUa]]],['6621',BRe+q+a,[[U,Au,Cbl,BVG,Bcd,Bcc,BWJ,BWm,BUc,Bbw,BUa,[B,Bo,'6621']]],[[U,b,Cbm,BVD,Bcd,Bcc,BWJ,BWm,BUc,Bbw,BUa]]],['6620',BRd+q+a,[[U,Au,Cbl,BVG,BZD,Bcb,Bby,BWm,BUc,BVg,BUa,[B,Bo,'6620']]],[[U,b,Cbm,BVD,BZD,Bcb,Bby,BWm,BUc,BVg,BUa]]],[rw,BRc+q+a,[[U,Au,Cbl,BVG,Bca,BcZ,BYl,BWm,BUc,BYH,BUa,[B,Bo,rw]]],[[U,b,Cbm,BVD,Bca,BcZ,BYl,BWm,BUc,BYH,BUa]]],[yK,BEJ+Ajs+AlX,[[U,Au,Cbl,BUd,BWy,Bgg,BWF,BVj,BUT,BVT,[B,Bo,yK]]],[[U,F,Cbm,BUd,BWy,Bgg,BWF,BVj,BUT,BUr]]],['6617',BGo+q+a,[[U,Au,Cbl,BUd,BWy,Bgg,BWF,BVY,BUT,BUa,[B,Bo,'6617']]],[[U,F,Cbm,BUd,BWy,Bgg,BWF,BVY,BUT,BUa]]],['6616',BEC+BMH+a,[[U,Au,Cbl,BUd,BWy,Bgf,BWF,BZC,BZB,BVT,[B,Bo,'6616']]],[[U,F,Cbm,BUd,BWy,Bgf,BWF,BZC,BZB,BUr]]],['6615',BRb+q+a,[[U,Au,Cbl,BUd,BWy,Bgf,BWF,BXP,BXV,BUa,[B,Bo,'6615']]],[[U,F,Cbm,BUd,BWy,Bgf,BWF,BXP,BXV,BUa]]],['6614',BRa+Ajg,[[U,Au,Cbl,BUd,BWy,Bge,BWF,BYa,BZB,BVT,[B,Bo,'6614']]],[[U,F,Cbm,BUd,BWy,Bge,BWF,BYa,BZB,BUr]]],['6613',BRZ+q+a,[[U,Au,Cbl,BUd,BWy,Bge,BWF,BVh,BXV,BUa,[B,Bo,'6613']]],[[U,F,Cbm,BUd,BWy,Bge,BWF,BVh,BXV,BUa]]],[pV,BRY+Ajg,[[U,Au,Cbl,BUd,BWy,Bgd,BWF,BjL,BUT,BVT,[B,Bo,pV]]],[[U,F,Cbm,BUd,BWy,Bgd,BWF,BjL,BUT,BUr]]],['6611',BRX+q+a,[[U,Au,Cbl,BUd,BWy,Bgd,BWF,BVP,BUT,BUa,[B,Bo,'6611']]],[[U,F,Cbm,BUd,BWy,Bgd,BWF,BVP,BUT,BUa]]],[Vs,BRW+j+q+a,[[U,Au,Cbl,BUd,BUX,BWb,BUg,Bsf,Bse,BUa,[B,Bo,Vs]]],[[U,F,Cbm,BUd,BUX,BWb,BUg,Bsf,Bse,BUa]]],[ASp,BGe+Ajg,[[U,Au,Cbl,BVG,BjK,BjJ,Bde,BWb,BVj,BUT,BVT,[B,Bo,ASp]]],[[U,b,Cbm,BVD,BjK,BjJ,Bde,BWb,BVj,BUT,BUr]]],[ASo,BGe+q+a,[[U,Au,Cbl,BVG,BjK,BjJ,Bde,BWb,BVY,BUT,BUa,[B,Bo,ASo]]],[[U,b,Cbm,BVD,BjK,BjJ,Bde,BWb,BVY,BUT,BUa]]],['6607',BGd+Ajg,[[U,Au,Cbl,BVG,BjI,BjH,Bgc,BWb,BVj,BUT,BVT,[B,Bo,'6607']]],[[U,b,Cbm,BVD,BjI,BjH,Bgc,BWb,BVj,BUT,BUr]]],['6606',BGd+q+a,[[U,Au,Cbl,BVG,BjI,BjH,Bgc,BWb,BVY,BUT,BUa,[B,Bo,'6606']]],[[U,b,Cbm,BVD,BjI,BjH,Bgc,BWb,BVY,BUT,BUa]]],['6605',BGf+Ajg,[[U,Au,Cbl,BVG,Bdi,BjS,BYM,BWb,BVj,BUT,BVT,[B,Bo,'6605']]],[[U,b,Cbm,BVD,Bdi,BjS,BYM,BWb,BVj,BUT,BUr]]],['6603',BGc+Ajg,[[U,Au,Cbl,BVG,BjG,BjF,Bgb,BVm,BVj,BUT,BVT,[B,Bo,'6603']]],[[U,b,Cbm,BVD,BjG,BjF,Bgb,BVm,BVj,BUT,BUr]]],['6602',BGc+q+a,[[U,Au,Cbl,BVG,BjG,BjF,Bgb,BVm,BVY,BUT,BUa,[B,Bo,'6602']]],[[U,b,Cbm,BVD,BjG,BjF,Bgb,BVm,BVY,BUT,BUa]]],['6601',BGb+Ajg,[[U,Au,Cbl,BVG,BjE,BjD,Bga,BZs,BVj,BUT,BVT,[B,Bo,'6601']]],[[U,b,Cbm,BVD,BjE,BjD,Bga,BZs,BVj,BUT,BUr]]],['6600',BGb+q+a,[[U,Au,Cbl,BVG,BjE,BjD,Bga,BZs,BVY,BUT,BUa,[B,Bo,'6600']]],[[U,b,Cbm,BVD,BjE,BjD,Bga,BZs,BVY,BUT,BUa]]],['6599',BRV+AlX,[[U,Au,Cbl,BVG,BjC,BjB,BgZ,BWB,BXa,BUT,BVT,[B,Bo,'6599']]],[[U,b,Cbm,BVD,BjC,BjB,BgZ,BWB,BXa,BUT,BUr]]],['6598',BRU+j+q+a,[[U,Au,Cbl,BVG,BjC,BjB,BgZ,BWB,BUc,BUT,BUa,[B,Bo,'6598']]],[[U,b,Cbm,BVD,BjC,BjB,BgZ,BWB,BUc,BUT,BUa]]],['6597',BRT+AlX,[[U,Au,Cbl,BVG,BaE,BjA,BZA,BgY,BXa,BUT,BVT,[B,Bo,'6597']]],[[U,b,Cbm,BVD,BaE,BjA,BZA,BgY,BXa,BUT,BUr]]],['6596',BRS+j+q+a,[[U,Au,Cbl,BVG,BaE,BjA,BZA,BgY,BUc,BUT,BUa,[B,Bo,'6596']]],[[U,b,Cbm,BVD,BaE,BjA,BZA,BgY,BUc,BUT,BUa]]],['6595',BRR+Ajg,[[U,Au,Cbl,BVG,BZr,BgX,BXr,BZe,Biz,Bbv,BVT,[B,Bo,'6595']]],[[U,b,Cbm,BVD,BZr,BgX,BXr,BZe,Biz,Bbv,BUr]]],['6594',BRQ+q+a,[[U,Au,Cbl,BVG,BZr,BgX,BXr,BZe,BXO,BVg,BUa,[B,Bo,'6594']]],[[U,b,Cbm,BVD,BZr,BgX,BXr,BZe,BXO,BVg,BUa]]],['6593',BRP+AlX,[[U,Au,Cbl,BVG,Biy,Bix,BXq,BZe,Biz,Biw,BVT,[B,Bo,'6593']]],[[U,b,Cbm,BVD,Biy,Bix,BXq,BZe,Biz,Biw,BUr]]],['6592',BRO+q+a,[[U,Au,Cbl,BVG,Biy,Bix,BXq,BZe,BXO,BYH,BUa,[B,Bo,'6592']]],[[U,b,Cbm,BVD,Biy,Bix,BXq,BZe,BXO,BYH,BUa]]],['6591',AU+' +lat_1=37'+BRN+q+a,[[U,Au,Cbl,BVG,Bsd,Bsc,BXT,BZs,BUy,BUT,BUa,[B,Bo,'6591']]],[[U,b,Cbm,BVD,Bsd,Bsc,BXT,BZs,BUy,BUT,BUa]]],['6590',AxD+BMh+a,[[U,Au,Cbl,BUd,BYX,BgW,BgV,BXQ,BUT,BVT,[B,Bo,'6590']]],[[U,F,Cbm,BUd,BYX,BgW,BgV,BXQ,BUT,BUr]]],['6589',BRM+q+a,[[U,Au,Cbl,BUd,BYX,BgW,BgV,BUc,BUT,BUa,[B,Bo,'6589']]],[[U,F,Cbm,BUd,BYX,BgW,BgV,BUc,BUT,BUa]]],['6588',BRL+AlX,[[U,Au,Cbl,BVG,Biv,Biu,BgU,BXU,BVj,Bsb,BVT,[B,Bo,'6588']]],[[U,b,Cbm,BVD,Biv,Biu,BgU,BXU,BVj,Bsb,BUr]]],['6587',BRK+j+q+a,[[U,Au,Cbl,BVG,Biv,Biu,BgU,BXU,BVY,BgT,BUa,[B,Bo,'6587']]],[[U,b,Cbm,BVD,Biv,Biu,BgU,BXU,BVY,BgT,BUa]]],['6586',BIe+GW+vz+AlX,[[U,Au,Cbl,BVG,BcY,BcX,Bdd,BXp,BmA,Bsa,BVT,[B,Bo,'6586']]],[[U,b,Cbm,BVD,BcY,BcX,Bdd,BXp,BmA,Bsa,BUr]]],['6585',BTT+q+a,[[U,Au,Cbl,BVG,BcY,BcX,Bdd,BXp,BVl,Bdc,BUa,[B,Bo,'6585']]],[[U,b,Cbm,BVD,BcY,BcX,Bdd,BXp,BVl,Bdc,BUa]]],['6584',BRJ+AlX,[[U,Au,Cbl,BVG,Bit,Bis,BgS,BXp,BVj,Biw,BVT,[B,Bo,'6584']]],[[U,b,Cbm,BVD,Bit,Bis,BgS,BXp,BVj,Biw,BUr]]],['6583',BRI+q+a,[[U,Au,Cbl,BVG,Bit,Bis,BgS,BXp,BVY,BYH,BUa,[B,Bo,'6583']]],[[U,b,Cbm,BVD,Bit,Bis,BgS,BXp,BVY,BYH,BUa]]],['6582',BTS+Ajg,[[U,Au,Cbl,BVG,Bir,Biq,BgR,BgQ,BXZ,Bbv,BVT,[B,Bo,'6582']]],[[U,b,Cbm,BVD,Bir,Biq,BgR,BgQ,BXZ,Bbv,BUr]]],['6581',BTR+q+a,[[U,Au,Cbl,BVG,Bir,Biq,BgR,BgQ,BVP,BVg,BUa,[B,Bo,'6581']]],[[U,b,Cbm,BVD,Bir,Biq,BgR,BgQ,BVP,BVg,BUa]]],['6580',BRH+BFh+q+a,[[U,Au,Cbl,BVG,Bip,Bio,BgP,BXb,BWL,Bdc,BUa,[B,Bo,'6580']]],[[U,b,Cbm,BVD,Bip,Bio,BgP,BXb,BWL,Bdc,BUa]]],['6579',BRG+BCv+q+a,[[U,Au,Cbl,BeL,Bip,Bio,CBH,Buv,BWL,Bdb,BUa,[B,Bo,'6579']]],[[U,Pk,Cbm,BeK,Bip,Bio,BgP,BXb,BWL,Bdb,BUa]]],['6578',BTQ+Ajg,[[U,Au,Cbl,BVG,Bin,Bim,Bda,BZd,Bbu,CBI,BVT,[B,Bo,'6578']]],[[U,b,Cbm,BVD,Bin,Bim,Bda,BZd,Bbu,CBI,BUr]]],['6577',BTP+q+a,[[U,Au,Cbl,BVG,Bin,Bim,Bda,BZd,BWl,Bbw,BUa,[B,Bo,'6577']]],[[U,b,Cbm,BVD,Bin,Bim,Bda,BZd,BWl,Bbw,BUa]]],['6576',BGa+Ajg,[[U,Au,Cbl,BVG,Bil,Bik,BZq,Bcg,BVj,BUT,BVT,[B,Bo,'6576']]],[[U,b,Cbm,BVD,Bil,Bik,BZq,Bcg,BVj,BUT,BUr]]],['6575',BGa+q+a,[[U,Au,Cbl,BVG,Bil,Bik,BZq,Bcg,BVY,BUT,BUa,[B,Bo,'6575']]],[[U,b,Cbm,BVD,Bil,Bik,BZq,Bcg,BVY,BUT,BUa]]],['6574',BGZ+Ajg,[[U,Au,Cbl,BVG,Bij,Bii,BgO,BZd,BVj,BUT,BVT,[B,Bo,'6574']]],[[U,b,Cbm,BVD,Bij,Bii,BgO,BZd,BVj,BUT,BUr]]],['6573',BGZ+q+a,[[U,Au,Cbl,BVG,Bij,Bii,BgO,BZd,BVY,BUT,BUa,[B,Bo,'6573']]],[[U,b,Cbm,BVD,Bij,Bii,BgO,BZd,BVY,BUT,BUa]]],['6572',BGY+Ajg,[[U,Au,Cbl,BVG,Bih,Big,BYM,BXb,BVj,BUT,BVT,[B,Bo,'6572']]],[[U,b,Cbm,BVD,Bih,Big,BYM,BXb,BVj,BUT,BUr]]],['6571',BGY+q+a,[[U,Au,Cbl,BVG,Bih,Big,BYM,BXb,BVY,BUT,BUa,[B,Bo,'6571']]],[[U,b,Cbm,BVD,Bih,Big,BYM,BXb,BVY,BUT,BUa]]],['6570',BGX+AkW,[[U,Au,Cbl,BVG,Bif,Bie,BgN,BVm,BVW,BUT,BVd,[B,Bo,'6570']]],[[U,b,Cbm,BVD,Bif,Bie,BgN,BVm,BVW,BUT,BVd]]],['6569',BGX+q+a,[[U,Au,Cbl,BVG,Bif,Bie,BgN,BVm,BsZ,BUT,BUa,[B,Bo,'6569']]],[[U,b,Cbm,BVD,Bif,Bie,BgN,BVm,BsZ,BUT,BUa]]],['6568',BTO+Ajg,[[U,Au,Cbl,BUd,BgM,BZc,Bid,Bom,BUT,BVT,[B,Bo,'6568']]],[[U,F,Cbm,BUd,BgM,BZc,Bid,Bom,BUT,BUr]]],['6567',BRF+j+q+a,[[U,Au,Cbl,BUd,BgM,BZc,Bid,BWV,BUT,BUa,[B,Bo,'6567']]],[[U,F,Cbm,BUd,BgM,BZc,Bid,BWV,BUT,BUa]]],['6566',BKq+j+q+a,[[U,Au,Cbl,BVG,Bke,Bkd,Bkc,Bkb,BVP,Bae,BUa,[B,Bo,'6566']]],[Cou]],['6565',BGW+Ajg,[[U,Au,Cbl,BVG,BgL,BgK,BXi,BZb,BVj,BUT,BVT,[B,Bo,'6565']]],[[U,b,Cbm,BVD,BgL,BgK,BXi,BZb,BVj,BUT,BUr]]],['6564',BGW+q+a,[[U,Au,Cbl,BVG,BgL,BgK,BXi,BZb,BVY,BUT,BUa,[B,Bo,'6564']]],[[U,b,Cbm,BVD,BgL,BgK,BXi,BZb,BVY,BUT,BUa]]],['6563',BFe+Ajg,[[U,Au,Cbl,BVG,Bic,Bib,BZp,BZb,BVj,BUT,BVT,[B,Bo,'6563']]],[[U,b,Cbm,BVD,Bic,Bib,BZp,BZb,BVj,BUT,BUr]]],['6562',BFe+q+a,[[U,Au,Cbl,BVG,Bic,Bib,BZp,BZb,BVY,BUT,BUa,[B,Bo,'6562']]],[[U,b,Cbm,BVD,Bic,Bib,BZp,BZb,BVY,BUT,BUa]]],['6561',BSc+AkW,[[U,Au,Cbl,BVG,Bdm,Bdl,BWi,BWB,Bok,BUT,BVd,[B,Bo,'6561']]],[CpI]],['6560',BKu+j+q+a,[[U,Au,Cbl,BVG,Bdm,Bdl,BWi,BWB,BWL,BUT,BUa,[B,Bo,'6560']]],[CpH]],['6559',BSa+AkW,[[U,Au,Cbl,BVG,Bdk,Bdj,BYN,BWB,Boj,BUT,BVd,[B,Bo,'6559']]],[CpG]],['6558',BKt+j+q+a,[[U,Au,Cbl,BVG,Bdk,Bdj,BYN,BWB,BXy,BUT,BUa,[B,Bo,'6558']]],[CpF]],['6557',BSY+AkW,[[U,Au,Cbl,BVG,BZg,BaF,BZf,BWB,Boi,BUT,BVd,[B,Bo,'6557']]],[CpE]],['6556',BKs+j+q+a,[[U,Au,Cbl,BVG,BZg,BaF,BZf,BWB,BVh,BUT,BUa,[B,Bo,'6556']]],[CpD]],['6555',BFc+Ajg,[[U,Au,Cbl,BVG,Bia,BiZ,BgJ,BXh,BVj,BUT,BVT,[B,Bo,'6555']]],[[U,b,Cbm,BVD,Bia,BiZ,BgJ,BXh,BVj,BUT,BUr]]],['6554',BFc+q+a,[[U,Au,Cbl,BVG,Bia,BiZ,BgJ,BXh,BVY,BUT,BUa,[B,Bo,'6554']]],[[U,b,Cbm,BVD,Bia,BiZ,BgJ,BXh,BVY,BUT,BUa]]],['6553',BFM+Ajg,[[U,Au,Cbl,BVG,BgI,BiY,BgH,BXh,BVj,BUT,BVT,[B,Bo,'6553']]],[[U,b,Cbm,BVD,BgI,BiY,BgH,BXh,BVj,BUT,BUr]]],['6552',BFM+q+a,[[U,Au,Cbl,BVG,BgI,BiY,BgH,BXh,BVY,BUT,BUa,[B,Bo,'6552']]],[[U,b,Cbm,BVD,BgI,BiY,BgH,BXh,BVY,BUT,BUa]]],['6551',BFL+Ajg,[[U,Au,Cbl,BVG,BiX,BiW,BWT,BYk,BVj,BUT,BVT,[B,Bo,'6551']]],[[U,b,Cbm,BVD,BiX,BiW,BWT,BYk,BVj,BUT,BUr]]],['6550',BFL+q+a,[[U,Au,Cbl,BVG,BiX,BiW,BWT,BYk,BVY,BUT,BUa,[B,Bo,'6550']]],[[U,b,Cbm,BVD,BiX,BiW,BWT,BYk,BVY,BUT,BUa]]],['6549',BFI+Ajg,[[U,Au,Cbl,BVG,BiV,BiU,Bat,BYk,BVj,BUT,BVT,[B,Bo,'6549']]],[[U,b,Cbm,BVD,BiV,BiU,Bat,BYk,BVj,BUT,BUr]]],['6548',BFI+q+a,[[U,Au,Cbl,BVG,BiV,BiU,Bat,BYk,BVY,BUT,BUa,[B,Bo,'6548']]],[[U,b,Cbm,BVD,BiV,BiU,Bat,BYk,BVY,BUT,BUa]]],['6547',BRE+AkW,[[U,Au,Cbl,BVG,BiT,BiS,BbM,BZa,Bbt,BUT,BVd,[B,Bo,'6547']]],[[U,b,Cbm,BVD,BiT,BiS,BbM,BZa,Bbt,BUT,BVd]]],['6546',BRD+q+a,[[U,Au,Cbl,BVG,BiT,BiS,BbM,BZa,BVY,BUT,BUa,[B,Bo,'6546']]],[[U,b,Cbm,BVD,BiT,BiS,BbM,BZa,BVY,BUT,BUa]]],['6545',BRC+AkW,[[U,Au,Cbl,BVG,BaE,BiR,BZA,BZa,Bbt,BUT,BVd,[B,Bo,'6545']]],[[U,b,Cbm,BVD,BaE,BiR,BZA,BZa,Bbt,BUT,BVd]]],['6544',BRB+q+a,[[U,Au,Cbl,BVG,BaE,BiR,BZA,BZa,BVY,BUT,BUa,[B,Bo,'6544']]],[[U,b,Cbm,BVD,BaE,BiR,BZA,BZa,BVY,BUT,BUa]]],['6543',BRA+AlX,[[U,Au,Cbl,BVG,BiQ,BiP,BgG,BdZ,BVW,BUT,BVT,[B,Bo,'6543']]],[[U,b,Cbm,BVD,BiQ,BiP,BgG,BdZ,BVW,BUT,BUr]]],['6542',BQz+q+a,[[U,Au,Cbl,BVG,BiQ,BiP,BgG,BdZ,BsY,BUT,BUa,[B,Bo,'6542']]],[[U,b,Cbm,BVD,BiQ,BiP,BgG,BdZ,BsY,BUT,BUa]]],['6541',BQy+Ajg,[[U,Au,Cbl,BUd,BXM,BgF,BWF,BsX,BUT,BVT,[B,Bo,'6541']]],[[U,F,Cbm,BUd,BXM,BgF,BWF,BsX,BUT,BUr]]],['6540',BQx+j+q+a,[[U,Au,Cbl,BUd,BXM,BgF,BWF,Blz,BUT,BUa,[B,Bo,'6540']]],[[U,F,Cbm,BUd,BXM,BgF,BWF,Blz,BUT,BUa]]],['6539',BKp+AlX,[[U,Au,Cbl,BVG,BgE,BgD,BZp,BgC,BmA,BUT,BVT,[B,Bo,'6539']]],[[U,b,Cbm,BVD,BgE,BgD,BZp,BgC,BmA,BUT,BUr]]],['6538',BKp+j+q+a,[[U,Au,Cbl,BVG,BgE,BgD,BZp,BgC,BVl,BUT,BUa,[B,Bo,'6538']]],[[U,b,Cbm,BVD,BgE,BgD,BZp,BgC,BVl,BUT,BUa]]],['6537',AqE+AlH+AlX,[[U,Au,Cbl,BUd,BZo,BaD,BUt,BiO,BUT,BVT,[B,Bo,'6537']]],[Cpq]],['6536',BBg+q+a,[[U,Au,Cbl,BUd,BZo,BaD,BUt,BXc,BUT,BUa,[B,Bo,'6536']]],[Cpp]],['6535',BQw+Ajg,[[U,Au,Cbl,BUd,BXM,BgB,BWF,[A,I,ke],BUT,BVT,[B,Bo,'6535']]],[[U,F,Cbm,BUd,BXM,BgB,BWF,[A,I,ke],BUT,BUr]]],['6534',BQv+q+a,[[U,Au,Cbl,BUd,BXM,BgB,BWF,BWp,BUT,BUa,[B,Bo,'6534']]],[[U,F,Cbm,BUd,BXM,BgB,BWF,BWp,BUT,BUa]]],['6533',BQu+Ajg,[[U,Au,Cbl,BUd,BWA,BgA,Bfz,BsW,BUT,BVT,[B,Bo,'6533']]],[[U,F,Cbm,BUd,BWA,BgA,Bfz,BsW,BUT,BUr]]],['6532',BQt+j+q+a,[[U,Au,Cbl,BUd,BWA,BgA,Bfz,BsV,BUT,BUa,[B,Bo,'6532']]],[[U,F,Cbm,BUd,BWA,BgA,Bfz,BsV,BUT,BUa]]],['6531',Awp+Axn+AlX,[[U,Au,Cbl,BUd,BWA,Bfy,BcW,BsU,BUT,BVT,[B,Bo,'6531']]],[[U,F,Cbm,BUd,BWA,Bfy,BcW,BsU,BUT,BUr]]],['6530',BGn+q+a,[[U,Au,Cbl,BUd,BWA,Bfy,BcW,BsT,BUT,BUa,[B,Bo,'6530']]],[[U,F,Cbm,BUd,BWA,Bfy,BcW,BsT,BUT,BUa]]],['6529',Awm+BHM+a,[[U,Au,Cbl,BUd,BWA,Bfx,BUt,BXa,BUT,BVT,[B,Bo,'6529']]],[[U,F,Cbm,BUd,BWA,Bfx,BUt,BXa,BUT,BUr]]],['6528',BQs+q+a,[[U,Au,Cbl,BUd,BWA,Bfx,BUt,BUc,BUT,BUa,[B,Bo,'6528']]],[[U,F,Cbm,BUd,BWA,Bfx,BUt,BUc,BUT,BUa]]],['6527',AqE+AlH+AlX,[[U,Au,Cbl,BUd,BZo,BaD,BUt,BiO,BUT,BVT,[B,Bo,'6527']]],[Cpq]],['6526',BBg+q+a,[[U,Au,Cbl,BUd,BZo,BaD,BUt,BXc,BUT,BUa,[B,Bo,'6526']]],[Cpp]],['6525',Awj+BLj+a,[[U,Au,Cbl,BUd,BYX,Bfw,BWN,BmA,BUT,BVT,[B,Bo,'6525']]],[[U,F,Cbm,BUd,BYX,Bfw,BWN,BmA,BUT,BUr]]],['6524',BQr+q+a,[[U,Au,Cbl,BUd,BYX,Bfw,BWN,BVl,BUT,BUa,[B,Bo,'6524']]],[[U,F,Cbm,BUd,BYX,Bfw,BWN,BVl,BUT,BUa]]],['6523',BTj+AlX,[[U,Au,Cbl,BUd,BXg,Bfv,BUt,BZC,BsS,BVT,[B,Bo,'6523']]],[[U,F,Cbm,BUd,BXg,Bfv,BUt,BZC,BsS,BUr]]],['6522',BTi+j+q+a,[[U,Au,Cbl,BUd,BXg,Bfv,BUt,BXP,BgT,BUa,[B,Bo,'6522']]],[[U,F,Cbm,BUd,BXg,Bfv,BUt,BXP,BgT,BUa]]],['6521',BTh+AlX,[[U,Au,Cbl,BUd,BXg,Bfu,BUt,BjL,BsR,BVT,[B,Bo,'6521']]],[[U,F,Cbm,BUd,BXg,Bfu,BUt,BjL,BsR,BUr]]],['6520',BQq+j+q+a,[[U,Au,Cbl,BUd,BXg,Bfu,BUt,BVP,BsQ,BUa,[B,Bo,'6520']]],[[U,F,Cbm,BUd,BXg,Bfu,BUt,BVP,BsQ,BUa]]],['6519',BQp+Ajg,[[U,Au,Cbl,BUd,BXg,Bft,BUt,BXQ,BsP,BVT,[B,Bo,'6519']]],[[U,F,Cbm,BUd,BXg,Bft,BUt,BXQ,BsP,BUr]]],['6518',BQo+q+a,[[U,Au,Cbl,BUd,BXg,Bft,BUt,BUc,Bdb,BUa,[B,Bo,'6518']]],[[U,F,Cbm,BUd,BXg,Bft,BUt,BUc,Bdb,BUa]]],['6516',BQn+j+q+a,[[U,Au,Cbl,BVG,BZg,BZu,BjT,BXb,BUc,BUT,BUa,[B,Bo,'6516']]],[[U,b,Cbm,BVD,BZg,BZu,BjT,BXb,BUc,BUT,BUa]]],['6515',BQm+Aov,[[U,Au,Cbl,BVG,BaG,BiN,BiM,BcV,Bbt,BUT,BVd,[B,Bo,'6515']]],[[U,b,Cbm,BVD,BaG,BiN,BiM,BcV,Bbt,BUT,BVd]]],['6514',BQl+j+q+a,[[U,Au,Cbl,BVG,BaG,BiN,BiM,BcV,BVY,BUT,BUa,[B,Bo,'6514']]],[[U,b,Cbm,BVD,BaG,BiN,BiM,BcV,BVY,BUT,BUa]]],['6513',l+BLc+BKr,[[U,Au,Cbl,BUd,Bof,Boe,BWj,BsO,BUT,BUa,[B,Bo,'6513']]],[[U,F,Cbm,BUd,Bof,Boe,BWj,BsO,BUT,BUa]]],['6512',BQk+q+a,[[U,Au,Cbl,BUd,BdY,Bod,BWx,BWp,BUT,BUa,[B,Bo,'6512']]],[[U,F,Cbm,BUd,BdY,Bod,BWx,BWp,BUT,BUa]]],['6511',BQj+j+q+a,[[U,Au,Cbl,BUd,BdY,Bas,BWx,BUc,BUT,BUa,[B,Bo,'6511']]],[[U,F,Cbm,BUd,BdY,Bas,BWx,BUc,BUT,BUa]]],['6510',BAV+Axj+AlX,[[U,Au,Cbl,BUd,BaC,BcU,BWh,Bbu,BUT,BVT,[B,Bo,'6510']]],[[U,F,Cbm,BUd,BaC,BcU,BWh,Bbu,BUT,BUr]]],['6509',BQi+q+a,[[U,Au,Cbl,BUd,BaC,BcU,BWh,BWl,BUT,BUa,[B,Bo,'6509']]],[[U,F,Cbm,BUd,BaC,BcU,BWh,BWl,BUT,BUa]]],['6508',l+BQh+j+q+a,[[U,Au,Cbl,BUd,BdX,BsN,BsM,BUc,BmE,BUa,[B,Bo,'6508']]],[[U,F,Cbm,BUd,BdX,BsN,BsM,BUc,BmE,BUa]]],['6507',BAT+BLj+a,[[U,Au,Cbl,BUd,BaC,Bfs,BWh,BmA,BUT,BVT,[B,Bo,'6507']]],[[U,F,Cbm,BUd,BaC,Bfs,BWh,BmA,BUT,BUr]]],['6506',BQg+q+a,[[U,Au,Cbl,BUd,BaC,Bfs,BWh,BVl,BUT,BUa,[B,Bo,'6506']]],[[U,F,Cbm,BUd,BaC,Bfs,BWh,BVl,BUT,BUa]]],['6505',BQf+AlX,[[U,Au,Cbl,BVG,BiL,BiK,BcA,BdW,BZC,BZB,BVT,[B,Bo,'6505']]],[[U,b,Cbm,BVD,BiL,BiK,BcA,BdW,BZC,BZB,BUr]]],['6504',BQe+j+q+a,[[U,Au,Cbl,BVG,BiL,BiK,BcA,BdW,BXP,BXV,BUa,[B,Bo,'6504']]],[[U,b,Cbm,BVD,BiL,BiK,BcA,BdW,BXP,BXV,BUa]]],['6503',BQd+AlX,[[U,Au,Cbl,BVG,BiJ,BiI,BbU,Bfr,BZC,BZB,BVT,[B,Bo,'6503']]],[[U,b,Cbm,BVD,BiJ,BiI,BbU,Bfr,BZC,BZB,BUr]]],['6502',BQc+j+q+a,[[U,Au,Cbl,BVG,BiJ,BiI,BbU,Bfr,BXP,BXV,BUa,[B,Bo,'6502']]],[[U,b,Cbm,BVD,BiJ,BiI,BbU,Bfr,BXP,BXV,BUa]]],['6501',BQb+AlX,[[U,Au,Cbl,BVG,BiH,BiG,BZE,Bfq,BZC,BZB,BVT,[B,Bo,'6501']]],[[U,b,Cbm,BVD,BiH,BiG,BZE,Bfq,BZC,BZB,BUr]]],['6500',BQa+j+q+a,[[U,Au,Cbl,BVG,BiH,BiG,BZE,Bfq,BXP,BXV,BUa,[B,Bo,'6500']]],[[U,b,Cbm,BVD,BiH,BiG,BZE,Bfq,BXP,BXV,BUa]]],['6499',BTN+AkW,[[U,Au,Cbl,BVG,Bdh,BiF,BYb,BaB,BsL,BUT,BVd,[B,Bo,'6499']]],[[U,b,Cbm,BVD,Bdh,BiF,BYb,BaB,BsL,BUT,BVd]]],['6498',BTM+q+a,[[U,Au,Cbl,BVG,Bdh,BiF,BYb,BaB,Bfp,BUT,BUa,[B,Bo,'6498']]],[[U,b,Cbm,BVD,Bdh,BiF,BYb,BaB,Bfp,BUT,BUa]]],['6497',Qw+pK+' +lonc=-86'+BQZ+j+q+a,[[U,Au,Cbl,BlD,Bpd,Bpc,Bpb,CBG,BUg,BsK,BsJ,BUa,[B,Bo,'6497']]],[[U,Bz,Cbm,BlC,Bpd,Bpc,Bpb,BUg,BsK,BsJ,BUa]]],['6496',BTL+AkW,[[U,Au,Cbl,BVG,BiE,BiD,BiC,BXS,BsI,BUT,BVd,[B,Bo,'6496']]],[[U,b,Cbm,BVD,BiE,BiD,BiC,BXS,BsI,BUT,BVd]]],['6495',BQY+q+a,[[U,Au,Cbl,BVG,BiE,BiD,BiC,BXS,BsH,BUT,BUa,[B,Bo,'6495']]],[[U,b,Cbm,BVD,BiE,BiD,BiC,BXS,BsH,BUT,BUa]]],['6494',BTK+AkW,[[U,Au,Cbl,BVG,BiB,BiA,Bhz,BaB,BsG,BUT,BVd,[B,Bo,'6494']]],[[U,b,Cbm,BVD,BiB,BiA,Bhz,BaB,BsG,BUT,BVd]]],['6493',BQX+q+a,[[U,Au,Cbl,BVG,BiB,BiA,Bhz,BaB,Bly,BUT,BUa,[B,Bo,'6493']]],[[U,b,Cbm,BVD,BiB,BiA,Bhz,BaB,Bly,BUT,BUa]]],['6492',BUR+AlX,[[U,Au,Cbl,BVG,Bhy,Bfo,BZM,BZc,BXZ,BsF,BVT,[B,Bo,'6492']]],[[U,b,Cbm,BVD,Bhy,Bfo,BZM,BZc,BXZ,BsF,BUr]]],['6491',BUQ+j+q+a,[[U,Au,Cbl,BVG,Bhy,Bfo,BZM,BZc,BVP,Boc,BUa,[B,Bo,'6491']]],[[U,b,Cbm,BVD,Bhy,Bfo,BZM,BZc,BVP,Boc,BUa]]],['6490',BQW+AlX,[[U,Au,Cbl,BVG,Bhx,Bhw,BZM,BbL,BXa,BUT,BVT,[B,Bo,'6490']]],[[U,b,Cbm,BVD,Bhx,Bhw,BZM,BbL,BXa,BUT,BUr]]],['6489',BQV+j+q+a,[[U,Au,Cbl,BVG,Bhx,Bhw,BZM,BbL,BUc,BUT,BUa,[B,Bo,'6489']]],[[U,b,Cbm,BVD,Bhx,Bhw,BZM,BbL,BUc,BUT,BUa]]],['6488',BTJ+Ajg,[[U,Au,Cbl,BVG,Bhv,Bhu,BXq,Bbs,BsE,BUT,BVT,[B,Bo,'6488']]],[[U,b,Cbm,BVD,Bhv,Bhu,BXq,Bbs,BsE,BUT,BUr]]],['6487',BQU+j+q+a,[[U,Au,Cbl,BVG,Bhv,Bhu,BXq,Bbs,BVh,BUT,BUa,[B,Bo,'6487']]],[[U,b,Cbm,BVD,Bhv,Bhu,BXq,Bbs,BVh,BUT,BUa]]],['6486',AwY+AuV+AlX,[[U,Au,Cbl,BUd,BZt,Bfn,BWN,Bht,BUT,BVT,[B,Bo,'6486']]],[[U,F,Cbm,BUd,BZt,Bfn,BWN,Bht,BUT,BUr]]],['6485',BGm+q+a,[[U,Au,Cbl,BUd,BZt,Bfn,BWN,BdV,BUT,BUa,[B,Bo,'6485']]],[[U,F,Cbm,BUd,BZt,Bfn,BWN,BdV,BUT,BUa]]],['6484',BKn+Ajg,[[U,Au,Cbl,BUd,BYN,Bau,BUt,BmA,BUT,BVT,[B,Bo,'6484']]],[[U,F,Cbm,BUd,BYN,Bau,BUt,BmA,BUT,BUr]]],['6483',BKn+q+a,[[U,Au,Cbl,BUd,BYN,Bau,BUt,BVl,BUT,BUa,[B,Bo,'6483']]],[[U,F,Cbm,BUd,BYN,Bau,BUt,BVl,BUT,BUa]]],['6482',BQT+q+a,[[U,Au,Cbl,BUd,BZt,BsD,Bab,BVl,BUT,BUa,[B,Bo,'6482']]],[[U,F,Cbm,BUd,BZt,BsD,Bab,BVl,BUT,BUa]]],['6481',l+BQS+q+a,[[U,Au,Cbl,BUd,BYM,BsC,Bab,BWl,BUT,BUa,[B,Bo,'6481']]],[[U,F,Cbm,BUd,BYM,BsC,Bab,BWl,BUT,BUa]]],['6480',l+BQR+q+a,[[U,Au,Cbl,BUd,BsB,BsA,Bab,BUc,BUT,BUa,[B,Bo,'6480']]],[[U,F,Cbm,BUd,BsB,BsA,Bab,BUc,BUT,BUa]]],['6479',BQQ+AlX,[[U,Au,Cbl,BVG,Bhs,Bhr,Bhq,Bbr,Bfm,BUT,BVT,[B,Bo,'6479']]],[[U,b,Cbm,BVD,Bhs,Bhr,Bhq,Bbr,Bfm,BUT,BUr]]],['6478',BQP+j+q+a,[[U,Au,Cbl,BVG,Bhs,Bhr,Bhq,Bbr,BWa,BUT,BUa,[B,Bo,'6478']]],[[U,b,Cbm,BVD,Bhs,Bhr,Bhq,Bbr,BWa,BUT,BUa]]],['6477',BQO+AlX,[[U,Au,Cbl,BVG,Bhp,Bho,Bar,Bas,Bfm,BUT,BVT,[B,Bo,'6477']]],[[U,b,Cbm,BVD,Bhp,Bho,Bar,Bas,Bfm,BUT,BUr]]],['6476',BQN+j+q+a,[[U,Au,Cbl,BVG,Bhp,Bho,Bar,Bas,BWa,BUT,BUa,[B,Bo,'6476']]],[[U,b,Cbm,BVD,Bhp,Bho,Bar,Bas,BWa,BUT,BUa]]],['6475',BTI+Ajg,[[U,Au,Cbl,BVG,Bhn,Bhm,BXr,BZZ,BXa,BXY,BVT,[B,Bo,'6475']]],[[U,b,Cbm,BVD,Bhn,Bhm,BXr,BZZ,BXa,BXY,BUr]]],['6474',BQM+j+q+a,[[U,Au,Cbl,BVG,Bhn,Bhm,BXr,BZZ,BUc,BWE,BUa,[B,Bo,'6474']]],[[U,b,Cbm,BVD,Bhn,Bhm,BXr,BZZ,BUc,BWE,BUa]]],['6473',BQL+Ajg,[[U,Au,Cbl,BVG,Bhl,Bhk,BXr,BZZ,Bhj,Bbv,BVT,[B,Bo,'6473']]],[[U,b,Cbm,BVD,Bhl,Bhk,BXr,BZZ,Bhj,Bbv,BUr]]],['6472',BQK+q+a,[[U,Au,Cbl,BVG,Bhl,Bhk,BXr,BZZ,BWL,BVg,BUa,[B,Bo,'6472']]],[[U,b,Cbm,BVD,Bhl,Bhk,BXr,BZZ,BWL,BVg,BUa]]],['6471',BQJ+AlX,[[U,Au,Cbl,BVG,BZr,Bfl,BXf,Bfk,BXa,BUT,BVT,[B,Bo,'6471']]],[[U,b,Cbm,BVD,BZr,Bfl,BXf,Bfk,BXa,BUT,BUr]]],['6470',BQI+j+q+a,[[U,Au,Cbl,BVG,BZr,Bfl,BXf,Bfk,BUc,BUT,BUa,[B,Bo,'6470']]],[[U,b,Cbm,BVD,BZr,Bfl,BXf,Bfk,BUc,BUT,BUa]]],['6469',BQH+AlX,[[U,Au,Cbl,BVG,Bfj,Bfi,BWJ,BXp,BYa,Bhi,BVT,[B,Bo,'6469']]],[[U,b,Cbm,BVD,Bfj,Bfi,BWJ,BXp,BYa,Bhi,BUr]]],['6468',BQG+j+q+a,[[U,Au,Cbl,BVG,Bfj,Bfi,BWJ,BXp,BVh,Baa,BUa,[B,Bo,'6468']]],[[U,b,Cbm,BVD,Bfj,Bfi,BWJ,BXp,BVh,Baa,BUa]]],['6467',BQF+AlX,[[U,Au,Cbl,BVG,Bfh,Bfg,BYl,BXh,BYa,BUT,BVT,[B,Bo,'6467']]],[[U,b,Cbm,BVD,Bfh,Bfg,BYl,BXh,BYa,BUT,BUr]]],['6466',BQE+j+q+a,[[U,Au,Cbl,BVG,Bfh,Bfg,BYl,BXh,BVh,BUT,BUa,[B,Bo,'6466']]],[[U,b,Cbm,BVD,Bfh,Bfg,BYl,BXh,BVh,BUT,BUa]]],['6465',BQD+AlX,[[U,Au,Cbl,BVG,BZD,Bff,BXM,BZY,BXQ,BUT,BVT,[B,Bo,'6465']]],[[U,b,Cbm,BVD,BZD,Bff,BXM,BZY,BXQ,BUT,BUr]]],['6464',BQC+j+q+a,[[U,Au,Cbl,BVG,BZD,Bff,BXM,BZY,BUc,BUT,BUa,[B,Bo,'6464']]],[[U,b,Cbm,BVD,BZD,Bff,BXM,BZY,BUc,BUT,BUa]]],['6463',BQB+AlX,[[U,Au,Cbl,BVG,Bfe,Bfd,BYb,BZY,Bhj,BjM,BVT,[B,Bo,'6463']]],[[U,b,Cbm,BVD,Bfe,Bfd,BYb,BZY,Bhj,BjM,BUr]]],['6462',BQA+q+a,[[U,Au,Cbl,BVG,Bfe,Bfd,BYb,BZY,BWL,BVg,BUa,[B,Bo,'6462']]],[[U,b,Cbm,BVD,Bfe,Bfd,BYb,BZY,BWL,BVg,BUa]]],['6461',BIF+Yy+AlX,[[U,Au,Cbl,BUd,BXf,Bfc,BWN,Bht,CIs,BVT,[B,Bo,'6461']]],[[U,F,Cbm,BUd,BXf,Bfc,BWN,Bht,CIs,BUr]]],['6460',BTe+j+q+a,[[U,Au,Cbl,BUd,BXf,Bfc,BWN,BdV,Bch,BUa,[B,Bo,'6460']]],[[U,F,Cbm,BUd,BXf,Bfc,BWN,BdV,Bch,BUa]]],['6459',BST+Yy+AlX,[[U,Au,Cbl,BUd,BXf,Bfb,BWN,Brz,CIs,BVT,[B,Bo,'6459']]],[[U,F,Cbm,BUd,BXf,Bfb,BWN,Brz,CIs,BUr]]],['6458',BTd+j+q+a,[[U,Au,Cbl,BUd,BXf,Bfb,BWN,BWV,Bch,BUa,[B,Bo,'6458']]],[[U,F,Cbm,BUd,BXf,Bfb,BWN,BWV,Bch,BUa]]],['6457',BPj+Ajg,[[U,Au,Cbl,BUd,BWJ,Bfa,BWj,Bry,BUT,BVT,[B,Bo,'6457']]],[[U,F,Cbm,BUd,BWJ,Bfa,BWj,Bry,BUT,BUr]]],['6456',BPh+q+a,[[U,Au,Cbl,BUd,BWJ,Bfa,BWj,BWl,BUT,BUa,[B,Bo,'6456']]],[[U,F,Cbm,BUd,BWJ,Bfa,BWj,BWl,BUT,BUa]]],['6455',Avu+BLj+a,[[U,Au,Cbl,BUd,BWJ,BfZ,BdU,BmA,BUT,BVT,[B,Bo,'6455']]],[[U,F,Cbm,BUd,BWJ,BfZ,BdU,BmA,BUT,BUr]]],['6454',BPe+q+a,[[U,Au,Cbl,BUd,BWJ,BfZ,BdU,BVl,BUT,BUa,[B,Bo,'6454']]],[[U,F,Cbm,BUd,BWJ,BfZ,BdU,BVl,BUT,BUa]]],['6453',BPc+Ajg,[[U,Au,Cbl,BUd,BWi,BfY,BWx,Brx,BUT,BVT,[B,Bo,'6453']]],[[U,F,Cbm,BUd,BWi,BfY,BWx,Brx,BUT,BUr]]],['6452',BPa+q+a,[[U,Au,Cbl,BUd,BWi,BfY,BWx,BXP,BUT,BUa,[B,Bo,'6452']]],[[U,F,Cbm,BUd,BWi,BfY,BWx,BXP,BUT,BUa]]],['6451',Avs+BIE+a,[[U,Au,Cbl,BUd,BWi,BfX,BZX,BXZ,BUT,BVT,[B,Bo,'6451']]],[[U,F,Cbm,BUd,BWi,BfX,BZX,BXZ,BUT,BUr]]],['6450',BPY+q+a,[[U,Au,Cbl,BUd,BWi,BfX,BZX,BVP,BUT,BUa,[B,Bo,'6450']]],[[U,F,Cbm,BUd,BWi,BfX,BZX,BVP,BUT,BUa]]],['6449',Avr+BHM+a,[[U,Au,Cbl,BUd,BWi,Bbq,BZX,BXa,BUT,BVT,[B,Bo,'6449']]],[[U,F,Cbm,BUd,BWi,Bbq,BZX,BXa,BUT,BUr]]],['6448',BPR+q+a,[[U,Au,Cbl,BUd,BWi,Bbq,BZX,BUc,BUT,BUa,[B,Bo,'6448']]],[[U,F,Cbm,BUd,BWi,Bbq,BZX,BUc,BUT,BUa]]],['6447',Avp+Axj+AlX,[[U,Au,Cbl,BUd,BXX,BfW,BUt,Bbu,BUT,BVT,[B,Bo,'6447']]],[[U,F,Cbm,BUd,BXX,BfW,BUt,Bbu,BUT,BUr]]],['6446',BPI+q+a,[[U,Au,Cbl,BUd,BXX,BfW,BUt,BWl,BUT,BUa,[B,Bo,'6446']]],[[U,F,Cbm,BUd,BXX,BfW,BUt,BWl,BUT,BUa]]],['6445',Avo+BIE+a,[[U,Au,Cbl,BUd,BXX,BfV,BUt,BXZ,BUT,BVT,[B,Bo,'6445']]],[[U,F,Cbm,BUd,BXX,BfV,BUt,BXZ,BUT,BUr]]],['6444',BPE+q+a,[[U,Au,Cbl,BUd,BXX,BfV,BUt,BVP,BUT,BUa,[B,Bo,'6444']]],[[U,F,Cbm,BUd,BXX,BfV,BUt,BVP,BUT,BUa]]],['6443',Avn+BIE+a,[[U,Au,Cbl,BUd,BZW,BfU,BWj,BXZ,BUT,BVT,[B,Bo,'6443']]],[[U,F,Cbm,BUd,BZW,BfU,BWj,BXZ,BUT,BUr]]],['6442',BPC+q+a,[[U,Au,Cbl,BUd,BZW,BfU,BWj,BVP,BUT,BUa,[B,Bo,'6442']]],[[U,F,Cbm,BUd,BZW,BfU,BWj,BVP,BUT,BUa]]],['6441',BFH+Ajg,[[U,Au,Cbl,BVG,BfT,BfS,BfR,BfQ,BVj,BUT,BVT,[B,Bo,'6441']]],[[U,b,Cbm,BVD,BfT,BfS,BfR,BfQ,BVj,BUT,BUr]]],['6440',BFH+q+a,[[U,Au,Cbl,BVG,BfT,BfS,BfR,BfQ,BVY,BUT,BUa,[B,Bo,'6440']]],[[U,b,Cbm,BVD,BfT,BfS,BfR,BfQ,BVY,BUT,BUa]]],['6439',TR+' +lat_1=24'+AgU+' +lat_0=24'+BNy+j+q+a,[[U,Au,Cbl,BeL,Brw,Brv,CBF,CBE,BVh,BUT,BUa,[B,Bo,'6439']]],[[U,Pk,Cbm,BeK,Brw,Brv,CIr,Bhh,BVh,BUT,BUa]]],['6438',Avk+BIE+a,[[U,Au,Cbl,BUd,BZW,BVm,BWj,BXZ,BUT,BVT,[B,Bo,'6438']]],[[U,F,Cbm,BUd,BZW,BVm,BWj,BXZ,BUT,BUr]]],['6437',BPA+q+a,[[U,Au,Cbl,BUd,BZW,BVm,BWj,BVP,BUT,BUa,[B,Bo,'6437']]],[[U,F,Cbm,BUd,BZW,BVm,BWj,BVP,BUT,BUa]]],['6436',Avf+BIE+a,[[U,Au,Cbl,BUd,BWT,BfP,BfO,BXZ,BUT,BVT,[B,Bo,'6436']]],[[U,F,Cbm,BUd,BWT,BfP,BfO,BXZ,BUT,BUr]]],['6435',BOy+q+a,[[U,Au,Cbl,BUd,BWT,BfP,BfO,BVP,BUT,BUa,[B,Bo,'6435']]],[[U,F,Cbm,BUd,BWT,BfP,BfO,BVP,BUT,BUa]]],['6434',BUP+AlX,[[U,Au,Cbl,BVG,BfN,BfM,BfL,BfK,BWa,BWE,BVT,[B,Bo,'6434']]],[[U,b,Cbm,BVD,BfN,BfM,BfL,BfK,BWa,BWE,BUr]]],['6433',BOv+j+q+a,[[U,Au,Cbl,BVG,BfN,BfM,BfL,BfK,Bru,Brt,BUa,[B,Bo,'6433']]],[[U,b,Cbm,BVD,BfN,BfM,BfL,BfK,Bru,Brt,BUa]]],['6432',BOu+Ajg,[[U,Au,Cbl,BVG,BZV,BfJ,BWJ,BXR,BYY,BVg,BVT,[B,Bo,'6432']]],[[U,b,Cbm,BVD,BZV,BfJ,BWJ,BXR,BYY,BVg,BUr]]],['6431',BOt+q+a,[[U,Au,Cbl,BVG,BZV,BfJ,BWJ,BXR,Bbp,Bbo,BUa,[B,Bo,'6431']]],[[U,b,Cbm,BVD,BZV,BfJ,BWJ,BXR,Bbp,Bbo,BUa]]],['6430',BOr+Ajg,[[U,Au,Cbl,BVG,Bhg,Bhf,BXi,BXR,BYY,BVg,BVT,[B,Bo,'6430']]],[[U,b,Cbm,BVD,Bhg,Bhf,BXi,BXR,BYY,BVg,BUr]]],['6429',BOd+q+a,[[U,Au,Cbl,BVG,Bhg,Bhf,BXi,BXR,Bbp,Bbo,BUa,[B,Bo,'6429']]],[[U,b,Cbm,BVD,Bhg,Bhf,BXi,BXR,Bbp,Bbo,BUa]]],['6428',BOb+Ajg,[[U,Au,Cbl,BVG,BfI,BfH,BdT,BXR,BYY,BVg,BVT,[B,Bo,'6428']]],[[U,b,Cbm,BVD,BfI,BfH,BdT,BXR,BYY,BVg,BUr]]],['6427',BOU+q+a,[[U,Au,Cbl,BVG,BfI,BfH,BdT,BXR,Bbp,Bbo,BUa,[B,Bo,'6427']]],[[U,b,Cbm,BVD,BfI,BfH,BdT,BXR,Bbp,Bbo,BUa]]],['6426',BOS+AlX,[[U,Au,Cbl,BVG,BfG,BfF,BfE,BfD,BYG,BXY,BVT,[B,Bo,'6426']]],[[U,b,Cbm,BVD,BfG,BfF,BfE,BfD,BYG,BXY,BUr]]],['6425',BOE+j+q+a,[[U,Au,Cbl,BVG,BfG,BfF,BfE,BfD,BVW,BWE,BUa,[B,Bo,'6425']]],[[U,b,Cbm,BVD,BfG,BfF,BfE,BfD,BVW,BWE,BUa]]],['6424',BOD+AlX,[[U,Au,Cbl,BVG,BfC,BfB,BfA,BbN,BYG,BXY,BVT,[B,Bo,'6424']]],[[U,b,Cbm,BVD,BfC,BfB,BfA,BbN,BYG,BXY,BUr]]],['6423',BOC+j+q+a,[[U,Au,Cbl,BVG,BfC,BfB,BfA,BbN,BVW,BWE,BUa,[B,Bo,'6423']]],[[U,b,Cbm,BVD,BfC,BfB,BfA,BbN,BVW,BWE,BUa]]],['6422',BOA+AlX,[[U,Au,Cbl,BVG,Bez,Bey,Bex,Bew,BYG,BXY,BVT,[B,Bo,'6422']]],[[U,b,Cbm,BVD,Bez,Bey,Bex,Bew,BYG,BXY,BUr]]],['6421',BNg+j+q+a,[[U,Au,Cbl,BVG,Bez,Bey,Bex,Bew,BVW,BWE,BUa,[B,Bo,'6421']]],[[U,b,Cbm,BVD,Bez,Bey,Bex,Bew,BVW,BWE,BUa]]],['6420',BNf+AlX,[[U,Au,Cbl,BVG,BZV,Bev,Beu,BWB,BYG,BXY,BVT,[B,Bo,'6420']]],[[U,b,Cbm,BVD,BZV,Bev,Beu,BWB,BYG,BXY,BUr]]],['6419',BNT+j+q+a,[[U,Au,Cbl,BVG,BZV,Bev,Beu,BWB,BVW,BWE,BUa,[B,Bo,'6419']]],[[U,b,Cbm,BVD,BZV,Bev,Beu,BWB,BVW,BWE,BUa]]],['6418',BND+Ajg,[[U,Au,Cbl,BVG,Bet,Bes,BXq,BZU,BYG,BXY,BVT,[B,Bo,'6418']]],[[U,b,Cbm,BVD,Bet,Bes,BXq,BZU,BYG,BXY,BUr]]],['6417',BMz+q+a,[[U,Au,Cbl,BVG,Bet,Bes,BXq,BZU,BVW,BWE,BUa,[B,Bo,'6417']]],[[U,b,Cbm,BVD,Bet,Bes,BXq,BZU,BVW,BWE,BUa]]],['6416',BMx+Ajg,[[U,Au,Cbl,BVG,Ber,BZu,BXi,BZU,BYG,BXY,BVT,[B,Bo,'6416']]],[[U,b,Cbm,BVD,Ber,BZu,BXi,BZU,BYG,BXY,BUr]]],['6415',BMn+q+a,[[U,Au,Cbl,BVG,Ber,BZu,BXi,BZU,BVW,BWE,BUa,[B,Bo,'6415']]],[[U,b,Cbm,BVD,Ber,BZu,BXi,BZU,BVW,BWE,BUa]]],['6414',TR+' +lat_1=34'+BKm+j+q+a,[[U,Au,Cbl,BeL,Bob,Boa,Bwt,Bxf,BUy,BoZ,BUa,[B,Bo,'6414']]],[[U,Pk,Cbm,BeK,Bob,Boa,BUX,BlB,BUy,BoZ,BUa]]],['6413',BMd+AlX,[[U,Au,Cbl,BVG,Beq,Bep,Beo,BZT,BYa,Bhi,BVT,[B,Bo,'6413']]],[[U,b,Cbm,BVD,Beq,Bep,Beo,BZT,BYa,Bhi,BUr]]],['6412',BMb+j+q+a,[[U,Au,Cbl,BVG,Beq,Bep,Beo,BZT,BVh,Baa,BUa,[B,Bo,'6412']]],[[U,b,Cbm,BVD,Beq,Bep,Beo,BZT,BVh,Baa,BUa]]],['6411',BMW+Ajg,[[U,Au,Cbl,BVG,Ben,Bem,BZq,BZT,BYa,BUT,BVT,[B,Bo,'6411']]],[[U,b,Cbm,BVD,Ben,Bem,BZq,BZT,BYa,BUT,BUr]]],['6410',BMU+q+a,[[U,Au,Cbl,BVG,Ben,Bem,BZq,BZT,BVh,BUT,BUa,[B,Bo,'6410']]],[[U,b,Cbm,BVD,Ben,Bem,BZq,BZT,BVh,BUT,BUa]]],['6409',Aug+Alo+Aov,[[U,Au,Cbl,BUd,BWA,Bel,BWx,BWl,BUT,BVd,[B,Bo,'6409']]],[[U,F,Cbm,BUd,BWA,Bel,BWx,BWl,BUT,BVd]]],['6408',BGk+q+a,[[U,Au,Cbl,BUd,BWA,Bel,BWx,Bbn,BUT,BUa,[B,Bo,'6408']]],[[U,F,Cbm,BUd,BWA,Bel,BWx,Bbn,BUT,BUa]]],['6407',Aue+Alo+Aov,[[U,Au,Cbl,BUd,BWA,Bek,BUt,BWl,BUT,BVd,[B,Bo,'6407']]],[[U,F,Cbm,BUd,BWA,Bek,BUt,BWl,BUT,BVd]]],['6406',BGj+q+a,[[U,Au,Cbl,BUd,BWA,Bek,BUt,Bbn,BUT,BUa,[B,Bo,'6406']]],[[U,F,Cbm,BUd,BWA,Bek,BUt,Bbn,BUT,BUa]]],['6405',AuX+Alo+Aov,[[U,Au,Cbl,BUd,BWA,Bej,BUt,BWl,BUT,BVd,[B,Bo,'6405']]],[[U,F,Cbm,BUd,BWA,Bej,BUt,BWl,BUT,BVd]]],['6404',BGi+q+a,[[U,Au,Cbl,BUd,BWA,Bej,BUt,Bbn,BUT,BUa,[B,Bo,'6404']]],[[U,F,Cbm,BUd,BWA,Bej,BUt,Bbn,BUT,BUa]]],['6403',BTH+AwW+q+a,[[U,Au,Cbl,BVG,Brs,Brr,Blx,Brq,BWa,BUT,BUa,[B,Bo,'6403']]],[[U,b,Cbm,BVD,Brs,Brr,Blx,Brq,BWa,BUT,BUa]]],['6402',BKV+BEy,[[U,Au,Cbl,BUd,BXL,BoY,BUt,BUc,BUT,BUa,[B,Bo,'6402']]],[[U,F,Cbm,BUd,BXL,BoY,BUt,BUc,BUT,BUa]]],['6401',BKU+BEy,[[U,Au,Cbl,BUd,BXL,Brp,BUt,BUc,BUT,BUa,[B,Bo,'6401']]],[[U,F,Cbm,BUd,BXL,Brp,BUt,BUc,BUT,BUa]]],['6400',BKT+BEy,[[U,Au,Cbl,BUd,BXL,Bro,BUt,BUc,BUT,BUa,[B,Bo,'6400']]],[[U,F,Cbm,BUd,BXL,Bro,BUt,BUc,BUT,BUa]]],['6399',BNm+AtN+q+a,[[U,Au,Cbl,BUd,BXL,Bce,BUt,BUc,BUT,BUa,[B,Bo,'6399']]],[[U,F,Cbm,BUd,BXL,Bce,BUt,BUc,BUT,BUa]]],['6398',BNl+AtN+q+a,[[U,Au,Cbl,BUd,BXL,Bka,BUt,BUc,BUT,BUa,[B,Bo,'6398']]],[[U,F,Cbm,BUd,BXL,Bka,BUt,BUc,BUT,BUa]]],['6397',BNk+AtN+q+a,[[U,Au,Cbl,BUd,BXL,BkA,BUt,BUc,BUT,BUa,[B,Bo,'6397']]],[[U,F,Cbm,BUd,BXL,BkA,BUt,BUc,BUT,BUa]]],['6396',BKS+BEy,[[U,Au,Cbl,BUd,BXL,Brn,BUt,BUc,BUT,BUa,[B,Bo,'6396']]],[[U,F,Cbm,BUd,BXL,Brn,BUt,BUc,BUT,BUa]]],['6395',BKR+BEy,[[U,Au,Cbl,BUd,BXL,Brm,BUt,BUc,BUT,BUa,[B,Bo,'6395']]],[[U,F,Cbm,BUd,BXL,Brm,BUt,BUc,BUT,BUa]]],['6394',Qw+' +lat_0=57'+pN+pO+CB+pl+UZ+BBw+j+q+a,[[U,Au,Cbl,BlD,Bpa,BpZ,BpY,BqI,BUt,Bei,BZJ,BUa,[B,Bo,'6394']]],[[U,Bz,Cbm,BlC,Bpa,BpZ,BpY,BUt,Bei,BZJ,BUa]]],['6393',TR+' +lat_1=55'+AIa+' +lat_0=50'+BNj+j+q+a,[[U,Au,Cbl,BeL,BnM,Beh,CBD,CBC,BUy,BUT,BUa,[B,Bo,'6393']]],[[U,Pk,Cbm,BeK,BnM,Beh,Bws,Bka,BUy,BUT,BUa]]],['6391',AU+' +lat_1=19.33333333333333 +lat_2=19.7 +lat_0=19.33333333333333 +lon_0=-80.56666666666666 +x_0=899160 +y_0=579120'+BGh,[[U,Au,CcT,BVG,[A,W,mb],CPn,[A,C,mb],[A,E,AKW],CGc,CGb,BVd,[B,Bo,'6391']]],[[U,b,Cbm,BVD,[A,W,mb],CPn,[A,C,mb],[A,E,AKW],CGc,CGb,BVd]]],['6387',AsG+' +k=1'+BTG,[[U,Au,CeX,BUd,BUX,BWn,BUf,BVl,BUT,BUa,[B,Bo,'6387']]],[[U,F,CeW,BUd,BUX,BWn,BUf,BVl,BUT,BUa]]],['6386',AtL+' +k=1'+BTG,[[U,Au,CeX,BUd,BUX,BdS,BUf,BVl,BUT,BUa,[B,Bo,'6386']]],[[U,F,CeW,BUd,BUX,BdS,BUf,BVl,BUT,BUa]]],['6385',Aqn+' +k=1'+BTG,[[U,Au,CeX,BUd,BUX,BWg,BUf,BVl,BUT,BUa,[B,Bo,'6385']]],[[U,F,CeW,BUd,BUX,BWg,BUf,BVl,BUT,BUa]]],['6384',ArX+' +k=1'+BTG,[[U,Au,CeX,BUd,BUX,BYz,BUf,BVl,BUT,BUa,[B,Bo,'6384']]],[[U,F,CeW,BUd,BUX,BYz,BUf,BVl,BUT,BUa]]],['6383',Apz+' +k=1'+BTG,[[U,Au,CeX,BUd,BUX,BWP,BUf,BVl,BUT,BUa,[B,Bo,'6383']]],[[U,F,CeW,BUd,BUX,BWP,BUf,BVl,BUT,BUa]]],['6382',ArK+' +k=1'+BTG,[[U,Au,CeX,BUd,BUX,BYU,BUf,BVl,BUT,BUa,[B,Bo,'6382']]],[[U,F,CeW,BUd,BUX,BYU,BUf,BVl,BUT,BUa]]],['6381',ApT+' +k=1'+BTG,[[U,Au,CeX,BUd,BUX,BWR,BUf,BVl,BUT,BUa,[B,Bo,'6381']]],[[U,F,CeW,BUd,BUX,BWR,BUf,BVl,BUT,BUa]]],['6372',AU+' +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102'+BIN+c+q+a,[[U,Au,CcT,BVG,CBB,CIq,Brl,Buu,BXy,BUT,BUa,[B,Bo,'6372']]],[Cot]],['6371',BUK,[[U,'UTM Zone 16,'+Akj,CcT,BUd,BUX,BXS,BUg,BUc,BUT,BUa,[B,Bo,'6371']]],[Cpf]],['6370',BUJ,[[U,'UTM Zone 15,'+Akj,CcT,BUd,BUX,BYT,BUg,BUc,BUT,BUa,[B,Bo,'6370']]],[Cpe]],['6369',BUI,[[U,'UTM Zone 14,'+Akj,CcT,BUd,BUX,BXU,BUg,BUc,BUT,BUa,[B,Bo,'6369']]],[Cpd]],['6368',BUH,[[U,'UTM Zone 13,'+Akj,CcT,BUd,BUX,BZS,BUg,BUc,BUT,BUa,[B,Bo,'6368']]],[Cpc]],['6367',BUG,[[U,'UTM Zone 12,'+Akj,CcT,BUd,BUX,BXs,BUg,BUc,BUT,BUa,[B,Bo,'6367']]],[Cpb]],['6366',BUF,[[U,'UTM Zone 11,'+Akj,CcT,BUd,BUX,BXx,BUg,BUc,BUT,BUa,[B,Bo,'6366']]],[Cpa]],['6362',AU+' +lat_1=17.5 +lat_2=29.5 +lat_0=12 +lon_0=-102'+BIN+c+q+a,[[U,Au,CcT,BVG,CBB,CIq,Brl,Buu,BXy,BUT,BUa,[B,Bo,'6362']]],[Cot]],['6356',BMF+j+q+a,[[U,Au,Cbl,BUd,BXX,Bkh,BWx,BVY,BUT,BUa,[B,Bo,'6356']]],[[U,F,Cbm,BUd,BXX,Bkh,BWx,BVY,BUT,BUa]]],['6355',l+BMD+q+a,[[U,Au,Cbl,BUd,Bar,BoX,Bhe,BVP,BUT,BUa,[B,Bo,'6355']]],[[U,F,Cbm,BUd,Bar,BoX,Bhe,BVP,BUT,BUa]]],['6354',AsL+AHL+ef+BDe+q+a,[[U,Au,Cbl,BVG,BcT,BcS,BcR,BYy,BbP,BcQ,BUa,[B,Bo,'6354']]],[[U,b,Cbm,BVD,BcT,BcS,BcR,BYy,BbP,BcQ,BUa]]],['6353',AsL+ATZ+av+BDe+q+a,[[U,Au,Cbl,BVG,BcT,BcS,BcR,BaZ,Bad,BcQ,BUa,[B,Bo,'6353']]],[[U,b,Cbm,BVD,BcT,BcS,BcR,BaZ,Bad,BcQ,BUa]]],['6352',ApA+AHL+Zm+BAz+q+a,[[U,Au,Cbl,BVG,BYj,BYi,BYh,BYy,BaY,BYS,BUa,[B,Bo,'6352']]],[[U,b,Cbm,BVD,BYj,BYi,BYh,BYy,BaY,BYS,BUa]]],['6351',ApA+' +lon_0=-163'+aw+BAz+q+a,[[U,Au,Cbl,BVG,BYj,BYi,BYh,CIp,Baq,BYS,BUa,[B,Bo,'6351']]],[[U,b,Cbm,BVD,BYj,BYi,BYh,CIp,Baq,BYS,BUa]]],['6350',BKM+' +lat_0=23'+BKL+q+a,[[U,Au,Cbl,BeL,BoW,BaF,Bxe,Bxd,BUy,BUT,BUa,[B,Bo,'6350']]],[[U,Pk,Cbm,BeK,BoW,BaF,Bxt,BlA,BUy,BUT,BUa]]],['6348',BIB+q+a,[[U,'UTM Zone 19,'+Akj,Cbl,BUd,BUX,BWZ,BUg,BUc,BUT,BUa,[B,Bo,'6348']]],[[U,'UTM_Zone_19_Northern_Hemisphere',Cbm,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['6347',BIA+q+a,[[U,'UTM Zone 18,'+Akj,Cbl,BUd,BUX,BWo,BUg,BUc,BUT,BUa,[B,Bo,'6347']]],[[U,'UTM_Zone_18_Northern_Hemisphere',Cbm,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['6346',BKK+q+a,[[U,'UTM Zone 17,'+Akj,Cbl,BUd,BUX,BVm,BUg,BUc,BUT,BUa,[B,Bo,'6346']]],[[U,'UTM_Zone_17_Northern_Hemisphere',Cbm,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['6345',BIq+q+a,[[U,'UTM Zone 16,'+Akj,Cbl,BUd,BUX,BXS,BUg,BUc,BUT,BUa,[B,Bo,'6345']]],[Cpf]],['6344',BIp+q+a,[[U,'UTM Zone 15,'+Akj,Cbl,BUd,BUX,BYT,BUg,BUc,BUT,BUa,[B,Bo,'6344']]],[Cpe]],['6343',BIo+q+a,[[U,'UTM Zone 14,'+Akj,Cbl,BUd,BUX,BXU,BUg,BUc,BUT,BUa,[B,Bo,'6343']]],[Cpd]],['6342',BIn+q+a,[[U,'UTM Zone 13,'+Akj,Cbl,BUd,BUX,BZS,BUg,BUc,BUT,BUa,[B,Bo,'6342']]],[Cpc]],['6341',BIm+q+a,[[U,'UTM Zone 12,'+Akj,Cbl,BUd,BUX,BXs,BUg,BUc,BUT,BUa,[B,Bo,'6341']]],[Cpb]],['6340',BIl+q+a,[[U,'UTM Zone 11,'+Akj,Cbl,BUd,BUX,BXx,BUg,BUc,BUT,BUa,[B,Bo,'6340']]],[Cpa]],['6339',Amy+j+q+a,[[U,'UTM Zone 10,'+Akj,Cbl,BUd,BUX,Bap,BUg,BUc,BUT,BUa,[B,Bo,'6339']]],[[U,'UTM_Zone_10_Northern_Hemisphere',Cbm,BUd,BUX,Bap,BUg,BUc,BUT,BUa]]],['6338',AV+' +zone=9'+j+q+a,[[U,'UTM Zone 9,'+Akj,Cbl,BUd,BUX,BaA,BUg,BUc,BUT,BUa,[B,Bo,'6338']]],[[U,'UTM_Zone_9_Northern_Hemisphere',Cbm,BUd,BUX,BaA,BUg,BUc,BUT,BUa]]],['6337',AV+' +zone=8'+j+q+a,[[U,'UTM Zone 8,'+Akj,Cbl,BUd,BUX,BZz,BUg,BUc,BUT,BUa,[B,Bo,'6337']]],[[U,'UTM_Zone_8_Northern_Hemisphere',Cbm,BUd,BUX,BZz,BUg,BUc,BUT,BUa]]],['6336',AV+' +zone=7'+j+q+a,[[U,'UTM Zone 7,'+Akj,Cbl,BUd,BUX,BZn,BUg,BUc,BUT,BUa,[B,Bo,'6336']]],[[U,'UTM_Zone_7_Northern_Hemisphere',Cbm,BUd,BUX,BZn,BUg,BUc,BUT,BUa]]],['6335',AV+' +zone=6'+j+q+a,[[U,'UTM Zone 6,'+Akj,Cbl,BUd,BUX,BYy,BUg,BUc,BUT,BUa,[B,Bo,'6335']]],[[U,'UTM_Zone_6_Northern_Hemisphere',Cbm,BUd,BUX,BYy,BUg,BUc,BUT,BUa]]],['6334',AV+' +zone=5'+j+q+a,[[U,'UTM Zone 5,'+Akj,Cbl,BUd,BUX,BZK,BUg,BUc,BUT,BUa,[B,Bo,'6334']]],[Cph]],['6333',AV+' +zone=4'+j+q+a,[[U,'UTM Zone 4,'+Akj,Cbl,BUd,BUX,Bac,BUg,BUc,BUT,BUa,[B,Bo,'6333']]],[Cpg]],['6332',AV+' +zone=3'+j+q+a,[[U,'UTM Zone 3,'+Akj,Cbl,BUd,BUX,BaZ,BUg,BUc,BUT,BUa,[B,Bo,'6332']]],[[U,'UTM_Zone_3_Northern_Hemisphere',Cbm,BUd,BUX,BaZ,BUg,BUc,BUT,BUa]]],['6331',AV+' +zone=2'+j+q+a,[[U,'UTM Zone 2,'+Akj,Cbl,BUd,BUX,BYV,BUg,BUc,BUT,BUa,[B,Bo,'6331']]],[[U,'UTM_Zone_2_Northern_Hemisphere',Cbm,BUd,BUX,BYV,BUg,BUc,BUT,BUa]]],['6330',AV+' +zone=1'+j+q+a,[[U,'UTM Zone 1,'+Akj,Cbl,BUd,BUX,BYF,BUg,BUc,BUT,BUa,[B,Bo,'6330']]],[[U,'UTM_Zone_1_Northern_Hemisphere',Cbm,BUd,BUX,BYF,BUg,BUc,BUT,BUa]]],['6329',Ame+j+q+a,[[U,'UTM Zone 60,'+Akj,Cbl,BUd,BUX,BXo,BUg,BUc,BUT,BUa,[B,Bo,'6329']]],[[U,'UTM_Zone_60_Northern_Hemisphere',Cbm,BUd,BUX,BXo,BUg,BUc,BUT,BUa]]],['6328',AoK+j+q+a,[[U,'UTM Zone 59,'+Akj,Cbl,BUd,BUX,BXj,BUg,BUc,BUT,BUa,[B,Bo,'6328']]],[[U,'UTM_Zone_59_Northern_Hemisphere',Cbm,BUd,BUX,BXj,BUg,BUc,BUT,BUa]]],['6316',ApT+CB+ApC+Aoq+q+a,[[U,Au,Cjp,BUd,BUX,BWR,BUt,BbK,BUT,BUa,[B,Bo,'6316']]],[[U,F,[S,'GCS_Bessel'+Sr,[V,AT,BoV],BUU,BUW],BUd,BUX,BWR,BUt,BbK,BUT,BUa]]],[Abx,Aqn+Aqb+' +y_0=-3500000'+Dv+oH+q+a,[[U,Au,[S,'WGS 84',Cbj,BUU,BUu],BUd,BUX,BWg,BWh,BVP,CFn,BUa,[B,Bo,Abx]]],[[U,F,Cgl,BUd,BUX,BWg,BWh,BVP,CFn,BUa]]],['6307',BKq+j+q+a,[[U,Au,Cbl,BVG,Bke,Bkd,Bkc,Bkb,BVP,Bae,BUa,[B,Bo,'6307']]],[Cou]],['6211',AoC+j+c+q+a,[[U,'UTM Zone 24,'+Akj,CcT,BUd,BUX,BYx,BUg,BUc,BUT,BUa,[B,Bo,'6211']]],[[U,'UTM_Zone_24_Northern_Hemisphere',Cbm,BUd,BUX,BYx,BUg,BUc,BUT,BUa]]],['6210',Amp+j+c+q+a,[[U,'UTM Zone 23,'+Akj,CcT,BUd,BUX,BYg,BUg,BUc,BUT,BUa,[B,Bo,'6210']]],[[U,'UTM_Zone_23_Northern_Hemisphere',Cbm,BUd,BUX,BYg,BUg,BUc,BUT,BUa]]],['6204',ApT+AkS+AkI+Ku+q+a,[[U,Au,Cjp,BUd,BUX,BWR,BUt,BUc,BUT,BUa,[B,Bo,'6204']]],[[U,F,[S,'GCS_Bessel'+Sr,[V,AT,BoV],BUU,BUW],BUd,BUX,BWR,BUt,BUc,BUT,BUa]]],['6129',AlW+Dr+ra+AkW,[[U,'Sister'+AUX+AoN+' 1961',Crp,BUd,BUX,BVm,BUg,CIo,BUT,CWY,BUj,BUm,CQw]],[[U,'Sister_Islands_National_Grid_1961',[S,'GCS_SIGD61',[V,ASZ,BUx],BUU,BUW],BUd,BUX,BVm,BUg,CIo,BUT,BXN]]],['6128',AlW+Dr+px+AkW,[[U,'Grand Cayman'+AoN+' 1959',Cro,BUd,BUX,BVm,BUg,CIo,BUT,CWY,BUj,BUm,CQv]],[[U,'Grand_Cayman_National_Grid_1959',[S,'GCS_GCGD59',[V,AUP,BUx],BUU,BUW],BUd,BUX,BVm,BUg,CIo,BUT,BXN]]],['6125',ApA+' +lon_0=-5 +x_0=47500000'+BRo,[[U,ED+' /'+" "+Aki+' zone 5-47',Cld,BVG,BYj,BYi,BYh,But,Bwr,BYS,CVy,BUj,BUm,[B,K,'6125']]],[[U,'ETRS89_EPSG_Arctic_zone_5_47',CcG,BVD,BYj,BYi,BYh,But,Bwr,BYS,BUa]]],['6124',Aqf+' +lon_0=-155'+pn+BMB,[[U,'WGS 84 /'+" "+Aki+' zone 4-12',ClU,BVG,BYw,BaX,BaW,CPm,Bgi,BZm,CVy,BUj,BUm,Bkn]],[[U,'WGS_84_EPSG_Arctic_zone_4_12',Cbp,BVD,BYw,BaX,BaW,CPm,Bgi,BZm,BUa]]],['6123',ArS+Aga+eg+BSL,[[U,'WGS 84 /'+" "+Aki+' zone 3-23',ClU,BVG,BbJ,BYR,BbI,BZK,BbT,BbH,CVy,BUj,BUm,Bkm]],[[U,'WGS_84_EPSG_Arctic_zone_3_23',Cbp,BVD,BbJ,BYR,BbI,BZK,BbT,BbH,BUa]]],['6122',ArS+' +lon_0=176'+eh+BSL,[[U,'WGS 84 /'+" "+Aki+' zone 3-21',ClU,BVG,BbJ,BYR,BbI,CQT,BbS,BbH,CVy,BUj,BUm,Bkk]],[[U,'WGS_84_EPSG_Arctic_zone_3_21',Cbp,BVD,BbJ,BYR,BbI,CQT,BbS,BbH,BUa]]],['6121',AtJ+tP+pn+BKI+a,[[U,'WGS 84 /'+" "+Aki+' zone 2-12',ClU,BVG,BdR,BdQ,BdP,Bka,Bgi,BcP,CVy,BUj,BUm,CDL]],[[U,'WGS_84_EPSG_Arctic_zone_2_12',Cbp,BVD,BdR,BdQ,BdP,Bka,Bgi,BcP,BUa]]],['6120',AtJ+' +lon_0=166'+po+BKI+a,[[U,'WGS 84 /'+" "+Aki+' zone 2-10',ClU,BVG,BdR,BdQ,BdP,Brk,Bhd,BcP,CVy,BUj,BUm,CQt]],[[U,'WGS_84_EPSG_Arctic_zone_2_10',Cbp,BVD,BdR,BdQ,BdP,Brk,Bhd,BcP,BUa]]],['6119',AtJ+' +lon_0=133'+ei+BKI+a,[[U,'WGS 84 /'+" "+Aki+' zone 2-28',ClU,BVG,BdR,BdQ,BdP,CQS,Bbm,BcP,CVy,BUj,BUm,[B,K,'6119']]],[[U,'WGS_84_EPSG_Arctic_zone_2_28',Cbp,BVD,BdR,BdQ,BdP,CQS,Bbm,BcP,BUa]]],['6118',BHK+xj+eh+BNh+a,[[U,'WGS 84 /'+" "+Aki+' zone 1-21',ClU,BVG,Blw,Blv,Blu,BkA,BbS,BYL,CVy,BUj,BUm,[B,K,'6118']]],[[U,'WGS_84_EPSG_Arctic_zone_1_21',Cbp,BVD,Blw,Blv,Blu,BkA,BbS,BYL,BUa]]],['6117',BHK+ya+Zm+BNh+a,[[U,'WGS 84 /'+" "+Aki+' zone 1-31',ClU,BVG,Blw,Blv,Blu,Beg,BaY,BYL,CVy,BUj,BUm,[B,K,'6117']]],[[U,'WGS_84_EPSG_Arctic_zone_1_31',Cbp,BVD,Blw,Blv,Blu,Beg,BaY,BYL,BUa]]],['6116',BHK+eX+aw+BNh+a,[[U,'WGS 84 /'+" "+Aki+' zone 1-29',ClU,BVG,Blw,Blv,Blu,BYP,Baq,BYL,CVy,BUj,BUm,[B,K,'6116']]],[[U,'WGS_84_EPSG_Arctic_zone_1_29',Cbp,BVD,Blw,Blv,Blu,BYP,Baq,BYL,BUa]]],['6115',BHK+gR+ej+BNh+a,[[U,'WGS 84 /'+" "+Aki+' zone 1-27',ClU,BVG,Blw,Blv,Blu,BYz,Bbl,BYL,CVy,BUj,BUm,[B,K,'6115']]],[[U,'WGS_84_EPSG_Arctic_zone_1_27',Cbp,BVD,Blw,Blv,Blu,BYz,Bbl,BYL,BUa]]],['6114',AsL+Aca+pp+BSW,[[U,Cc+' /'+" "+Aki+' zone 6-24',Cli,BVG,BcT,BcS,BcR,BWo,Bgj,BcQ,CVy,BUj,BUm,[B,K,'6114']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_6_24',CcM,BVD,BcT,BcS,BcR,BWo,Bgj,BcQ,BUa]]],['6113',AsL+vp+cv+BSW,[[U,Cc+' /'+" "+Aki+' zone 6-22',Cli,BVG,BcT,BcS,BcR,BdW,Baz,BcQ,CVy,BUj,BUm,[B,K,'6113']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_6_22',CcM,BVD,BcT,BcS,BcR,BdW,Baz,BcQ,BUa]]],['6112',AsL+' +lon_0=-113'+cw+BSW,[[U,Cc+' /'+" "+Aki+' zone 6-20',Cli,BVG,BcT,BcS,BcR,CPl,Bay,BcQ,CVy,BUj,BUm,[B,K,'6112']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_6_20',CcM,BVD,BcT,BcS,BcR,CPl,Bay,BcQ,BUa]]],['6111',AsL+' +lon_0=-132'+ek+BSW,[[U,Cc+' /'+" "+Aki+' zone 6-18',Cli,BVG,BcT,BcS,BcR,[A,E,rI],BbQ,BcQ,CVy,BUj,BUm,[B,K,'6111']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_6_18',CcM,BVD,BcT,BcS,BcR,[A,E,rI],BbQ,BcQ,BUa]]],['6110',ApA+' +lon_0=-71'+tQ+BRo,[[U,Cc+' /'+" "+Aki+' zone 5-39',Cli,BVG,BYj,BYi,BYh,[A,E,AIr],BkZ,BYS,CVy,BUj,BUm,[B,K,'6110']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_5_39',CcM,BVD,BYj,BYi,BYh,[A,E,AIr],BkZ,BYS,BUa]]],['6109',ApA+' +lon_0=-91'+tR+BRo,[[U,Cc+' /'+" "+Aki+' zone 5-37',Cli,BVG,BYj,BYi,BYh,[A,E,ABw],BkY,BYS,CVy,BUj,BUm,[B,K,'6109']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_5_37',CcM,BVD,BYj,BYi,BYh,[A,E,ABw],BkY,BYS,BUa]]],['6108',ApA+nM+tS+BRo,[[U,Cc+' /'+" "+Aki+' zone 5-35',Cli,BVG,BYj,BYi,BYh,BXs,BkX,BYS,CVy,BUj,BUm,[B,K,'6108']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_5_35',CcM,BVD,BYj,BYi,BYh,BXs,BkX,BYS,BUa]]],['6107',ApA+' +lon_0=-131'+hi+BRo,[[U,Cc+' /'+" "+Aki+' zone 5-33',Cli,BVG,BYj,BYi,BYh,CPk,BdO,BYS,CVy,BUj,BUm,[B,K,'6107']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_5_33',CcM,BVD,BYj,BYi,BYh,CPk,BdO,BYS,BUa]]],['6106',Aqf+vo+ek+Zl+j+c+q+a,[[U,Cc+' /'+" "+Aki+' zone 4-18',Cli,BVG,BYw,BaX,BaW,BdZ,BbQ,BZm,CVy,BUj,BUm,[B,K,'6106']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_4_18',CcM,BVD,BYw,BaX,BaW,BdZ,BbQ,BZm,BUa]]],['6105',Aqf+' +lon_0=-104'+ef+Zl+j+c+q+a,[[U,Cc+' /'+" "+Aki+' zone 4-16',Cli,BVG,BYw,BaX,BaW,[A,E,AJC],BbP,BZm,CVy,BUj,BUm,[B,K,'6105']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_4_16',CcM,BVD,BYw,BaX,BaW,[A,E,AJC],BbP,BZm,BUa]]],['6104',Aqf+Agb+av+Zl+j+c+q+a,[[U,Cc+' /'+" "+Aki+' zone 4-14',Cli,BVG,BYw,BaX,BaW,BaA,Bad,BZm,CVy,BUj,BUm,[B,K,'6104']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_4_14',CcM,BVD,BYw,BaX,BaW,BaA,Bad,BZm,BUa]]],['6103',ArS+rz+aw+fU+j+c+q+a,[[U,Cc+' /'+" "+Aki+' zone 3-29',Cli,BVG,BbJ,BYR,BbI,BWZ,Baq,BbH,CVy,BUj,BUm,[B,K,'6103']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_3_29',CcM,BVD,BbJ,BYR,BbI,BWZ,Baq,BbH,BUa]]],['6102',ArS+kA+ej+fU+j+c+q+a,[[U,Cc+' /'+" "+Aki+' zone 3-27',Cli,BVG,BbJ,BYR,BbI,BXU,Bbl,BbH,CVy,BUj,BUm,[B,K,'6102']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_3_27',CcM,BVD,BbJ,BYR,BbI,BXU,Bbl,BbH,BUa]]],['6101',ArS+Agb+el+fU+j+c+q+a,[[U,Cc+' /'+" "+Aki+' zone 3-25',Cli,BVG,BbJ,BYR,BbI,BaA,Bbk,BbH,CVy,BUj,BUm,[B,K,'6101']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_3_25',CcM,BVD,BbJ,BYR,BbI,BaA,Bbk,BbH,BUa]]],['6100',AtJ+Aca+ef+iM+j+c+q+a,[[U,Cc+' /'+" "+Aki+' zone 2-16',Cli,BVG,BdR,BdQ,BdP,BWo,BbP,BcP,CVy,BUj,BUm,[B,K,'6100']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_2_16',CcM,BVD,BdR,BdQ,BdP,BWo,BbP,BcP,BUa]]],['6099',AtJ+ATb+av+iM+j+c+q+a,[[U,Cc+' /'+" "+Aki+' zone 2-14',Cli,BVG,BdR,BdQ,BdP,BoU,Bad,BcP,CVy,BUj,BUm,[B,K,'6099']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_2_14',CcM,BVD,BdR,BdQ,BdP,BoU,Bad,BcP,BUa]]],['6098',BHK+PQ+eg+TE+j+c+q+a,[[U,Cc+' /'+" "+Aki+' zone 1-23',Cli,BVG,Blw,Blv,Blu,BWb,BbT,BYL,CVy,BUj,BUm,[B,K,'6098']]],[[U,'NAD83_CSRS_EPSG_Arctic_zone_1_23',CcM,BVD,Blw,Blv,Blu,BWb,BbT,BYL,BUa]]],['6097',AsL+AHL+ef+BSW,[[U,AL+' /'+" "+Aki+' zone 6-16',ClW,BVG,BcT,BcS,BcR,BYy,BbP,BcQ,CVy,BUj,BUm,[B,K,'6097']]],[[U,'NAD83_NSRS2007_EPSG_Arctic_zone_6_16',Cbq,BVD,BcT,BcS,BcR,BYy,BbP,BcQ,BUa]]],['6096',AsL+ATZ+av+BSW,[[U,AL+' /'+" "+Aki+' zone 6-14',ClW,BVG,BcT,BcS,BcR,BaZ,Bad,BcQ,CVy,BUj,BUm,[B,K,'6096']]],[[U,'NAD83_NSRS2007_EPSG_Arctic_zone_6_14',Cbq,BVD,BcT,BcS,BcR,BaZ,Bad,BcQ,BUa]]],['6095',ApA+AHL+Zm+BRo,[[U,AL+' /'+" "+Aki+' zone 5-31',ClW,BVG,BYj,BYi,BYh,BYy,BaY,BYS,CVy,BUj,BUm,[B,K,'6095']]],[[U,'NAD83_NSRS2007_EPSG_Arctic_zone_5_31',Cbq,BVD,BYj,BYi,BYh,BYy,BaY,BYS,BUa]]],['6094',ApA+' +lon_0=-163'+aw+BRo,[[U,AL+' /'+" "+Aki+' zone 5-29',ClW,BVG,BYj,BYi,BYh,CIp,Baq,BYS,CVy,BUj,BUm,[B,K,'6094']]],[[U,'NAD83_NSRS2007_EPSG_Arctic_zone_5_29',Cbq,BVD,BYj,BYi,BYh,CIp,Baq,BYS,BUa]]],['6093',ApA+' +lon_0=179'+ej+BLQ,[[U,'WGS 84 /'+" "+Aki+' zone 5-27',ClU,BVG,BYj,BYi,BYh,Bus,Bbl,BYS,CVy,BUj,BUm,[B,K,'6093']]],[[U,'WGS_84_EPSG_Arctic_zone_5_27',Cbp,BVD,BYj,BYi,BYh,Bus,Bbl,BYS,BUa]]],['6092',ApA+' +lon_0=158'+el+BLQ,[[U,'WGS 84 /'+" "+Aki+' zone 5-25',ClU,BVG,BYj,BYi,BYh,CQR,Bbk,BYS,CVy,BUj,BUm,[B,K,'6092']]],[[U,'WGS_84_EPSG_Arctic_zone_5_25',Cbp,BVD,BYj,BYi,BYh,CQR,Bbk,BYS,BUa]]],['6091',ApA+' +lon_0=137'+eg+BLQ,[[U,'WGS 84 /'+" "+Aki+' zone 5-23',ClU,BVG,BYj,BYi,BYh,[A,E,Ack],BbT,BYS,CVy,BUj,BUm,[B,K,'6091']]],[[U,'WGS_84_EPSG_Arctic_zone_5_23',Cbp,BVD,BYj,BYi,BYh,[A,E,Ack],BbT,BYS,BUa]]],['6090',ApA+' +lon_0=116'+eh+BLQ,[[U,'WGS 84 /'+" "+Aki+' zone 5-21',ClU,BVG,BYj,BYi,BYh,CBA,BbS,BYS,CVy,BUj,BUm,[B,K,'6090']]],[[U,'WGS_84_EPSG_Arctic_zone_5_21',Cbp,BVD,BYj,BYi,BYh,CBA,BbS,BYS,BUa]]],['6089',ApA+' +lon_0=95'+em+BLQ,[[U,'WGS 84 /'+" "+Aki+' zone 5-19',ClU,BVG,BYj,BYi,BYh,CQY,BbR,BYS,CVy,BUj,BUm,[B,K,'6089']]],[[U,'WGS_84_EPSG_Arctic_zone_5_19',Cbp,BVD,BYj,BYi,BYh,CQY,BbR,BYS,BUa]]],['6088',ApA+' +lon_0=74'+hj+BLQ,[[U,'WGS 84 /'+" "+Aki+' zone 5-17',ClU,BVG,BYj,BYi,BYh,BpX,Bcf,BYS,CVy,BUj,BUm,[B,K,'6088']]],[[U,'WGS_84_EPSG_Arctic_zone_5_17',Cbp,BVD,BYj,BYi,BYh,BpX,Bcf,BYS,BUa]]],['6087',ApA+AXK+en+BLQ,[[U,'WGS 84 /'+" "+Aki+' zone 5-15',ClU,BVG,BYj,BYi,BYh,BkW,BbO,BYS,CVy,BUj,BUm,[B,K,'6087']]],[[U,'WGS_84_EPSG_Arctic_zone_5_15',Cbp,BVD,BYj,BYi,BYh,BkW,BbO,BYS,BUa]]],['6086',Aqf+' +lon_0=179'+tT+BMB,[[U,'WGS 84 /'+" "+Aki+' zone 4-40',ClU,BVG,BYw,BaX,BaW,Bus,BkV,BZm,CVy,BUj,BUm,[B,K,'6086']]],[[U,'WGS_84_EPSG_Arctic_zone_4_40',Cbp,BVD,BYw,BaX,BaW,Bus,BkV,BZm,BUa]]],['6085',Aqf+' +lon_0=154'+tU+BMB,[[U,'WGS 84 /'+" "+Aki+' zone 4-38',ClU,BVG,BYw,BaX,BaW,Bsp,BkU,BZm,CVy,BUj,BUm,[B,K,'6085']]],[[U,'WGS_84_EPSG_Arctic_zone_4_38',Cbp,BVD,BYw,BaX,BaW,Bsp,BkU,BZm,BUa]]],['6084',Aqf+' +lon_0=130'+tV+BMB,[[U,'WGS 84 /'+" "+Aki+' zone 4-36',ClU,BVG,BYw,BaX,BaW,CQQ,BkT,BZm,CVy,BUj,BUm,[B,K,'6084']]],[[U,'WGS_84_EPSG_Arctic_zone_4_36',Cbp,BVD,BYw,BaX,BaW,CQQ,BkT,BZm,BUa]]],['6083',Aqf+' +lon_0=106'+tW+BMB,[[U,'WGS 84 /'+" "+Aki+' zone 4-34',ClU,BVG,BYw,BaX,BaW,BpW,BkS,BZm,CVy,BUj,BUm,[B,K,'6083']]],[[U,'WGS_84_EPSG_Arctic_zone_4_34',Cbp,BVD,BYw,BaX,BaW,BpW,BkS,BZm,BUa]]],['6082',Aqf+' +lon_0=82'+fy+BMB,[[U,'WGS 84 /'+" "+Aki+' zone 4-32',ClU,BVG,BYw,BaX,BaW,CQX,BcO,BZm,CVy,BUj,BUm,[B,K,'6082']]],[[U,'WGS_84_EPSG_Arctic_zone_4_32',Cbp,BVD,BYw,BaX,BaW,CQX,BcO,BZm,BUa]]],['6081',Aqf+' +lon_0=58'+fz+BMB,[[U,'WGS 84 /'+" "+Aki+' zone 4-30',ClU,BVG,BYw,BaX,BaW,[A,E,LV],BcN,BZm,CVy,BUj,BUm,[B,K,'6081']]],[[U,'WGS_84_EPSG_Arctic_zone_4_30',Cbp,BVD,BYw,BaX,BaW,[A,E,LV],BcN,BZm,BUa]]],['6080',ArS+' +lon_0=145'+em+BSL,[[U,'WGS 84 /'+" "+Aki+' zone 3-19',ClU,BVG,BbJ,BYR,BbI,Bwq,BbR,BbH,CVy,BUj,BUm,[B,K,'6080']]],[[U,'WGS_84_EPSG_Arctic_zone_3_19',Cbp,BVD,BbJ,BYR,BbI,Bwq,BbR,BbH,BUa]]],['6079',ArS+gu+hj+BSL,[[U,'WGS 84 /'+" "+Aki+' zone 3-17',ClU,BVG,BbJ,BYR,BbI,BZy,Bcf,BbH,CVy,BUj,BUm,[B,K,'6079']]],[[U,'WGS_84_EPSG_Arctic_zone_3_17',Cbp,BVD,BbJ,BYR,BbI,BZy,Bcf,BbH,BUa]]],['6078',ArS+' +lon_0=83'+en+BSL,[[U,'WGS 84 /'+" "+Aki+' zone 3-15',ClU,BVG,BbJ,BYR,BbI,CQW,BbO,BbH,CVy,BUj,BUm,[B,K,'6078']]],[[U,'WGS_84_EPSG_Arctic_zone_3_15',Cbp,BVD,BbJ,BYR,BbI,CQW,BbO,BbH,BUa]]],['6077',ArS+' +lon_0=52'+cx+BSL,[[U,'WGS 84 /'+" "+Aki+' zone 3-13',ClU,BVG,BbJ,BYR,BbI,[A,E,YA],Bax,BbH,CVy,BUj,BUm,[B,K,'6077']]],[[U,'WGS_84_EPSG_Arctic_zone_3_13',Cbp,BVD,BbJ,BYR,BbI,[A,E,YA],Bax,BbH,BUa]]],['6076',AtJ+cl+eo+BKI+a,[[U,'WGS 84 /'+" "+Aki+' zone 2-26',ClU,BVG,BdR,BdQ,BdP,BWk,Bbj,BcP,CVy,BUj,BUm,[B,K,'6076']]],[[U,'WGS_84_EPSG_Arctic_zone_2_26',Cbp,BVD,BdR,BdQ,BdP,BWk,Bbj,BcP,BUa]]],['6075',AtJ+' +lon_0=53'+pp+BKI+a,[[U,'WGS 84 /'+" "+Aki+' zone 2-24',ClU,BVG,BdR,BdQ,BdP,[A,E,rF],Bgj,BcP,CVy,BUj,BUm,[B,K,'6075']]],[[U,'WGS_84_EPSG_Arctic_zone_2_24',Cbp,BVD,BdR,BdQ,BdP,[A,E,rF],Bgj,BcP,BUa]]],['6074',ApA+' +lon_0=34'+cx+BRo,[[U,ED+' /'+" "+Aki+' zone 5-13',Cld,BVG,BYj,BYi,BYh,BoT,Bax,BYS,CVy,BUj,BUm,[B,K,'6074']]],[[U,'ETRS89_EPSG_Arctic_zone_5_13',CcG,BVD,BYj,BYi,BYh,BoT,Bax,BYS,BUa]]],['6073',ApA+' +lon_0=14'+kW+BRo,[[U,ED+' /'+" "+Aki+' zone 5-11',Cld,BVG,BYj,BYi,BYh,Brj,Bdn,BYS,CVy,BUj,BUm,[B,K,'6073']]],[[U,'ETRS89_EPSG_Arctic_zone_5_11',CcG,BVD,BYj,BYi,BYh,Brj,Bdn,BYS,BUa]]],['6072',Aqf+' +lon_0=34'+ei+Zl+j+c+q+a,[[U,ED+' /'+" "+Aki+' zone 4-28',Cld,BVG,BYw,BaX,BaW,BoT,Bbm,BZm,CVy,BUj,BUm,[B,K,'6072']]],[[U,'ETRS89_EPSG_Arctic_zone_4_28',CcG,BVD,BYw,BaX,BaW,BoT,Bbm,BZm,BUa]]],['6071',Aqf+rD+eo+Zl+j+c+q+a,[[U,ED+' /'+" "+Aki+' zone 4-26',Cld,BVG,BYw,BaX,BaW,BcM,Bbj,BZm,CVy,BUj,BUm,[B,K,'6071']]],[[U,'ETRS89_EPSG_Arctic_zone_4_26',CcG,BVD,BYw,BaX,BaW,BcM,Bbj,BZm,BUa]]],['6070',ArS+aK+kW+fU+j+c+q+a,[[U,ED+' /'+" "+Aki+' zone 3-11',Cld,BVG,BbJ,BYR,BbI,BWR,Bdn,BbH,CVy,BUj,BUm,[B,K,'6070']]],[[U,'ETRS89_EPSG_Arctic_zone_3_11',CcG,BVD,BbJ,BYR,BbI,BWR,Bdn,BbH,BUa]]],['6069',AtJ+' +lon_0=16'+cv+iM+j+c+q+a,[[U,ED+' /'+" "+Aki+' zone 2-22',Cld,BVG,BdR,BdQ,BdP,Bri,Baz,BcP,CVy,BUj,BUm,[B,K,'6069']]],[[U,'ETRS89_EPSG_Arctic_zone_2_22',CcG,BVD,BdR,BdQ,BdP,Bri,Baz,BcP,BUa]]],['6068',AU+AaA+AaB+AaC+' +lon_0=-37'+cv+' +y_0=8500000'+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 8-22',Cln,BVG,CIn,CIm,CIl,CAz,Baz,CIk,CVy,BUj,BUm,[B,K,'6068']]],[[U,'GR96_EPSG_Arctic_zone_8_22',Ccb,BVD,CIn,CIm,CIl,CAz,Baz,CIk,BUa]]],['6067',AU+AaA+AaB+AaC+' +lon_0=-52'+cw+' +y_0=8500000'+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 8-20',Cln,BVG,CIn,CIm,CIl,CAy,Bay,CIk,CVy,BUj,BUm,[B,K,'6067']]],[[U,'GR96_EPSG_Arctic_zone_8_20',Ccb,BVD,CIn,CIm,CIl,CAy,Bay,CIk,BUa]]],['6066',AU+' +lat_1=67'+AaD+AaE+' +lon_0=-34'+cx+' +y_0=7500000'+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 7-13',Cln,BVG,CIj,CIi,CIh,CQP,Bax,Bwp,CVy,BUj,BUm,[B,K,'6066']]],[[U,'GR96_EPSG_Arctic_zone_7_13',Ccb,BVD,CIj,CIi,CIh,CQP,Bax,Bwp,BUa]]],['6065',AU+' +lat_1=67'+AaD+AaE+' +lon_0=-51'+kW+' +y_0=7500000'+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 7-11',Cln,BVG,CIj,CIi,CIh,BXm,Bdn,Bwp,CVy,BUj,BUm,[B,K,'6065']]],[[U,'GR96_EPSG_Arctic_zone_7_11',Ccb,BVD,CIj,CIi,CIh,BXm,Bdn,Bwp,BUa]]],['6064',AsL+' +lon_0=-20'+fz+BSW,[[U,ii+' /'+" "+Aki+' zone 6-30',Cln,BVG,BcT,BcS,BcR,CQO,BcN,BcQ,CVy,BUj,BUm,[B,K,'6064']]],[[U,'GR96_EPSG_Arctic_zone_6_30',Ccb,BVD,BcT,BcS,BcR,CQO,BcN,BcQ,BUa]]],['6063',AsL+' +lon_0=-38'+ei+BSW,[[U,ii+' /'+" "+Aki+' zone 6-28',Cln,BVG,BcT,BcS,BcR,[A,E,qF],Bbm,BcQ,CVy,BUj,BUm,[B,K,'6063']]],[[U,'GR96_EPSG_Arctic_zone_6_28',Ccb,BVD,BcT,BcS,BcR,[A,E,qF],Bbm,BcQ,BUa]]],['6062',AsL+' +lon_0=-56'+eo+BSW,[[U,ii+' /'+" "+Aki+' zone 6-26',Cln,BVG,BcT,BcS,BcR,BpV,Bbj,BcQ,CVy,BUj,BUm,[B,K,'6062']]],[[U,'GR96_EPSG_Arctic_zone_6_26',Ccb,BVD,BcT,BcS,BcR,BpV,Bbj,BcQ,BUa]]],['6061',ApA+' +lon_0=-22'+tX+BRo,[[U,ii+' /'+" "+Aki+' zone 5-45',Cln,BVG,BYj,BYi,BYh,[A,E,dV],BkR,BYS,CVy,BUj,BUm,[B,K,'6061']]],[[U,'GR96_EPSG_Arctic_zone_5_45',Ccb,BVD,BYj,BYi,BYh,[A,E,dV],BkR,BYS,BUa]]],['6060',ApA+' +lon_0=-42'+tY+BRo,[[U,ii+' /'+" "+Aki+' zone 5-43',Cln,BVG,BYj,BYi,BYh,CAx,BkQ,BYS,CVy,BUj,BUm,[B,K,'6060']]],[[U,'GR96_EPSG_Arctic_zone_5_43',Ccb,BVD,BYj,BYi,BYh,CAx,BkQ,BYS,BUa]]],['6059',ApA+vr+tZ+BRo,[[U,ii+' /'+" "+Aki+' zone 5-41',Cln,BVG,BYj,BYi,BYh,BdN,BkP,BYS,CVy,BUj,BUm,[B,K,'6059']]],[[U,'GR96_EPSG_Arctic_zone_5_41',Ccb,BVD,BYj,BYi,BYh,BdN,BkP,BYS,BUa]]],['6058',Aqf+' +lon_0=-14'+pp+Zl+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 4-24',Cln,BVG,BYw,BaX,BaW,CQN,Bgj,BZm,CVy,BUj,BUm,[B,K,'6058']]],[[U,'GR96_EPSG_Arctic_zone_4_24',Ccb,BVD,BYw,BaX,BaW,CQN,Bgj,BZm,BUa]]],['6057',Aqf+Acb+cv+Zl+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 4-22',Cln,BVG,BYw,BaX,BaW,BYx,Baz,BZm,CVy,BUj,BUm,[B,K,'6057']]],[[U,'GR96_EPSG_Arctic_zone_4_22',Ccb,BVD,BYw,BaX,BaW,BYx,Baz,BZm,BUa]]],['6056',Aqf+' +lon_0=-64'+cw+Zl+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 4-20',Cln,BVG,BYw,BaX,BaW,CQM,Bay,BZm,CVy,BUj,BUm,[B,K,'6056']]],[[U,'GR96_EPSG_Arctic_zone_4_20',Ccb,BVD,BYw,BaX,BaW,CQM,Bay,BZm,BUa]]],['6055',ArS+' +lon_0=-10'+hi+fU+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 3-33',Cln,BVG,BbJ,BYR,BbI,[A,E,Acl],BdO,BbH,CVy,BUj,BUm,[B,K,'6055']]],[[U,'GR96_EPSG_Arctic_zone_3_33',Ccb,BVD,BbJ,BYR,BbI,[A,E,Acl],BdO,BbH,BUa]]],['6054',ArS+Acb+Zm+fU+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 3-31',Cln,BVG,BbJ,BYR,BbI,BYx,BaY,BbH,CVy,BUj,BUm,BqK]],[[U,'GR96_EPSG_Arctic_zone_3_31',Ccb,BVD,BbJ,BYR,BbI,BYx,BaY,BbH,BUa]]],['6053',ArS+rz+aw+fU+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 3-29',Cln,BVG,BbJ,BYR,BbI,BWZ,Baq,BbH,CVy,BUj,BUm,BqJ]],[[U,'GR96_EPSG_Arctic_zone_3_29',Ccb,BVD,BbJ,BYR,BbI,BWZ,Baq,BbH,BUa]]],['6052',AtJ+' +lon_0=-12'+cw+iM+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 2-20',Cln,BVG,BdR,BdQ,BdP,Bur,Bay,BcP,CVy,BUj,BUm,CDK]],[[U,'GR96_EPSG_Arctic_zone_2_20',Ccb,BVD,BdR,BdQ,BdP,Bur,Bay,BcP,BUa]]],['6051',AtJ+' +lon_0=-52'+ek+iM+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 2-18',Cln,BVG,BdR,BdQ,BdP,CAy,BbQ,BcP,CVy,BUj,BUm,[B,K,'6051']]],[[U,'GR96_EPSG_Arctic_zone_2_18',Ccb,BVD,BdR,BdQ,BdP,CAy,BbQ,BcP,BUa]]],['6050',BHK+' +lon_0=-30'+el+TE+j+c+q+a,[[U,ii+' /'+" "+Aki+' zone 1-25',Cln,BVG,Blw,Blv,Blu,CAw,Bbk,BYL,CVy,BUj,BUm,[B,K,'6050']]],[[U,'GR96_EPSG_Arctic_zone_1_25',Ccb,BVD,Blw,Blv,Blu,CAw,Bbk,BYL,BUa]]],['5940',BEu+UW+BHy+q+a,[[U,'WGS 84 /'+" "+K+' Russia Polar'+RQ,ClU,BcF,Bcw,BWK,BoS,BVW,BYH,CVy,BUl,BUk,[B,K,'5940']]],[[U,'WGS_84_EPSG_Russia_Polar_Stereographic',Cbp,BuP,Buq,BWK,BVW,BYH,BUa]]],['5939',BEu+AIb+BHy+q+a,[[U,'WGS 84 /'+" "+K+' Norway Polar'+RQ,ClU,BcF,Bcw,Bef,BoS,BVW,BYH,CVy,BUl,BUk,[B,K,'5939']]],[[U,'WGS_84_EPSG_Norway_Polar_Stereographic',Cbp,BuP,Buq,Bef,BVW,BYH,BUa]]],['5938',BEu+' +lon_0=-33'+BHy+q+a,[[U,'WGS 84 /'+" "+K+' Greenland Polar'+RQ,ClU,BcF,Bcw,BZx,BoS,BVW,BYH,CVy,BUl,BUk,[B,K,'5938']]],[[U,'WGS_84_EPSG_Greenland_Polar_Stereographic',Cbp,BuP,Buq,BZx,BVW,BYH,BUa]]],['5937',BEu+Ql+BHy+q+a,[[U,'WGS 84 /'+" "+K+' Canada Polar'+RQ,ClU,BcF,Bcw,BXb,BoS,BVW,BYH,CVy,BUl,BUk,[B,K,'5937']]],[[U,'WGS_84_EPSG_Canada_Polar_Stereographic',Cbp,BuP,Buq,BXb,BVW,BYH,BUa]]],['5936',BEu+xj+BHy+q+a,[[U,'WGS 84 /'+" "+K+' Alaska Polar'+RQ,ClU,BcF,Bcw,BkA,BoS,BVW,BYH,CVy,BUl,BUk,[B,K,'5936']]],[[U,'WGS_84_EPSG_Alaska_Polar_Stereographic',Cbp,BuP,Buq,BkA,BVW,BYH,BUa]]],['5935',AU+' +lat_1=69 +lat_2=61'+gj+nJ+Aky,[[U,'WGS 84 /'+" "+AsE+' zone C5',ClU,BVG,BoR,BoQ,BoP,BXo,BUy,BUT,CVy,BUj,BUm,[B,K,'5935']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_C5',Cbp,BVD,BoR,BoQ,BoP,BXo,BUy,BUT,BUa]]],['5934',AU+' +lat_1=69 +lat_2=61'+gj+UW+Aky,[[U,'WGS 84 /'+" "+AsE+' zone C4',ClU,BVG,BoR,BoQ,BoP,BWK,BUy,BUT,CVy,BUj,BUm,[B,K,'5934']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_C4',Cbp,BVD,BoR,BoQ,BoP,BWK,BUy,BUT,BUa]]],['5933',AU+' +lat_1=69 +lat_2=61'+gj+fN+Aky,[[U,'WGS 84 /'+" "+AsE+' zone C3',ClU,BVG,BoR,BoQ,BoP,BWg,BUy,BUT,CVy,BUj,BUm,[B,K,'5933']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_C3',Cbp,BVD,BoR,BoQ,BoP,BWg,BUy,BUT,BUa]]],['5932',AU+' +lat_1=69 +lat_2=61'+gj+Acb+Aky,[[U,'WGS 84 /'+" "+AsE+' zone C2',ClU,BVG,BoR,BoQ,BoP,BYx,BUy,BUT,CVy,BUj,BUm,[B,K,'5932']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_C2',Cbp,BVD,BoR,BoQ,BoP,BYx,BUy,BUT,BUa]]],['5931',AU+' +lat_1=69 +lat_2=61'+gj+nM+Aky,[[U,'WGS 84 /'+" "+AsE+' zone C1',ClU,BVG,BoR,BoQ,BoP,BXs,BUy,BUT,CVy,BUj,BUm,[B,K,'5931']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_C1',Cbp,BVD,BoR,BoQ,BoP,BXs,BUy,BUT,BUa]]],['5930',AmZ+' +lat_2=69'+gk+nJ+Aky,[[U,'WGS 84 /'+" "+AsE+' zone B5',ClU,BVG,BYw,BoO,BoN,BXo,BUy,BUT,CVy,BUj,BUm,[B,K,'5930']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_B5',Cbp,BVD,BYw,BoO,BoN,BXo,BUy,BUT,BUa]]],['5929',AmZ+' +lat_2=69'+gk+UW+Aky,[[U,'WGS 84 /'+" "+AsE+' zone B4',ClU,BVG,BYw,BoO,BoN,BWK,BUy,BUT,CVy,BUj,BUm,[B,K,'5929']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_B4',Cbp,BVD,BYw,BoO,BoN,BWK,BUy,BUT,BUa]]],['5928',AmZ+' +lat_2=69'+gk+fN+Aky,[[U,'WGS 84 /'+" "+AsE+' zone B3',ClU,BVG,BYw,BoO,BoN,BWg,BUy,BUT,CVy,BUj,BUm,[B,K,'5928']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_B3',Cbp,BVD,BYw,BoO,BoN,BWg,BUy,BUT,BUa]]],['5927',AmZ+' +lat_2=69'+gk+Acb+Aky,[[U,'WGS 84 /'+" "+AsE+' zone B2',ClU,BVG,BYw,BoO,BoN,BYx,BUy,BUT,CVy,BUj,BUm,[B,K,'5927']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_B2',Cbp,BVD,BYw,BoO,BoN,BYx,BUy,BUT,BUa]]],['5926',AmZ+' +lat_2=69'+gk+nM+Aky,[[U,'WGS 84 /'+" "+AsE+' zone B1',ClU,BVG,BYw,BoO,BoN,BXs,BUy,BUT,CVy,BUj,BUm,[B,K,'5926']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_B1',Cbp,BVD,BYw,BoO,BoN,BXs,BUy,BUT,BUa]]],['5925',AU+' +lat_1=85'+fP+gl+nJ+Aky,[[U,'WGS 84 /'+" "+AsE+' zone A5',ClU,BVG,BoM,BYR,BoL,BXo,BUy,BUT,CVy,BUj,BUm,[B,K,'5925']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_A5',Cbp,BVD,BoM,BYR,BoL,BXo,BUy,BUT,BUa]]],['5924',AU+' +lat_1=85'+fP+gl+UW+Aky,[[U,'WGS 84 /'+" "+AsE+' zone A4',ClU,BVG,BoM,BYR,BoL,BWK,BUy,BUT,CVy,BUj,BUm,[B,K,'5924']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_A4',Cbp,BVD,BoM,BYR,BoL,BWK,BUy,BUT,BUa]]],['5923',AU+' +lat_1=85'+fP+gl+fN+Aky,[[U,'WGS 84 /'+" "+AsE+' zone A3',ClU,BVG,BoM,BYR,BoL,BWg,BUy,BUT,CVy,BUj,BUm,[B,K,'5923']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_A3',Cbp,BVD,BoM,BYR,BoL,BWg,BUy,BUT,BUa]]],['5922',AU+' +lat_1=85'+fP+gl+Acb+Aky,[[U,'WGS 84 /'+" "+AsE+' zone A2',ClU,BVG,BoM,BYR,BoL,BYx,BUy,BUT,CVy,BUj,BUm,[B,K,'5922']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_A2',Cbp,BVD,BoM,BYR,BoL,BYx,BUy,BUT,BUa]]],['5921',AU+' +lat_1=85'+fP+gl+nM+Aky,[[U,'WGS 84 /'+" "+AsE+' zone A1',ClU,BVG,BoM,BYR,BoL,BXs,BUy,BUT,CVy,BUj,BUm,[B,K,'5921']]],[[U,'WGS_84_EPSG_Arctic_Regional_zone_A1',Cbp,BVD,BoM,BYR,BoL,BXs,BUy,BUT,BUa]]],['5890',Apf+' +lat_ts=70'+eX+' +k=1'+Ajh+' +a=6378273'+AJR+q+a,[[U,'JAXA Snow Depth Polar'+RQ+QM,Cme,BcF,CQc,BYP,BUf,BUy,BUT,CVy,BUl,BUk,[B,K,'5890']]],[[U,'JAXA_Snow_Depth_Polar_Stereographic_North',CeS,BuP,CQb,BYP,BUy,BUT,BUa]]],['5887',AxL+HH+BLt+q+a,[[U,'TGD2005 / Tonga Map'+op,Crl,BUd,BUX,BYF,BUg,BWL,Bdc,CVy,BUj,BUm,[B,K,'5887']]],[[U,'TGD2005_Tonga_Map_Grid',[S,'GCS_TGD2005',[V,AGH,BUh],BUU,BUW],BUd,BUX,BYF,BUg,BWL,Bdc,BUa]]],['5880',AbH+At+vs+pl+Ati+q+a,[[U,SD+' 2000 / Brazil'+" "+hX,Clk,Bxq,BUX,BdM,Bei,BUo,CVy,BUl,BUk,[B,K,'5880']]],[[U,'SIRGAS_2000_Brazil_Polyconic',CcU,Bxq,BUX,BdM,Bei,BUo,BUa]]],['5879',BKH+AAs+q+a,[[U,'Cadastre 1997 / UTM zone 38S',Cqg,BUd,BUX,BWe,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5879']]],[[U,'Cadastre_1997_UTM_zone_38S',[S,'GCS_Cadastre 1997',[V,Adq,BUs],BUU,BUW],BUd,BUX,BWe,BUg,BUc,BUo,BUa]]],['5877',Aku+BSs,[[U,Ys+' / UTM zone 20S',Cmd,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5877']]],[[U,'SAD69_96_UTM_zone_20S',CeA,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['5876',AlG+BSs,[[U,Ys+' / UTM zone 19S',Cmd,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5876']]],[[U,'SAD69_96_UTM_zone_19S',CeA,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['5875',AlJ+BSs,[[U,Ys+' / UTM zone 18S',Cmd,BUd,BUX,BWo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5875']]],[[U,'SAD69_96_UTM_zone_18S',CeA,BUd,BUX,BWo,BUg,BUc,BUo,BUa]]],['5858',Alb+BSs,[[U,Ys+' / UTM zone 22S',Cmd,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5858']]],[[U,'SAD69_96_UTM_zone_22S',CeA,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['5844',ArX+BTw,[[U,'RGRDC 2005 / Congo TM zone 30',Clv,BUd,BUX,BYz,BUt,BUc,BUo,CVy,BUl,BUk,[B,K,'5844']]],[[U,'RGRDC_2005_Congo_TM_zone_30',Ccq,BUd,BUX,BYz,BUt,BUc,BUo,BUa]]],['5842',AqA+BLz,[[U,'WGS 84 / TM 12 SE',ClU,BUd,BUX,BYZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5842']]],[[U,'WGS_84_TM_12_SE',Cbp,BUd,BUX,BYZ,BUg,BUc,BUo,BUa]]],['5839',AlW+BEd,[[U,xP+' / UTM zone 17S',CoH,BUd,BUX,BVm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5839']]],[[U,'Peru96_UTM_zone_17S',ChH,BUd,BUX,BVm,BUg,BUc,BUo,BUa]]],['5837',AnK+BAy,[[U,'Yemen NGN96 / UTM zone 40N',Cmw,BUd,BUX,BXz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'5837']]],[[U,'Yemen_NGN96_UTM_zone_40N',Ceb,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['5836',AmP+BAy,[[U,'Yemen NGN96 / UTM zone 37N',Cmw,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'5836']]],[[U,'Yemen_NGN96_UTM_zone_37N',Ceb,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['5825',l+' +lat_0=-35.31773627777778 +lon_0=149.0092948305555 +k=1.000086'+BBo+ApN+q+a,[[U,pt+' / ACT Standard'+op,CmM,BUd,[A,C,AKX],[A,E,AOb],CFm,BVP,BkO,CVy,BUj,BUm,[B,K,'5825']]],[[U,'AGD66_ACT_Standard_Grid',CdU,BUd,[A,C,AKX],[A,E,AOb],CFm,BVP,BkO,BUa]]],['5700',AV+' +zone=1'+BEd,[[U,Gr+' / UTM zone 1S',Clj,BUd,BUX,BYF,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5700']]],[[U,'NZGD_2000_UTM_Zone_1S',CcR,BUd,BUX,BYF,BUg,BUc,BUo,BUa]]],['5685',ApP+' +k=1'+AmY+Apx,[[U,AJs+' /'+Ajc+' zone 5'+ss,Cne,BUd,BUX,BWH,BUf,BYv,BUT,CVy,BUj,BUm,[B,K,'5685']]],[[U,'DB_REF_3_degree_Gauss_Kruger_zone_5_E_N',CgG,BUd,BUX,BWH,BUf,BYv,BUT,BUa]]],['5684',AqA+' +k=1'+BHx+a,[[U,AJs+' /'+Ajc+' zone 4'+ss,Cne,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,BUj,BUm,[B,K,'5684']]],[[U,'DB_REF_3_degree_Gauss_Kruger_zone_4_E_N',CgG,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['5683',Aqa+' +k=1'+Amo+Apx,[[U,AJs+' /'+Ajc+' zone 3'+ss,Cne,BUd,BUX,BWO,BUf,BXO,BUT,CVy,BUj,BUm,[B,K,'5683']]],[[U,'DB_REF_3_degree_Gauss_Kruger_zone_3_E_N',CgG,BUd,BUX,BWO,BUf,BXO,BUT,BUa]]],['5682',AjX+' +lon_0=6 +k=1'+AmF+Apx,[[U,AJs+' /'+Ajc+' zone 2'+ss,Cne,BUd,BUX,Blt,BUf,BXy,BUT,CVy,BUj,BUm,[B,K,'5682']]],[[U,'DB_REF_3_degree_Gauss_Kruger_zone_2_E_N',CgG,BUd,BUX,Blt,BUf,BXy,BUT,BUa]]],['5680',BKG+' +k=1'+Ald+BJe,[[U,'DHDN /'+Ajc+' zone 1'+ss,CmJ,BUd,BUX,BXt,BUf,BWL,BUT,CVy,BUj,BUm,[B,K,'5680']]],[[U,'DHDN_3_degree_Gauss_Kruger_zone_1_E_N',Cdc,BUd,BUX,BXt,BUf,BWL,BUT,BUa]]],['5679',ApP+' +k=1'+AmY+BJe,[[U,'DHDN /'+Ajc+' zone 5'+ss,CmJ,BUd,BUX,BWH,BUf,BYv,BUT,CVy,BUj,BUm,[B,K,'5679']]],[[U,'DHDN_3_degree_Gauss_Kruger_zone_5_E_N',Cdc,BUd,BUX,BWH,BUf,BYv,BUT,BUa]]],['5678',AqA+' +k=1'+Alz+BJe,[[U,'DHDN /'+Ajc+' zone 4'+ss,CmJ,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,BUj,BUm,[B,K,'5678']]],[[U,'DHDN_3_degree_Gauss_Kruger_zone_4_E_N',Cdc,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['5677',Aqa+' +k=1'+Amo+BJe,[[U,'DHDN /'+Ajc+' zone 3'+ss,CmJ,BUd,BUX,BWO,BUf,BXO,BUT,CVy,BUj,BUm,[B,K,'5677']]],[[U,'DHDN_3_degree_Gauss_Kruger_zone_3_E_N',Cdc,BUd,BUX,BWO,BUf,BXO,BUT,BUa]]],['5676',AjX+' +lon_0=6 +k=1'+AmF+BJe,[[U,'DHDN /'+Ajc+' zone 2'+ss,CmJ,BUd,BUX,Blt,BUf,BXy,BUT,CVy,BUj,BUm,[B,K,'5676']]],[[U,'DHDN_3_degree_Gauss_Kruger_zone_2_E_N',Cdc,BUd,BUX,Blt,BUf,BXy,BUT,BUa]]],['5675',ApP+' +k=1'+AmY+BKY,[[U,AlK+' /'+Ajc+' zone 5'+ss,CmE,BUd,BUX,BWH,BUf,BYv,BUT,CVy,BUj,BUm,[B,K,'5675']]],[[U,'Pulkovo_1942_83_3_degree_Gauss_Kruger_zone_5_E_N',CdH,BUd,BUX,BWH,BUf,BYv,BUT,BUa]]],['5674',AqA+' +k=1'+Alz+BKY,[[U,AlK+' /'+Ajc+' zone 4'+ss,CmE,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,BUj,BUm,[B,K,'5674']]],[[U,'Pulkovo_1942_83_3_degree_Gauss_Kruger_zone_4_E_N',CdH,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['5673',Aqa+' +k=1'+BKF+q+a,[[U,AlK+' /'+Ajc+' zone 3'+ss,CmE,BUd,BUX,BWO,BUf,BXO,BUT,CVy,BUj,BUm,[B,K,'5673']]],[[U,'Pulkovo_1942_83_3_degree_Gauss_Kruger_zone_3_E_N',CdH,BUd,BUX,BWO,BUf,BXO,BUT,BUa]]],['5672',ApP+' +k=1'+AmY+BCx,[[U,Akd+' /'+Ajc+' zone 5'+ss,Clq,BUd,BUX,BWH,BUf,BYv,BUT,CVy,BUj,BUm,[B,K,'5672']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_5_E_N',Ccf,BUd,BUX,BWH,BUf,BYv,BUT,BUa]]],['5671',AqA+' +k=1'+Alz+BCx,[[U,Akd+' /'+Ajc+' zone 4'+ss,Clq,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,BUj,BUm,[B,K,'5671']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_4_E_N',Ccf,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['5670',Aqa+' +k=1'+BKE+q+a,[[U,Akd+' /'+Ajc+' zone 3'+ss,Clq,BUd,BUX,BWO,BUf,BXO,BUT,CVy,BUj,BUm,[B,K,'5670']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_3_E_N',Ccf,BUd,BUX,BWO,BUf,BXO,BUT,BUa]]],['5669',ApP+' +k=1'+AmY+Apx,[[U,'RD/83 /'+Ajc+' zone 5'+ss,CnE,BUd,BUX,BWH,BUf,BYv,BUT,CVy,BUj,BUm,[B,K,'5669']]],[[U,'RD_83_3_degree_Gauss_Kruger_zone_5_E_N',CgF,BUd,BUX,BWH,BUf,BYv,BUT,BUa]]],['5668',AqA+' +k=1'+BHx+a,[[U,'RD/83 /'+Ajc+' zone 4'+ss,CnE,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,BUj,BUm,[B,K,'5668']]],[[U,'RD_83_3_degree_Gauss_Kruger_zone_4_E_N',CgF,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['5667',AqA+' +k=1'+BHx+a,[[U,'PD/83 /'+Ajc+' zone 4'+ss,CnF,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,BUj,BUm,[B,K,'5667']]],[[U,'PD_83_3_degree_Gauss_Kruger_zone_4_E_N',CgE,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['5666',Aqa+' +k=1'+Amo+Apx,[[U,'PD/83 /'+Ajc+' zone 3'+ss,CnF,BUd,BUX,BWO,BUf,BXO,BUT,CVy,BUj,BUm,[B,K,'5666']]],[[U,'PD_83_3_degree_Gauss_Kruger_zone_3_E_N',CgE,BUd,BUX,BWO,BUf,BXO,BUT,BUa]]],['5665',ApP+' +k=1'+BKF+q+a,[[U,AlK+' /'+AW+' zone 3'+ss,CmE,BUd,BUX,BWH,BUf,BXO,BUT,CVy,BUj,BUm,[B,K,'5665']]],[[U,'Pulkovo_1942_83_Gauss_Kruger_zone_3_E_N',CdH,BUd,BUX,BWH,BUf,BXO,BUT,BUa]]],['5664',Aqa+' +k=1'+AmF+BKY,[[U,AlK+' /'+AW+' zone 2'+ss,CmE,BUd,BUX,BWO,BUf,BXy,BUT,CVy,BUj,BUm,[B,K,'5664']]],[[U,'Pulkovo_1942_83_Gauss_Kruger_zone_2_E_N',CdH,BUd,BUX,BWO,BUf,BXy,BUT,BUa]]],['5663',ApP+' +k=1'+BKE+q+a,[[U,Akd+' /'+AW+' zone 3'+ss,Clq,BUd,BUX,BWH,BUf,BXO,BUT,CVy,BUj,BUm,[B,K,'5663']]],[[U,'Pulkovo_1942_58_Gauss_Kruger_zone_3_E_N',Ccf,BUd,BUX,BWH,BUf,BXO,BUT,BUa]]],['5659',BSQ+' +x_0=500053 +y_0=-3999820'+BP+QO+q+a,[[U,'Monte Mario / TM Emilia-Romagna',CnO,BUd,BUX,BWO,BUg,CIg,CFl,CVy,BUl,BUk,[B,K,'5659']]],[[U,'Monte_Mario_TM_Emilia_Romagna',CfW,BUd,BUX,BWO,BUg,CIg,CFl,BUa]]],['5655',AxD+BKk,[[U,AL+' / Vermont'+DE,ClW,BUd,BYX,BgW,BgV,BXQ,BUT,CVz,BUl,BUk,[B,K,'5655']]],[[U,'NAD83_NSRS2007_Vermont_ftUS',Cbq,BUd,BYX,BgW,BgV,BXQ,BUT,BUr]]],['5654',AxD+BKk,[[U,Aj+' / Vermont'+DE,ClX,BUd,BYX,BgW,BgV,BXQ,BUT,CVz,BUl,BUk,[B,K,'5654']]],[[U,'NAD83_HARN_Vermont_ftUS',Cbs,BUd,BYX,BgW,BgV,BXQ,BUT,BUr]]],['5653',ApP+HH+AwV+j+c+q+a,[[U,ED+' / UTM zone 33N (N-zE)',Cld,BUd,BUX,BWH,BUg,BdO,BUT,CVy,[B,K,'5653']]],[[U,'ETRS89_UTM_zone_33N_N_zE',CcG,BUd,BUX,BWH,BUg,BdO,BUT,BUa]]],['5652',BSQ+ArV+j+c+q+a,[[U,ED+' / UTM zone 32N (N-zE)',Cld,BUd,BUX,BWO,BUg,BcO,BUT,CVy,[B,K,'5652']]],[[U,'ETRS89_UTM_zone_32N_N_zE',CcG,BUd,BUX,BWO,BUg,BcO,BUT,BUa]]],['5651',BKG+HH+AqY+j+c+q+a,[[U,ED+' / UTM zone 31N (N-zE)',Cld,BUd,BUX,BXt,BUg,BaY,BUT,CVy,[B,K,'5651']]],[[U,'ETRS89_UTM_zone_31N_N_zE',CcG,BUd,BUX,BXt,BUg,BaY,BUT,BUa]]],['5650',ApP+HH+AwV+j+c+q+a,[[U,ED+' / UTM zone 33N (zE-N)',Cld,BUd,BUX,BWH,BUg,BdO,BUT,CVy,BUj,BUm,[B,K,'5650']]],[[U,'ETRS89_UTM_zone_33N_zE_N',CcG,BUd,BUX,BWH,BUg,BdO,BUT,BUa]]],['5649',BKG+HH+AqY+j+c+q+a,[[U,ED+' / UTM zone 31N (zE-N)',Cld,BUd,BUX,BXt,BUg,BaY,BUT,CVy,BUj,BUm,[B,K,'5649']]],[[U,'ETRS89_UTM_zone_31N_zE_N',CcG,BUd,BUX,BXt,BUg,BaY,BUT,BUa]]],['5646',AxD+BKk,[[U,Bx+' / Vermont'+DE,ClV,BUd,BYX,BgW,BgV,BXQ,BUT,CVz,BUl,BUk,[B,K,'5646']]],[[U,'NAD83_Vermont_ftUS',Cbn,BUd,BYX,BgW,BgV,BXQ,BUT,BUr]]],['5644',Alt+BEd,[[U,'RGR92 / UTM zone 39S',CoW,BUd,BUX,BWt,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5644']]],[[U,'RGR92_UTM_zone_39S',CjG,BUd,BUX,BWt,BUg,BUc,BUo,BUa]]],['5643',AU+' +lat_1=52.66666666666666 +lat_2=54.33333333333334 +lat_0=48'+rD+' +x_0=815000'+BKD+a,[[U,ij+' / SPBA LCC',Clm,BVG,[A,W,AOc],[A,Y,AOd],BtZ,BcM,CIf,BUT,CVy,BUj,BUm,[B,K,'5643']]],[[U,'ED50_SPBA_LCC',Ccc,BVD,[A,W,AOc],[A,Y,AOd],BtZ,BcM,CIf,BUT,BUa]]],['5641',hB+' +lon_0=-43 +lat_ts=-2'+pl+Ati+q+a,[[U,SD+' 2000 / Brazil'+" "+aU,Clk,CIe,[A,W,AcT],[A,E,ATR],Bei,BUo,CVy,BUl,BUk,[B,K,'5641']]],[[U,'SIRGAS_2000_Brazil_Mercator',CcU,CIe,[A,W,AcT],[A,E,ATR],Bei,BUo,BUa]]],['5639',AU+' +lat_1=35'+BKj+j+c+q+a,[[U,AGk+' / LCC'+AMJ,CoB,BVG,BoK,Beh,BeJ,BcM,Bfp,BoJ,CVy,[B,K,'5639']]],[[U,'ISN2004_LCC_Europe',ChG,BVD,BoK,Beh,BeJ,BcM,Bfp,BoJ,BUa]]],['5638',BKi+j+c+q+a,[[U,AGk+' / LAEA'+AMJ,CoB,BeA,Bxc,Bup,BoI,BoH,CVy,[B,K,'5638']]],[[U,'ISN2004_LAEA_Europe',ChG,BeA,BeJ,BcM,BoI,BoH,BUa]]],['5637',AU+' +lat_1=35'+BKj+j+c+q+a,[[U,hw+' / LCC'+AMJ,Cly,BVG,BoK,Beh,BeJ,BcM,Bfp,BoJ,CVy,[B,K,'5637']]],[[U,'TUREF_LCC_Europe',Ccx,BVD,BoK,Beh,BeJ,BcM,Bfp,BoJ,BUa]]],['5636',BKi+j+c+q+a,[[U,hw+' / LAEA'+AMJ,Cly,BeA,Bxc,Bup,BoI,BoH,CVy,[B,K,'5636']]],[[U,'TUREF_LAEA_Europe',Ccx,BeA,BeJ,BcM,BoI,BoH,BUa]]],['5635',BKi+j+c+q+a,[[U,sA+' / LAEA'+AMJ,Cnf,BeA,Bxc,Bup,BoI,BoH,CVy,[B,K,'5635']]],[[U,'REGCAN95_LAEA_Europe',CgD,BeA,BeJ,BcM,BoI,BoH,BUa]]],['5634',AU+' +lat_1=35'+BKj+j+c+q+a,[[U,sA+' / LCC'+AMJ,Cnf,BVG,BoK,Beh,BeJ,BcM,Bfp,BoJ,CVy,[B,K,'5634']]],[[U,'REGCAN95_LCC_Europe',CgD,BVD,BoK,Beh,BeJ,BcM,Bfp,BoJ,BUa]]],['5633',BKi+j+c+q+a,[[U,AGN+' / LAEA'+AMJ,CnC,BeA,Bxc,Bup,BoI,BoH,CVy,[B,K,'5633']]],[[U,'PTRA08_LAEA_Europe',CfK,BeA,BeJ,BcM,BoI,BoH,BUa]]],['5632',AU+' +lat_1=35'+BKj+j+c+q+a,[[U,AGN+' / LCC'+AMJ,CnC,BVG,BoK,Beh,BeJ,BcM,Bfp,BoJ,CVy,[B,K,'5632']]],[[U,'PTRA08_LCC_Europe',CfK,BVD,BoK,Beh,BeJ,BcM,Bfp,BoJ,BUa]]],['5631',Aqa+' +k=1'+AmF+BCx,[[U,Akd+' /'+AW+' zone 2'+ss,Clq,BUd,BUX,BWO,BUf,BXy,BUT,CVy,BUj,BUm,[B,K,'5631']]],[[U,'Pulkovo_1942_58_Gauss_Kruger_zone_2_E_N',Ccf,BUd,BUX,BWO,BUf,BXy,BUT,BUa]]],['5629',AmA+Aoj+nr+q+a,[[U,AUm+' / UTM zone 38S',Cnu,BUd,BUX,BWe,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5629']]],[[U,'Moznet_UTM_zone_38S',ChF,BUd,BUX,BWe,BUg,BUc,BUo,BUa]]],['5627',AjX+' +lon_0=6'+BHH+Anm+a,[[U,ij+' / TM 6 NE',Clm,BUd,BUX,Blt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'5627']]],[[U,'ED50_TM_6_NE',Ccc,BUd,BUX,Blt,BUg,BUc,BUT,BUa]]],['5625',l+Xs+' +lon_0=-88.75'+eO+AyJ,[[U,Dg+' /'+iV+' West',ClZ,BUd,BYb,CId,BcW,BUc,BUT,CVz,BUl,BUk,[B,K,'5625']]],[[U,'NAD27_Michigan_West',Cbw,BUd,BYb,CId,BcW,BUc,BUT,BUr]]],['5624',l+Xs+Vv+eO+AyJ,[[U,Dg+' /'+iV+' Old'+Gh,ClZ,BUd,BYb,BZZ,BcW,BUc,BUT,CVz,BUl,BUk,[B,K,'5624']]],[[U,'NAD27_Michigan_Old_Central',Cbw,BUd,BYb,BZZ,BcW,BUc,BUT,BUr]]],['5623',l+Xs+AWq+' +k=0.999942857'+AyJ,[[U,Dg+' /'+iV+' East',ClZ,BUd,BYb,CIc,[A,N,AfD],BUc,BUT,CVz,BUl,BUk,[B,K,'5623']]],[[U,'NAD27_Michigan_East',Cbw,BUd,BYb,CIc,[A,N,AfD],BUc,BUT,BUr]]],['5596',AjX+' +lon_0=11.33333333333333 +k=1'+BUE,[[U,'FEH2010 / Fehmarnbelt TM',Crk,BUd,BUX,[A,E,AOe],BUf,BWa,BUT,CVy,BUj,BUm,[B,K,'5596']]],[[U,'FEH2010_Fehmarnbelt_TM',[S,'GCS_FEH2010',[V,AIJ,BUh],BUU,BUW],BUd,BUX,[A,E,AOe],BUf,BWa,BUT,BUa]]],['5589',l+' +lat_0=17.06124194444444 +lon_0=-88.6318575 +k=1 +x_0=66220.02833082761 +y_0=135779.5099885299'+Arw+rt+a,[[U,'Sibun Gorge 1922 / Colony'+op,Cpo,BUd,[A,C,AOf],[A,E,AfE],BUf,CAv,CAu,CYB,BUj,BUm,[B,K,'5589']]],[[U,'Sibun_Gorge_1922_Colony_Grid',[S,'GCS_Sibun Gorge 1922',[V,AVV,BhF],BUU,BUW],BUd,[A,C,AOf],[A,E,AfE],BUf,CAv,CAu,BqE]]],['5588',ZQ+hf+' +lon_0=-66.5'+ATc+IL+' +y_0=304800'+CA+AkW,[[U,Dg+' / New Brunswick'+RQ+' (NAD27)',ClZ,Bpn,BbU,Buo,BoG,BWa,BVg,CWY,[B,K,'5588']]],[[U,'NAD27_New_Brunswick_Stereographic_NAD27',Cbw,Bpm,BbU,Buo,BoG,BWa,BVg,BXN]]],['5569',AsG+' +k=1'+BKA+q+a,[[U,eJ+' /'+AW+' CM 39E',Cmk,BUd,BUX,BWn,BUf,BUc,BUT,CVy,[B,K,'5569']]],[[U,'UCS_2000_Gauss_Kruger_CM_39E',CeL,BUd,BUX,BWn,BUf,BUc,BUT,BUa]]],['5568',Aqn+' +k=1'+BKA+q+a,[[U,eJ+' /'+AW+' CM 33E',Cmk,BUd,BUX,BWg,BUf,BUc,BUT,CVy,[B,K,'5568']]],[[U,'UCS_2000_Gauss_Kruger_CM_33E',CeL,BUd,BUX,BWg,BUf,BUc,BUT,BUa]]],['5567',Apz+' +k=1'+BKA+q+a,[[U,eJ+' /'+AW+' CM 27E',Cmk,BUd,BUX,BWP,BUf,BUc,BUT,CVy,[B,K,'5567']]],[[U,'UCS_2000_Gauss_Kruger_CM_27E',CeL,BUd,BUX,BWP,BUf,BUc,BUT,BUa]]],['5566',ApT+' +k=1'+BKA+q+a,[[U,eJ+' /'+AW+' CM 21E',Cmk,BUd,BUX,BWR,BUf,BUc,BUT,CVy,[B,K,'5566']]],[[U,'UCS_2000_Gauss_Kruger_CM_21E',CeL,BUd,BUX,BWR,BUf,BUc,BUT,BUa]]],['5565',AsG+' +k=1'+ApC+BIj+a,[[U,eJ+' /'+AW+' zone 7',Cmk,BUd,BUX,BWn,BUf,BbK,BUT,CVy,[B,K,'5565']]],[[U,'UCS_2000_Gauss_Kruger_zone_7',CeL,BUd,BUX,BWn,BUf,BbK,BUT,BUa]]],['5564',Aqn+' +k=1'+ArU+BIj+a,[[U,eJ+' /'+AW+' zone 6',Cmk,BUd,BUX,BWg,BUf,BdL,BUT,CVy,[B,K,'5564']]],[[U,'UCS_2000_Gauss_Kruger_zone_6',CeL,BUd,BUX,BWg,BUf,BdL,BUT,BUa]]],['5563',Apz+' +k=1'+AmY+BIj+a,[[U,eJ+' /'+AW+' zone 5',Cmk,BUd,BUX,BWP,BUf,BYv,BUT,CVy,[B,K,'5563']]],[[U,'UCS_2000_Gauss_Kruger_zone_5',CeL,BUd,BUX,BWP,BUf,BYv,BUT,BUa]]],['5562',ApT+' +k=1'+Alz+BIj+a,[[U,eJ+' /'+AW+' zone 4',Cmk,BUd,BUX,BWR,BUf,BYJ,BUT,CVy,[B,K,'5562']]],[[U,'UCS_2000_Gauss_Kruger_zone_4',CeL,BUd,BUX,BWR,BUf,BYJ,BUT,BUa]]],['5559',AU+' +lat_1=16.81666666666667 +lat_0=16.81666666666667'+PY+' +k_0=0.99992226'+Ay+' +y_0=292209.579'+BLw,[[U,dm+' 1935 / Guatemala Norte',CmZ,BWW,[A,C,xz],BcU,[A,N,Aia],BUc,[A,G,Aib],CVy,BUl,BUk,[B,K,'5559']]],[[U,'Ocotepeque_1935_Guatemala_Norte',Cdi,BVD,[A,C,xz],BcU,[A,N,Aia],BUc,[A,G,Aib],BUa,[A,W,xz]]]],['5552',AoS+BEd,[[U,'PNG94 / PNGMG94 zone 56',Cno,BUd,BUX,BYu,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5552']]],[[U,'PNG94_PNGMG94_zone_56',ChE,BUd,BUX,BYu,BUg,BUc,BUo,BUa]]],['5551',Amg+BEd,[[U,'PNG94 / PNGMG94 zone 55',Cno,BUd,BUX,BYW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5551']]],[[U,'PNG94_PNGMG94_zone_55',ChE,BUd,BUX,BYW,BUg,BUc,BUo,BUa]]],['5550',AoI+BEd,[[U,'PNG94 / PNGMG94 zone 54',Cno,BUd,BUX,BYK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5550']]],[[U,'PNG94_PNGMG94_zone_54',ChE,BUd,BUX,BYK,BUg,BUc,BUo,BUa]]],['5539',AoC+BNI+a,[[U,jx+' Alegre 1961 / UTM zone 24S',Cmo,BUd,BUX,BYx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5539']]],[[U,'Corrego_Alegre_1961_UTM_zone_24S',Cea,BUd,BUX,BYx,BUg,BUc,BUo,BUa]]],['5538',BJy+q+a,[[U,jx+' Alegre 1961 / UTM zone 23S',Cmo,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5538']]],[[U,'Corrego_Alegre_1961_UTM_zone_23S',Cea,BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['5537',BJx+q+a,[[U,jx+' Alegre 1961 / UTM zone 22S',Cmo,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5537']]],[[U,'Corrego_Alegre_1961_UTM_zone_22S',Cea,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['5536',BJw+q+a,[[U,jx+' Alegre 1961 / UTM zone 21S',Cmo,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5536']]],[[U,'Corrego_Alegre_1961_UTM_zone_21S',Cea,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['5535',Any+BSs,[[U,Ys+' / UTM zone 25S',Cmd,BUd,BUX,BZx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5535']]],[[U,'SAD69_96_UTM_zone_25S',CeA,BUd,BUX,BZx,BUg,BUc,BUo,BUa]]],['5534',AoC+BSs,[[U,Ys+' / UTM zone 24S',Cmd,BUd,BUX,BYx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5534']]],[[U,'SAD69_96_UTM_zone_24S',CeA,BUd,BUX,BYx,BUg,BUc,BUo,BUa]]],['5533',Amp+BSs,[[U,Ys+' / UTM zone 23S',Cmd,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5533']]],[[U,'SAD69_96_UTM_zone_23S',CeA,BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['5531',AlI+BSs,[[U,Ys+' / UTM zone 21S',Cmd,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5531']]],[[U,'SAD69_96_UTM_zone_21S',CeA,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['5530',AbH+At+vs+pl+JB+Arx+q+a,[[U,Ys+' / Brazil'+" "+hX,Cmd,Bxq,BUX,BdM,Bei,BUo,CVy,BUl,BUk,[B,K,'5530']]],[[U,'SAD69_96_Brazil_Polyconic',CeA,Bxq,BUX,BdM,Bei,BUo,BUa]]],['5523',AjX+' +lon_0=11.5'+HH+HV+BLQ,[[U,'WGS 84 / Gabon TM 2011',ClU,BUd,BUX,Bun,BUg,BWL,BYS,CVy,BUl,BUk,[B,K,'5523']]],[[U,'WGS_84_Gabon_TM_2011',Cbp,BUd,BUX,Bun,BUg,BWL,BYS,BUa]]],['5520',BKG+' +k=1'+Ald+BJe,[[U,'DHDN /'+Ajc+' zone 1',CmJ,BUd,BUX,BXt,BUf,BWL,BUT,CVy,[B,K,'5520']]],[[U,'DHDN_3_degree_Gauss_Kruger_zone_1',Cdc,BUd,BUX,BXt,BUf,BWL,BUT,BUa]]],['5519',l+' +lat_0=-44'+ASW+' +k=1'+AHK+' +y_0=650000'+BP+xE+q+a,[[U,'CI1979 / Chatham'+AUX+' Map'+op,CpS,BUd,BpU,Brh,BUf,Blz,Bwo,CVy,[B,K,'5519']]],[[U,'CI1979_Chatham_Islands_Map_Grid',[S,'GCS_Chatham'+AUX+' 1979',[V,AKA,BUs],BUU,BUW],BUd,BpU,Brh,BUf,Blz,Bwo,BUa]]],['5518',l+' +lat_0=-44'+ASW+' +k=1'+AHK+' +y_0=650000'+BP+ANg+q+a,[[U,'CI1971 / Chatham'+AUX+' Map'+op,CpR,BUd,BpU,Brh,BUf,Blz,Bwo,CVy,[B,K,'5518']]],[[U,'CI1971_Chatham_Islands_Map_Grid',[S,'GCS_Chatham'+AUX+' 1971',[V,ANh,BUs],BUU,BUW],BUd,BpU,Brh,BUf,Blz,Bwo,BUa]]],['5513',BCc+AYZ+BRv+q+a,[[U,ARx+' /'+" "+AGz,Cod,BvH,Bpr,CDD,Bpq,Bpp,BUt,BUy,BUT,CVy,BYq,BYp,[B,K,'5513']]],[[U,'S_JTSK_Krovak',Cjr,BvH,Bpr,CDD,Bpq,Bpp,BUt,BUy,BUT,BUa]]],['5490',BUA,[[U,'RGAF09 / UTM zone 20N',Crr,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'5490']]],[[U,'RGAF09_UTM_zone_20N',[S,'GCS_RGAF09',[V,sF,BUh],BUU,BUW],BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['5482',AlU+' +lat_ts=-90'+ATD+AXE+pl+AuS+q+a,[[U,hy+' / RSPS2000',CnJ,BcF,BVX,BnL,BoS,Bei,BVg,CVy,[B,K,'5482']]],[[U,'RSRGD2000_RSPS2000',CfV,Bhc,CQa,BnL,Bei,BVg,BUa]]],['5481',AU+' +lat_1=-70.66666666666667 +lat_2=-72.33333333333333 +lat_0=-71.5 +lon_0=166 +x_0=3000000'+AuS+q+a,[[U,hy+' / PCLC2000',CnJ,BVG,[A,W,AKY],[A,Y,AKZ],[A,C,Mg],Brk,BYY,BVg,CVy,[B,K,'5481']]],[[U,'RSRGD2000_PCLC2000',CfV,BVD,[A,W,AKY],[A,Y,AKZ],[A,C,Mg],Brk,BYY,BVg,BUa]]],['5480',AU+' +lat_1=-73.66666666666667'+Hy+' +lat_0=-74.5'+vt+pl+BHu+q+a,[[U,hy+' / BCLC2000',CnJ,BVG,[A,W,AKa],BZI,[A,C,NQ],BXW,Bei,Bbw,CVy,[B,K,'5480']]],[[U,'RSRGD2000_BCLC2000',CfV,BVD,[A,W,AKa],BZI,[A,C,NQ],BXW,Bei,Bbw,BUa]]],['5479',Amn+It+' +lat_0=-78 +lon_0=163'+AXa+BJv+q+a,[[U,hy+' / MSLC2000',CnJ,BVG,BZR,BZQ,CIb,CQL,BtV,Bdc,CVy,[B,K,'5479']]],[[U,'RSRGD2000_MSLC2000',CfV,BVD,BZR,BZQ,CIb,CQL,BtV,Bdc,BUa]]],['5472',AbH+' +lat_0=8.25'+Qk+' +x_0=914391.7962 +y_0=999404.7217154861'+Dr+' +to_meter=0.9143917962'+a,[[U,xl+' 1911 / Panama'+" "+hX,CoP,Bxq,CPj,BVm,BWa,CAt,[Q,qE+' yard',Abc,[B,K,'9037']],BUj,BUm,[B,K,'5472']]],[[U,'Panama_Colon_1911_Panama_Polyconic',Cgs,Bxq,CPj,BVm,BWa,CAt,[Q,qE+' yard',Abc]]]],['5469',AU+' +lat_1=8.416666666666666 +lat_0=8.416666666666666 +lon_0=-80 +k_0=0.99989909'+Ay+' +y_0=294865.303'+Atf,[[U,xl+' 1911 / Panama'+PW,CoP,BWW,[A,C,yA],CQK,[A,N,Aic],BUc,[A,G,Aid],CVy,BUl,BUk,[B,K,'5469']]],[[U,'Panama_Colon_1911_Panama_Lambert',Cgs,BVD,[A,C,yA],CQK,[A,N,Aic],BUc,[A,G,Aid],BUa,[A,W,yA]]]],['5463',AlW+BLv,[[U,hv+' / UTM zone 17N',Clz,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'5463']]],[[U,'SAD69_UTM_zone_17N',Ccw,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['5462',AU+' +lat_1=11.73333333333333 +lat_0=11.73333333333333'+AXW+' +k_0=0.9999222800000001'+Ay+' +y_0=288876.327'+BLw,[[U,dm+' 1935 / Nicaragua Sur',CmZ,BWW,[A,C,yB],Btn,[A,N,Aie],BUc,[A,G,Aif],CVy,BUl,BUk,[B,K,'5462']]],[[U,'Ocotepeque_1935_Nicaragua_Sur',Cdi,BVD,[A,C,yB],Btn,[A,N,Aie],BUc,[A,G,Aif],BUa,[A,W,yB]]]],['5461',AU+' +lat_1=13.86666666666667 +lat_0=13.86666666666667'+AXW+' +k_0=0.99990314'+Ay+' +y_0=359891.816'+BLw,[[U,dm+' 1935 / Nicaragua Norte',CmZ,BWW,[A,C,yC],Btn,[A,N,Aig],BUc,[A,G,Aih],CVy,BUl,BUk,[B,K,'5461']]],[[U,'Ocotepeque_1935_Nicaragua_Norte',Cdi,BVD,[A,C,yC],Btn,[A,N,Aig],BUc,[A,G,Aih],BUa,[A,W,yC]]]],['5460',AU+' +lat_1=13.78333333333333 +lat_0=13.78333333333333 +lon_0=-89 +k_0=0.99996704'+Ay+' +y_0=295809.184'+BLw,[[U,dm+' 1935 / El Salvador'+PW,CmZ,BWW,[A,C,yD],CQJ,[A,N,Aii],BUc,[A,G,Aij],CVy,BUl,BUk,[B,K,'5460']]],[[U,'Ocotepeque_1935_El_Salvador_Lambert',Cdi,BVD,[A,C,yD],CQJ,[A,N,Aii],BUc,[A,G,Aij],BUa,[A,W,yD]]]],['5459',AU+' +lat_1=14.9 +lat_0=14.9'+PY+' +k_0=0.99989906'+Ay+' +y_0=325992.681'+BLw,[[U,dm+' 1935 / Guatemala Sur',CmZ,BWW,CPi,BcU,[A,N,Aik],BUc,[A,G,Ail],CVy,BUl,BUk,[B,K,'5459']]],[[U,'Ocotepeque_1935_Guatemala_Sur',Cdi,BVD,CPi,BcU,[A,N,Aik],BUc,[A,G,Ail],BUa,[A,W,'raw:14.9']]]],['5457',AU+' +lat_1=9 +lat_0=9'+AWq+' +k_0=0.99995696'+Ay+' +y_0=327987.436'+BLw,[[U,dm+' 1935 / Costa Rica Sur',CmZ,BWW,[A,C,La],CIc,CAs,BUc,[A,G,Aim],CVy,BUl,BUk,[B,K,'5457']]],[[U,'Ocotepeque_1935_Costa_Rica_Sur',Cdi,BVD,[A,C,La],CIc,CAs,BUc,[A,G,Aim],BUa,CQZ]]],['5456',AU+' +lat_1=10.46666666666667 +lat_0=10.46666666666667 +lon_0=-84.33333333333333 +k_0=0.99995696'+Ay+' +y_0=271820.522'+BLw,[[U,dm+' 1935 / Costa Rica Norte',CmZ,BWW,[A,C,yE],[A,E,AKb],CAs,BUc,[A,G,Ain],CVy,BUl,BUk,[B,K,'5456']]],[[U,'Ocotepeque_1935_Costa_Rica_Norte',Cdi,BVD,[A,C,yE],[A,E,AKb],CAs,BUc,[A,G,Ain],BUa,[A,W,yE]]]],['5396',AmS+BEd,[[U,SD+' 2000 / UTM zone 26S',Clk,BUd,BUX,BaV,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5396']]],[[U,'SIRGAS_2000_UTM_zone_26S',CcU,BUd,BUX,BaV,BUg,BUc,BUo,BUa]]],['5389',BHt+c+q+a,[[U,xP+' / UTM zone 19S',CoH,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5389']]],[[U,'Peru96_UTM_zone_19S',ChH,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['5387',BJt+c+q+a,[[U,xP+' / UTM zone 18S',CoH,BUd,BUX,BWo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5387']]],[[U,'Peru96_UTM_zone_18S',ChH,BUd,BUX,BWo,BUg,BUc,BUo,BUa]]],['5383',Alb+BSG,[[U,sB+' / UTM zone 22S',CpU,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5383']]],[[U,'SIRGAS_ROU98_UTM_zone_22S',Cjo,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['5382',AlI+BSG,[[U,sB+' / UTM zone 21S',CpU,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5382']]],[[U,'SIRGAS_ROU98_UTM_zone_21S',Cjo,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['5367',BNe+AkS+Aqr+c+q+a,[[U,'CR05 / CRTM05',CsL,BUd,BUX,Bhh,BUt,BUc,BUT,CVy,[B,K,'5367']]],[[U,'CR05_CRTM05',[S,'GCS_CR05',[V,AYQ,BUw],BUU,BUW],BUd,BUX,Bhh,BUt,BUc,BUT,BUa]]],['5362',BJt+c+q+a,[[U,sC+' / UTM zone 18S',CpT,BUd,BUX,BWo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5362']]],[[U,'SIRGAS_Chile_UTM_zone_18S',Cjn,BUd,BUX,BWo,BUg,BUc,BUo,BUa]]],['5361',BHt+c+q+a,[[U,sC+' / UTM zone 19S',CpT,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5361']]],[[U,'SIRGAS_Chile_UTM_zone_19S',Cjn,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['5357',AlI+BEd,[[U,AUj+' / UTM zone 21S',CoC,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5357']]],[[U,'MARGEN_UTM_zone_21S',ChD,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['5356',BHt+c+q+a,[[U,AUj+' / UTM zone 19S',CoC,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5356']]],[[U,'MARGEN_UTM_zone_19S',ChD,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['5355',Aku+BEd,[[U,AUj+' / UTM zone 20S',CoC,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5355']]],[[U,'MARGEN_UTM_zone_20S',ChD,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['5349',BNd+' +k=1'+ApC+j+c+q+a,[[U,ch+' 2007 /'+Yj+' 7',CmY,BUd,BVX,BdM,BUf,BbK,BUT,CVy,[B,K,'5349']]],[[U,'POSGAR_2007_Argentina_7',Cdh,BUd,BVX,BdM,BUf,BbK,BUT,BUa]]],['5348',AnU+' +lon_0=-57 +k=1'+ArU+j+c+q+a,[[U,ch+' 2007 /'+Yj+' 6',CmY,BUd,BVX,BWr,BUf,BdL,BUT,CVy,[B,K,'5348']]],[[U,'POSGAR_2007_Argentina_6',Cdh,BUd,BVX,BWr,BUf,BdL,BUT,BUa]]],['5347',BJs+' +k=1'+AmY+j+c+q+a,[[U,ch+' 2007 /'+Yj+' 5',CmY,BUd,BVX,Bog,BUf,BYv,BUT,CVy,[B,K,'5347']]],[[U,'POSGAR_2007_Argentina_5',Cdh,BUd,BVX,Bog,BUf,BYv,BUT,BUa]]],['5346',BJr+' +k=1'+Alz+j+c+q+a,[[U,ch+' 2007 /'+Yj+' 4',CmY,BUd,BVX,BWY,BUf,BYJ,BUT,CVy,[B,K,'5346']]],[[U,'POSGAR_2007_Argentina_4',Cdh,BUd,BVX,BWY,BUf,BYJ,BUT,BUa]]],['5345',BJq+' +k=1'+Amo+j+c+q+a,[[U,ch+' 2007 /'+Yj+' 3',CmY,BUd,BVX,Bhb,BUf,BXO,BUT,CVy,[B,K,'5345']]],[[U,'POSGAR_2007_Argentina_3',Cdh,BUd,BVX,Bhb,BUf,BXO,BUT,BUa]]],['5344',BHe+' +k=1'+BIN+c+q+a,[[U,ch+' 2007 /'+Yj+' 2',CmY,BUd,BVX,BWZ,BUf,BXy,BUT,CVy,[B,K,'5344']]],[[U,'POSGAR_2007_Argentina_2',Cdh,BUd,BVX,BWZ,BUf,BXy,BUT,BUa]]],['5343',BJp+' +k=1'+BMk+c+q+a,[[U,ch+' 2007 /'+Yj+' 1',CmY,BUd,BVX,BoF,BUf,BWL,BUT,CVy,[B,K,'5343']]],[[U,'POSGAR_2007_Argentina_1',Cdh,BUd,BVX,BoF,BUf,BWL,BUT,BUa]]],['5337',Any+BNc+q+a,[[U,AIQ+' / UTM zone 25S',Cnc,BUd,BUX,BZx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'5337']]],[[U,'Aratu_UTM_zone_25S',CgC,BUd,BUX,BZx,BUg,BUc,BUo,BUa]]],['5331',hB+AAj+' +k=0.997'+BNb+dA+ADw+q+a,[[U,tE+eB+' / NEIEZ',CsN,Bxi,Bwn,Bum,Bls,Blr,CVy,BUl,BUk,[B,K,'5331']]],[[U,'Makassar_Jakarta_NEIEZ',[S,'GCS_Makassar'+eB,CZd,BrA,BUW],Bxp,Bwn,Bls,Blr,BUa,Brg]]],['5330',hB+AAj+' +k=0.997'+AqW+BAu+ADw+q+a,[[U,eD+eB+' / NEIEZ',CsO,Bxi,Bwn,Bum,Bls,Blr,CVy,BUl,BUk,[B,K,'5330']]],[[U,'Batavia_Jakarta_NEIEZ',[S,tl+eB,CYG,BrA,BUW],Bxp,Bwn,Bls,Blr,BUa,Brg]]],['5329',hB+AAj+' +k=0.997'+BNb+dz+ADw+q+a,[[U,BGV+' / NEIEZ',Csc,Bxi,Bwn,Bum,Bls,Blr,CVy,BUl,BUk,[B,K,'5329']]],[[U,'Segara_Jakarta_NEIEZ',[S,AdV+eB,CZJ,BrA,BUW],Bxp,Bwn,Bls,Blr,BUa,Brg]]],['5325',AU+' +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19'+lj+eM+j+c+q+a,[[U,AGk+' /'+PW+' 2004',CoB,BVG,CAr,CAq,CIa,CAp,BdK,BZw,CVy,BUl,BUk,[B,K,'5325']]],[[U,'ISN2004_Lambert_2004',ChG,BVD,CAr,CAq,CIa,CAp,BdK,BZw,BUa]]],['5321',BEq+' +lat_2=54.5'+BDZ+BUE,[[U,Cc+' / Teranet Ontario'+PW,Cli,BVG,Brf,CAo,BUX,Bhh,BWa,BUT,CVy,BUl,BUk,[B,K,'5321']]],[[U,'NAD83_CSRS_Teranet_Ontario_Lambert',CcM,BVD,Brf,CAo,BUX,Bhh,BWa,BUT,BUa]]],['5320',BEq+' +lat_2=54.5'+BDZ+BUE,[[U,Bx+' / Teranet Ontario'+PW,ClV,BVG,Brf,CAo,BUX,Bhh,BWa,BUT,CVy,BUl,BUk,[B,K,'5320']]],[[U,'NAD83_Teranet_Ontario_Lambert',Cbn,BVD,Brf,CAo,BUX,Bhh,BWa,BUT,BUa]]],['5316',AjX+' +lon_0=-7 +k=0.999997'+Dp+' +y_0=-6000000'+j+c+q+a,[[U,ED+' / Faroe TM',Cld,BUd,BUX,CQV,CAn,BVP,CAm,CVy,BUj,BUm,[B,K,'5316']]],[[U,'ETRS89_Faroe_TM',CcG,BUd,BUX,CQV,CAn,BVP,CAm,BUa]]],['5311',AjX+' +lon_0=90.86666666666666 +k=1'+BTq,[[U,Xg+' 03 / Zhemgang TM',Clp,BUd,BUX,[A,E,AOg],BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5311']]],[[U,'DRUKREF_03_Zhemgang_TM',Ccd,BUd,BUX,[A,E,AOg],BUf,BWp,BYt,BUa]]],['5310',AjX+AaF+' +k=1'+BTq,[[U,Xg+' 03 / Yangtse TM',Clp,BUd,BUX,CIZ,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5310']]],[[U,'DRUKREF_03_Yangtse_TM',Ccd,BUd,BUX,CIZ,BUf,BWp,BYt,BUa]]],['5309',AjX+' +lon_0=90.11666666666666 +k=1'+BTq,[[U,Xg+' 03 / Wangdue Phodrang TM',Clp,BUd,BUX,[A,E,AOh],BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5309']]],[[U,'DRUKREF_03_Wangdue_Phodrang_TM',Ccd,BUd,BUX,[A,E,AOh],BUf,BWp,BYt,BUa]]],['5308',AjX+' +lon_0=90.16666666666667 +k=1'+BTq,[[U,Xg+' 03 / Tsirang TM',Clp,BUd,BUX,[A,E,AOi],BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5308']]],[[U,'DRUKREF_03_Tsirang_TM',Ccd,BUd,BUX,[A,E,AOi],BUf,BWp,BYt,BUa]]],['5307',AjX+' +lon_0=90.5 +k=1'+BTq,[[U,Xg+' 03 / Trongsa TM',Clp,BUd,BUX,CPh,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5307']]],[[U,'DRUKREF_03_Trongsa_TM',Ccd,BUd,BUX,CPh,BUf,BWp,BYt,BUa]]],['5306',AjX+' +lon_0=91.75 +k=1'+BTq,[[U,Xg+' 03 / Trashigang TM',Clp,BUd,BUX,COj,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5306']]],[[U,'DRUKREF_03_Trashigang_TM',Ccd,BUd,BUX,COj,BUf,BWp,BYt,BUa]]],['5305',AjX+' +lon_0=89.55 +k=1'+BTq,[[U,Xg+' 03 / Thimphu TM',Clp,BUd,BUX,CAl,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5305']]],[[U,'DRUKREF_03_Thimphu_TM',Ccd,BUd,BUX,CAl,BUf,BWp,BYt,BUa]]],['5304',AjX+' +lon_0=90.26666666666667 +k=1'+BTq,[[U,Xg+' 03 / Sarpang TM',Clp,BUd,BUX,[A,E,AOj],BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5304']]],[[U,'DRUKREF_03_Sarpang_TM',Ccd,BUd,BUX,[A,E,AOj],BUf,BWp,BYt,BUa]]],['5303',AjX+' +lon_0=89.06666666666666 +k=1'+BTq,[[U,Xg+' 03 / Samtse TM',Clp,BUd,BUX,[A,E,AOk],BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5303']]],[[U,'DRUKREF_03_Samtse_TM',Ccd,BUd,BUX,[A,E,AOk],BUf,BWp,BYt,BUa]]],['5302',AjX+AaF+' +k=1'+BTq,[[U,Xg+' 03 / Samdrup Jongkhar TM',Clp,BUd,BUX,CIZ,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5302']]],[[U,'DRUKREF_03_Samdrup_Jongkhar_TM',Ccd,BUd,BUX,CIZ,BUf,BWp,BYt,BUa]]],['5301',AjX+AaG+' +k=1'+BTq,[[U,Xg+' 03 / Punakha TM',Clp,BUd,BUX,CAk,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5301']]],[[U,'DRUKREF_03_Punakha_TM',Ccd,BUd,BUX,CAk,BUf,BWp,BYt,BUa]]],['5300',AjX+' +lon_0=91.34999999999999 +k=1'+BTq,[[U,Xg+' 03 / Pemagatshel TM',Clp,BUd,BUX,COi,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5300']]],[[U,'DRUKREF_03_Pemagatshel_TM',Ccd,BUd,BUX,COi,BUf,BWp,BYt,BUa]]],['5299',AjX+' +lon_0=89.34999999999999 +k=1'+BTq,[[U,Xg+' 03 / Paro TM',Clp,BUd,BUX,COh,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5299']]],[[U,'DRUKREF_03_Paro_TM',Ccd,BUd,BUX,COh,BUf,BWp,BYt,BUa]]],['5298',AjX+' +lon_0=91.23333333333333 +k=1'+BTq,[[U,Xg+' 03 / Mongar TM',Clp,BUd,BUX,[A,E,AOl],BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5298']]],[[U,'DRUKREF_03_Mongar_TM',Ccd,BUd,BUX,[A,E,AOl],BUf,BWp,BYt,BUa]]],['5297',AjX+' +lon_0=91.13333333333334 +k=1'+BTq,[[U,Xg+' 03 / Lhuentse TM',Clp,BUd,BUX,[A,E,AOm],BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5297']]],[[U,'DRUKREF_03_Lhuentse_TM',Ccd,BUd,BUX,[A,E,AOm],BUf,BWp,BYt,BUa]]],['5296',AjX+' +lon_0=90.15000000000001 +k=1'+BTq,[[U,Xg+' 03 / Ha TM',Clp,BUd,BUX,COg,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5296']]],[[U,'DRUKREF_03_Ha_TM',Ccd,BUd,BUX,COg,BUf,BWp,BYt,BUa]]],['5295',AjX+' +lon_0=90.03333333333333 +k=1'+BTq,[[U,Xg+' 03 / Gasa TM',Clp,BUd,BUX,[A,E,AOn],BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5295']]],[[U,'DRUKREF_03_Gasa_TM',Ccd,BUd,BUX,[A,E,AOn],BUf,BWp,BYt,BUa]]],['5294',AjX+AaG+' +k=1'+BTq,[[U,Xg+' 03 / Dagana TM',Clp,BUd,BUX,CAk,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5294']]],[[U,'DRUKREF_03_Dagana_TM',Ccd,BUd,BUX,CAk,BUf,BWp,BYt,BUa]]],['5293',AjX+' +lon_0=89.55 +k=1'+BTq,[[U,Xg+' 03 / Chhukha TM',Clp,BUd,BUX,CAl,BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5293']]],[[U,'DRUKREF_03_Chhukha_TM',Ccd,BUd,BUX,CAl,BUf,BWp,BYt,BUa]]],['5292',AjX+' +lon_0=90.73333333333333 +k=1'+BTq,[[U,Xg+' 03 / Bumthang TM',Clp,BUd,BUX,[A,E,AOo],BUf,BWp,BYt,CVy,BUj,BUm,[B,K,'5292']]],[[U,'DRUKREF_03_Bumthang_TM',Ccd,BUd,BUX,[A,E,AOo],BUf,BWp,BYt,BUa]]],['5275',AtF+' +k=1'+ArP+j+c+q+a,[[U,hw+' /'+Ajc+' zone 15',Cly,BUd,BUX,BWe,BUf,BbO,BUT,CVy,[B,K,'5275']]],[[U,'TUREF_3_degree_Gauss_Kruger_zone_15',Ccx,BUd,BUX,BWe,BUf,BbO,BUT,BUa]]],['5274',AyC+' +k=1'+ArO+j+c+q+a,[[U,hw+' /'+Ajc+' zone 14',Cly,BUd,BUX,BdJ,BUf,Bad,BUT,CVy,[B,K,'5274']]],[[U,'TUREF_3_degree_Gauss_Kruger_zone_14',Ccx,BUd,BUX,BdJ,BUf,Bad,BUT,BUa]]],['5273',AsG+' +k=1'+ArN+j+c+q+a,[[U,hw+' /'+Ajc+' zone 13',Cly,BUd,BUX,BWn,BUf,Bax,BUT,CVy,[B,K,'5273']]],[[U,'TUREF_3_degree_Gauss_Kruger_zone_13',Ccx,BUd,BUX,BWn,BUf,Bax,BUT,BUa]]],['5272',AtL+' +k=1'+BDX+j+c+q+a,[[U,hw+' /'+Ajc+' zone 12',Cly,BUd,BUX,BdS,BUf,Bgi,BUT,CVy,[B,K,'5272']]],[[U,'TUREF_3_degree_Gauss_Kruger_zone_12',Ccx,BUd,BUX,BdS,BUf,Bgi,BUT,BUa]]],['5271',Aqn+' +k=1'+BDW+j+c+q+a,[[U,hw+' /'+Ajc+' zone 11',Cly,BUd,BUX,BWg,BUf,Bdn,BUT,CVy,[B,K,'5271']]],[[U,'TUREF_3_degree_Gauss_Kruger_zone_11',Ccx,BUd,BUX,BWg,BUf,Bdn,BUT,BUa]]],['5270',ArX+' +k=1'+BBh+j+c+q+a,[[U,hw+' /'+Ajc+' zone 10',Cly,BUd,BUX,BYz,BUf,Bhd,BUT,CVy,[B,K,'5270']]],[[U,'TUREF_3_degree_Gauss_Kruger_zone_10',Ccx,BUd,BUX,BYz,BUf,Bhd,BUT,BUa]]],['5269',Apz+' +k=1'+AwU+j+c+q+a,[[U,hw+' /'+Ajc+' zone 9',Cly,BUd,BUX,BWP,BUf,Bha,BUT,CVy,[B,K,'5269']]],[[U,'TUREF_3_degree_Gauss_Kruger_zone_9',Ccx,BUd,BUX,BWP,BUf,Bha,BUT,BUa]]],['5266',Asm+' +k=1'+BLr+q+a,[[U,Xg+' 03 / Bhutan'+AoN,Clp,BUd,BUX,BYP,BUf,BWp,BUT,CVy,BUj,BUm,[B,K,'5266']]],[[U,'DRUKREF_03_Bhutan_National_Grid',Ccd,BUd,BUX,BYP,BUf,BWp,BUT,BUa]]],['5259',AtF+' +k=1'+BSv,[[U,hw+' / TM45',Cly,BUd,BUX,BWe,BUf,BUc,BUT,CVy,[B,K,'5259']]],[[U,'TUREF_TM45',Ccx,BUd,BUX,BWe,BUf,BUc,BUT,BUa]]],['5258',AyC+' +k=1'+BSv,[[U,hw+' / TM42',Cly,BUd,BUX,BdJ,BUf,BUc,BUT,CVy,[B,K,'5258']]],[[U,'TUREF_TM42',Ccx,BUd,BUX,BdJ,BUf,BUc,BUT,BUa]]],['5257',AsG+' +k=1'+BSv,[[U,hw+' / TM39',Cly,BUd,BUX,BWn,BUf,BUc,BUT,CVy,[B,K,'5257']]],[[U,'TUREF_TM39',Ccx,BUd,BUX,BWn,BUf,BUc,BUT,BUa]]],['5256',AtL+' +k=1'+BSv,[[U,hw+' / TM36',Cly,BUd,BUX,BdS,BUf,BUc,BUT,CVy,[B,K,'5256']]],[[U,'TUREF_TM36',Ccx,BUd,BUX,BdS,BUf,BUc,BUT,BUa]]],['5255',Aqn+' +k=1'+BSv,[[U,hw+' / TM33',Cly,BUd,BUX,BWg,BUf,BUc,BUT,CVy,[B,K,'5255']]],[[U,'TUREF_TM33',Ccx,BUd,BUX,BWg,BUf,BUc,BUT,BUa]]],['5254',ArX+' +k=1'+BSv,[[U,hw+' / TM30',Cly,BUd,BUX,BYz,BUf,BUc,BUT,CVy,[B,K,'5254']]],[[U,'TUREF_TM30',Ccx,BUd,BUX,BYz,BUf,BUc,BUT,BUa]]],['5253',Apz+' +k=1'+BSv,[[U,hw+' / TM27',Cly,BUd,BUX,BWP,BUf,BUc,BUT,CVy,[B,K,'5253']]],[[U,'TUREF_TM27',Ccx,BUd,BUX,BWP,BUf,BUc,BUT,BUa]]],['5247',AqD+' +lonc=115 +alpha=53.31580995'+AEw+Ajh+nD+gm+j+q+a,[[U,AbC+' / Brunei BRSO',Csd,BlD,BeI,BmX,CAj,Bxb,BhZ,BUy,BUT,CVy,BUj,BUm,[B,K,'5247']]],[[U,'GDBD2009_Brunei_BRSO',[S,'GCS_GDBD2009',[V,xD,BUh],BUU,BUW],BlC,BeI,BmX,CAj,BhZ,BUy,BUT,BUa]]],['5243',AU+AaH+AaI+Afr+Agd+BTr,[[U,ED+' / LCC Germany'+ss,Cld,BVG,CIY,CIX,Blx,Bre,BUy,BUT,CVy,BUj,BUm,[B,K,'5243']]],[[U,'ETRS89_LCC_Germany_E_N',CcG,BVD,CIY,CIX,Blx,Bre,BUy,BUT,BUa]]],['5235',l+' +lat_0=7.000471527777778 +lon_0=80.77171308333334 +k=0.9999238418'+Aom+AmB+oW+q+a,[[U,'SLD99 / Sri Lanka'+op+' 1999',CsC,BUd,[A,C,AOp],[A,E,AOq],CIW,BUc,BWE,CVy,BUj,BUm,[B,K,'5235']]],[[U,'SLD99_Sri_Lanka_Grid_1999',[S,'GCS_SLD99',[V,AJx,BZG],BUU,BUW],BUd,[A,C,AOp],[A,E,AOq],CIW,BUc,BWE,BUa]]],['5234',l+' +lat_0=7.000480277777778 +lon_0=80.77171111111112 +k=0.9999238418'+BDh+AmB+ASf+q+a,[[U,ACD+' / Sri Lanka'+op,CsX,BUd,[A,C,AOr],[A,E,AOs],CIW,BVP,Bae,CVy,BUj,BUm,[B,K,'5234']]],[[U,'Kandawala_Sri_Lanka_Grid',[S,'GCS_Kandawala',CaT,BUU,BUW],BUd,[A,C,AOr],[A,E,AOs],CIW,BVP,Bae,BUa]]],['5223',AqA+AlL+Io+Akk,[[U,'WGS 84 / Gabon TM',ClU,BUd,BUX,BYZ,BUg,BUc,BWE,CVy,BUl,BUk,[B,K,'5223']]],[[U,'WGS_84_Gabon_TM',Cbp,BUd,BUX,BYZ,BUg,BUc,BWE,BUa]]],['5221',BCc+' +lon_0=42.5'+BRv+BHs,[[U,AwD+' /'+" "+AGz+' East'+QM,Con,BvH,Bpr,CAi,Bpq,Bpp,BUt,BUy,BUT,CVy,BUl,BUk,[B,K,'5221']]],[[U,'S_JTSK_Ferro_Krovak_East_North',Cjf,BvH,Bpr,CAi,Bpq,Bpp,BUt,BUy,BUT,BUa]]],['5188',BNa+' +k=1'+BBo+j+c+q+a,[[U,'Korea 2000 / East Sea Belt 2010',CmC,BUd,BWT,Bdg,BUf,BVP,BkO,CVy,[B,K,'5188']]],[[U,'Korea_2000_East_Sea_Belt_2010',CdI,BUd,BWT,Bdg,BUf,BVP,BkO,BUa]]],['5187',BNZ+' +k=1'+BBo+j+c+q+a,[[U,'Korea 2000 / East Belt 2010',CmC,BUd,BWT,BWQ,BUf,BVP,BkO,CVy,[B,K,'5187']]],[[U,'Korea_2000_East_Belt_2010',CdI,BUd,BWT,BWQ,BUf,BVP,BkO,BUa]]],['5186',BHG+' +k=1'+BBo+j+c+q+a,[[U,'Korea 2000 /'+Gh+' Belt 2010',CmC,BUd,BWT,Blq,BUf,BVP,BkO,CVy,[B,K,'5186']]],[[U,'Korea_2000_Central_Belt_2010',CdI,BUd,BWT,Blq,BUf,BVP,BkO,BUa]]],['5185',BJo+' +k=1'+BBo+j+c+q+a,[[U,'Korea 2000 / West Belt 2010',CmC,BUd,BWT,Blp,BUf,BVP,BkO,CVy,[B,K,'5185']]],[[U,'Korea_2000_West_Belt_2010',CdI,BUd,BWT,Blp,BUf,BVP,BkO,BUa]]],['5184',BNa+' +k=1'+AmV+j+c+q+a,[[U,'Korea 2000 / East Sea Belt',CmC,BUd,BWT,Bdg,BUf,BVP,BWE,CVy,[B,K,'5184']]],[[U,'Korea_2000_East_Sea_Belt',CdI,BUd,BWT,Bdg,BUf,BVP,BWE,BUa]]],['5183',BNZ+' +k=1'+AmV+j+c+q+a,[[U,'Korea 2000 / East Belt',CmC,BUd,BWT,BWQ,BUf,BVP,BWE,CVy,[B,K,'5183']]],[[U,'Korea_2000_East_Belt',CdI,BUd,BWT,BWQ,BUf,BVP,BWE,BUa]]],['5182',BHG+' +k=1'+Dp+' +y_0=550000'+j+c+q+a,[[U,'Korea 2000 /'+Gh+' Belt Jeju',CmC,BUd,BWT,Blq,BUf,BVP,Bwm,CVy,[B,K,'5182']]],[[U,'Korea_2000_Central_Belt_Jeju',CdI,BUd,BWT,Blq,BUf,BVP,Bwm,BUa]]],['5181',BHG+' +k=1'+AmV+j+c+q+a,[[U,'Korea 2000 /'+Gh+' Belt',CmC,BUd,BWT,Blq,BUf,BVP,BWE,CVy,[B,K,'5181']]],[[U,'Korea_2000_Central_Belt',CdI,BUd,BWT,Blq,BUf,BVP,BWE,BUa]]],['5180',BJo+' +k=1'+AmV+j+c+q+a,[[U,'Korea 2000 / West Belt',CmC,BUd,BWT,Blp,BUf,BVP,BWE,CVy,[B,K,'5180']]],[[U,'Korea_2000_West_Belt',CdI,BUd,BWT,Blp,BUf,BVP,BWE,BUa]]],['5179',Amz+AEE+HH+Nd+BHF+q+a,[[U,'Korea 2000 / Unified CS',CmC,BUd,BWT,BmC,BUg,BWa,BYH,CVy,[B,K,'5179']]],[[U,'Korea_2000_Unified_CS',CdI,BUd,BWT,BmC,BUg,BWa,BYH,BUa]]],['5178',Amz+AEE+HH+Nd+SJ+Apx,[[U,qy+' 1985 / Unified CS',CmB,BUd,BWT,BmC,BUg,BWa,BYH,CVy,[B,K,'5178']]],[[U,'Korean_1985_Unified_CS',Ccv,BUd,BWT,BmC,BUg,BWa,BYH,BUa]]],['5177',Amz+' +lon_0=131.0028902777778 +k=1'+BHk,[[U,qy+' 1985 /'+MF+' East Sea Belt',CmB,BUd,BWT,[A,E,AOt],BUf,BVP,BWE,CVy,[B,K,'5177']]],[[U,'Korean_1985_Modified_East_Sea_Belt',Ccv,BUd,BWT,[A,E,AOt],BUf,BVP,BWE,BUa]]],['5176',Amz+' +lon_0=129.0028902777778 +k=1'+BHk,[[U,qy+' 1985 /'+MF+' East Belt',CmB,BUd,BWT,[A,E,AOu],BUf,BVP,BWE,CVy,[B,K,'5176']]],[[U,'Korean_1985_Modified_East_Belt',Ccv,BUd,BWT,[A,E,AOu],BUf,BVP,BWE,BUa]]],['5175',Amz+AaJ+' +k=1'+Dp+' +y_0=550000'+Apx,[[U,qy+' 1985 /'+MF+Gh+' Belt Jeju',CmB,BUd,BWT,CIV,BUf,BVP,Bwm,CVy,[B,K,'5175']]],[[U,'Korean_1985_Modified_Central_Belt_Jeju',Ccv,BUd,BWT,CIV,BUf,BVP,Bwm,BUa]]],['5174',Amz+AaJ+' +k=1'+BHk,[[U,qy+' 1985 /'+MF+Gh+' Belt',CmB,BUd,BWT,CIV,BUf,BVP,BWE,CVy,[B,K,'5174']]],[[U,'Korean_1985_Modified_Central_Belt',Ccv,BUd,BWT,CIV,BUf,BVP,BWE,BUa]]],['5173',Amz+' +lon_0=125.0028902777778 +k=1'+BHk,[[U,qy+' 1985 /'+MF+' West Belt',CmB,BUd,BWT,[A,E,AOv],BUf,BVP,BWE,CVy,[B,K,'5173']]],[[U,'Korean_1985_Modified_West_Belt',Ccv,BUd,BWT,[A,E,AOv],BUf,BVP,BWE,BUa]]],['5172',BNa+' +k=1'+BHk,[[U,QL+' 1892 / Korea East Sea Belt',Cmz,BUd,BWT,Bdg,BUf,BVP,BWE,CVy,[B,K,'5172']]],[[U,'Tokyo_1892_Korea_East_Sea_Belt',CfC,BUd,BWT,Bdg,BUf,BVP,BWE,BUa]]],['5171',BNZ+' +k=1'+BHk,[[U,QL+' 1892 / Korea East Belt',Cmz,BUd,BWT,BWQ,BUf,BVP,BWE,CVy,[B,K,'5171']]],[[U,'Tokyo_1892_Korea_East_Belt',CfC,BUd,BWT,BWQ,BUf,BVP,BWE,BUa]]],['5170',BHG+' +k=1'+BHk,[[U,QL+' 1892 / Korea'+Gh+' Belt',Cmz,BUd,BWT,Blq,BUf,BVP,BWE,CVy,[B,K,'5170']]],[[U,'Tokyo_1892_Korea_Central_Belt',CfC,BUd,BWT,Blq,BUf,BVP,BWE,BUa]]],['5169',BJo+' +k=1'+BHk,[[U,QL+' 1892 / Korea West Belt',Cmz,BUd,BWT,Blp,BUf,BVP,BWE,CVy,[B,K,'5169']]],[[U,'Tokyo_1892_Korea_West_Belt',CfC,BUd,BWT,Blp,BUf,BVP,BWE,BUa]]],['5168',BHG+' +k=1'+Dp+' +y_0=550000'+Apx,[[U,qy+' 1985 /'+Gh+' Belt Jeju',CmB,BUd,BWT,Blq,BUf,BVP,Bwm,CVy,[B,K,'5168']]],[[U,'Korean_1985_Central_Belt_Jeju',Ccv,BUd,BWT,Blq,BUf,BVP,Bwm,BUa]]],['5167',BNa+' +k=1'+BHk,[[U,qy+' 1985 / East Sea Belt',CmB,BUd,BWT,Bdg,BUf,BVP,BWE,CVy,[B,K,'5167']]],[[U,'Korean_1985_East_Sea_Belt',Ccv,BUd,BWT,Bdg,BUf,BVP,BWE,BUa]]],['5130',Amx+' +lon_0=30.5 +k=1'+BTn,[[U,ED+' / NTM zone 30',Cld,BUd,BWq,[A,E,Qt],BUf,BWV,BVg,CVy,[B,K,'5130']]],[[U,'ETRS89_NTM_zone_30',CcG,BUd,BWq,[A,E,Qt],BUf,BWV,BVg,BUa]]],['5129',Amx+' +lon_0=29.5 +k=1'+BTn,[[U,ED+' / NTM zone 29',Cld,BUd,BWq,[A,E,Lt],BUf,BWV,BVg,CVy,[B,K,'5129']]],[[U,'ETRS89_NTM_zone_29',CcG,BUd,BWq,[A,E,Lt],BUf,BWV,BVg,BUa]]],['5128',Amx+' +lon_0=28.5 +k=1'+BTn,[[U,ED+' / NTM zone 28',Cld,BUd,BWq,[A,E,ac],BUf,BWV,BVg,CVy,[B,K,'5128']]],[[U,'ETRS89_NTM_zone_28',CcG,BUd,BWq,[A,E,ac],BUf,BWV,BVg,BUa]]],['5127',Amx+' +lon_0=27.5 +k=1'+BTn,[[U,ED+' / NTM zone 27',Cld,BUd,BWq,[A,E,ZB],BUf,BWV,BVg,CVy,[B,K,'5127']]],[[U,'ETRS89_NTM_zone_27',CcG,BUd,BWq,[A,E,ZB],BUf,BWV,BVg,BUa]]],['5126',Amx+' +lon_0=26.5 +k=1'+BTn,[[U,ED+' / NTM zone 26',Cld,BUd,BWq,CPg,BUf,BWV,BVg,CVy,[B,K,'5126']]],[[U,'ETRS89_NTM_zone_26',CcG,BUd,BWq,CPg,BUf,BWV,BVg,BUa]]],['5125',Amx+' +lon_0=25.5 +k=1'+BTn,[[U,ED+' / NTM zone 25',Cld,BUd,BWq,[A,E,AEj],BUf,BWV,BVg,CVy,[B,K,'5125']]],[[U,'ETRS89_NTM_zone_25',CcG,BUd,BWq,[A,E,AEj],BUf,BWV,BVg,BUa]]],['5124',Amx+' +lon_0=24.5 +k=1'+BTn,[[U,ED+' / NTM zone 24',Cld,BUd,BWq,CPf,BUf,BWV,BVg,CVy,[B,K,'5124']]],[[U,'ETRS89_NTM_zone_24',CcG,BUd,BWq,CPf,BUf,BWV,BVg,BUa]]],['5123',Amx+' +lon_0=23.5 +k=1'+BTn,[[U,ED+' / NTM zone 23',Cld,BUd,BWq,CPe,BUf,BWV,BVg,CVy,[B,K,'5123']]],[[U,'ETRS89_NTM_zone_23',CcG,BUd,BWq,CPe,BUf,BWV,BVg,BUa]]],['5122',Amx+' +lon_0=22.5 +k=1'+BTn,[[U,ED+' / NTM zone 22',Cld,BUd,BWq,[A,E,AJO],BUf,BWV,BVg,CVy,[B,K,'5122']]],[[U,'ETRS89_NTM_zone_22',CcG,BUd,BWq,[A,E,AJO],BUf,BWV,BVg,BUa]]],['5121',Amx+' +lon_0=21.5 +k=1'+BTn,[[U,ED+' / NTM zone 21',Cld,BUd,BWq,CPd,BUf,BWV,BVg,CVy,[B,K,'5121']]],[[U,'ETRS89_NTM_zone_21',CcG,BUd,BWq,CPd,BUf,BWV,BVg,BUa]]],['5120',Amx+' +lon_0=20.5 +k=1'+BTn,[[U,ED+' / NTM zone 20',Cld,BUd,BWq,CPc,BUf,BWV,BVg,CVy,[B,K,'5120']]],[[U,'ETRS89_NTM_zone_20',CcG,BUd,BWq,CPc,BUf,BWV,BVg,BUa]]],['5119',Amx+' +lon_0=19.5 +k=1'+BTn,[[U,ED+' / NTM zone 19',Cld,BUd,BWq,CPb,BUf,BWV,BVg,CVy,[B,K,'5119']]],[[U,'ETRS89_NTM_zone_19',CcG,BUd,BWq,CPb,BUf,BWV,BVg,BUa]]],['5118',Amx+' +lon_0=18.5 +k=1'+BTn,[[U,ED+' / NTM zone 18',Cld,BUd,BWq,CPa,BUf,BWV,BVg,CVy,[B,K,'5118']]],[[U,'ETRS89_NTM_zone_18',CcG,BUd,BWq,CPa,BUf,BWV,BVg,BUa]]],['5117',Amx+' +lon_0=17.5 +k=1'+BTn,[[U,ED+' / NTM zone 17',Cld,BUd,BWq,[A,E,AEg],BUf,BWV,BVg,CVy,[B,K,'5117']]],[[U,'ETRS89_NTM_zone_17',CcG,BUd,BWq,[A,E,AEg],BUf,BWV,BVg,BUa]]],['5116',Amx+Age+' +k=1'+BTn,[[U,ED+' / NTM zone 16',Cld,BUd,BWq,Brd,BUf,BWV,BVg,CVy,[B,K,'5116']]],[[U,'ETRS89_NTM_zone_16',CcG,BUd,BWq,Brd,BUf,BWV,BVg,BUa]]],['5115',Amx+' +lon_0=15.5 +k=1'+BTn,[[U,ED+' / NTM zone 15',Cld,BUd,BWq,CPZ,BUf,BWV,BVg,CVy,[B,K,'5115']]],[[U,'ETRS89_NTM_zone_15',CcG,BUd,BWq,CPZ,BUf,BWV,BVg,BUa]]],['5114',Amx+' +lon_0=14.5 +k=1'+BTn,[[U,ED+' / NTM zone 14',Cld,BUd,BWq,CPY,BUf,BWV,BVg,CVy,[B,K,'5114']]],[[U,'ETRS89_NTM_zone_14',CcG,BUd,BWq,CPY,BUf,BWV,BVg,BUa]]],['5113',Amx+' +lon_0=13.5 +k=1'+BTn,[[U,ED+' / NTM zone 13',Cld,BUd,BWq,CIU,BUf,BWV,BVg,CVy,[B,K,'5113']]],[[U,'ETRS89_NTM_zone_13',CcG,BUd,BWq,CIU,BUf,BWV,BVg,BUa]]],['5112',Amx+' +lon_0=12.5 +k=1'+BTn,[[U,ED+' / NTM zone 12',Cld,BUd,BWq,CAh,BUf,BWV,BVg,CVy,[B,K,'5112']]],[[U,'ETRS89_NTM_zone_12',CcG,BUd,BWq,CAh,BUf,BWV,BVg,BUa]]],['5111',Amx+' +lon_0=11.5 +k=1'+BTn,[[U,ED+' / NTM zone 11',Cld,BUd,BWq,Bun,BUf,BWV,BVg,CVy,[B,K,'5111']]],[[U,'ETRS89_NTM_zone_11',CcG,BUd,BWq,Bun,BUf,BWV,BVg,BUa]]],['5110',Amx+Agd+' +k=1'+BTn,[[U,ED+' / NTM zone 10',Cld,BUd,BWq,Bre,BUf,BWV,BVg,CVy,[B,K,'5110']]],[[U,'ETRS89_NTM_zone_10',CcG,BUd,BWq,Bre,BUf,BWV,BVg,BUa]]],['5109',Amx+' +lon_0=9.5 +k=1'+BTn,[[U,ED+' / NTM zone 9',Cld,BUd,BWq,CAg,BUf,BWV,BVg,CVy,[B,K,'5109']]],[[U,'ETRS89_NTM_zone_9',CcG,BUd,BWq,CAg,BUf,BWV,BVg,BUa]]],['5108',Amx+' +lon_0=8.5 +k=1'+BTn,[[U,ED+' / NTM zone 8',Cld,BUd,BWq,CAf,BUf,BWV,BVg,CVy,[B,K,'5108']]],[[U,'ETRS89_NTM_zone_8',CcG,BUd,BWq,CAf,BUf,BWV,BVg,BUa]]],['5107',Amx+' +lon_0=7.5 +k=1'+BTn,[[U,ED+' / NTM zone 7',Cld,BUd,BWq,CQI,BUf,BWV,BVg,CVy,[B,K,'5107']]],[[U,'ETRS89_NTM_zone_7',CcG,BUd,BWq,CQI,BUf,BWV,BVg,BUa]]],['5106',Amx+' +lon_0=6.5 +k=1'+BTn,[[U,ED+' / NTM zone 6',Cld,BUd,BWq,CQH,BUf,BWV,BVg,CVy,[B,K,'5106']]],[[U,'ETRS89_NTM_zone_6',CcG,BUd,BWq,CQH,BUf,BWV,BVg,BUa]]],['5105',Amx+' +lon_0=5.5 +k=1'+BTn,[[U,ED+' / NTM zone 5',Cld,BUd,BWq,CQG,BUf,BWV,BVg,CVy,[B,K,'5105']]],[[U,'ETRS89_NTM_zone_5',CcG,BUd,BWq,CQG,BUf,BWV,BVg,BUa]]],['5072',BKM+' +lat_0=23'+BKL+c+q+a,[[U,AL+' / Conus'+" "+Pk,ClW,BeL,BoW,BaF,Bxe,Bxd,BUy,BUT,CVy,BUl,BUk,[B,K,'5072']]],[[U,'NAD83_NSRS2007_Conus_Albers',Cbq,BeK,BoW,BaF,Bxt,BlA,BUy,BUT,BUa]]],['5071',BKM+' +lat_0=23'+BKL+c+q+a,[[U,Aj+' / Conus'+" "+Pk,ClX,BeL,BoW,BaF,Bxe,Bxd,BUy,BUT,CVy,BUl,BUk,[B,K,'5071']]],[[U,'NAD83_HARN_Conus_Albers',Cbs,BeK,BoW,BaF,Bxt,BlA,BUy,BUT,BUa]]],['5070',BKM+' +lat_0=23'+BKL+c+q+a,[[U,Bx+' / Conus'+" "+Pk,ClV,BeL,BoW,BaF,Bxe,Bxd,BUy,BUT,CVy,BUl,BUk,[B,K,'5070']]],[[U,'NAD83_Conus_Albers',Cbn,BeK,BoW,BaF,Bxt,BlA,BUy,BUT,BUa]]],['5069',BKM+' +lat_0=23'+BDd+BIh+a,[[U,Dg+' / Conus'+" "+Pk,ClZ,BeL,BoW,BaF,Bxe,Bxd,BUy,BUT,CVy,BUl,BUk,[B,K,'5069']]],[[U,'NAD27_Conus_Albers',Cbw,BeK,BoW,BaF,Bxt,BlA,BUy,BUT,BUa]]],['5048',Amc+j+c+q+a,[[U,ED+' / TM35FIN(N,E)',Cld,BUd,BUX,BWP,BUg,BUc,BUT,CVy,[B,K,'5048']]],[[U,'ETRS89_TM35FIN_N_E',CcG,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['5042',AlU+' +lat_ts=-90'+BLq,[[U,'WGS 84 / UPS South (E,N)',ClU,BcF,BVX,BYA,BoS,BVW,BYH,CVy,BUj,BUm,[B,K,'5042']]],[[U,'WGS_84_UPS_South_E_N',Cbp,Bhc,CQa,BYA,BVW,BYH,BUa]]],['5041',BEu+BLq,[[U,'WGS 84 / UPS'+QM+' (E,N)',ClU,BcF,Bcw,BYA,BoS,BVW,BYH,CVy,BUj,BUm,[B,K,'5041']]],[[U,'WGS_84_UPS_North_E_N',Cbp,BuP,Buq,BYA,BVW,BYH,BUa]]],['5018',l+Na+AWr+' +k=1'+Ajh+BP+VH+q+a,[[U,jo+' / Portuguese'+op+' New',Csf,BUd,Bat,CIT,BUf,BUy,BUT,CVy,BUl,BUk,[B,K,'5018']]],[[U,'Lisbon_Portuguese_Grid_New',[S,'GCS_Lisbon',CYt,BUU,BUW],BUd,Bat,CIT,BUf,BUy,BUT,BUa]]],['5016',BUO,[[U,AGN+' / UTM zone 28N',CnC,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'5016']]],[[U,'PTRA08_UTM_zone_28N',CfK,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['5015',AmS+j+c+q+a,[[U,AGN+' / UTM zone 26N',CnC,BUd,BUX,BaV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'5015']]],[[U,'PTRA08_UTM_zone_26N',CfK,BUd,BUX,BaV,BUg,BUc,BUT,BUa]]],['5014',Any+j+c+q+a,[[U,AGN+' / UTM zone 25N',CnC,BUd,BUX,BZx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'5014']]],[[U,'PTRA08_UTM_zone_25N',CfK,BUd,BUX,BZx,BUg,BUc,BUT,BUa]]],['4839',AU+AaH+AaI+Afr+Agd+BTr,[[U,ED+' / LCC Germany (N-E)',Cld,BVG,CIY,CIX,Blx,Bre,BUy,BUT,CVy,[B,K,'4839']]],[[U,'ETRS89_LCC_Germany_N_E',CcG,BVD,CIY,CIX,Blx,Bre,BUy,BUT,BUa]]],['4826',AU+' +lat_1=15 +lat_2=16.66666666666667 +lat_0=15.83333333333333 +lon_0=-24 +x_0=161587.83 +y_0=128511.202'+Akk,[[U,'WGS 84 /'+" "+py+' Verde'+QV,ClU,BVG,[A,W,Gz],[A,Y,AOw],[A,C,AOx],CIS,CAe,[A,G,Aio],CVy,[n,'M',k],[n,'P',g],[B,K,'4826']]],[[U,'WGS_84_Cape_Verde_National',Cbp,BVD,[A,W,Gz],[A,Y,AOw],[A,C,AOx],CIS,CAe,[A,G,Aio],BUa]]],['4822',Ape+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 135E',Cle,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'4822']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_135E',CcI,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['4812',Asl+' +k=1'+AyW,[Csh],[Cpk]],['4800',Apd+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 129E',Cle,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'4800']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_129E',CcI,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['4799',Aty+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 126E',Cle,BUd,BUX,Bao,BUf,BUc,BUT,CVy,[B,K,'4799']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_126E',CcI,BUd,BUX,Bao,BUf,BUc,BUT,BUa]]],['4798',ApF+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 123E',Cle,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'4798']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_123E',CcI,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['4797',Atw+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 120E',Cle,BUd,BUX,BbG,BUf,BUc,BUT,CVy,[B,K,'4797']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_120E',CcI,BUd,BUX,BbG,BUf,BUc,BUT,BUa]]],['4796',ApE+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 117E',Cle,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'4796']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_117E',CcI,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['4795',Atu+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 114E',Cle,BUd,BUX,BZy,BUf,BUc,BUT,CVy,[B,K,'4795']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_114E',CcI,BUd,BUX,BZy,BUf,BUc,BUT,BUa]]],['4794',ApX+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 111E',Cle,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'4794']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_111E',CcI,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['4793',Ats+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 108E',Cle,BUd,BUX,Bbi,BUf,BUc,BUT,CVy,[B,K,'4793']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_108E',CcI,BUd,BUX,Bbi,BUf,BUc,BUT,BUa]]],['4792',ApW+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 105E',Cle,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'4792']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_105E',CcI,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['4791',Atq+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 102E',Cle,BUd,BUX,Ban,BUf,BUc,BUT,CVy,[B,K,'4791']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_102E',CcI,BUd,BUX,Ban,BUf,BUc,BUT,BUa]]],['4790',Apc+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 99E',Cle,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'4790']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_99E',CcI,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['4789',Ato+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 96E',Cle,BUd,BUX,BbF,BUf,BUc,BUT,CVy,[B,K,'4789']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_96E',CcI,BUd,BUX,BbF,BUf,BUc,BUT,BUa]]],['4788',Apb+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 93E',Cle,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'4788']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_93E',CcI,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['4787',Asm+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 90E',Cle,BUd,BUX,BYP,BUf,BUc,BUT,CVy,[B,K,'4787']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_90E',CcI,BUd,BUX,BYP,BUf,BUc,BUT,BUa]]],['4786',Apa+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 87E',Cle,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'4786']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_87E',CcI,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['4785',Atm+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 84E',Cle,BUd,BUX,Bbh,BUf,BUc,BUT,CVy,[B,K,'4785']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_84E',CcI,BUd,BUX,Bbh,BUf,BUc,BUT,BUa]]],['4784',ApZ+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 81E',Cle,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'4784']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_81E',CcI,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['4783',Atk+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 78E',Cle,BUd,BUX,Bam,BUf,BUc,BUT,CVy,[B,K,'4783']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_78E',CcI,BUd,BUX,Bam,BUf,BUc,BUT,BUa]]],['4782',ApY+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+Ajc+' CM 75E',Cle,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'4782']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_CM_75E',CcI,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['4781',Ape+' +k=1'+BDU+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 45',Cle,BUd,BUX,BWd,BUf,BkR,BUT,CVy,[B,K,'4781']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_45',CcI,BUd,BUX,BWd,BUf,BkR,BUT,BUa]]],['4780',Asl+' +k=1'+BDT+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 44',Cle,BUd,BUX,BaU,BUf,Blo,BUT,CVy,[B,K,'4780']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_44',CcI,BUd,BUX,BaU,BUf,Blo,BUT,BUa]]],['4779',Apd+' +k=1'+BDS+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 43',Cle,BUd,BUX,BWQ,BUf,BkQ,BUT,CVy,[B,K,'4779']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_43',CcI,BUd,BUX,BWQ,BUf,BkQ,BUT,BUa]]],['4778',Aty+' +k=1'+BDR+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 42',Cle,BUd,BUX,Bao,BUf,Bln,BUT,CVy,[B,K,'4778']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_42',CcI,BUd,BUX,Bao,BUf,Bln,BUT,BUa]]],['4777',ApF+' +k=1'+BDQ+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 41',Cle,BUd,BUX,BWU,BUf,BkP,BUT,CVy,[B,K,'4777']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_41',CcI,BUd,BUX,BWU,BUf,BkP,BUT,BUa]]],['4776',Atw+' +k=1'+BDP+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 40',Cle,BUd,BUX,BbG,BUf,BkV,BUT,CVy,[B,K,'4776']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_40',CcI,BUd,BUX,BbG,BUf,BkV,BUT,BUa]]],['4775',ApE+' +k=1'+BDO+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 39',Cle,BUd,BUX,BWS,BUf,BkZ,BUT,CVy,[B,K,'4775']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_39',CcI,BUd,BUX,BWS,BUf,BkZ,BUT,BUa]]],['4774',Atu+' +k=1'+BDN+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 38',Cle,BUd,BUX,BZy,BUf,BkU,BUT,CVy,[B,K,'4774']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_38',CcI,BUd,BUX,BZy,BUf,BkU,BUT,BUa]]],['4773',ApX+' +k=1'+BDM+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 37',Cle,BUd,BUX,BWX,BUf,BkY,BUT,CVy,[B,K,'4773']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_37',CcI,BUd,BUX,BWX,BUf,BkY,BUT,BUa]]],['4772',Ats+' +k=1'+BDL+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 36',Cle,BUd,BUX,Bbi,BUf,BkT,BUT,CVy,[B,K,'4772']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_36',CcI,BUd,BUX,Bbi,BUf,BkT,BUT,BUa]]],['4771',ApW+' +k=1'+BDK+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 35',Cle,BUd,BUX,BWK,BUf,BkX,BUT,CVy,[B,K,'4771']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_35',CcI,BUd,BUX,BWK,BUf,BkX,BUT,BUa]]],['4770',Atq+' +k=1'+BDJ+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 34',Cle,BUd,BUX,Ban,BUf,BkS,BUT,CVy,[B,K,'4770']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_34',CcI,BUd,BUX,Ban,BUf,BkS,BUT,BUa]]],['4769',Apc+' +k=1'+AwV+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 33',Cle,BUd,BUX,BWf,BUf,BdO,BUT,CVy,[B,K,'4769']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_33',CcI,BUd,BUX,BWf,BUf,BdO,BUT,BUa]]],['4768',Ato+' +k=1'+ArV+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 32',Cle,BUd,BUX,BbF,BUf,BcO,BUT,CVy,[B,K,'4768']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_32',CcI,BUd,BUX,BbF,BUf,BcO,BUT,BUa]]],['4767',Apb+' +k=1'+AqY+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 31',Cle,BUd,BUX,BWk,BUf,BaY,BUT,CVy,[B,K,'4767']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_31',CcI,BUd,BUX,BWk,BUf,BaY,BUT,BUa]]],['4766',Asm+' +k=1'+AsZ+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 30',Cle,BUd,BUX,BYP,BUf,BcN,BUT,CVy,[B,K,'4766']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_30',CcI,BUd,BUX,BYP,BUf,BcN,BUT,BUa]]],['4656',Apa+' +k=1'+AsY+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 29',Cle,BUd,BUX,BXK,BUf,Baq,BUT,CVy,[B,K,'4656']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_29',CcI,BUd,BUX,BXK,BUf,Baq,BUT,BUa]]],['4655',Atm+' +k=1'+AsX+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 28',Cle,BUd,BUX,Bbh,BUf,Bbm,BUT,CVy,[B,K,'4655']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_28',CcI,BUd,BUX,Bbh,BUf,Bbm,BUT,BUa]]],['4654',ApZ+' +k=1'+AsW+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 27',Cle,BUd,BUX,BWz,BUf,Bbl,BUT,CVy,[B,K,'4654']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_27',CcI,BUd,BUX,BWz,BUf,Bbl,BUT,BUa]]],['4653',Atk+' +k=1'+AsV+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 26',Cle,BUd,BUX,Bam,BUf,Bbj,BUT,CVy,[B,K,'4653']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_26',CcI,BUd,BUX,Bam,BUf,Bbj,BUT,BUa]]],['4652',ApY+' +k=1'+AsU+AmH,[[U,'New'+" "+DP+' /'+Ajc+' zone 25',Cle,BUd,BUX,BWs,BUf,Bbk,BUT,CVy,[B,K,'4652']]],[[U,'New_Beijing_3_degree_Gauss_Kruger_zone_25',CcI,BUd,BUX,BWs,BUf,Bbk,BUT,BUa]]],['4647',BSQ+ArV+j+c+q+a,[[U,ED+' / UTM zone 32N (zE-N)',Cld,BUd,BUX,BWO,BUg,BcO,BUT,CVy,BUj,BUm,[B,K,'4647']]],[[U,'ETRS89_UTM_zone_32N_zE_N',CcG,BUd,BUX,BWO,BUg,BcO,BUT,BUa]]],['4589',Ape+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 135E',Cle,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'4589']]],[[U,'New_Beijing_Gauss_Kruger_CM_135E',CcI,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['4588',Apd+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 129E',Cle,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'4588']]],[[U,'New_Beijing_Gauss_Kruger_CM_129E',CcI,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['4587',ApF+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 123E',Cle,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'4587']]],[[U,'New_Beijing_Gauss_Kruger_CM_123E',CcI,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['4586',ApE+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 117E',Cle,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'4586']]],[[U,'New_Beijing_Gauss_Kruger_CM_117E',CcI,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['4585',ApX+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 111E',Cle,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'4585']]],[[U,'New_Beijing_Gauss_Kruger_CM_111E',CcI,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['4584',ApW+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 105E',Cle,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'4584']]],[[U,'New_Beijing_Gauss_Kruger_CM_105E',CcI,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['4583',Apc+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 99E',Cle,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'4583']]],[[U,'New_Beijing_Gauss_Kruger_CM_99E',CcI,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['4582',Apb+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 93E',Cle,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'4582']]],[[U,'New_Beijing_Gauss_Kruger_CM_93E',CcI,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['4581',Apa+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 87E',Cle,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'4581']]],[[U,'New_Beijing_Gauss_Kruger_CM_87E',CcI,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['4580',ApZ+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 81E',Cle,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'4580']]],[[U,'New_Beijing_Gauss_Kruger_CM_81E',CcI,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['4579',ApY+' +k=1'+AyW,[[U,'New'+" "+DP+' /'+AW+' CM 75E',Cle,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'4579']]],[[U,'New_Beijing_Gauss_Kruger_CM_75E',CcI,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['4578',Ape+' +k=1'+AsT+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 23',Cle,BUd,BUX,BWd,BUf,BbT,BUT,CVy,[B,K,'4578']]],[[U,'New_Beijing_Gauss_Kruger_zone_23',CcI,BUd,BUX,BWd,BUf,BbT,BUT,BUa]]],['4577',Apd+' +k=1'+AsS+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 22',Cle,BUd,BUX,BWQ,BUf,Baz,BUT,CVy,[B,K,'4577']]],[[U,'New_Beijing_Gauss_Kruger_zone_22',CcI,BUd,BUX,BWQ,BUf,Baz,BUT,BUa]]],['4576',ApF+' +k=1'+AsR+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 21',Cle,BUd,BUX,BWU,BUf,BbS,BUT,CVy,[B,K,'4576']]],[[U,'New_Beijing_Gauss_Kruger_zone_21',CcI,BUd,BUX,BWU,BUf,BbS,BUT,BUa]]],['4575',ApE+' +k=1'+AsQ+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 20',Cle,BUd,BUX,BWS,BUf,Bay,BUT,CVy,[B,K,'4575']]],[[U,'New_Beijing_Gauss_Kruger_zone_20',CcI,BUd,BUX,BWS,BUf,Bay,BUT,BUa]]],['4574',ApX+' +k=1'+ArM+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 19',Cle,BUd,BUX,BWX,BUf,BbR,BUT,CVy,[B,K,'4574']]],[[U,'New_Beijing_Gauss_Kruger_zone_19',CcI,BUd,BUX,BWX,BUf,BbR,BUT,BUa]]],['4573',ApW+' +k=1'+AsP+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 18',Cle,BUd,BUX,BWK,BUf,BbQ,BUT,CVy,[B,K,'4573']]],[[U,'New_Beijing_Gauss_Kruger_zone_18',CcI,BUd,BUX,BWK,BUf,BbQ,BUT,BUa]]],['4572',Apc+' +k=1'+AwT+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 17',Cle,BUd,BUX,BWf,BUf,Bcf,BUT,CVy,[B,K,'4572']]],[[U,'New_Beijing_Gauss_Kruger_zone_17',CcI,BUd,BUX,BWf,BUf,Bcf,BUT,BUa]]],['4571',Apb+' +k=1'+AwS+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 16',Cle,BUd,BUX,BWk,BUf,BbP,BUT,CVy,[B,K,'4571']]],[[U,'New_Beijing_Gauss_Kruger_zone_16',CcI,BUd,BUX,BWk,BUf,BbP,BUT,BUa]]],['4570',Apa+' +k=1'+ArP+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 15',Cle,BUd,BUX,BXK,BUf,BbO,BUT,CVy,[B,K,'4570']]],[[U,'New_Beijing_Gauss_Kruger_zone_15',CcI,BUd,BUX,BXK,BUf,BbO,BUT,BUa]]],['4569',ApZ+' +k=1'+ArO+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 14',Cle,BUd,BUX,BWz,BUf,Bad,BUT,CVy,[B,K,'4569']]],[[U,'New_Beijing_Gauss_Kruger_zone_14',CcI,BUd,BUX,BWz,BUf,Bad,BUT,BUa]]],['4568',ApY+' +k=1'+ArN+AmH,[[U,'New'+" "+DP+' /'+AW+' zone 13',Cle,BUd,BUX,BWs,BUf,Bax,BUT,CVy,[B,K,'4568']]],[[U,'New_Beijing_Gauss_Kruger_zone_13',CcI,BUd,BUX,BWs,BUf,Bax,BUT,BUa]]],['4559',BUA,[[U,'RRAF 1991 / UTM zone 20N',CrS,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'4559']]],[[U,'RRAF_1991_UTM_zone_20N',[S,'GCS_RRAF 1991',CaV,BUU,BUW],BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['4554',Ape+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 135E',Clf,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'4554']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_135E',CcH,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['4553',Asl+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 132E',Clf,BUd,BUX,BaU,BUf,BUc,BUT,CVy,[B,K,'4553']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_132E',CcH,BUd,BUX,BaU,BUf,BUc,BUT,BUa]]],['4552',Apd+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 129E',Clf,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'4552']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_129E',CcH,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['4551',Aty+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 126E',Clf,BUd,BUX,Bao,BUf,BUc,BUT,CVy,[B,K,'4551']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_126E',CcH,BUd,BUX,Bao,BUf,BUc,BUT,BUa]]],['4550',ApF+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 123E',Clf,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'4550']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_123E',CcH,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['4549',Atw+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 120E',Clf,BUd,BUX,BbG,BUf,BUc,BUT,CVy,[B,K,'4549']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_120E',CcH,BUd,BUX,BbG,BUf,BUc,BUT,BUa]]],['4548',ApE+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 117E',Clf,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'4548']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_117E',CcH,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['4547',Atu+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 114E',Clf,BUd,BUX,BZy,BUf,BUc,BUT,CVy,[B,K,'4547']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_114E',CcH,BUd,BUX,BZy,BUf,BUc,BUT,BUa]]],['4546',ApX+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 111E',Clf,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'4546']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_111E',CcH,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['4545',Ats+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 108E',Clf,BUd,BUX,Bbi,BUf,BUc,BUT,CVy,[B,K,'4545']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_108E',CcH,BUd,BUX,Bbi,BUf,BUc,BUT,BUa]]],['4544',ApW+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 105E',Clf,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'4544']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_105E',CcH,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['4543',Atq+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 102E',Clf,BUd,BUX,Ban,BUf,BUc,BUT,CVy,[B,K,'4543']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_102E',CcH,BUd,BUX,Ban,BUf,BUc,BUT,BUa]]],['4542',Apc+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 99E',Clf,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'4542']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_99E',CcH,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['4541',Ato+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 96E',Clf,BUd,BUX,BbF,BUf,BUc,BUT,CVy,[B,K,'4541']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_96E',CcH,BUd,BUX,BbF,BUf,BUc,BUT,BUa]]],['4540',Apb+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 93E',Clf,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'4540']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_93E',CcH,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['4539',Asm+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 90E',Clf,BUd,BUX,BYP,BUf,BUc,BUT,CVy,[B,K,'4539']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_90E',CcH,BUd,BUX,BYP,BUf,BUc,BUT,BUa]]],['4538',Apa+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 87E',Clf,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'4538']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_87E',CcH,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['4537',Atm+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 84E',Clf,BUd,BUX,Bbh,BUf,BUc,BUT,CVy,[B,K,'4537']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_84E',CcH,BUd,BUX,Bbh,BUf,BUc,BUT,BUa]]],['4536',ApZ+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 81E',Clf,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'4536']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_81E',CcH,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['4535',Atk+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 78E',Clf,BUd,BUX,Bam,BUf,BUc,BUT,CVy,[B,K,'4535']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_78E',CcH,BUd,BUX,Bam,BUf,BUc,BUT,BUa]]],['4534',ApY+' +k=1'+BEy,[[U,Ce+' /'+Ajc+' CM 75E',Clf,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'4534']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_CM_75E',CcH,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['4533',Ape+' +k=1'+BDU+j+q+a,[[U,Ce+' /'+Ajc+' zone 45',Clf,BUd,BUX,BWd,BUf,BkR,BUT,CVy,[B,K,'4533']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_45',CcH,BUd,BUX,BWd,BUf,BkR,BUT,BUa]]],['4532',Asl+' +k=1'+BDT+j+q+a,[[U,Ce+' /'+Ajc+' zone 44',Clf,BUd,BUX,BaU,BUf,Blo,BUT,CVy,[B,K,'4532']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_44',CcH,BUd,BUX,BaU,BUf,Blo,BUT,BUa]]],['4531',Apd+' +k=1'+BDS+j+q+a,[[U,Ce+' /'+Ajc+' zone 43',Clf,BUd,BUX,BWQ,BUf,BkQ,BUT,CVy,[B,K,'4531']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_43',CcH,BUd,BUX,BWQ,BUf,BkQ,BUT,BUa]]],['4530',Aty+' +k=1'+BDR+j+q+a,[[U,Ce+' /'+Ajc+' zone 42',Clf,BUd,BUX,Bao,BUf,Bln,BUT,CVy,[B,K,'4530']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_42',CcH,BUd,BUX,Bao,BUf,Bln,BUT,BUa]]],['4529',ApF+' +k=1'+BDQ+j+q+a,[[U,Ce+' /'+Ajc+' zone 41',Clf,BUd,BUX,BWU,BUf,BkP,BUT,CVy,[B,K,'4529']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_41',CcH,BUd,BUX,BWU,BUf,BkP,BUT,BUa]]],['4528',Atw+' +k=1'+BDP+j+q+a,[[U,Ce+' /'+Ajc+' zone 40',Clf,BUd,BUX,BbG,BUf,BkV,BUT,CVy,[B,K,'4528']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_40',CcH,BUd,BUX,BbG,BUf,BkV,BUT,BUa]]],['4527',ApE+' +k=1'+BDO+j+q+a,[[U,Ce+' /'+Ajc+' zone 39',Clf,BUd,BUX,BWS,BUf,BkZ,BUT,CVy,[B,K,'4527']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_39',CcH,BUd,BUX,BWS,BUf,BkZ,BUT,BUa]]],['4526',Atu+' +k=1'+BDN+j+q+a,[[U,Ce+' /'+Ajc+' zone 38',Clf,BUd,BUX,BZy,BUf,BkU,BUT,CVy,[B,K,'4526']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_38',CcH,BUd,BUX,BZy,BUf,BkU,BUT,BUa]]],['4525',ApX+' +k=1'+BDM+j+q+a,[[U,Ce+' /'+Ajc+' zone 37',Clf,BUd,BUX,BWX,BUf,BkY,BUT,CVy,[B,K,'4525']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_37',CcH,BUd,BUX,BWX,BUf,BkY,BUT,BUa]]],['4524',Ats+' +k=1'+BDL+j+q+a,[[U,Ce+' /'+Ajc+' zone 36',Clf,BUd,BUX,Bbi,BUf,BkT,BUT,CVy,[B,K,'4524']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_36',CcH,BUd,BUX,Bbi,BUf,BkT,BUT,BUa]]],['4523',ApW+' +k=1'+BDK+j+q+a,[[U,Ce+' /'+Ajc+' zone 35',Clf,BUd,BUX,BWK,BUf,BkX,BUT,CVy,[B,K,'4523']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_35',CcH,BUd,BUX,BWK,BUf,BkX,BUT,BUa]]],['4522',Atq+' +k=1'+BDJ+j+q+a,[[U,Ce+' /'+Ajc+' zone 34',Clf,BUd,BUX,Ban,BUf,BkS,BUT,CVy,[B,K,'4522']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_34',CcH,BUd,BUX,Ban,BUf,BkS,BUT,BUa]]],['4521',Apc+' +k=1'+AwV+j+q+a,[[U,Ce+' /'+Ajc+' zone 33',Clf,BUd,BUX,BWf,BUf,BdO,BUT,CVy,[B,K,'4521']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_33',CcH,BUd,BUX,BWf,BUf,BdO,BUT,BUa]]],['4520',Ato+' +k=1'+ArV+j+q+a,[[U,Ce+' /'+Ajc+' zone 32',Clf,BUd,BUX,BbF,BUf,BcO,BUT,CVy,[B,K,'4520']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_32',CcH,BUd,BUX,BbF,BUf,BcO,BUT,BUa]]],['4519',Apb+' +k=1'+AqY+j+q+a,[[U,Ce+' /'+Ajc+' zone 31',Clf,BUd,BUX,BWk,BUf,BaY,BUT,CVy,[B,K,'4519']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_31',CcH,BUd,BUX,BWk,BUf,BaY,BUT,BUa]]],['4518',Asm+' +k=1'+AsZ+j+q+a,[[U,Ce+' /'+Ajc+' zone 30',Clf,BUd,BUX,BYP,BUf,BcN,BUT,CVy,[B,K,'4518']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_30',CcH,BUd,BUX,BYP,BUf,BcN,BUT,BUa]]],['4517',Apa+' +k=1'+AsY+j+q+a,[[U,Ce+' /'+Ajc+' zone 29',Clf,BUd,BUX,BXK,BUf,Baq,BUT,CVy,[B,K,'4517']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_29',CcH,BUd,BUX,BXK,BUf,Baq,BUT,BUa]]],['4516',Atm+' +k=1'+AsX+j+q+a,[[U,Ce+' /'+Ajc+' zone 28',Clf,BUd,BUX,Bbh,BUf,Bbm,BUT,CVy,[B,K,'4516']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_28',CcH,BUd,BUX,Bbh,BUf,Bbm,BUT,BUa]]],['4515',ApZ+' +k=1'+AsW+j+q+a,[[U,Ce+' /'+Ajc+' zone 27',Clf,BUd,BUX,BWz,BUf,Bbl,BUT,CVy,[B,K,'4515']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_27',CcH,BUd,BUX,BWz,BUf,Bbl,BUT,BUa]]],['4514',Atk+' +k=1'+AsV+j+q+a,[[U,Ce+' /'+Ajc+' zone 26',Clf,BUd,BUX,Bam,BUf,Bbj,BUT,CVy,[B,K,'4514']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_26',CcH,BUd,BUX,Bam,BUf,Bbj,BUT,BUa]]],['4513',ApY+' +k=1'+AsU+j+q+a,[[U,Ce+' /'+Ajc+' zone 25',Clf,BUd,BUX,BWs,BUf,Bbk,BUT,CVy,[B,K,'4513']]],[[U,'CGCS2000_3_degree_Gauss_Kruger_zone_25',CcH,BUd,BUX,BWs,BUf,Bbk,BUT,BUa]]],['4512',Ape+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 135E',Clf,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'4512']]],[[U,'CGCS2000_Gauss_Kruger_CM_135E',CcH,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['4511',Apd+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 129E',Clf,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'4511']]],[[U,'CGCS2000_Gauss_Kruger_CM_129E',CcH,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['4510',ApF+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 123E',Clf,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'4510']]],[[U,'CGCS2000_Gauss_Kruger_CM_123E',CcH,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['4509',ApE+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 117E',Clf,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'4509']]],[[U,'CGCS2000_Gauss_Kruger_CM_117E',CcH,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['4508',ApX+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 111E',Clf,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'4508']]],[[U,'CGCS2000_Gauss_Kruger_CM_111E',CcH,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['4507',ApW+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 105E',Clf,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'4507']]],[[U,'CGCS2000_Gauss_Kruger_CM_105E',CcH,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['4506',Apc+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 99E',Clf,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'4506']]],[[U,'CGCS2000_Gauss_Kruger_CM_99E',CcH,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['4505',Apb+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 93E',Clf,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'4505']]],[[U,'CGCS2000_Gauss_Kruger_CM_93E',CcH,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['4504',Apa+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 87E',Clf,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'4504']]],[[U,'CGCS2000_Gauss_Kruger_CM_87E',CcH,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['4503',ApZ+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 81E',Clf,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'4503']]],[[U,'CGCS2000_Gauss_Kruger_CM_81E',CcH,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['4502',ApY+' +k=1'+BEy,[[U,Ce+' /'+AW+' CM 75E',Clf,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'4502']]],[[U,'CGCS2000_Gauss_Kruger_CM_75E',CcH,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['4501',Ape+' +k=1'+AsT+j+q+a,[[U,Ce+' /'+AW+' zone 23',Clf,BUd,BUX,BWd,BUf,BbT,BUT,CVy,[B,K,'4501']]],[[U,'CGCS2000_Gauss_Kruger_zone_23',CcH,BUd,BUX,BWd,BUf,BbT,BUT,BUa]]],['4500',Apd+' +k=1'+AsS+j+q+a,[[U,Ce+' /'+AW+' zone 22',Clf,BUd,BUX,BWQ,BUf,Baz,BUT,CVy,[B,K,'4500']]],[[U,'CGCS2000_Gauss_Kruger_zone_22',CcH,BUd,BUX,BWQ,BUf,Baz,BUT,BUa]]],['4499',ApF+' +k=1'+AsR+j+q+a,[[U,Ce+' /'+AW+' zone 21',Clf,BUd,BUX,BWU,BUf,BbS,BUT,CVy,[B,K,'4499']]],[[U,'CGCS2000_Gauss_Kruger_zone_21',CcH,BUd,BUX,BWU,BUf,BbS,BUT,BUa]]],['4498',ApE+' +k=1'+AsQ+j+q+a,[[U,Ce+' /'+AW+' zone 20',Clf,BUd,BUX,BWS,BUf,Bay,BUT,CVy,[B,K,'4498']]],[[U,'CGCS2000_Gauss_Kruger_zone_20',CcH,BUd,BUX,BWS,BUf,Bay,BUT,BUa]]],['4497',ApX+' +k=1'+ArM+j+q+a,[[U,Ce+' /'+AW+' zone 19',Clf,BUd,BUX,BWX,BUf,BbR,BUT,CVy,[B,K,'4497']]],[[U,'CGCS2000_Gauss_Kruger_zone_19',CcH,BUd,BUX,BWX,BUf,BbR,BUT,BUa]]],['4496',ApW+' +k=1'+AsP+j+q+a,[[U,Ce+' /'+AW+' zone 18',Clf,BUd,BUX,BWK,BUf,BbQ,BUT,CVy,[B,K,'4496']]],[[U,'CGCS2000_Gauss_Kruger_zone_18',CcH,BUd,BUX,BWK,BUf,BbQ,BUT,BUa]]],['4495',Apc+' +k=1'+AwT+j+q+a,[[U,Ce+' /'+AW+' zone 17',Clf,BUd,BUX,BWf,BUf,Bcf,BUT,CVy,[B,K,'4495']]],[[U,'CGCS2000_Gauss_Kruger_zone_17',CcH,BUd,BUX,BWf,BUf,Bcf,BUT,BUa]]],['4494',Apb+' +k=1'+AwS+j+q+a,[[U,Ce+' /'+AW+' zone 16',Clf,BUd,BUX,BWk,BUf,BbP,BUT,CVy,[B,K,'4494']]],[[U,'CGCS2000_Gauss_Kruger_zone_16',CcH,BUd,BUX,BWk,BUf,BbP,BUT,BUa]]],['4493',Apa+' +k=1'+ArP+j+q+a,[[U,Ce+' /'+AW+' zone 15',Clf,BUd,BUX,BXK,BUf,BbO,BUT,CVy,[B,K,'4493']]],[[U,'CGCS2000_Gauss_Kruger_zone_15',CcH,BUd,BUX,BXK,BUf,BbO,BUT,BUa]]],['4492',ApZ+' +k=1'+ArO+j+q+a,[[U,Ce+' /'+AW+' zone 14',Clf,BUd,BUX,BWz,BUf,Bad,BUT,CVy,[B,K,'4492']]],[[U,'CGCS2000_Gauss_Kruger_zone_14',CcH,BUd,BUX,BWz,BUf,Bad,BUT,BUa]]],['4491',ApY+' +k=1'+ArN+j+q+a,[[U,Ce+' /'+AW+' zone 13',Clf,BUd,BUX,BWs,BUf,Bax,BUT,CVy,[B,K,'4491']]],[[U,'CGCS2000_Gauss_Kruger_zone_13',CcH,BUd,BUX,BWs,BUf,Bax,BUT,BUa]]],['4489',BUK,[[U,yF+' Datum of 1993 / UTM zone 16N',CmR,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'4489']]],[[U,'Mexican_Datum_of_1993_UTM_zone_16N',CdT,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['4488',BUJ,[[U,yF+' Datum of 1993 / UTM zone 15N',CmR,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'4488']]],[[U,'Mexican_Datum_of_1993_UTM_zone_15N',CdT,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['4487',BUI,[[U,yF+' Datum of 1993 / UTM zone 14N',CmR,BUd,BUX,BXU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'4487']]],[[U,'Mexican_Datum_of_1993_UTM_zone_14N',CdT,BUd,BUX,BXU,BUg,BUc,BUT,BUa]]],['4486',BUH,[[U,yF+' Datum of 1993 / UTM zone 13N',CmR,BUd,BUX,BZS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'4486']]],[[U,'Mexican_Datum_of_1993_UTM_zone_13N',CdT,BUd,BUX,BZS,BUg,BUc,BUT,BUa]]],['4485',BUG,[[U,yF+' Datum of 1993 / UTM zone 12N',CmR,BUd,BUX,BXs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'4485']]],[[U,'Mexican_Datum_of_1993_UTM_zone_12N',CdT,BUd,BUX,BXs,BUg,BUc,BUT,BUa]]],['4484',BUF,[[U,yF+' Datum of 1993 / UTM zone 11N',CmR,BUd,BUX,BXx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'4484']]],[[U,'Mexican_Datum_of_1993_UTM_zone_11N',CdT,BUd,BUX,BXx,BUg,BUc,BUT,BUa]]],['4471',AmA+BEd,[[U,'RGM04 / UTM zone 38S',Crv,BUd,BUX,BWe,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'4471']]],[[U,'RGM04_UTM_zone_38S',[S,'GCS_RGM04',[V,AAt,BUh],BUU,BUW],BUd,BUX,BWe,BUg,BUc,BUo,BUa]]],['4467',BUD,[[U,'RGSPM06 / UTM zone 21N',Cri,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'4467']]],[[U,'RGSPM06_UTM_zone_21N',[S,'GCS_RGSPM06',[V,qg,BUh],BUU,BUW],BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['4462',AU+' +lat_1=-18 +lat_2=-36 +lat_0=-27'+gv+Aky,[[U,'WGS 84 /'+" "+Qy+' Centre for Remote Sensing'+PW,ClU,BVG,Bwl,Brc,[A,C,Sp],BaU,BUy,BUT,CVy,BUj,BUm,[B,K,'4462']]],[[U,'WGS_84_Australian_Centre_for_Remote_Sensing_Lambert',Cbp,BVD,Bwl,Brc,[A,C,Sp],BaU,BUy,BUT,BUa]]],['4457',BGY+AkO,[[U,Bx+' / South Dakota'+Akg,ClV,BVG,Bih,Big,BYM,BXb,BVj,BUT,CVz,BUl,BUk,[B,K,'4457']]],[[U,'NAD83_South_Dakota_North_ftUS',Cbn,BVD,Bih,Big,BYM,BXb,BVj,BUT,BUr]]],['4456',Auv+Th+Px+yX+CW+ACd+Alk,[[U,Dg+' / New York Long'+fA,ClZ,BVG,BgE,BgD,BWy,BgC,BVW,BXV,CVz,BUl,BUk,[B,K,'4456']]],[[U,'NAD27_New_York_Long_Island',Cbw,BVD,BgE,BgD,BWy,BgC,BVW,BXV,BUr]]],['4455',Awy+Vt+Asy,[[U,Dg+' /'+eG+' South',ClZ,BVG,BgL,BgK,BXi,BZb,BVW,BUT,CVz,BUl,BUk,[B,K,'4455']]],[[U,'NAD27_Pennsylvania_South',Cbw,BVD,BgL,BgK,BXi,BZb,BVW,BUT,BUr]]],['4439',AjX+rz+AyF,[[U,Bx+' / BLM 19N'+DE,ClV,BUd,BUX,BWZ,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4439']]],[[U,'NAD83_BLM_19N_ftUS',Cbn,BUd,BUX,BWZ,BUg,BWI,BUT,BUr]]],['4438',AjX+Aca+AyF,[[U,Bx+' / BLM 18N'+DE,ClV,BUd,BUX,BWo,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4438']]],[[U,'NAD83_BLM_18N_ftUS',Cbn,BUd,BUX,BWo,BUg,BWI,BUT,BUr]]],['4437',BKq+j+c+q+a,[[U,AL+' / Puerto Rico and Virgin Is.',ClW,BVG,Bke,Bkd,Bkc,Bkb,BVP,Bae,CVy,BUl,BUk,[B,K,'4437']]],[[U,'NAD83_NSRS2007_Puerto_Rico_and_Virgin_Is',Cbq,BVD,Bke,Bkd,Bkc,Bkb,BVP,Bae,BUa]]],['4434',ArK+' +k=1'+AwR+BKY,[[U,AlK+' /'+Ajc+' zone 8',CmE,BUd,BUX,BYU,BUf,BhY,BUT,CVy,[B,K,'4434']]],[[U,'Pulkovo_1942_83_3_degree_Gauss_Kruger_zone_8',CdH,BUd,BUX,BYU,BUf,BhY,BUT,BUa]]],['4433',AjX+' +lon_0=-105'+AyF,[[U,Bx+' / BLM 13N'+DE,ClV,BUd,BUX,BZS,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4433']]],[[U,'NAD83_BLM_13N_ftUS',Cbn,BUd,BUX,BZS,BUg,BWI,BUT,BUr]]],['4432',BJk+AyF,[[U,Bx+' / BLM 12N'+DE,ClV,BUd,BUX,BXs,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4432']]],[[U,'NAD83_BLM_12N_ftUS',Cbn,BUd,BUX,BXs,BUg,BWI,BUT,BUr]]],['4431',BJj+AyF,[[U,Bx+' / BLM 11N'+DE,ClV,BUd,BUX,BXx,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4431']]],[[U,'NAD83_BLM_11N_ftUS',Cbn,BUd,BUX,BXx,BUg,BWI,BUT,BUr]]],['4430',AjX+' +lon_0=-123'+AyF,[[U,Bx+' / BLM 10N'+DE,ClV,BUd,BUX,Bap,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4430']]],[[U,'NAD83_BLM_10N_ftUS',Cbn,BUd,BUX,Bap,BUg,BWI,BUT,BUr]]],['4429',AjX+Agb+AyF,[[U,Bx+' / BLM 9N'+DE,ClV,BUd,BUX,BaA,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4429']]],[[U,'NAD83_BLM_9N_ftUS',Cbn,BUd,BUX,BaA,BUg,BWI,BUT,BUr]]],['4428',AjX+Agf+AyF,[[U,Bx+' / BLM 8N'+DE,ClV,BUd,BUX,BZz,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4428']]],[[U,'NAD83_BLM_8N_ftUS',Cbn,BUd,BUX,BZz,BUg,BWI,BUT,BUr]]],['4427',AjX+' +lon_0=-141'+AyF,[[U,Bx+' / BLM 7N'+DE,ClV,BUd,BUX,BZn,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4427']]],[[U,'NAD83_BLM_7N_ftUS',Cbn,BUd,BUX,BZn,BUg,BWI,BUT,BUr]]],['4426',AjX+AHL+AyF,[[U,Bx+' / BLM 6N'+DE,ClV,BUd,BUX,BYy,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4426']]],[[U,'NAD83_BLM_6N_ftUS',Cbn,BUd,BUX,BYy,BUg,BWI,BUT,BUr]]],['4425',AjX+Aga+AyF,[[U,Bx+' / BLM 5N'+DE,ClV,BUd,BUX,BZK,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4425']]],[[U,'NAD83_BLM_5N_ftUS',Cbn,BUd,BUX,BZK,BUg,BWI,BUT,BUr]]],['4424',AjX+' +lon_0=-159'+AyF,[[U,Bx+' / BLM 4N'+DE,ClV,BUd,BUX,Bac,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4424']]],[[U,'NAD83_BLM_4N_ftUS',Cbn,BUd,BUX,Bac,BUg,BWI,BUT,BUr]]],['4423',AjX+ATZ+AyF,[[U,Bx+' / BLM 3N'+DE,ClV,BUd,BUX,BaZ,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4423']]],[[U,'NAD83_BLM_3N_ftUS',Cbn,BUd,BUX,BaZ,BUg,BWI,BUT,BUr]]],['4422',BEV+AyF,[[U,Bx+' / BLM 2N'+DE,ClV,BUd,BUX,BYV,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4422']]],[[U,'NAD83_BLM_2N_ftUS',Cbn,BUd,BUX,BYV,BUg,BWI,BUT,BUr]]],['4421',AxL+AyF,[[U,Bx+' / BLM 1N'+DE,ClV,BUd,BUX,BYF,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4421']]],[[U,'NAD83_BLM_1N_ftUS',Cbn,BUd,BUX,BYF,BUg,BWI,BUT,BUr]]],['4420',BEU+AyF,[[U,Bx+' / BLM 60N'+DE,ClV,BUd,BUX,BXo,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4420']]],[[U,'NAD83_BLM_60N_ftUS',Cbn,BUd,BUX,BXo,BUg,BWI,BUT,BUr]]],['4419',AjX+rz+Axo,[[U,Dg+' / BLM 19N'+DE,ClZ,BUd,BUX,BWZ,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4419']]],[[U,'NAD27_BLM_19N_ftUS',Cbw,BUd,BUX,BWZ,BUg,BWI,BUT,BUr]]],['4418',AjX+Aca+Axo,[[U,Dg+' / BLM 18N'+DE,ClZ,BUd,BUX,BWo,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4418']]],[[U,'NAD27_BLM_18N_ftUS',Cbw,BUd,BUX,BWo,BUg,BWI,BUT,BUr]]],['4417',ApT+' +k=1'+ApC+BKY,[[U,AlK+' /'+Ajc+' zone 7',CmE,BUd,BUX,BWR,BUf,BbK,BUT,CVy,[B,K,'4417']]],[[U,'Pulkovo_1942_83_3_degree_Gauss_Kruger_zone_7',CdH,BUd,BUX,BWR,BUf,BbK,BUT,BUa]]],['4415',AU+' +lat_1=-6.5 +lat_2=-11.5 +lat_0=-9'+Aft+Aom+BEK+q+a,[[U,yL+' 1955 /'+" "+yL+PW,Cmr,BVG,CPX,COf,BoE,Blm,BUc,BWE,CVy,BUl,BUk,[B,K,'4415']]],[[U,'Katanga_1955_Katanga_Lambert',CeV,BVD,CPX,COf,BoE,Blm,BUc,BWE,BUa]]],['4414',l+' +lat_0=13.5 +lon_0=144.75 +k=1'+NA+fR+j+c+q+a,[[U,Aj+' / Guam Map'+op,ClX,BUd,CIt,CBJ,BUf,BWV,Bae,CVy,BUl,BUk,[B,K,'4414']]],[[U,'NAD83_HARN_Guam_Map_Grid',Cbs,BUd,CIt,CBJ,BUf,BWV,Bae,BUa]]],['4413',AjX+' +lon_0=-105'+Axo,[[U,Dg+' / BLM 13N'+DE,ClZ,BUd,BUX,BZS,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4413']]],[[U,'NAD27_BLM_13N_ftUS',Cbw,BUd,BUX,BZS,BUg,BWI,BUT,BUr]]],['4412',BJk+Axo,[[U,Dg+' / BLM 12N'+DE,ClZ,BUd,BUX,BXs,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4412']]],[[U,'NAD27_BLM_12N_ftUS',Cbw,BUd,BUX,BXs,BUg,BWI,BUT,BUr]]],['4411',BJj+Axo,[[U,Dg+' / BLM 11N'+DE,ClZ,BUd,BUX,BXx,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4411']]],[[U,'NAD27_BLM_11N_ftUS',Cbw,BUd,BUX,BXx,BUg,BWI,BUT,BUr]]],['4410',AjX+' +lon_0=-123'+Axo,[[U,Dg+' / BLM 10N'+DE,ClZ,BUd,BUX,Bap,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4410']]],[[U,'NAD27_BLM_10N_ftUS',Cbw,BUd,BUX,Bap,BUg,BWI,BUT,BUr]]],['4409',AjX+Agb+Axo,[[U,Dg+' / BLM 9N'+DE,ClZ,BUd,BUX,BaA,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4409']]],[[U,'NAD27_BLM_9N_ftUS',Cbw,BUd,BUX,BaA,BUg,BWI,BUT,BUr]]],['4408',AjX+Agf+Axo,[[U,Dg+' / BLM 8N'+DE,ClZ,BUd,BUX,BZz,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4408']]],[[U,'NAD27_BLM_8N_ftUS',Cbw,BUd,BUX,BZz,BUg,BWI,BUT,BUr]]],['4407',AjX+' +lon_0=-141'+Axo,[[U,Dg+' / BLM 7N'+DE,ClZ,BUd,BUX,BZn,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4407']]],[[U,'NAD27_BLM_7N_ftUS',Cbw,BUd,BUX,BZn,BUg,BWI,BUT,BUr]]],['4406',AjX+AHL+Axo,[[U,Dg+' / BLM 6N'+DE,ClZ,BUd,BUX,BYy,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4406']]],[[U,'NAD27_BLM_6N_ftUS',Cbw,BUd,BUX,BYy,BUg,BWI,BUT,BUr]]],['4405',AjX+Aga+Axo,[[U,Dg+' / BLM 5N'+DE,ClZ,BUd,BUX,BZK,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4405']]],[[U,'NAD27_BLM_5N_ftUS',Cbw,BUd,BUX,BZK,BUg,BWI,BUT,BUr]]],['4404',AjX+' +lon_0=-159'+Axo,[Csj],[CpZ]],['4403',AjX+ATZ+Axo,[[U,Dg+' / BLM 3N'+DE,ClZ,BUd,BUX,BaZ,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4403']]],[[U,'NAD27_BLM_3N_ftUS',Cbw,BUd,BUX,BaZ,BUg,BWI,BUT,BUr]]],['4402',BEV+Axo,[[U,Dg+' / BLM 2N'+DE,ClZ,BUd,BUX,BYV,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4402']]],[[U,'NAD27_BLM_2N_ftUS',Cbw,BUd,BUX,BYV,BUg,BWI,BUT,BUr]]],['4401',AxL+Axo,[[U,Dg+' / BLM 1N'+DE,ClZ,BUd,BUX,BYF,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4401']]],[[U,'NAD27_BLM_1N_ftUS',Cbw,BUd,BUX,BYF,BUg,BWI,BUT,BUr]]],['4400',BEU+Axo,[[U,Dg+' / BLM 60N'+DE,ClZ,BUd,BUX,BXo,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4400']]],[[U,'NAD27_BLM_60N_ftUS',Cbw,BUd,BUX,BXo,BUg,BWI,BUT,BUr]]],['4399',AxI+Axo,[[U,Dg+' / BLM 59N'+DE,ClZ,BUd,BUX,BXj,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'4399']]],[[U,'NAD27_BLM_59N_ftUS',Cbw,BUd,BUX,BXj,BUg,BWI,BUT,BUr]]],['4398',SE+' +lat_0=5.893922222222222 +lon_0=102.1772916666667'+BJZ,[[U,Au,Cds,Bgy,[A,C,AOy],[A,E,AOz],BUy,BUT,BUa,[B,Bo,'4398']]],[[U,QZ,Cdr,Bgx,[A,C,AOy],[A,E,AOz],BUy,BUT,BUa,Bal]]],['4397',SE+' +lat_0=4.859380555555555 +lon_0=100.8167666666667'+Kw+' +y_0=133453.669'+BSJ,[[U,Au,Cds,Bgy,[A,C,APA],[A,E,APB],BUy,[A,G,Aip],BUa,[B,Bo,'4397']]],[[U,QZ,Cdr,Bgx,[A,C,APA],[A,E,APB],BUy,[A,G,Aip],BUa,Bal]]],['4396',SE+' +lat_0=5.965147222222223 +lon_0=100.6375944444444'+BJZ,[[U,Au,Cds,Bgy,[A,C,APC],[A,E,APD],BUy,BUT,BUa,[B,Bo,'4396']]],[[U,QZ,Cdr,Bgx,[A,C,APC],[A,E,APD],BUy,BUT,BUa,Bal]]],['4395',SE+' +lat_0=5.421325 +lon_0=100.3458694444444'+BJZ,[[U,Au,Cds,Bgy,CFk,[A,E,APE],BUy,BUT,BUa,[B,Bo,'4395']]],[[U,QZ,Cdr,Bgx,CFk,[A,E,APE],BUy,BUT,BUa,Bal]]],['4394',SE+' +lat_0=4.946141666666667 +lon_0=102.8952083333333'+BJZ,[[U,Au,Cds,Bgy,[A,C,APF],[A,E,APG],BUy,BUT,BUa,[B,Bo,'4394']]],[[U,QZ,Cdr,Bgx,[A,C,APF],[A,E,APG],BUy,BUT,BUa,Bal]]],['4393',SE+' +lat_0=3.680344444444444 +lon_0=101.5082444444444 +x_0=-21759.438 +y_0=55960.906'+BSJ,[[U,Au,Cds,Bgy,[A,C,APH],[A,E,API],[A,I,Aiq],CAd,BUa,[B,Bo,'4393']]],[[U,QZ,Cdr,Bgx,[A,C,APH],[A,E,API],[A,I,Aiq],CAd,BUa,Bal]]],['4392',SE+' +lat_0=3.710972222222222 +lon_0=102.4361777777778'+BJZ,[[U,Au,Cds,Bgy,[A,C,APJ],[A,E,APK],BUy,BUT,BUa,[B,Bo,'4392']]],[[U,QZ,Cdr,Bgx,[A,C,APJ],[A,E,APK],BUy,BUT,BUa,Bal]]],['4391',SE+' +lat_0=2.712283333333334 +lon_0=101.9411666666667 +x_0=-242.005 +y_0=-948.547'+BSJ,[[U,Au,Cds,Bgy,[A,C,APL],[A,E,APM],CFj,CFi,BUa,[B,Bo,'4391']]],[[U,QZ,Cdr,Bgx,[A,C,APL],[A,E,APM],CFj,CFi,BUa,Bal]]],['4390',SE+' +lat_0=2.042583333333333 +lon_0=103.5627583333333'+BJZ,[[U,Au,Cds,Bgy,[A,C,APN],[A,E,APO],BUy,BUT,BUa,[B,Bo,'4390']]],[[U,QZ,Cdr,Bgx,[A,C,APN],[A,E,APO],BUy,BUT,BUa,Bal]]],['4217',AxI+AyF,[Csi],[CpY]],['4096',ApP+' +k=1'+RP+UZ+j+c+q+a,[[U,ED+' / DKTM4',Cld,BUd,BUX,BWH,BUf,BXP,BZJ,CVy,BUj,BUm,[B,K,'4096']]],[[U,'ETRS89_DKTM4',CcG,BUd,BUX,BWH,BUf,BXP,BZJ,BUa]]],['4095',AjX+' +lon_0=11.75'+hz+Cj+UZ+j+c+q+a,[[U,ED+' / DKTM3',Cld,BUd,BUX,COe,Bab,BVY,BZJ,CVy,BUj,BUm,[B,K,'4095']]],[[U,'ETRS89_DKTM3',CcG,BUd,BUX,COe,Bab,BVY,BZJ,BUa]]],['4094',AjX+rD+hz+Fm+UZ+j+c+q+a,[[U,ED+' / DKTM2',Cld,BUd,BUX,BcM,Bab,BVh,BZJ,CVy,BUj,BUm,[B,K,'4094']]],[[U,'ETRS89_DKTM2',CcG,BUd,BUX,BcM,Bab,BVh,BZJ,BUa]]],['4093',Aqa+hz+Dp+UZ+j+c+q+a,[[U,ED+' / DKTM1',Cld,BUd,BUX,BWO,Bab,BVP,BZJ,CVy,BUj,BUm,[B,K,'4093']]],[[U,'ETRS89_DKTM1',CcG,BUd,BUX,BWO,Bab,BVP,BZJ,BUa]]],['4088','+proj=eqc +lat_ts=0'+At+BCY+BQ+' +a=6371007 +b=6371007'+q+a,[[U,'World Equidistant Cylindrical (Sphere)',CoQ,[L,AfF],BUX,BYA,BUy,BUT,CVy,BUl,BUk,[B,K,'4088']]],[[U,'World_Equidistant_Cylindrical_Sphere',[S,gI+' datum based upon the GRS'+BIa,[V,ru,CQd],BUU,BUW],[L,AJr],BYA,BUy,BUT,BUa]]],['4087','+proj=eqc +lat_ts=0'+At+BCY+Ajx+q+a,[[U,'WGS 84 / World Equidistant Cylindrical',ClU,[L,AfF],BUX,BYA,BUy,BUT,CVy,BUl,BUk,[B,K,'4087']]],[[U,'WGS_84_World_Equidistant_Cylindrical',Cbp,[L,AJr],BYA,BUy,BUT,BUa]]],['4083',BUO,[[U,sA+' / UTM zone 28N',Cnf,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'4083']]],[[U,'REGCAN95_UTM_zone_28N',CgD,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['4082',Aou+j+c+q+a,[[U,sA+' / UTM zone 27N',Cnf,BUd,BUX,Bee,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'4082']]],[[U,'REGCAN95_UTM_zone_27N',CgD,BUd,BUX,Bee,BUg,BUc,BUT,BUa]]],['4071',BJy+AKK+q+a,[[U,'Chua / UTM zone 23S',CsE,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'4071']]],[[U,'Chua_UTM_zone_23S',[S,'GCS_Chua',Cba,BUU,BUW],BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['4063',Amc+BEd,[[U,'RGRDC 2005 / UTM zone 35S',Clv,BUd,BUX,BWP,BUg,BUc,BUo,CVy,BUl,BUk,[B,K,'4063']]],[[U,'RGRDC_2005_UTM_zone_35S',Ccq,BUd,BUX,BWP,BUg,BUc,BUo,BUa]]],['4062',Anl+BEd,[[U,'RGRDC 2005 / UTM zone 34S',Clv,BUd,BUX,BWR,BUg,BUc,BUo,CVy,BUl,BUk,[B,K,'4062']]],[[U,'RGRDC_2005_UTM_zone_34S',Ccq,BUd,BUX,BWR,BUg,BUc,BUo,BUa]]],['4061',AmO+BEd,[[U,'RGRDC 2005 / UTM zone 33S',Clv,BUd,BUX,BWH,BUg,BUc,BUo,CVy,BUl,BUk,[B,K,'4061']]],[[U,'RGRDC_2005_UTM_zone_33S',Ccq,BUd,BUX,BWH,BUg,BUc,BUo,BUa]]],['4060',BEt+BTw,[[U,'RGRDC 2005 / Congo TM zone 28',Clv,BUd,BUX,BhX,BUt,BUc,BUo,CVy,BUl,BUk,[B,K,'4060']]],[[U,'RGRDC_2005_Congo_TM_zone_28',Ccq,BUd,BUX,BhX,BUt,BUc,BUo,BUa]]],['4059',BJi+BTw,[[U,'RGRDC 2005 / Congo TM zone 26',Clv,BUd,BUX,Blm,BUt,BUc,BUo,CVy,BUl,BUk,[B,K,'4059']]],[[U,'RGRDC_2005_Congo_TM_zone_26',Ccq,BUd,BUX,Blm,BUt,BUc,BUo,BUa]]],['4058',ArK+BTw,[[U,'RGRDC 2005 / Congo TM zone 24',Clv,BUd,BUX,BYU,BUt,BUc,BUo,CVy,BUl,BUk,[B,K,'4058']]],[[U,'RGRDC_2005_Congo_TM_zone_24',Ccq,BUd,BUX,BYU,BUt,BUc,BUo,BUa]]],['4057',AjX+' +lon_0=22'+BTw,[[U,'RGRDC 2005 / Congo TM zone 22',Clv,BUd,BUX,BoD,BUt,BUc,BUo,CVy,BUl,BUk,[B,K,'4057']]],[[U,'RGRDC_2005_Congo_TM_zone_22',Ccq,BUd,BUX,BoD,BUt,BUc,BUo,BUa]]],['4056',BIM+BTw,[[U,'RGRDC 2005 / Congo TM zone 20',Clv,BUd,BUX,BmG,BUt,BUc,BUo,CVy,BUl,BUk,[B,K,'4056']]],[[U,'RGRDC_2005_Congo_TM_zone_20',Ccq,BUd,BUX,BmG,BUt,BUc,BUo,BUa]]],['4051',BEs+BTw,[[U,'RGRDC 2005 / Congo TM zone 18',Clv,BUd,BUX,Bef,BUt,BUc,BUo,CVy,BUl,BUk,[B,K,'4051']]],[[U,'RGRDC_2005_Congo_TM_zone_18',Ccq,BUd,BUX,Bef,BUt,BUc,BUo,BUa]]],['4050',AjX+' +lon_0=16'+BTw,[[U,'RGRDC 2005 / Congo TM zone 16',Clv,BUd,BUX,Bri,BUt,BUc,BUo,CVy,BUl,BUk,[B,K,'4050']]],[[U,'RGRDC_2005_Congo_TM_zone_16',Ccq,BUd,BUX,Bri,BUt,BUc,BUo,BUa]]],['4049',AjX+' +lon_0=14'+BTw,[[U,'RGRDC 2005 / Congo TM zone 14',Clv,BUd,BUX,Brj,BUt,BUc,BUo,CVy,BUl,BUk,[B,K,'4049']]],[[U,'RGRDC_2005_Congo_TM_zone_14',Ccq,BUd,BUX,Brj,BUt,BUc,BUo,BUa]]],['4048',AqA+BTw,[[U,'RGRDC 2005 / Congo TM zone 12',Clv,BUd,BUX,BYZ,BUt,BUc,BUo,CVy,BUl,BUk,[B,K,'4048']]],[[U,'RGRDC_2005_Congo_TM_zone_12',Ccq,BUd,BUX,BYZ,BUt,BUc,BUo,BUa]]],['4038',AnF+Akk,[[U,'WGS 84 / TMzn36N',ClU,BUd,BUX,BWg,BUg,BUc,BUT,CVy,[B,K,'4038']]],[CpX]],['4037',Amc+Akk,[[U,'WGS 84 / TMzn35N',ClU,BUd,BUX,BWP,BUg,BUc,BUT,CVy,[B,K,'4037']]],[CpW]],['4026',AjX+' +lon_0=28.4 +k=0.9999400000000001'+Dp+UZ+j+c+q+a,[[U,oh+' / Moldova TM',CpK,BUd,BUX,CPW,CGa,BVP,BZJ,CVy,[B,K,'4026']]],[[U,'MOLDREF99_Moldova_TM',[S,'GCS_MOLDREF99',Caf,BUU,BUW],BUd,BUX,CPW,CGa,BVP,BZJ,BUa]]],['3997',AjX+' +lon_0=55.33333333333334 +k=1'+Ajb+Akk,[[U,'WGS 84 / Dubai Local TM',ClU,BUd,BUX,[A,E,APR],BUf,BUc,BUT,CVy,BUj,BUm,[B,K,'3997']]],[[U,'WGS_84_Dubai_Local_TM',Cbp,BUd,BUX,[A,E,APR],BUf,BUc,BUT,BUa]]],['3996',Apf+' +lat_ts=75'+ci+' +k=1'+Aky,[[U,'WGS 84 / IBCAO Polar'+RQ,ClU,BcF,[A,C,Lw],BYA,BUf,BUy,BUT,CVy,BUl,BUk,[B,K,'3996']]],[[U,'WGS_84_IBCAO_Polar_Stereographic',Cbp,BuP,[A,W,Lw],BYA,BUy,BUT,BUa]]],['3995',Apf+' +lat_ts=71'+ci+' +k=1'+Aky,[[U,'WGS 84 /'+eC+' Polar'+RQ,ClU,BcF,[A,C,'raw:71'],BYA,BUf,BUy,BUT,CVy,BUl,BUk,[B,K,'3995']]],[[U,'WGS_84_Arctic_Polar_Stereographic',Cbp,BuP,[A,W,'raw:71'],BYA,BUy,BUT,BUa]]],['3994',hB+' +lon_0=100 +lat_ts=-41'+Aky,[[U,'WGS 84 /'+" "+aU+' 41',ClU,CIe,[A,W,ZP],[A,E,AdC],BUy,BUT,CVy,BUl,BUk,[B,K,'3994']]],[[U,'WGS_84_Mercator_41',Cbp,CIe,[A,W,ZP],[A,E,AdC],BUy,BUT,BUa]]],['3992',BFO+Ym+Cv+ACd+Dr+jt+Ajg,[[U,'Puerto Rico / St. Croix',CnM,BVG,Bke,Bkd,Bkc,Bkb,BUc,BXV,CVz,BUl,BUk,[B,K,'3992']]],[[U,'Puerto_Rico_St_Croix',CfU,BVD,Bke,Bkd,Bkc,Bkb,BUc,BXV,BUr]]],['3991',BFO+Ym+Akb+Dr+jt+Ajg,[[U,'Puerto Rico State Plane CS of 1927',CnM,BVG,Bke,Bkd,Bkc,Bkb,BUc,BUT,CVz,BUl,BUk,[B,K,'3991']]],[[U,'Puerto_Rico_State_Plane_CS_of_1927',CfU,BVD,Bke,Bkd,Bkc,Bkb,BUc,BUT,BUr]]],['3989',l+' +lat_0=-9'+fO+' +k=1'+BJh+q+a,[[U,yL+' 1955 /'+" "+yL+' Gauss zone D',Cmr,BUd,BoE,BYU,BUf,BVP,BWE,CVy,BUl,BUk,[B,K,'3989']]],[[U,'Katanga_1955_Katanga_Gauss_zone_D',CeV,BUd,BoE,BYU,BUf,BVP,BWE,BUa]]],['3988',l+' +lat_0=-9'+Aft+' +k=1'+BJh+q+a,[[U,yL+' 1955 /'+" "+yL+' Gauss zone C',Cmr,BUd,BoE,Blm,BUf,BVP,BWE,CVy,BUl,BUk,[B,K,'3988']]],[[U,'Katanga_1955_Katanga_Gauss_zone_C',CeV,BUd,BoE,Blm,BUf,BVP,BWE,BUa]]],['3987',l+' +lat_0=-9'+ASB+' +k=1'+BJh+q+a,[[U,yL+' 1955 /'+" "+yL+' Gauss zone B',Cmr,BUd,BoE,BhX,BUf,BVP,BWE,CVy,BUl,BUk,[B,K,'3987']]],[[U,'Katanga_1955_Katanga_Gauss_zone_B',CeV,BUd,BoE,BhX,BUf,BVP,BWE,BUa]]],['3986',l+' +lat_0=-9'+gR+' +k=1'+BJh+q+a,[[U,yL+' 1955 /'+" "+yL+' Gauss zone A',Cmr,BUd,BoE,BYz,BUf,BVP,BWE,CVy,BUl,BUk,[B,K,'3986']]],[[U,'Katanga_1955_Katanga_Gauss_zone_A',CeV,BUd,BoE,BYz,BUf,BVP,BWE,BUa]]],['3979',BNY+' +lat_0=49 +lon_0=-95'+BTr,[[U,Cc+' / Canada Atlas'+PW,Cli,BVG,BaG,BYR,BmW,CAc,BUy,BUT,CVy,BUj,BUm,[B,K,'3979']]],[[U,'NAD83_CSRS_Canada_Atlas_Lambert',CcM,BVD,BaG,BYR,BmW,CAc,BUy,BUT,BUa]]],['3978',BNY+' +lat_0=49 +lon_0=-95'+BTr,[[U,Bx+' / Canada Atlas'+PW,ClV,BVG,BaG,BYR,BmW,CAc,BUy,BUT,CVy,BUj,BUm,[B,K,'3978']]],[[U,'NAD83_Canada_Atlas_Lambert',Cbn,BVD,BaG,BYR,BmW,CAc,BUy,BUT,BUa]]],['3976',AlU+' +lat_ts=-70'+ci+' +k=1'+Aky,[[U,'WGS 84 / NSIDC Sea Ice Polar'+RQ+' South',ClU,BcF,[A,C,sR],BYA,BUf,BUy,BUT,CVy,BUl,BUk,[B,K,'3976']]],[[U,'WGS_84_NSIDC_Sea_Ice_Polar_Stereographic_South',Cbp,Bhc,[A,W,sR],BYA,BUy,BUT,BUa]]],['3970',AU+' +lat_1=37'+BRN+c+q+a,[[U,AL+' /'+eI+PW,ClW,BVG,Bsd,Bsc,BXT,BZs,BUy,BUT,CVy,BUl,BUk,[B,K,'3970']]],[[U,'NAD83_NSRS2007_Virginia_Lambert',Cbq,BVD,Bsd,Bsc,BXT,BZs,BUy,BUT,BUa]]],['3969',AU+' +lat_1=37'+BRN+c+q+a,[[U,Aj+' /'+eI+PW,ClX,BVG,Bsd,Bsc,BXT,BZs,BUy,BUT,CVy,BUl,BUk,[B,K,'3969']]],[[U,'NAD83_HARN_Virginia_Lambert',Cbs,BVD,Bsd,Bsc,BXT,BZs,BUy,BUT,BUa]]],['3968',AU+' +lat_1=37'+BRN+c+q+a,[[U,Bx+' /'+eI+PW,ClV,BVG,Bsd,Bsc,BXT,BZs,BUy,BUT,CVy,BUl,BUk,[B,K,'3968']]],[[U,'NAD83_Virginia_Lambert',Cbn,BVD,Bsd,Bsc,BXT,BZs,BUy,BUT,BUa]]],['3950',AU+' +lat_1=49.25 +lat_2=50.75 +lat_0=50'+Aot+' +y_0=9200000'+j+c+q+a,[[U,ti+' / CC50',CmX,BVG,COd,COc,Bws,BXt,BdK,CGZ,CVy,BUl,BUk,[B,K,'3950']]],[[U,'RGF93_CC50',Cdl,BVD,COd,COc,Bws,BXt,BdK,CGZ,BUa]]],['3949',AU+' +lat_1=48.25 +lat_2=49.75 +lat_0=49'+Aot+' +y_0=8200000'+j+c+q+a,[[U,ti+' / CC49',CmX,BVG,COb,COa,BmW,BXt,BdK,CGY,CVy,BUl,BUk,[B,K,'3949']]],[[U,'RGF93_CC49',Cdl,BVD,COb,COa,BmW,BXt,BdK,CGY,BUa]]],['3948',AU+' +lat_1=47.25 +lat_2=48.75 +lat_0=48'+Aot+' +y_0=7200000'+j+c+q+a,[[U,ti+' / CC48',CmX,BVG,[A,W,ABL],COZ,BtZ,BXt,BdK,CGX,CVy,BUl,BUk,[B,K,'3948']]],[[U,'RGF93_CC48',Cdl,BVD,[A,W,ABL],COZ,BtZ,BXt,BdK,CGX,BUa]]],['3947',AU+' +lat_1=46.25 +lat_2=47.75'+gQ+Aot+' +y_0=6200000'+j+c+q+a,[[U,ti+' / CC47',CmX,BVG,CJW,COY,BZA,BXt,BdK,BxM,CVy,BUl,BUk,[B,K,'3947']]],[[U,'RGF93_CC47',Cdl,BVD,CJW,COY,BZA,BXt,BdK,BxM,BUa]]],['3946',AU+' +lat_1=45.25 +lat_2=46.75 +lat_0=46'+Aot+' +y_0=5200000'+j+c+q+a,[[U,ti+' / CC46',CmX,BVG,[A,W,jK],COX,CIR,BXt,BdK,CGW,CVy,BUl,BUk,[B,K,'3946']]],[[U,'RGF93_CC46',Cdl,BVD,[A,W,jK],COX,CIR,BXt,BdK,CGW,BUa]]],['3945',AU+' +lat_1=44.25 +lat_2=45.75'+fq+Aot+' +y_0=4200000'+j+c+q+a,[[U,ti+' / CC45',CmX,BVG,CIQ,COW,BZE,BXt,BdK,CGV,CVy,BUl,BUk,[B,K,'3945']]],[[U,'RGF93_CC45',Cdl,BVD,CIQ,COW,BZE,BXt,BdK,CGV,BUa]]],['3944',AU+' +lat_1=43.25 +lat_2=44.75'+gP+Aot+' +y_0=3200000'+j+c+q+a,[[U,ti+' / CC44',CmX,BVG,[A,W,jL],[A,Y,dD],BZL,BXt,BdK,CAb,CVy,BUl,BUk,[B,K,'3944']]],[[U,'RGF93_CC44',Cdl,BVD,[A,W,jL],[A,Y,dD],BZL,BXt,BdK,CAb,BUa]]],['3943',AU+' +lat_1=42.25 +lat_2=43.75'+wA+Aot+' +y_0=2200000'+j+c+q+a,[[U,ti+' / CC43',CmX,BVG,COV,[A,Y,jM],BcA,BXt,BdK,CAa,CVy,BUl,BUk,[B,K,'3943']]],[[U,'RGF93_CC43',Cdl,BVD,COV,[A,Y,jM],BcA,BXt,BdK,CAa,BUa]]],['3942',AU+' +lat_1=41.25 +lat_2=42.75'+AGR+Aot+AXQ+j+c+q+a,[[U,ti+' / CC42',CmX,BVG,[A,W,jJ],COU,Bde,BXt,BdK,BuK,CVy,BUl,BUk,[B,K,'3942']]],[[U,'RGF93_CC42',Cdl,BVD,[A,W,jJ],COU,Bde,BXt,BdK,BuK,BUa]]],['3920',Aku+Dr+jt+q+a,[[U,'Puerto Rico / UTM zone 20N',CnM,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3920']]],[[U,'Puerto_Rico_UTM_zone_20N',CfU,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['3912',ApP+AkS+ArH+Ku+q+a,[[U,'MGI 1901 / Slovene'+AoN,Crf,BUd,BUX,BWH,BUt,BUc,BZJ,CVy,BvC,BvB,[B,K,'3912']]],[[U,'MGI_1901_Slovene_National_Grid',[S,rH+' 1901',CaY,BUU,BUW],BUd,BUX,BWH,BUt,BUc,BZJ,BUa]]],['3893',l+AZz+' +lon_0=46.5 +k=0.9994'+Avb+BDH,[[U,ij+' / Iraq'+AoN,Clm,BUd,CIv,CIu,CBK,BXP,BUT,CVy,BUj,BUm,[B,K,'3893']]],[[U,'ED50_Iraq_National_Grid',Ccc,BUd,CIv,CIu,CBK,BXP,BUT,BUa]]],['3892',Alt+j+c+q+a,[[U,'IGRS / UTM zone 39N',Cnq,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3892']]],[[U,'IGRS_UTM_zone_39N',Cgb,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['3891',AmA+j+c+q+a,[[U,'IGRS / UTM zone 38N',Cnq,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3891']]],[[U,'IGRS_UTM_zone_38N',Cgb,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['3890',AmP+j+c+q+a,[[U,'IGRS / UTM zone 37N',Cnq,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3890']]],[[U,'IGRS_UTM_zone_37N',Cgb,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['3885',BEr+' +k=1'+AqY+j+c+q+a,[[U,ED+' / GK31FIN',Cld,BUd,BUX,Bed,BUf,BaY,BUT,CVy,[B,K,'3885']]],[[U,'ETRS89_GK31FIN',CcG,BUd,BUX,Bed,BUf,BaY,BUT,BUa]]],['3884',ArX+' +k=1'+AsZ+j+c+q+a,[[U,ED+' / GK30FIN',Cld,BUd,BUX,BYz,BUf,BcN,BUT,CVy,[B,K,'3884']]],[[U,'ETRS89_GK30FIN',CcG,BUd,BUX,BYz,BUf,BcN,BUT,BUa]]],['3883',AjX+' +lon_0=29 +k=1'+AsY+j+c+q+a,[[U,ED+' / GK29FIN',Cld,BUd,BUX,Brb,BUf,Baq,BUT,CVy,[B,K,'3883']]],[[U,'ETRS89_GK29FIN',CcG,BUd,BUX,Brb,BUf,Baq,BUT,BUa]]],['3882',BEt+' +k=1'+AsX+j+c+q+a,[[U,ED+' / GK28FIN',Cld,BUd,BUX,BhX,BUf,Bbm,BUT,CVy,[B,K,'3882']]],[[U,'ETRS89_GK28FIN',CcG,BUd,BUX,BhX,BUf,Bbm,BUT,BUa]]],['3881',Apz+' +k=1'+AsW+j+c+q+a,[[U,ED+' / GK27FIN',Cld,BUd,BUX,BWP,BUf,Bbl,BUT,CVy,[B,K,'3881']]],[[U,'ETRS89_GK27FIN',CcG,BUd,BUX,BWP,BUf,Bbl,BUT,BUa]]],['3880',BJi+' +k=1'+AsV+j+c+q+a,[[U,ED+' / GK26FIN',Cld,BUd,BUX,Blm,BUf,Bbj,BUT,CVy,[B,K,'3880']]],[[U,'ETRS89_GK26FIN',CcG,BUd,BUX,Blm,BUf,Bbj,BUT,BUa]]],['3879',BHD+' +k=1'+AsU+j+c+q+a,[[U,ED+' / GK25FIN',Cld,BUd,BUX,BhW,BUf,Bbk,BUT,CVy,[B,K,'3879']]],[[U,'ETRS89_GK25FIN',CcG,BUd,BUX,BhW,BUf,Bbk,BUT,BUa]]],['3878',ArK+' +k=1'+pp+BRq,[[U,ED+' / GK24FIN',Cld,BUd,BUX,BYU,BUf,Bgj,BUT,CVy,[B,K,'3878']]],[[U,'ETRS89_GK24FIN',CcG,BUd,BUX,BYU,BUf,Bgj,BUT,BUa]]],['3877',BHC+' +k=1'+AsT+j+c+q+a,[[U,ED+' / GK23FIN',Cld,BUd,BUX,BkN,BUf,BbT,BUT,CVy,[B,K,'3877']]],[[U,'ETRS89_GK23FIN',CcG,BUd,BUX,BkN,BUf,BbT,BUT,BUa]]],['3876',AjX+' +lon_0=22 +k=1'+AsS+j+c+q+a,[[U,ED+' / GK22FIN',Cld,BUd,BUX,BoD,BUf,Baz,BUT,CVy,[B,K,'3876']]],[[U,'ETRS89_GK22FIN',CcG,BUd,BUX,BoD,BUf,Baz,BUT,BUa]]],['3875',ApT+' +k=1'+AsR+j+c+q+a,[[U,ED+' / GK21FIN',Cld,BUd,BUX,BWR,BUf,BbS,BUT,CVy,[B,K,'3875']]],[[U,'ETRS89_GK21FIN',CcG,BUd,BUX,BWR,BUf,BbS,BUT,BUa]]],['3874',BIM+' +k=1'+AsQ+j+c+q+a,[[U,ED+' / GK20FIN',Cld,BUd,BUX,BmG,BUf,Bay,BUT,CVy,[B,K,'3874']]],[[U,'ETRS89_GK20FIN',CcG,BUd,BUX,BmG,BUf,Bay,BUT,BUa]]],['3873',BEp+' +k=1'+ArM+j+c+q+a,[[U,ED+' / GK19FIN',Cld,BUd,BUX,BhV,BUf,BbR,BUT,CVy,[B,K,'3873']]],[[U,'ETRS89_GK19FIN',CcG,BUd,BUX,BhV,BUf,BbR,BUT,BUa]]],['3854',AjX+' +lon_0=18.05787 +k=0.99999506 +x_0=100182.7406 +y_0=-6500620.1207'+j+c+q+a,[[U,'County ST74',Clu,BUd,BUX,CFh,[A,N,Air],[A,I,AfG],[A,G,AaL],CVy,[B,K,'3854']]],[[U,'County_ST74',Ccp,BUd,BUX,CFh,[A,N,Air],[A,I,AfG],[A,G,AaL],BUa]]],['3852',AqB+' +lon_0=157'+BSv,[[U,hy+' / DGLC2000',CnJ,BVG,BZR,BZQ,BVX,CQF,BUc,BUT,CVy,[B,K,'3852']]],[[U,'RSRGD2000_DGLC2000',CfV,BVD,BZR,BZQ,BVX,CQF,BUc,BUT,BUa]]],['3851',AU+' +lat_1=-37.5 +lat_2=-44.5 +lat_0=-41 +lon_0=173 +x_0=3000000 +y_0=7000000'+j+c+q+a,[[U,Gr+' / NZCS2000',Clj,BVG,COT,COS,CNc,Bxg,BYY,[A,G,fH],CVy,[B,K,'3851']]],[[U,'NZGD2000_NZCS2000',CcR,BVD,COT,COS,CNc,Bxg,BYY,[A,G,fH],BUa]]],['3850',AjX+' +lon_0=22.55633333333333 +k=1.0000049 +x_0=1500121.846 +y_0=-672.557'+j+c+q+a,[[U,IO+' / RT90 5 gon O'+AGY,Clu,BUd,BUX,[A,E,APS],CAZ,[A,I,AfH],CFg,CVy,[B,K,'3850']]],[[U,'SWEREF99_RT90_5_gon_O_emulation',Ccp,BUd,BUX,[A,E,APS],CAZ,[A,I,AfH],CFg,BUa]]],['3849',AjX+' +lon_0=20.30631666666667 +k=1.0000052 +x_0=1500102.765 +y_0=-670.706'+j+c+q+a,[[U,IO+' / RT90 2.5 gon O'+AGY,Clu,BUd,BUX,[A,E,APT],CAY,[A,I,AfI],CFf,CVy,[B,K,'3849']]],[[U,'SWEREF99_RT90_2_5_gon_O_emulation',Ccp,BUd,BUX,[A,E,APT],CAY,[A,I,AfI],CFf,BUa]]],['3848',AjX+' +lon_0=18.0563 +k=1.0000054 +x_0=1500083.521 +y_0=-668.8440000000001'+j+c+q+a,[[U,IO+' / RT90 0 gon'+AGY,Clu,BUd,BUX,CGU,CAX,[A,I,AfJ],CFe,CVy,[B,K,'3848']]],[[U,'SWEREF99_RT90_0_gon_emulation',Ccp,BUd,BUX,CGU,CAX,[A,I,AfJ],CFe,BUa]]],['3847',AjX+' +lon_0=15.80628452944445 +k=1.00000561024 +x_0=1500064.274 +y_0=-667.711'+j+c+q+a,[[U,IO+' / RT90 2.5 gon V'+AGY,Clu,BUd,BUX,[A,E,APU],[A,N,AaM],[A,I,AfK],CFd,CVy,[B,K,'3847']]],[[U,'SWEREF99_RT90_2_5_gon_V_emulation',Ccp,BUd,BUX,[A,E,APU],[A,N,AaM],[A,I,AfK],CFd,BUa]]],['3846',AjX+' +lon_0=13.55626666666667 +k=1.0000058 +x_0=1500044.695 +y_0=-667.13'+j+c+q+a,[[U,IO+' / RT90 5 gon V'+AGY,Clu,BUd,BUX,[A,E,APV],CAW,[A,I,AfL],CGT,CVy,[B,K,'3846']]],[[U,'SWEREF99_RT90_5_gon_V_emulation',Ccp,BUd,BUX,[A,E,APV],CAW,[A,I,AfL],CGT,BUa]]],['3845',AjX+' +lon_0=11.30625 +k=1.000006 +x_0=1500025.141 +y_0=-667.282'+j+c+q+a,[[U,IO+' / RT90 7.5 gon V'+AGY,Clu,BUd,BUX,CFc,CFb,[A,I,AfM],CFa,CVy,[B,K,'3845']]],[[U,'SWEREF99_RT90_7_5_gon_V_emulation',Ccp,BUd,BUX,CFc,CFb,[A,I,AfM],CFa,BUa]]],['3844',ZQ+' +lat_0=46'+ASC+ATG+Aom+BCx,[[U,Akd+' / Stereo70',Clq,Bpn,CIR,BhW,Bll,BUc,BWE,CVy,[B,K,'3844']]],[[U,'Pulkovo_1942_58_Stereo70',Ccf,Bpm,CIR,BhW,Bll,BUc,BWE,BUa]]],['3841',BEs+' +k=1'+ArU+BKY,[[U,AlK+' /'+Ajc+' zone 6',CmE,BUd,BUX,Bef,BUf,BdL,BUT,CVy,[B,K,'3841']]],[[U,'Pulkovo_1942_83_3_degree_Gauss_Kruger_zone_6',CdH,BUd,BUX,Bef,BUf,BdL,BUT,BUa]]],['3840',ArX+' +k=1'+BBh+BCx,[[U,Akd+' /'+Ajc+' zone 10',Clq,BUd,BUX,BYz,BUf,Bhd,BUT,CVy,[B,K,'3840']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_10',Ccf,BUd,BUX,BYz,BUf,Bhd,BUT,BUa]]],['3839',Apz+' +k=1'+AwU+BCx,[[U,Akd+' /'+Ajc+' zone 9',Clq,BUd,BUX,BWP,BUf,Bha,BUT,CVy,[B,K,'3839']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_9',Ccf,BUd,BUX,BWP,BUf,Bha,BUT,BUa]]],['3838',AqA+' +k=1'+Alz+BCx,[[U,Akd+' /'+Ajc+' zone 4',Clq,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,[B,K,'3838']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_4',Ccf,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['3837',Aqa+' +k=1'+BKE+q+a,[[U,Akd+' /'+Ajc+' zone 3',Clq,BUd,BUX,BWO,BUf,BXO,BUT,CVy,[B,K,'3837']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_3',Ccf,BUd,BUX,BWO,BUf,BXO,BUT,BUa]]],['3836',ApT+' +k=1'+Alz+BKY,[[U,AlK+' /'+AW+' zone 4',CmE,BUd,BUX,BWR,BUf,BYJ,BUT,CVy,[B,K,'3836']]],[[U,'Pulkovo_1942_83_Gauss_Kruger_zone_4',CdH,BUd,BUX,BWR,BUf,BYJ,BUT,BUa]]],['3835',ApP+' +k=1'+BKF+q+a,[[U,AlK+' /'+AW+' zone 3',CmE,BUd,BUX,BWH,BUf,BXO,BUT,CVy,[B,K,'3835']]],[[U,'Pulkovo_1942_83_Gauss_Kruger_zone_3',CdH,BUd,BUX,BWH,BUf,BXO,BUT,BUa]]],['3834',Aqa+' +k=1'+AmF+BKY,[[U,AlK+' /'+AW+' zone 2',CmE,BUd,BUX,BWO,BUf,BXy,BUT,CVy,[B,K,'3834']]],[[U,'Pulkovo_1942_83_Gauss_Kruger_zone_2',CdH,BUd,BUX,BWO,BUf,BXy,BUT,BUa]]],['3833',Aqa+' +k=1'+AmF+BCx,[[U,Akd+' /'+AW+' zone 2',Clq,BUd,BUX,BWO,BUf,BXy,BUT,CVy,[B,K,'3833']]],[[U,'Pulkovo_1942_58_Gauss_Kruger_zone_2',Ccf,BUd,BUX,BWO,BUf,BXy,BUT,BUa]]],['3832',hB+ya+' +k=1'+Aky,[[U,'WGS 84 / PDC'+" "+aU,ClU,Bxi,Beg,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3832']]],[[U,'WGS_84_PDC_Mercator',Cbp,Bxp,Beg,BUy,BUT,BUa,Brg]]],['3829',AnJ+BP+AIM+q+a,[[U,'Hu Tzu Shan 1950 / UTM zone 51N',Cpl,BUd,BUX,BWU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3829']]],[[U,'Hu_Tzu_Shan_1950_UTM_zone_51N',[S,'GCS_Hu Tzu Shan 1950',CZy,BUU,BUW],BUd,BUX,BWU,BUg,BUc,BUT,BUa]]],['3828',AjX+' +lon_0=121'+BNX+Fh+q+a,[[U,'TWD67 / TM2 zone 121',CoS,BUd,BUX,BpT,BUt,BWp,BUT,CVy,BUl,BUk,[B,K,'3828']]],[[U,'TWD67_TM2_zone_121',CjF,BUd,BUX,BpT,BUt,BWp,BUT,BUa]]],['3827',AjX+' +lon_0=119'+BNX+Fh+q+a,[[U,'TWD67 / TM2 zone 119',CoS,BUd,BUX,Bra,BUt,BWp,BUT,CVy,BUl,BUk,[B,K,'3827']]],[[U,'TWD67_TM2_zone_119',CjF,BUd,BUX,Bra,BUt,BWp,BUT,BUa]]],['3826',AjX+' +lon_0=121'+BNX+j+c+q+a,[[U,'TWD97 / TM2 zone 121',CoT,BUd,BUX,BpT,BUt,BWp,BUT,CVy,BUl,BUk,[B,K,'3826']]],[[U,'TWD97_TM2_zone_121',CjE,BUd,BUX,BpT,BUt,BWp,BUT,BUa]]],['3825',AjX+' +lon_0=119'+BNX+j+c+q+a,[[U,'TWD97 / TM2 zone 119',CoT,BUd,BUX,Bra,BUt,BWp,BUT,CVy,BUl,BUk,[B,K,'3825']]],[[U,'TWD97_TM2_zone_119',CjE,BUd,BUX,Bra,BUt,BWp,BUT,BUa]]],['3816',l+BQh+j+c+q+a,[[U,AL+' /'+cu+' TM',ClW,BUd,BdX,BsN,BsM,BUc,BmE,CVy,BUl,BUk,[B,K,'3816']]],[[U,'NAD83_NSRS2007_Mississippi_TM',Cbq,BUd,BdX,BsN,BsM,BUc,BmE,BUa]]],['3815',l+BQh+j+c+q+a,[[U,Aj+' /'+cu+' TM',ClX,BUd,BdX,BsN,BsM,BUc,BmE,CVy,BUl,BUk,[B,K,'3815']]],[[U,'NAD83_HARN_Mississippi_TM',Cbs,BUd,BdX,BsN,BsM,BUc,BmE,BUa]]],['3814',l+BQh+j+c+q+a,[[U,Bx+' /'+cu+' TM',ClV,BUd,BdX,BsN,BsM,BUc,BmE,CVy,BUl,BUk,[B,K,'3814']]],[[U,'NAD83_Mississippi_TM',Cbn,BUd,BdX,BsN,BsM,BUc,BmE,BUa]]],['3812',AU+pP+pQ+' +lat_0=50.797815'+AaN+' +x_0=649328 +y_0=665262'+j+c+q+a,[[U,ED+' / Belgian'+PW+' 2008',Cld,BVG,BrZ,BrY,CAV,CIP,CIO,CIN,CVy,BUl,BUk,[B,K,'3812']]],[[U,'ETRS89_Belgian_Lambert_2008',CcG,BVD,BrZ,BrY,CAV,CIP,CIO,CIN,BUa]]],['3802',AjX+tN+BTp,[[U,Cc+' /'+Afb+' 3TM ref merid 120 W',Cli,BUd,BUX,BlB,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3802']]],[[U,'NAD83_CSRS_Alberta_3TM_ref_merid_120_W',CcM,BUd,BUX,BlB,BUt,BUy,BUT,BUa]]],['3801',AjX+tN+BTp,[[U,Bx+' /'+Afb+' 3TM ref merid 120 W',ClV,BUd,BUX,BlB,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3801']]],[[U,'NAD83_Alberta_3TM_ref_merid_120_W',Cbn,BUd,BUX,BlB,BUt,BUy,BUT,BUa]]],['3800',AjX+tN+BJg+q+a,[[U,Dg+' /'+Afb+' 3TM ref merid 120 W',ClZ,BUd,BUX,BlB,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3800']]],[[U,'NAD27_Alberta_3TM_ref_merid_120_W',Cbw,BUd,BUX,BlB,BUt,BUy,BUT,BUa]]],['3799',AU+' +lat_1=50'+Ava+' +lon_0=-70'+BNK+c+q+a,[[U,Cc+' / MTQ'+PW,Cli,BVG,BoC,Bbx,BZL,Bwk,BXP,BUT,CVy,BUl,BUk,[B,K,'3799']]],[[U,'NAD83_CSRS_MTQ_Lambert',CcM,BVD,BoC,Bbx,BZL,Bwk,BXP,BUT,BUa]]],['3798',AU+' +lat_1=50'+Ava+' +lon_0=-70'+BNK+c+q+a,[[U,Bx+' / MTQ'+PW,ClV,BVG,BoC,Bbx,BZL,Bwk,BXP,BUT,CVy,BUl,BUk,[B,K,'3798']]],[[U,'NAD83_MTQ_Lambert',Cbn,BVD,BoC,Bbx,BZL,Bwk,BXP,BUT,BUa]]],['3797',AU+' +lat_1=50'+Ava+' +lon_0=-70'+Avb+Apt,[[U,Dg+' / MTQ'+PW,ClZ,BVG,BoC,Bbx,BZL,Bwk,BXP,BUT,CVy,BUl,BUk,[B,K,'3797']]],[[U,'NAD27_MTQ_Lambert',Cbw,BVD,BoC,Bbx,BZL,Bwk,BXP,BUT,BUa]]],['3796',AU+' +lat_1=21.3 +lat_2=20.13333333333333 +lat_0=20.71666666666667 +lon_0=-76.83333333333333'+Ay+' +y_0=229126.939'+Apt,[[U,Dg+' / Cuba Sur',ClZ,BVG,CPV,[A,Y,APW],[A,C,APX],[A,E,AKc],BUc,[A,G,Ais],CVy,[B,K,'3796']]],[[U,'NAD27_Cuba_Sur',Cbw,BVD,CPV,[A,Y,APW],[A,C,APX],[A,E,AKc],BUc,[A,G,Ais],BUa]]],['3795',AU+' +lat_1=23 +lat_2=21.7 +lat_0=22.35'+Qk+Ay+' +y_0=280296.016'+Apt,[[U,Dg+' / Cuba Norte',ClZ,BVG,[A,W,aq],CPU,COR,BVm,BUc,[A,G,Ait],CVy,[B,K,'3795']]],[[U,'NAD27_Cuba_Norte',Cbw,BVD,[A,W,aq],CPU,COR,BVm,BUc,[A,G,Ait],BUa]]],['3794',ApP+AkS+UZ+j+c+q+a,[[U,'Slovenia 1996 / Slovene'+AoN,Cqm,BUd,BUX,BWH,BUt,BUc,BZJ,CVy,BUj,BUm,[B,K,'3794']]],[[U,'Slovenia_1996_Slovene_National_Grid',[S,'GCS_Slovenia 1996',[V,ADn,BUh],BUU,BUW],BUd,BUX,BWH,BUt,BUc,BZJ,BUa]]],['3793',AjX+ASW+' +k=1'+BJf+c+q+a,[[U,Gr+' / Chatham'+AUX+' TM 2000',Clj,BUd,BUX,Brh,BUf,BXO,BUo,CVy,[B,K,'3793']]],[[U,'NZGD2000_Chatham_Islands_TM_2000',CcR,BUd,BUX,Brh,BUf,BXO,BUo,BUa]]],['3791',AjX+' +lon_0=-178 +k=1'+BJf+c+q+a,[[U,Gr+' / Raoul'+fA+' TM 2000',Clj,BUd,BUX,CPT,BUf,BXO,BUo,CVy,[B,K,'3791']]],[[U,'NZGD2000_Raoul_Island_TM_2000',CcR,BUd,BUX,CPT,BUf,BXO,BUo,BUa]]],['3790',AjX+' +lon_0=179 +k=1'+BJf+c+q+a,[[U,Gr+' / Antipodes'+AUX+' TM 2000',Clj,BUd,BUX,Bus,BUf,BXO,BUo,CVy,[B,K,'3790']]],[[U,'NZGD2000_Antipodes_Islands_TM_2000',CcR,BUd,BUX,Bus,BUf,BXO,BUo,BUa]]],['3789',AjX+' +lon_0=169 +k=1'+BJf+c+q+a,[[U,Gr+' / Campbell'+fA+' TM 2000',Clj,BUd,BUX,CQE,BUf,BXO,BUo,CVy,[B,K,'3789']]],[[U,'NZGD2000_Campbell_Island_TM_2000',CcR,BUd,BUX,CQE,BUf,BXO,BUo,BUa]]],['3788',AjX+' +lon_0=166 +k=1'+BJf+c+q+a,[[U,Gr+' / Auckland'+AUX+' TM 2000',Clj,BUd,BUX,Brk,BUf,BXO,BUo,CVy,[B,K,'3788']]],[[U,'NZGD2000_Auckland_Islands_TM_2000',CcR,BUd,BUX,Brk,BUf,BXO,BUo,BUa]]],['3784',AV+' +zone=9'+Aka+ASY+q+a,[[U,AIT+' 1967 / UTM zone 9S',Crc,BUd,BUX,BaA,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3784']]],[[U,'Pitcairn_1967_UTM_zone_9S',[S,'GCS_Pitcairn 1967',[V,Ada,BUs],BUU,BUW],BUd,BUX,BaA,BUg,BUc,BUo,BUa]]],['3783',l+' +lat_0=-25.06855261111111 +lon_0=-130.1129671111111 +k=1 +x_0=14200 +y_0=15500'+BAy,[[U,AIT+' 2006 /'+" "+AIT+' TM 2006',Cre,BUd,[A,C,AKd],[A,E,AKe],BUf,COQ,COP,CVy,BUj,BUm,[B,K,'3783']]],[[U,'Pitcairn_2006_Pitcairn_TM_2006',[S,'GCS_Pitcairn 2006',[V,AdZ,BUw],BUU,BUW],BUd,[A,C,AKd],[A,E,AKe],BUf,COQ,COP,BUa]]],['3781',BJj+BTp,[[U,Cc+' /'+Afb+' 3TM ref merid 117 W',Cli,BUd,BUX,BXx,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3781']]],[[U,'NAD83_CSRS_Alberta_3TM_ref_merid_117_W',CcM,BUd,BUX,BXx,BUt,BUy,BUT,BUa]]],['3780',AjX+jr+BTp,[[U,Cc+' /'+Afb+' 3TM ref merid 114 W',Cli,BUd,BUX,Bbq,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3780']]],[[U,'NAD83_CSRS_Alberta_3TM_ref_merid_114_W',CcM,BUd,BUX,Bbq,BUt,BUy,BUT,BUa]]],['3779',BJk+BTp,[[U,Cc+' /'+Afb+' 3TM ref merid 111 W',Cli,BUd,BUX,BXs,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3779']]],[[U,'NAD83_CSRS_Alberta_3TM_ref_merid_111_W',CcM,BUd,BUX,BXs,BUt,BUy,BUT,BUa]]],['3777',BJj+BTp,[[U,Bx+' /'+Afb+' 3TM ref merid 117 W',ClV,BUd,BUX,BXx,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3777']]],[[U,'NAD83_Alberta_3TM_ref_merid_117_W',Cbn,BUd,BUX,BXx,BUt,BUy,BUT,BUa]]],['3776',AjX+jr+BTp,[[U,Bx+' /'+Afb+' 3TM ref merid 114 W',ClV,BUd,BUX,Bbq,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3776']]],[[U,'NAD83_Alberta_3TM_ref_merid_114_W',Cbn,BUd,BUX,Bbq,BUt,BUy,BUT,BUa]]],['3775',BJk+BTp,[[U,Bx+' /'+Afb+' 3TM ref merid 111 W',ClV,BUd,BUX,BXs,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3775']]],[[U,'NAD83_Alberta_3TM_ref_merid_111_W',Cbn,BUd,BUX,BXs,BUt,BUy,BUT,BUa]]],['3773',BJj+BJg+q+a,[[U,Dg+' /'+Afb+' 3TM ref merid 117 W',ClZ,BUd,BUX,BXx,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3773']]],[[U,'NAD27_Alberta_3TM_ref_merid_117_W',Cbw,BUd,BUX,BXx,BUt,BUy,BUT,BUa]]],['3772',AjX+jr+BJg+q+a,[[U,Dg+' /'+Afb+' 3TM ref merid 114 W',ClZ,BUd,BUX,Bbq,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3772']]],[[U,'NAD27_Alberta_3TM_ref_merid_114_W',Cbw,BUd,BUX,Bbq,BUt,BUy,BUT,BUa]]],['3771',BJk+BJg+q+a,[[U,Dg+' /'+Afb+' 3TM ref merid 111 W',ClZ,BUd,BUX,BXs,BUt,BUy,BUT,CVy,BUj,BUm,[B,K,'3771']]],[[U,'NAD27_Alberta_3TM_ref_merid_111_W',Cbw,BUd,BUX,BXs,BUt,BUy,BUT,BUa]]],['3770',l+' +lat_0=32 +lon_0=-64.75 +k=1 +x_0=550000'+UO+BAy,[[U,'BDA2000 / Bermuda 2000'+AoN,Crj,BUd,[A,C,AcX],CIM,BUf,CIL,BXV,CVy,BUj,BUm,[B,K,'3770']]],[[U,'BDA2000_Bermuda_2000_National_Grid',[S,'GCS_BDA2000',[V,Agm,BUw],BUU,BUW],BUd,[A,C,AcX],CIM,BUf,CIL,BXV,BUa]]],['3769',Aku+Dr+ANr+q+a,[[U,'Bermuda 1957 / UTM zone 20N',Cqp,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3769']]],[[U,'Bermuda_1957_UTM_zone_20N',[S,'GCS_Bermuda 1957',[V,AhF,BUx],BUU,BUW],BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['3768',Anl+j+c+q+a,[[U,AJt+' / UTM zone 34N',Cnd,BUd,BUX,BWR,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3768']]],[[U,'HTRS96_UTM_zone_34N',CgB,BUd,BUX,BWR,BUg,BUc,BUT,BUa]]],['3767',AmO+j+c+q+a,[[U,AJt+' / UTM zone 33N',Cnd,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3767']]],[[U,'HTRS96_UTM_zone_33N',CgB,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['3766',AU+' +lat_1=45.91666666666666 +lat_2=43.08333333333334'+At+Age+BTr,[[U,AJt+' / Croatia LCC',Cnd,BVG,[A,W,RG],[A,Y,APY],BUX,Brd,BUy,BUT,CVy,BUj,BUm,[B,K,'3766']]],[[U,'HTRS96_Croatia_LCC',CgB,BVD,[A,W,RG],[A,Y,APY],BUX,Brd,BUy,BUT,BUa]]],['3765',AjX+Age+BUC,[[U,AJt+' / Croatia TM',Cnd,BUd,BUX,Brd,BUt,BUc,BUT,CVy,BUj,BUm,[B,K,'3765']]],[[U,'HTRS96_Croatia_TM',CgB,BUd,BUX,Brd,BUt,BUc,BUT,BUa]]],['3764',l+' +lat_0=-44'+ASW+' +k=1'+BTm,[[U,Gr+' / Chatham'+fA+Zc+' 2000',Clj,BUd,BpU,Brh,BUf,BVh,BWw,CVy,[B,K,'3764']]],[[U,'NZGD2000_Chatham_Island_Circuit_2000',CcR,BUd,BpU,Brh,BUf,BVh,BWw,BUa]]],['3763',l+' +lat_0=39.66825833333333 +lon_0=-8.133108333333334 +k=1'+BTr,[[U,ED+' / Portugal TM06',Cld,BUd,[A,C,APZ],[A,E,AKf],BUf,BUy,BUT,CVy,BUl,BUk,[B,K,'3763']]],[[U,'ETRS89_Portugal_TM06',CcG,BUd,[A,C,APZ],[A,E,AKf],BUf,BUy,BUT,BUa]]],['3762',AU+' +lat_1=-54 +lat_2=-54.75 +lat_0=-55 +lon_0=-37'+Aky,[[U,'WGS 84 / South'+Abp+PW,ClU,BVG,[A,W,aA],CIK,CQD,CAz,BUy,BUT,CVy,BUj,BUm,[B,K,'3762']]],[[U,'WGS_84_South_Georgia_Lambert',Cbp,BVD,[A,W,aA],CIK,CQD,CAz,BUy,BUT,BUa]]],['3761',BUN,[[U,Cc+' / UTM zone 22N',Cli,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3761']]],[[U,'NAD83_CSRS_UTM_zone_22N',CcM,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['3760',BSo+BKk,[[U,Aj+' / Hawaii zone 3'+DE,ClX,BUd,Bkf,Bce,Bav,BXQ,BUT,CVz,BUl,BUk,[B,K,'3760']]],[[U,'NAD83_HARN_Hawaii_zone_3_ftUS',Cbs,BUd,Bkf,Bce,Bav,BXQ,BUT,BUr]]],['3759',BSo+BKk,[[U,Bx+' / Hawaii zone 3'+DE,ClV,BUd,Bkf,Bce,Bav,BXQ,BUT,CVz,BUl,BUk,[B,K,'3759']]],[[U,'NAD83_Hawaii_zone_3_ftUS',Cbn,BUd,Bkf,Bce,Bav,BXQ,BUT,BUr]]],['3758',BEC+BFf+AkO,[[U,Aj+' /'+pz+' West'+DE,ClX,BUd,BWy,Bgf,BWF,BZC,BZB,CVz,BUl,BUk,[B,K,'3758']]],[[U,'NAD83_HARN_Wyoming_West_ftUS',Cbs,BUd,BWy,Bgf,BWF,BZC,BZB,BUr]]],['3757',BGo+AkO,[[U,Aj+' /'+pz+' West'+Akp,ClX,BUd,BWy,Bgg,BWF,BVj,BUT,CVz,BUl,BUk,[B,K,'3757']]],[[U,'NAD83_HARN_Wyoming_West_Central_ftUS',Cbs,BUd,BWy,Bgg,BWF,BVj,BUT,BUr]]],['3756',BRa+AkO,[[U,Aj+' /'+pz+' East'+Akp,ClX,BUd,BWy,Bge,BWF,BYa,BZB,CVz,BUl,BUk,[B,K,'3756']]],[[U,'NAD83_HARN_Wyoming_East_Central_ftUS',Cbs,BUd,BWy,Bge,BWF,BYa,BZB,BUr]]],['3755',BRY+AkO,[[U,Aj+' /'+pz+' East'+DE,ClX,BUd,BWy,Bgd,BWF,BjL,BUT,CVz,BUl,BUk,[B,K,'3755']]],[[U,'NAD83_HARN_Wyoming_East_ftUS',Cbs,BUd,BWy,Bgd,BWF,BjL,BUT,BUr]]],['3754',BFL+AkO,[[U,Aj+' / Ohio South'+DE,ClX,BVG,BiX,BiW,BWT,BYk,BVj,BUT,CVz,BUl,BUk,[B,K,'3754']]],[[U,'NAD83_HARN_Ohio_South_ftUS',Cbs,BVD,BiX,BiW,BWT,BYk,BVj,BUT,BUr]]],['3753',BFI+AkO,[[U,Aj+' / Ohio'+Akg,ClX,BVG,BiV,BiU,Bat,BYk,BVj,BUT,CVz,BUl,BUk,[B,K,'3753']]],[[U,'NAD83_HARN_Ohio_North_ftUS',Cbs,BVD,BiV,BiU,Bat,BYk,BVj,BUT,BUr]]],['3751',AV+' +zone=5'+j+c+q+a,[[U,Aj+' / UTM zone 5N',ClX,BUd,BUX,BZK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3751']]],[[U,'NAD83_HARN_UTM_zone_5N',Cbs,BUd,BUX,BZK,BUg,BUc,BUT,BUa]]],['3750',AV+' +zone=4'+j+c+q+a,[[U,Aj+' / UTM zone 4N',ClX,BUd,BUX,Bac,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3750']]],[[U,'NAD83_HARN_UTM_zone_4N',Cbs,BUd,BUX,Bac,BUg,BUc,BUT,BUa]]],['3749',BTz,[[U,Aj+' / UTM zone 19N',ClX,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3749']]],[[U,'NAD83_HARN_UTM_zone_19N',Cbs,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['3748',BTy,[[U,Aj+' / UTM zone 18N',ClX,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3748']]],[[U,'NAD83_HARN_UTM_zone_18N',Cbs,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['3747',BUM,[[U,Aj+' / UTM zone 17N',ClX,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3747']]],[[U,'NAD83_HARN_UTM_zone_17N',Cbs,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['3746',BUK,[[U,Aj+' / UTM zone 16N',ClX,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3746']]],[[U,'NAD83_HARN_UTM_zone_16N',Cbs,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['3745',BUJ,[[U,Aj+' / UTM zone 15N',ClX,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3745']]],[[U,'NAD83_HARN_UTM_zone_15N',Cbs,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['3744',BUI,[[U,Aj+' / UTM zone 14N',ClX,BUd,BUX,BXU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3744']]],[[U,'NAD83_HARN_UTM_zone_14N',Cbs,BUd,BUX,BXU,BUg,BUc,BUT,BUa]]],['3743',BUH,[[U,Aj+' / UTM zone 13N',ClX,BUd,BUX,BZS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3743']]],[[U,'NAD83_HARN_UTM_zone_13N',Cbs,BUd,BUX,BZS,BUg,BUc,BUT,BUa]]],['3742',BUG,[[U,Aj+' / UTM zone 12N',ClX,BUd,BUX,BXs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3742']]],[[U,'NAD83_HARN_UTM_zone_12N',Cbs,BUd,BUX,BXs,BUg,BUc,BUT,BUa]]],['3741',BUF,[[U,Aj+' / UTM zone 11N',ClX,BUd,BUX,BXx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3741']]],[[U,'NAD83_HARN_UTM_zone_11N',Cbs,BUd,BUX,BXx,BUg,BUc,BUT,BUa]]],['3740',Amy+j+c+q+a,[[U,Aj+' / UTM zone 10N',ClX,BUd,BUX,Bap,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3740']]],[[U,'NAD83_HARN_UTM_zone_10N',Cbs,BUd,BUX,Bap,BUg,BUc,BUT,BUa]]],['3739',BEC+BFf+AkO,[[U,Bx+' /'+pz+' West'+DE,ClV,BUd,BWy,Bgf,BWF,BZC,BZB,CVz,BUl,BUk,[B,K,'3739']]],[[U,'NAD83_Wyoming_West_ftUS',Cbn,BUd,BWy,Bgf,BWF,BZC,BZB,BUr]]],['3738',BGo+AkO,[[U,Bx+' /'+pz+' West'+Akp,ClV,BUd,BWy,Bgg,BWF,BVj,BUT,CVz,BUl,BUk,[B,K,'3738']]],[[U,'NAD83_Wyoming_West_Central_ftUS',Cbn,BUd,BWy,Bgg,BWF,BVj,BUT,BUr]]],['3737',BRa+AkO,[[U,Bx+' /'+pz+' East'+Akp,ClV,BUd,BWy,Bge,BWF,BYa,BZB,CVz,BUl,BUk,[B,K,'3737']]],[[U,'NAD83_Wyoming_East_Central_ftUS',Cbn,BUd,BWy,Bge,BWF,BYa,BZB,BUr]]],['3736',BRY+AkO,[[U,Bx+' /'+pz+' East'+DE,ClV,BUd,BWy,Bgd,BWF,BjL,BUT,CVz,BUl,BUk,[B,K,'3736']]],[[U,'NAD83_Wyoming_East_ftUS',Cbn,BUd,BWy,Bgd,BWF,BjL,BUT,BUr]]],['3735',BFL+AkO,[[U,Bx+' / Ohio South'+DE,ClV,BVG,BiX,BiW,BWT,BYk,BVj,BUT,CVz,BUl,BUk,[B,K,'3735']]],[[U,'NAD83_Ohio_South_ftUS',Cbn,BVD,BiX,BiW,BWT,BYk,BVj,BUT,BUr]]],['3734',BFI+AkO,[[U,Bx+' / Ohio'+Akg,ClV,BVG,BiV,BiU,Bat,BYk,BVj,BUT,CVz,BUl,BUk,[B,K,'3734']]],[[U,'NAD83_Ohio_North_ftUS',Cbn,BVD,BiV,BiU,Bat,BYk,BVj,BUT,BUr]]],['3733',BEC+BFf+AkO,[[U,AL+' /'+pz+' West'+DE,ClW,BUd,BWy,Bgf,BWF,BZC,BZB,CVz,BUl,BUk,[B,K,'3733']]],[[U,'NAD83_NSRS2007_Wyoming_West_ftUS',Cbq,BUd,BWy,Bgf,BWF,BZC,BZB,BUr]]],['3732',BGo+AkO,[[U,AL+' /'+pz+' West'+Akp,ClW,BUd,BWy,Bgg,BWF,BVj,BUT,CVz,BUl,BUk,[B,K,'3732']]],[[U,'NAD83_NSRS2007_Wyoming_West_Central_ftUS',Cbq,BUd,BWy,Bgg,BWF,BVj,BUT,BUr]]],['3731',BRa+AkO,[[U,AL+' /'+pz+' East'+Akp,ClW,BUd,BWy,Bge,BWF,BYa,BZB,CVz,BUl,BUk,[B,K,'3731']]],[[U,'NAD83_NSRS2007_Wyoming_East_Central_ftUS',Cbq,BUd,BWy,Bge,BWF,BYa,BZB,BUr]]],['3730',BRY+AkO,[[U,AL+' /'+pz+' East'+DE,ClW,BUd,BWy,Bgd,BWF,BjL,BUT,CVz,BUl,BUk,[B,K,'3730']]],[[U,'NAD83_NSRS2007_Wyoming_East_ftUS',Cbq,BUd,BWy,Bgd,BWF,BjL,BUT,BUr]]],['3729',BFL+AkO,[[U,AL+' / Ohio South'+DE,ClW,BVG,BiX,BiW,BWT,BYk,BVj,BUT,CVz,BUl,BUk,[B,K,'3729']]],[[U,'NAD83_NSRS2007_Ohio_South_ftUS',Cbq,BVD,BiX,BiW,BWT,BYk,BVj,BUT,BUr]]],['3728',BFI+AkO,[[U,AL+' / Ohio'+Akg,ClW,BVG,BiV,BiU,Bat,BYk,BVj,BUT,CVz,BUl,BUk,[B,K,'3728']]],[[U,'NAD83_NSRS2007_Ohio_North_ftUS',Cbq,BVD,BiV,BiU,Bat,BYk,BVj,BUT,BUr]]],['3727',l+' +lat_0=-21.11666666666667 +lon_0=55.53333333333333 +k=1 +x_0=160000'+ATB+BP+AJm+q+a,[[U,'Reunion 1947 / TM Reunion',Cqx,BUd,[A,C,AKg],[A,E,APa],BUf,CIJ,BmI,CVy,BUl,BUk,[B,K,'3727']]],[[U,'Reunion_1947_TM_Reunion',[S,'GCS_Reunion 1947',[V,Agv,BUs],BUU,BUW],BUd,[A,C,AKg],[A,E,APa],BUf,CIJ,BmI,BUa]]],['3726',BTz,[[U,AL+' / UTM zone 19N',ClW,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3726']]],[[U,'NAD83_NSRS2007_UTM_zone_19N',Cbq,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['3725',BTy,[[U,AL+' / UTM zone 18N',ClW,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3725']]],[[U,'NAD83_NSRS2007_UTM_zone_18N',Cbq,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['3724',BUM,[[U,AL+' / UTM zone 17N',ClW,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3724']]],[[U,'NAD83_NSRS2007_UTM_zone_17N',Cbq,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['3723',BUK,[[U,AL+' / UTM zone 16N',ClW,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3723']]],[[U,'NAD83_NSRS2007_UTM_zone_16N',Cbq,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['3722',BUJ,[[U,AL+' / UTM zone 15N',ClW,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3722']]],[[U,'NAD83_NSRS2007_UTM_zone_15N',Cbq,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['3721',BUI,[[U,AL+' / UTM zone 14N',ClW,BUd,BUX,BXU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3721']]],[[U,'NAD83_NSRS2007_UTM_zone_14N',Cbq,BUd,BUX,BXU,BUg,BUc,BUT,BUa]]],['3720',BUH,[[U,AL+' / UTM zone 13N',ClW,BUd,BUX,BZS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3720']]],[[U,'NAD83_NSRS2007_UTM_zone_13N',Cbq,BUd,BUX,BZS,BUg,BUc,BUT,BUa]]],['3719',BUG,[[U,AL+' / UTM zone 12N',ClW,BUd,BUX,BXs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3719']]],[[U,'NAD83_NSRS2007_UTM_zone_12N',Cbq,BUd,BUX,BXs,BUg,BUc,BUT,BUa]]],['3718',BUF,[[U,AL+' / UTM zone 11N',ClW,BUd,BUX,BXx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3718']]],[[U,'NAD83_NSRS2007_UTM_zone_11N',Cbq,BUd,BUX,BXx,BUg,BUc,BUT,BUa]]],['3717',Amy+j+c+q+a,[[U,AL+' / UTM zone 10N',ClW,BUd,BUX,Bap,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3717']]],[[U,'NAD83_NSRS2007_UTM_zone_10N',Cbq,BUd,BUX,Bap,BUg,BUc,BUT,BUa]]],['3716',AV+' +zone=9'+j+c+q+a,[[U,AL+' / UTM zone 9N',ClW,BUd,BUX,BaA,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3716']]],[[U,'NAD83_NSRS2007_UTM_zone_9N',Cbq,BUd,BUX,BaA,BUg,BUc,BUT,BUa]]],['3715',AV+' +zone=8'+j+c+q+a,[[U,AL+' / UTM zone 8N',ClW,BUd,BUX,BZz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3715']]],[[U,'NAD83_NSRS2007_UTM_zone_8N',Cbq,BUd,BUX,BZz,BUg,BUc,BUT,BUa]]],['3714',AV+' +zone=7'+j+c+q+a,[[U,AL+' / UTM zone 7N',ClW,BUd,BUX,BZn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3714']]],[[U,'NAD83_NSRS2007_UTM_zone_7N',Cbq,BUd,BUX,BZn,BUg,BUc,BUT,BUa]]],['3713',AV+' +zone=6'+j+c+q+a,[[U,AL+' / UTM zone 6N',ClW,BUd,BUX,BYy,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3713']]],[[U,'NAD83_NSRS2007_UTM_zone_6N',Cbq,BUd,BUX,BYy,BUg,BUc,BUT,BUa]]],['3712',AV+' +zone=5'+j+c+q+a,[[U,AL+' / UTM zone 5N',ClW,BUd,BUX,BZK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3712']]],[[U,'NAD83_NSRS2007_UTM_zone_5N',Cbq,BUd,BUX,BZK,BUg,BUc,BUT,BUa]]],['3711',AV+' +zone=4'+j+c+q+a,[[U,AL+' / UTM zone 4N',ClW,BUd,BUX,Bac,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3711']]],[[U,'NAD83_NSRS2007_UTM_zone_4N',Cbq,BUd,BUX,Bac,BUg,BUc,BUT,BUa]]],['3710',AV+' +zone=3'+j+c+q+a,[[U,AL+' / UTM zone 3N',ClW,BUd,BUX,BaZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3710']]],[[U,'NAD83_NSRS2007_UTM_zone_3N',Cbq,BUd,BUX,BaZ,BUg,BUc,BUT,BUa]]],['3709',AV+' +zone=2'+j+c+q+a,[[U,AL+' / UTM zone 2N',ClW,BUd,BUX,BYV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3709']]],[[U,'NAD83_NSRS2007_UTM_zone_2N',Cbq,BUd,BUX,BYV,BUg,BUc,BUT,BUa]]],['3708',AV+' +zone=1'+j+c+q+a,[[U,AL+' / UTM zone 1N',ClW,BUd,BUX,BYF,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3708']]],[[U,'NAD83_NSRS2007_UTM_zone_1N',Cbq,BUd,BUX,BYF,BUg,BUc,BUT,BUa]]],['3707',Ame+j+c+q+a,[[U,AL+' / UTM zone 60N',ClW,BUd,BUX,BXo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3707']]],[[U,'NAD83_NSRS2007_UTM_zone_60N',Cbq,BUd,BUX,BXo,BUg,BUc,BUT,BUa]]],['3706',AoK+j+c+q+a,[[U,AL+' / UTM zone 59N',ClW,BUd,BUX,BXj,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3706']]],[[U,'NAD83_NSRS2007_UTM_zone_59N',Cbq,BUd,BUX,BXj,BUg,BUc,BUT,BUa]]],['3705',BRb+c+q+a,[[U,AL+' /'+pz+' West',ClW,BUd,BWy,Bgf,BWF,BXP,BXV,CVy,BUl,BUk,[B,K,'3705']]],[[U,'NAD83_NSRS2007_Wyoming_West',Cbq,BUd,BWy,Bgf,BWF,BXP,BXV,BUa]]],['3704',BGo+c+q+a,[[U,AL+' /'+pz+' West'+Gh,ClW,BUd,BWy,Bgg,BWF,BVY,BUT,CVy,BUl,BUk,[B,K,'3704']]],[[U,'NAD83_NSRS2007_Wyoming_West_Central',Cbq,BUd,BWy,Bgg,BWF,BVY,BUT,BUa]]],['3703',BRZ+c+q+a,[[U,AL+' /'+pz+' East'+Gh,ClW,BUd,BWy,Bge,BWF,BVh,BXV,CVy,BUl,BUk,[B,K,'3703']]],[[U,'NAD83_NSRS2007_Wyoming_East_Central',Cbq,BUd,BWy,Bge,BWF,BVh,BXV,BUa]]],['3702',BRX+c+q+a,[[U,AL+' /'+pz+' East',ClW,BUd,BWy,Bgd,BWF,BVP,BUT,CVy,BUl,BUk,[B,K,'3702']]],[[U,'NAD83_NSRS2007_Wyoming_East',Cbq,BUd,BWy,Bgd,BWF,BVP,BUT,BUa]]],['3701',BRW+j+c+q+a,[[U,AL+' /'+BEm+" "+aU,ClW,BUd,BUX,BWb,BUg,Bsf,Bse,CVy,BUl,BUk,[B,K,'3701']]],[[U,'NAD83_NSRS2007_Wisconsin_Transverse_Mercator',Cbq,BUd,BUX,BWb,BUg,Bsf,Bse,BUa]]],['3700',BGe+AkO,[[U,AL+' /'+cp+' South'+DE,ClW,BVG,BjK,BjJ,Bde,BWb,BVj,BUT,CVz,BUl,BUk,[B,K,'3700']]],[[U,'NAD83_NSRS2007_Wisconsin_South_ftUS',Cbq,BVD,BjK,BjJ,Bde,BWb,BVj,BUT,BUr]]],['3699',BGe+c+q+a,[[U,AL+' /'+cp+' South',ClW,BVG,BjK,BjJ,Bde,BWb,BVY,BUT,CVy,BUl,BUk,[B,K,'3699']]],[[U,'NAD83_NSRS2007_Wisconsin_South',Cbq,BVD,BjK,BjJ,Bde,BWb,BVY,BUT,BUa]]],['3698',BGd+AkO,[[U,AL+' /'+BBe+DE,ClW,BVG,BjI,BjH,Bgc,BWb,BVj,BUT,CVz,BUl,BUk,[B,K,'3698']]],[[U,'NAD83_NSRS2007_Wisconsin_North_ftUS',Cbq,BVD,BjI,BjH,Bgc,BWb,BVj,BUT,BUr]]],['3697',BGd+c+q+a,[[U,AL+' /'+BBe,ClW,BVG,BjI,BjH,Bgc,BWb,BVY,BUT,CVy,BUl,BUk,[B,K,'3697']]],[[U,'NAD83_NSRS2007_Wisconsin_North',Cbq,BVD,BjI,BjH,Bgc,BWb,BVY,BUT,BUa]]],['3696',BGf+AkO,[[U,AL+' /'+BBd+DE,ClW,BVG,Bdi,BjS,BYM,BWb,BVj,BUT,CVz,BUl,BUk,[B,K,'3696']]],[[U,'NAD83_NSRS2007_Wisconsin_Central_ftUS',Cbq,BVD,Bdi,BjS,BYM,BWb,BVj,BUT,BUr]]],['3695',BGf+c+q+a,[[U,AL+' /'+BBd,ClW,BVG,Bdi,BjS,BYM,BWb,BVY,BUT,CVy,BUl,BUk,[B,K,'3695']]],[[U,'NAD83_NSRS2007_Wisconsin_Central',Cbq,BVD,Bdi,BjS,BYM,BWb,BVY,BUT,BUa]]],['3694',BGc+c+q+a,[[U,AL+' / West'+eI+' South',ClW,BVG,BjG,BjF,Bgb,BVm,BVY,BUT,CVy,BUl,BUk,[B,K,'3694']]],[[U,'NAD83_NSRS2007_West_Virginia_South',Cbq,BVD,BjG,BjF,Bgb,BVm,BVY,BUT,BUa]]],['3693',BGb+c+q+a,[[U,AL+' / West'+Aoh,ClW,BVG,BjE,BjD,Bga,BZs,BVY,BUT,CVy,BUl,BUk,[B,K,'3693']]],[[U,'NAD83_NSRS2007_West_Virginia_North',Cbq,BVD,BjE,BjD,Bga,BZs,BVY,BUT,BUa]]],['3692',BRV+AnX,[[U,AL+' /'+kE+' South'+DE,ClW,BVG,BjC,BjB,BgZ,BWB,BXa,BUT,CVz,BUl,BUk,[B,K,'3692']]],[[U,'NAD83_NSRS2007_Washington_South_ftUS',Cbq,BVD,BjC,BjB,BgZ,BWB,BXa,BUT,BUr]]],['3691',BRU+j+c+q+a,[[U,AL+' /'+kE+' South',ClW,BVG,BjC,BjB,BgZ,BWB,BUc,BUT,CVy,BUl,BUk,[B,K,'3691']]],[[U,'NAD83_NSRS2007_Washington_South',Cbq,BVD,BjC,BjB,BgZ,BWB,BUc,BUT,BUa]]],['3690',BRT+AnX,[[U,AL+' /'+BBc+DE,ClW,BVG,BaE,BjA,BZA,BgY,BXa,BUT,CVz,BUl,BUk,[B,K,'3690']]],[[U,'NAD83_NSRS2007_Washington_North_ftUS',Cbq,BVD,BaE,BjA,BZA,BgY,BXa,BUT,BUr]]],['3689',BRS+j+c+q+a,[[U,AL+' /'+BBc,ClW,BVG,BaE,BjA,BZA,BgY,BUc,BUT,CVy,BUl,BUk,[B,K,'3689']]],[[U,'NAD83_NSRS2007_Washington_North',Cbq,BVD,BaE,BjA,BZA,BgY,BUc,BUT,BUa]]],['3688',BRR+AkO,[[U,AL+' /'+eI+' South'+DE,ClW,BVG,BZr,BgX,BXr,BZe,Biz,Bbv,CVz,BUl,BUk,[B,K,'3688']]],[[U,'NAD83_NSRS2007_Virginia_South_ftUS',Cbq,BVD,BZr,BgX,BXr,BZe,Biz,Bbv,BUr]]],['3687',BRQ+c+q+a,[[U,AL+' /'+eI+' South',ClW,BVG,BZr,BgX,BXr,BZe,BXO,BVg,CVy,BUl,BUk,[B,K,'3687']]],[[U,'NAD83_NSRS2007_Virginia_South',Cbq,BVD,BZr,BgX,BXr,BZe,BXO,BVg,BUa]]],['3686',BRP+AnX,[[U,AL+' /'+BIY,ClW,BVG,Biy,Bix,BXq,BZe,Biz,Biw,CVz,BUl,BUk,[B,K,'3686']]],[[U,'NAD83_NSRS2007_Virginia_North_ftUS',Cbq,BVD,Biy,Bix,BXq,BZe,Biz,Biw,BUr]]],['3685',BRO+c+q+a,[[U,AL+' /'+Aoh,ClW,BVG,Biy,Bix,BXq,BZe,BXO,BYH,CVy,BUl,BUk,[B,K,'3685']]],[[U,'NAD83_NSRS2007_Virginia_North',Cbq,BVD,Biy,Bix,BXq,BZe,BXO,BYH,BUa]]],['3684',BRM+c+q+a,[[U,AL+' / Vermont',ClW,BUd,BYX,BgW,BgV,BUc,BUT,CVy,BUl,BUk,[B,K,'3684']]],[[U,'NAD83_NSRS2007_Vermont',Cbq,BUd,BYX,BgW,BgV,BUc,BUT,BUa]]],['3683',BRi+AkO,[[U,AL+' / Utah South'+DE,ClW,BVG,Bcd,Bcc,BWJ,BWm,BXQ,Blk,CVz,BUl,BUk,[B,K,'3683']]],[[U,'NAD83_NSRS2007_Utah_South_ftUS',Cbq,BVD,Bcd,Bcc,BWJ,BWm,BXQ,Blk,BUr]]],['3682',Ash+AsO+AGv+BGh,[[U,AL+' / Utah South'+rv,ClW,BVG,Bcd,Bcc,BWJ,BWm,Bec,Bwj,CWY,BUl,BUk,[B,K,'3682']]],[[U,'NAD83_NSRS2007_Utah_South_ft',Cbq,BVD,Bcd,Bcc,BWJ,BWm,Bec,Bwj,BXN]]],['3681',BRe+c+q+a,[[U,AL+' / Utah South',ClW,BVG,Bcd,Bcc,BWJ,BWm,BUc,Bbw,CVy,BUl,BUk,[B,K,'3681']]],[[U,'NAD83_NSRS2007_Utah_South',Cbq,BVD,Bcd,Bcc,BWJ,BWm,BUc,Bbw,BUa]]],['3680',BRh+AnX,[[U,AL+' / Utah'+Akg,ClW,BVG,BZD,Bcb,Bby,BWm,BXQ,BjM,CVz,BUl,BUk,[B,K,'3680']]],[[U,'NAD83_NSRS2007_Utah_North_ftUS',Cbq,BVD,BZD,Bcb,Bby,BWm,BXQ,BjM,BUr]]],['3679',Asc+AsO+ACe+BGh,[[U,AL+' / Utah'+ApU,ClW,BVG,BZD,Bcb,Bby,BWm,Bec,Bwi,CWY,BUl,BUk,[B,K,'3679']]],[[U,'NAD83_NSRS2007_Utah_North_ft',Cbq,BVD,BZD,Bcb,Bby,BWm,Bec,Bwi,BXN]]],['3678',BRd+c+q+a,[[U,AL+' / Utah'+QM,ClW,BVG,BZD,Bcb,Bby,BWm,BUc,BVg,CVy,BUl,BUk,[B,K,'3678']]],[[U,'NAD83_NSRS2007_Utah_North',Cbq,BVD,BZD,Bcb,Bby,BWm,BUc,BVg,BUa]]],['3677',BRg+AnX,[[U,AL+' / Utah'+Akp,ClW,BVG,Bca,BcZ,BYl,BWm,BXQ,Bwh,CVz,BUl,BUk,[B,K,'3677']]],[[U,'NAD83_NSRS2007_Utah_Central_ftUS',Cbq,BVD,Bca,BcZ,BYl,BWm,BXQ,Bwh,BUr]]],['3676',Asb+AsO+AGw+BGh,[[U,AL+' / Utah'+AsN,ClW,BVG,Bca,BcZ,BYl,BWm,Bec,Bwg,CWY,BUl,BUk,[B,K,'3676']]],[[U,'NAD83_NSRS2007_Utah_Central_ft',Cbq,BVD,Bca,BcZ,BYl,BWm,Bec,Bwg,BXN]]],['3675',BRc+c+q+a,[[U,AL+' / Utah'+Gh,ClW,BVG,Bca,BcZ,BYl,BWm,BUc,BYH,CVy,BUl,BUk,[B,K,'3675']]],[[U,'NAD83_NSRS2007_Utah_Central',Cbq,BVD,Bca,BcZ,BYl,BWm,BUc,BYH,BUa]]],['3674',BRL+AnX,[[U,AL+' / Texas South'+Akp,ClW,BVG,Biv,Biu,BgU,BXU,BVj,Bsb,CVz,BUl,BUk,[B,K,'3674']]],[[U,'NAD83_NSRS2007_Texas_South_Central_ftUS',Cbq,BVD,Biv,Biu,BgU,BXU,BVj,Bsb,BUr]]],['3673',BRK+j+c+q+a,[[U,AL+' / Texas South'+Gh,ClW,BVG,Biv,Biu,BgU,BXU,BVY,BgT,CVy,BUl,BUk,[B,K,'3673']]],[[U,'NAD83_NSRS2007_Texas_South_Central',Cbq,BVD,Biv,Biu,BgU,BXU,BVY,BgT,BUa]]],['3672',BIe+Lf+vz+AnX,[[U,AL+' / Texas South'+DE,ClW,BVG,BcY,BcX,Bdd,BXp,BZP,Bsa,CVz,BUl,BUk,[B,K,'3672']]],[[U,'NAD83_NSRS2007_Texas_South_ftUS',Cbq,BVD,BcY,BcX,Bdd,BXp,BZP,Bsa,BUr]]],['3671',BTT+c+q+a,[[U,AL+' / Texas South',ClW,BVG,BcY,BcX,Bdd,BXp,BVl,Bdc,CVy,BUl,BUk,[B,K,'3671']]],[[U,'NAD83_NSRS2007_Texas_South',Cbq,BVD,BcY,BcX,Bdd,BXp,BVl,Bdc,BUa]]],['3670',BRJ+AnX,[[U,AL+' / Texas'+BBb+DE,ClW,BVG,Bit,Bis,BgS,BXp,BVj,Biw,CVz,BUl,BUk,[B,K,'3670']]],[[U,'NAD83_NSRS2007_Texas_North_Central_ftUS',Cbq,BVD,Bit,Bis,BgS,BXp,BVj,Biw,BUr]]],['3669',BRI+c+q+a,[[U,AL+' / Texas'+BBb,ClW,BVG,Bit,Bis,BgS,BXp,BVY,BYH,CVy,BUl,BUk,[B,K,'3669']]],[[U,'NAD83_NSRS2007_Texas_North_Central',Cbq,BVD,Bit,Bis,BgS,BXp,BVY,BYH,BUa]]],['3668',BTS+AkO,[[U,AL+' / Texas'+Akg,ClW,BVG,Bir,Biq,BgR,BgQ,BXZ,Bbv,CVz,BUl,BUk,[B,K,'3668']]],[[U,'NAD83_NSRS2007_Texas_North_ftUS',Cbq,BVD,Bir,Biq,BgR,BgQ,BXZ,Bbv,BUr]]],['3667',BTR+c+q+a,[[U,AL+' / Texas'+QM,ClW,BVG,Bir,Biq,BgR,BgQ,BVP,BVg,CVy,BUl,BUk,[B,K,'3667']]],[[U,'NAD83_NSRS2007_Texas_North',Cbq,BVD,Bir,Biq,BgR,BgQ,BVP,BVg,BUa]]],['3666',BRH+BJv+q+a,[[U,AL+' / Texas Centric'+PW+' Conformal',ClW,BVG,Bip,Bio,BgP,BXb,BWL,Bdc,CVy,BUl,BUk,[B,K,'3666']]],[[U,'NAD83_NSRS2007_Texas_Centric_Lambert_Conformal',Cbq,BVD,Bip,Bio,BgP,BXb,BWL,Bdc,BUa]]],['3665',BRG+BNF+q+a,[[U,AL+' / Texas Centric'+" "+Pk+' Equal Area',ClW,BeL,Bip,Bio,CBH,Buv,BWL,Bdb,CVy,BUl,BUk,[B,K,'3665']]],[[U,'NAD83_NSRS2007_Texas_Centric_Albers_Equal_Area',Cbq,BeK,Bip,Bio,BgP,BXb,BWL,Bdb,BUa]]],['3664',BTQ+AkO,[[U,AL+' / Texas'+Akp,ClW,BVG,Bin,Bim,Bda,BZd,Bbu,Blk,CVz,BUl,BUk,[B,K,'3664']]],[[U,'NAD83_NSRS2007_Texas_Central_ftUS',Cbq,BVD,Bin,Bim,Bda,BZd,Bbu,Blk,BUr]]],['3663',BTP+c+q+a,[[U,AL+' / Texas'+Gh,ClW,BVG,Bin,Bim,Bda,BZd,BWl,Bbw,CVy,BUl,BUk,[B,K,'3663']]],[[U,'NAD83_NSRS2007_Texas_Central',Cbq,BVD,Bin,Bim,Bda,BZd,BWl,Bbw,BUa]]],['3662',BGa+AkO,[[U,AL+' /'+AGm+DE,ClW,BVG,Bil,Bik,BZq,Bcg,BVj,BUT,CVz,BUl,BUk,[B,K,'3662']]],[[U,'NAD83_NSRS2007_Tennessee_ftUS',Cbq,BVD,Bil,Bik,BZq,Bcg,BVj,BUT,BUr]]],['3661',BGa+c+q+a,[[U,AL+' /'+AGm,ClW,BVG,Bil,Bik,BZq,Bcg,BVY,BUT,CVy,BUl,BUk,[B,K,'3661']]],[[U,'NAD83_NSRS2007_Tennessee',Cbq,BVD,Bil,Bik,BZq,Bcg,BVY,BUT,BUa]]],['3660',BGZ+AkO,[[U,AL+' / South Dakota South'+DE,ClW,BVG,Bij,Bii,BgO,BZd,BVj,BUT,CVz,BUl,BUk,[B,K,'3660']]],[[U,'NAD83_NSRS2007_South_Dakota_South_ftUS',Cbq,BVD,Bij,Bii,BgO,BZd,BVj,BUT,BUr]]],['3659',BGZ+c+q+a,[[U,AL+' / South Dakota South',ClW,BVG,Bij,Bii,BgO,BZd,BVY,BUT,CVy,BUl,BUk,[B,K,'3659']]],[[U,'NAD83_NSRS2007_South_Dakota_South',Cbq,BVD,Bij,Bii,BgO,BZd,BVY,BUT,BUa]]],['3658',BGY+AkO,[[U,AL+' / South Dakota'+Akg,ClW,BVG,Bih,Big,BYM,BXb,BVj,BUT,CVz,BUl,BUk,[B,K,'3658']]],[[U,'NAD83_NSRS2007_South_Dakota_North_ftUS',Cbq,BVD,Bih,Big,BYM,BXb,BVj,BUT,BUr]]],['3657',BGY+c+q+a,[[U,AL+' / South Dakota'+QM,ClW,BVG,Bih,Big,BYM,BXb,BVY,BUT,CVy,BUl,BUk,[B,K,'3657']]],[[U,'NAD83_NSRS2007_South_Dakota_North',Cbq,BVD,Bih,Big,BYM,BXb,BVY,BUT,BUa]]],['3656',BGX+AoT,[[U,AL+' / South'+pa+rv,ClW,BVG,Bif,Bie,BgN,BVm,BVW,BUT,CWY,BUl,BUk,[B,K,'3656']]],[[U,'NAD83_NSRS2007_South_Carolina_ft',Cbq,BVD,Bif,Bie,BgN,BVm,BVW,BUT,BXN]]],['3655',BGX+c+q+a,[[U,AL+' / South'+pa,ClW,BVG,Bif,Bie,BgN,BVm,BsZ,BUT,CVy,BUl,BUk,[B,K,'3655']]],[[U,'NAD83_NSRS2007_South_Carolina',Cbq,BVD,Bif,Bie,BgN,BVm,BsZ,BUT,BUa]]],['3654',BTO+AkO,[[U,AL+' / Rhode'+AsM,ClW,BUd,BgM,BZc,Bid,Bom,BUT,CVz,BUl,BUk,[B,K,'3654']]],[[U,'NAD83_NSRS2007_Rhode_Island_ftUS',Cbq,BUd,BgM,BZc,Bid,Bom,BUT,BUr]]],['3653',BRF+j+c+q+a,[[U,AL+' / Rhode'+fA,ClW,BUd,BgM,BZc,Bid,BWV,BUT,CVy,BUl,BUk,[B,K,'3653']]],[[U,'NAD83_NSRS2007_Rhode_Island',Cbq,BUd,BgM,BZc,Bid,BWV,BUT,BUa]]],['3652',BGW+AkO,[[U,AL+' /'+eG+' South'+DE,ClW,BVG,BgL,BgK,BXi,BZb,BVj,BUT,CVz,BUl,BUk,[B,K,'3652']]],[[U,'NAD83_NSRS2007_Pennsylvania_South_ftUS',Cbq,BVD,BgL,BgK,BXi,BZb,BVj,BUT,BUr]]],['3651',BGW+c+q+a,[[U,AL+' /'+eG+' South',ClW,BVG,BgL,BgK,BXi,BZb,BVY,BUT,CVy,BUl,BUk,[B,K,'3651']]],[[U,'NAD83_NSRS2007_Pennsylvania_South',Cbq,BVD,BgL,BgK,BXi,BZb,BVY,BUT,BUa]]],['3650',BFe+AkO,[[U,AL+' /'+BBa+DE,ClW,BVG,Bic,Bib,BZp,BZb,BVj,BUT,CVz,BUl,BUk,[B,K,'3650']]],[[U,'NAD83_NSRS2007_Pennsylvania_North_ftUS',Cbq,BVD,Bic,Bib,BZp,BZb,BVj,BUT,BUr]]],['3649',BFe+c+q+a,[[U,AL+' /'+BBa,ClW,BVG,Bic,Bib,BZp,BZb,BVY,BUT,CVy,BUl,BUk,[B,K,'3649']]],[[U,'NAD83_NSRS2007_Pennsylvania_North',Cbq,BVD,Bic,Bib,BZp,BZb,BVY,BUT,BUa]]],['3648',BSc+AoT,[[U,AL+' / Oregon South'+rv,ClW,BVG,Bdm,Bdl,BWi,BWB,Bok,BUT,CWY,BUl,BUk,[B,K,'3648']]],[[U,'NAD83_NSRS2007_Oregon_South_ft',Cbq,BVD,Bdm,Bdl,BWi,BWB,Bok,BUT,BXN]]],['3647',BKu+j+c+q+a,[[U,AL+' / Oregon South',ClW,BVG,Bdm,Bdl,BWi,BWB,BWL,BUT,CVy,BUl,BUk,[B,K,'3647']]],[[U,'NAD83_NSRS2007_Oregon_South',Cbq,BVD,Bdm,Bdl,BWi,BWB,BWL,BUT,BUa]]],['3646',BSa+AoT,[[U,AL+' / Oregon'+ApU,ClW,BVG,Bdk,Bdj,BYN,BWB,Boj,BUT,CWY,BUl,BUk,[B,K,'3646']]],[[U,'NAD83_NSRS2007_Oregon_North_ft',Cbq,BVD,Bdk,Bdj,BYN,BWB,Boj,BUT,BXN]]],['3645',BKt+j+c+q+a,[[U,AL+' / Oregon'+QM,ClW,BVG,Bdk,Bdj,BYN,BWB,BXy,BUT,CVy,BUl,BUk,[B,K,'3645']]],[[U,'NAD83_NSRS2007_Oregon_North',Cbq,BVD,Bdk,Bdj,BYN,BWB,BXy,BUT,BUa]]],['3644',BSY+AoT,[[U,AL+' / Oregon'+PW+rv,ClW,BVG,BZg,BaF,BZf,BWB,Boi,BUT,CWY,BUl,BUk,[B,K,'3644']]],[[U,'NAD83_NSRS2007_Oregon_Lambert_ft',Cbq,BVD,BZg,BaF,BZf,BWB,Boi,BUT,BXN]]],['3643',BKs+j+c+q+a,[[U,AL+' / Oregon'+PW,ClW,BVG,BZg,BaF,BZf,BWB,BVh,BUT,CVy,BUl,BUk,[B,K,'3643']]],[[U,'NAD83_NSRS2007_Oregon_Lambert',Cbq,BVD,BZg,BaF,BZf,BWB,BVh,BUT,BUa]]],['3642',BFc+AkO,[[U,AL+' /'+AGg+' South'+DE,ClW,BVG,Bia,BiZ,BgJ,BXh,BVj,BUT,CVz,BUl,BUk,[B,K,'3642']]],[[U,'NAD83_NSRS2007_Oklahoma_South_ftUS',Cbq,BVD,Bia,BiZ,BgJ,BXh,BVj,BUT,BUr]]],['3641',BFc+c+q+a,[[U,AL+' /'+AGg+' South',ClW,BVG,Bia,BiZ,BgJ,BXh,BVY,BUT,CVy,BUl,BUk,[B,K,'3641']]],[[U,'NAD83_NSRS2007_Oklahoma_South',Cbq,BVD,Bia,BiZ,BgJ,BXh,BVY,BUT,BUa]]],['3640',BFM+AkO,[[U,AL+' /'+ArE+DE,ClW,BVG,BgI,BiY,BgH,BXh,BVj,BUT,CVz,BUl,BUk,[B,K,'3640']]],[[U,'NAD83_NSRS2007_Oklahoma_North_ftUS',Cbq,BVD,BgI,BiY,BgH,BXh,BVj,BUT,BUr]]],['3639',BFM+c+q+a,[[U,AL+' /'+ArE,ClW,BVG,BgI,BiY,BgH,BXh,BVY,BUT,CVy,BUl,BUk,[B,K,'3639']]],[[U,'NAD83_NSRS2007_Oklahoma_North',Cbq,BVD,BgI,BiY,BgH,BXh,BVY,BUT,BUa]]],['3638',BFL+c+q+a,[[U,AL+' / Ohio South',ClW,BVG,BiX,BiW,BWT,BYk,BVY,BUT,CVy,BUl,BUk,[B,K,'3638']]],[[U,'NAD83_NSRS2007_Ohio_South',Cbq,BVD,BiX,BiW,BWT,BYk,BVY,BUT,BUa]]],['3637',BFI+c+q+a,[[U,AL+' / Ohio'+QM,ClW,BVG,BiV,BiU,Bat,BYk,BVY,BUT,CVy,BUl,BUk,[B,K,'3637']]],[[U,'NAD83_NSRS2007_Ohio_North',Cbq,BVD,BiV,BiU,Bat,BYk,BVY,BUT,BUa]]],['3636',BRE+AoT,[[U,AL+' /'+QM+' Dakota South'+rv,ClW,BVG,BiT,BiS,BbM,BZa,Bbt,BUT,CWY,BUl,BUk,[B,K,'3636']]],[[U,'NAD83_NSRS2007_North_Dakota_South_ft',Cbq,BVD,BiT,BiS,BbM,BZa,Bbt,BUT,BXN]]],['3635',BRD+c+q+a,[[U,AL+' /'+QM+' Dakota South',ClW,BVG,BiT,BiS,BbM,BZa,BVY,BUT,CVy,BUl,BUk,[B,K,'3635']]],[[U,'NAD83_NSRS2007_North_Dakota_South',Cbq,BVD,BiT,BiS,BbM,BZa,BVY,BUT,BUa]]],['3634',BRC+AoT,[[U,AL+' /'+QM+' Dakota'+ApU,ClW,BVG,BaE,BiR,BZA,BZa,Bbt,BUT,CWY,BUl,BUk,[B,K,'3634']]],[[U,'NAD83_NSRS2007_North_Dakota_North_ft',Cbq,BVD,BaE,BiR,BZA,BZa,Bbt,BUT,BXN]]],['3633',BRB+c+q+a,[[U,AL+' /'+QM+' Dakota'+QM,ClW,BVG,BaE,BiR,BZA,BZa,BVY,BUT,CVy,BUl,BUk,[B,K,'3633']]],[[U,'NAD83_NSRS2007_North_Dakota_North',Cbq,BVD,BaE,BiR,BZA,BZa,BVY,BUT,BUa]]],['3632',BRA+AnX,[[U,AL+' /'+BBZ+DE,ClW,BVG,BiQ,BiP,BgG,BdZ,BVW,BUT,CVz,BUl,BUk,[B,K,'3632']]],[[U,'NAD83_NSRS2007_North_Carolina_ftUS',Cbq,BVD,BiQ,BiP,BgG,BdZ,BVW,BUT,BUr]]],['3631',BQz+c+q+a,[[U,AL+' /'+BBZ,ClW,BVG,BiQ,BiP,BgG,BdZ,BsY,BUT,CVy,BUl,BUk,[B,K,'3631']]],[[U,'NAD83_NSRS2007_North_Carolina',Cbq,BVD,BiQ,BiP,BgG,BdZ,BsY,BUT,BUa]]],['3630',BQy+AkO,[[U,AL+' / New York West'+DE,ClW,BUd,BXM,BgF,BWF,BsX,BUT,CVz,BUl,BUk,[B,K,'3630']]],[[U,'NAD83_NSRS2007_New_York_West_ftUS',Cbq,BUd,BXM,BgF,BWF,BsX,BUT,BUr]]],['3629',BQx+j+c+q+a,[[U,AL+' / New York West',ClW,BUd,BXM,BgF,BWF,Blz,BUT,CVy,BUl,BUk,[B,K,'3629']]],[[U,'NAD83_NSRS2007_New_York_West',Cbq,BUd,BXM,BgF,BWF,Blz,BUT,BUa]]],['3628',BAa+yX+BBM,[[U,AL+' / New York Long'+AsM,ClW,BVG,BgE,BgD,BZp,BgC,BZP,BUT,CVz,BUl,BUk,[B,K,'3628']]],[[U,'NAD83_NSRS2007_New_York_Long_Island_ftUS',Cbq,BVD,BgE,BgD,BZp,BgC,BZP,BUT,BUr]]],['3627',BKp+j+c+q+a,[[U,AL+' / New York Long'+fA,ClW,BVG,BgE,BgD,BZp,BgC,BVl,BUT,CVy,BUl,BUk,[B,K,'3627']]],[[U,'NAD83_NSRS2007_New_York_Long_Island',Cbq,BVD,BgE,BgD,BZp,BgC,BVl,BUT,BUa]]],['3626',BSC,[[U,AL+' / New York East'+DE,ClW,BUd,BZo,BaD,BUt,BiO,BUT,CVz,BUl,BUk,[B,K,'3626']]],[[U,'NAD83_NSRS2007_New_York_East_ftUS',Cbq,BUd,BZo,BaD,BUt,BiO,BUT,BUr]]],['3625',BUS,[[U,AL+' / New York East',ClW,BUd,BZo,BaD,BUt,BXc,BUT,CVy,BUl,BUk,[B,K,'3625']]],[[U,'NAD83_NSRS2007_New_York_East',Cbq,BUd,BZo,BaD,BUt,BXc,BUT,BUa]]],['3624',BQw+AkO,[[U,AL+' / New York'+Akp,ClW,BUd,BXM,BgB,BWF,Bwf,BUT,CVz,BUl,BUk,[B,K,'3624']]],[[U,'NAD83_NSRS2007_New_York_Central_ftUS',Cbq,BUd,BXM,BgB,BWF,Bwf,BUT,BUr]]],['3623',BQv+c+q+a,[[U,AL+' / New York'+Gh,ClW,BUd,BXM,BgB,BWF,BWp,BUT,CVy,BUl,BUk,[B,K,'3623']]],[[U,'NAD83_NSRS2007_New_York_Central',Cbq,BUd,BXM,BgB,BWF,BWp,BUT,BUa]]],['3622',BQu+AkO,[[U,AL+' / New Mexico West'+DE,ClW,BUd,BWA,BgA,Bfz,BsW,BUT,CVz,BUl,BUk,[B,K,'3622']]],[[U,'NAD83_NSRS2007_New_Mexico_West_ftUS',Cbq,BUd,BWA,BgA,Bfz,BsW,BUT,BUr]]],['3621',BQt+j+c+q+a,[[U,AL+' / New Mexico West',ClW,BUd,BWA,BgA,Bfz,BsV,BUT,CVy,BUl,BUk,[B,K,'3621']]],[[U,'NAD83_NSRS2007_New_Mexico_West',Cbq,BUd,BWA,BgA,Bfz,BsV,BUT,BUa]]],['3620',BGn+AkO,[[U,AL+' / New Mexico East'+DE,ClW,BUd,BWA,Bfy,BcW,BsU,BUT,CVz,BUl,BUk,[B,K,'3620']]],[[U,'NAD83_NSRS2007_New_Mexico_East_ftUS',Cbq,BUd,BWA,Bfy,BcW,BsU,BUT,BUr]]],['3619',BGn+c+q+a,[[U,AL+' / New Mexico East',ClW,BUd,BWA,Bfy,BcW,BsT,BUT,CVy,BUl,BUk,[B,K,'3619']]],[[U,'NAD83_NSRS2007_New_Mexico_East',Cbq,BUd,BWA,Bfy,BcW,BsT,BUT,BUa]]],['3618',Awm+BJP,[[U,AL+' / New Mexico'+Akp,ClW,BUd,BWA,Bfx,BUt,BXa,BUT,CVz,BUl,BUk,[B,K,'3618']]],[[U,'NAD83_NSRS2007_New_Mexico_Central_ftUS',Cbq,BUd,BWA,Bfx,BUt,BXa,BUT,BUr]]],['3617',BQs+c+q+a,[[U,AL+' / New Mexico'+Gh,ClW,BUd,BWA,Bfx,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'3617']]],[[U,'NAD83_NSRS2007_New_Mexico_Central',Cbq,BUd,BWA,Bfx,BUt,BUc,BUT,BUa]]],['3616',BSC,[[U,AL+' / New Jersey (ft US)',ClW,BUd,BZo,BaD,BUt,BiO,BUT,CVz,BUl,BUk,[B,K,'3616']]],[[U,'NAD83_NSRS2007_New_Jersey_ft_US',Cbq,BUd,BZo,BaD,BUt,BiO,BUT,BUr]]],['3615',BUS,[[U,AL+' / New Jersey',ClW,BUd,BZo,BaD,BUt,BXc,BUT,CVy,BUl,BUk,[B,K,'3615']]],[[U,'NAD83_NSRS2007_New_Jersey',Cbq,BUd,BZo,BaD,BUt,BXc,BUT,BUa]]],['3614',Awj+BBM,[[U,AL+' / New'+AGn+DE,ClW,BUd,BYX,Bfw,BWN,BZP,BUT,CVz,BUl,BUk,[B,K,'3614']]],[[U,'NAD83_NSRS2007_New_Hampshire_ftUS',Cbq,BUd,BYX,Bfw,BWN,BZP,BUT,BUr]]],['3613',BQr+c+q+a,[[U,AL+' / New'+AGn,ClW,BUd,BYX,Bfw,BWN,BVl,BUT,CVy,BUl,BUk,[B,K,'3613']]],[[U,'NAD83_NSRS2007_New_Hampshire',Cbq,BUd,BYX,Bfw,BWN,BVl,BUT,BUa]]],['3612',BTj+AnX,[[U,AL+' / Nevada West (ft US)',ClW,BUd,BXg,Bfv,BUt,BZC,BsS,CVz,BUl,BUk,[B,K,'3612']]],[[U,'NAD83_NSRS2007_Nevada_West_ft_US',Cbq,BUd,BXg,Bfv,BUt,BZC,BsS,BUr]]],['3611',BTi+j+c+q+a,[[U,AL+' / Nevada West',ClW,BUd,BXg,Bfv,BUt,BXP,BgT,CVy,BUl,BUk,[B,K,'3611']]],[[U,'NAD83_NSRS2007_Nevada_West',Cbq,BUd,BXg,Bfv,BUt,BXP,BgT,BUa]]],['3610',BTh+AnX,[[U,AL+' / Nevada East (ft US)',ClW,BUd,BXg,Bfu,BUt,BjL,BsR,CVz,BUl,BUk,[B,K,'3610']]],[[U,'NAD83_NSRS2007_Nevada_East_ft_US',Cbq,BUd,BXg,Bfu,BUt,BjL,BsR,BUr]]],['3609',BQq+j+c+q+a,[[U,AL+' / Nevada East',ClW,BUd,BXg,Bfu,BUt,BVP,BsQ,CVy,BUl,BUk,[B,K,'3609']]],[[U,'NAD83_NSRS2007_Nevada_East',Cbq,BUd,BXg,Bfu,BUt,BVP,BsQ,BUa]]],['3608',BQp+AkO,[[U,AL+' / Nevada'+Gh+' (ft US)',ClW,BUd,BXg,Bft,BUt,BXQ,BsP,CVz,BUl,BUk,[B,K,'3608']]],[[U,'NAD83_NSRS2007_Nevada_Central_ft_US',Cbq,BUd,BXg,Bft,BUt,BXQ,BsP,BUr]]],['3607',BQo+c+q+a,[[U,AL+' / Nevada'+Gh,ClW,BUd,BXg,Bft,BUt,BUc,Bdb,CVy,BUl,BUk,[B,K,'3607']]],[[U,'NAD83_NSRS2007_Nevada_Central',Cbq,BUd,BXg,Bft,BUt,BUc,Bdb,BUa]]],['3606',BQn+j+c+q+a,[[U,AL+' /'+ASu,ClW,BVG,BZg,BZu,BjT,BXb,BUc,BUT,CVy,BUl,BUk,[B,K,'3606']]],[[U,'NAD83_NSRS2007_Nebraska',Cbq,BVD,BZg,BZu,BjT,BXb,BUc,BUT,BUa]]],['3605',BQm+BGh,[[U,AL+' / Montana'+rv,ClW,BVG,BaG,BiN,BiM,BcV,Bbt,BUT,CWY,BUl,BUk,[B,K,'3605']]],[[U,'NAD83_NSRS2007_Montana_ft',Cbq,BVD,BaG,BiN,BiM,BcV,Bbt,BUT,BXN]]],['3604',BQl+j+c+q+a,[[U,AL+' / Montana',ClW,BVG,BaG,BiN,BiM,BcV,BVY,BUT,CVy,BUl,BUk,[B,K,'3604']]],[[U,'NAD83_NSRS2007_Montana',Cbq,BVD,BaG,BiN,BiM,BcV,BVY,BUT,BUa]]],['3603',l+BLc+BRq,[[U,AL+' /'+AMH+' West',ClW,BUd,Bof,Boe,BWj,BsO,BUT,CVy,BUl,BUk,[B,K,'3603']]],[[U,'NAD83_NSRS2007_Missouri_West',Cbq,BUd,Bof,Boe,BWj,BsO,BUT,BUa]]],['3602',BQk+c+q+a,[[U,AL+' /'+AMH+' East',ClW,BUd,BdY,Bod,BWx,BWp,BUT,CVy,BUl,BUk,[B,K,'3602']]],[[U,'NAD83_NSRS2007_Missouri_East',Cbq,BUd,BdY,Bod,BWx,BWp,BUT,BUa]]],['3601',BQj+j+c+q+a,[[U,AL+' /'+BEl,ClW,BUd,BdY,Bas,BWx,BUc,BUT,CVy,BUl,BUk,[B,K,'3601']]],[[U,'NAD83_NSRS2007_Missouri_Central',Cbq,BUd,BdY,Bas,BWx,BUc,BUT,BUa]]],['3600',BAV+BJN,[[U,AL+' /'+cu+' West'+DE,ClW,BUd,BaC,BcU,BWh,Bbu,BUT,CVz,BUl,BUk,[B,K,'3600']]],[[U,'NAD83_NSRS2007_Mississippi_West_ftUS',Cbq,BUd,BaC,BcU,BWh,Bbu,BUT,BUr]]],['3599',BQi+c+q+a,[[U,AL+' /'+cu+' West',ClW,BUd,BaC,BcU,BWh,BWl,BUT,CVy,BUl,BUk,[B,K,'3599']]],[[U,'NAD83_NSRS2007_Mississippi_West',Cbq,BUd,BaC,BcU,BWh,BWl,BUT,BUa]]],['3598',BAT+BBM,[[U,AL+' /'+cu+' East'+DE,ClW,BUd,BaC,Bfs,BWh,BZP,BUT,CVz,BUl,BUk,[B,K,'3598']]],[[U,'NAD83_NSRS2007_Mississippi_East_ftUS',Cbq,BUd,BaC,Bfs,BWh,BZP,BUT,BUr]]],['3597',BQg+c+q+a,[[U,AL+' /'+cu+' East',ClW,BUd,BaC,Bfs,BWh,BVl,BUT,CVy,BUl,BUk,[B,K,'3597']]],[[U,'NAD83_NSRS2007_Mississippi_East',Cbq,BUd,BaC,Bfs,BWh,BVl,BUT,BUa]]],['3596',BQe+j+c+q+a,[[U,AL+' /'+fs+' South',ClW,BVG,BiL,BiK,BcA,BdW,BXP,BXV,CVy,BUl,BUk,[B,K,'3596']]],[[U,'NAD83_NSRS2007_Minnesota_South',Cbq,BVD,BiL,BiK,BcA,BdW,BXP,BXV,BUa]]],['3595',BQc+j+c+q+a,[[U,AL+' /'+BBY,ClW,BVG,BiJ,BiI,BbU,Bfr,BXP,BXV,CVy,BUl,BUk,[B,K,'3595']]],[[U,'NAD83_NSRS2007_Minnesota_North',Cbq,BVD,BiJ,BiI,BbU,Bfr,BXP,BXV,BUa]]],['3594',BQa+j+c+q+a,[[U,AL+' /'+BBX,ClW,BVG,BiH,BiG,BZE,Bfq,BXP,BXV,CVy,BUl,BUk,[B,K,'3594']]],[[U,'NAD83_NSRS2007_Minnesota_Central',Cbq,BVD,BiH,BiG,BZE,Bfq,BXP,BXV,BUa]]],['3593',BTN+AoT,[[U,AL+' /'+iV+' South'+rv,ClW,BVG,Bdh,BiF,BYb,BaB,BsL,BUT,CWY,BUl,BUk,[B,K,'3593']]],[[U,'NAD83_NSRS2007_Michigan_South_ft',Cbq,BVD,Bdh,BiF,BYb,BaB,BsL,BUT,BXN]]],['3592',BTM+c+q+a,[[U,AL+' /'+iV+' South',ClW,BVG,Bdh,BiF,BYb,BaB,Bfp,BUT,CVy,BUl,BUk,[B,K,'3592']]],[[U,'NAD83_NSRS2007_Michigan_South',Cbq,BVD,Bdh,BiF,BYb,BaB,Bfp,BUT,BUa]]],['3591',Qw+pK+' +lonc=-86'+BQZ+j+c+q+a,[[U,AL+' /'+iV+' Oblique'+" "+aU,ClW,BlD,Bpd,Bpc,Bpb,CBG,BUg,BsK,BsJ,CVy,BUl,BUk,[B,K,'3591']]],[[U,'NAD83_NSRS2007_Michigan_Oblique_Mercator',Cbq,BlC,Bpd,Bpc,Bpb,BUg,BsK,BsJ,BUa]]],['3590',BTL+AoT,[[U,AL+' /'+BDG+rv,ClW,BVG,BiE,BiD,BiC,BXS,BsI,BUT,CWY,BUl,BUk,[B,K,'3590']]],[[U,'NAD83_NSRS2007_Michigan_North_ft',Cbq,BVD,BiE,BiD,BiC,BXS,BsI,BUT,BXN]]],['3589',BQY+c+q+a,[[U,AL+' /'+BDG,ClW,BVG,BiE,BiD,BiC,BXS,BsH,BUT,CVy,BUl,BUk,[B,K,'3589']]],[[U,'NAD83_NSRS2007_Michigan_North',Cbq,BVD,BiE,BiD,BiC,BXS,BsH,BUT,BUa]]],['3588',BTK+AoT,[[U,AL+' /'+BDF+rv,ClW,BVG,BiB,BiA,Bhz,BaB,BsG,BUT,CWY,BUl,BUk,[B,K,'3588']]],[[U,'NAD83_NSRS2007_Michigan_Central_ft',Cbq,BVD,BiB,BiA,Bhz,BaB,BsG,BUT,BXN]]],['3586',BUR+AnX,[[U,AL+' /'+ArD+DE,ClW,BVG,Bhy,Bfo,BZM,BZc,BXZ,BsF,CVz,BUl,BUk,[B,K,'3586']]],[[U,'NAD83_NSRS2007_Massachusetts_Mainland_ftUS',Cbq,BVD,Bhy,Bfo,BZM,BZc,BXZ,BsF,BUr]]],['3585',BUQ+j+c+q+a,[[U,AL+' /'+ArD,ClW,BVG,Bhy,Bfo,BZM,BZc,BVP,Boc,CVy,BUl,BUk,[B,K,'3585']]],[[U,'NAD83_NSRS2007_Massachusetts_Mainland',Cbq,BVD,Bhy,Bfo,BZM,BZc,BVP,Boc,BUa]]],['3584',BQW+AnX,[[U,AL+' /'+BBW+DE,ClW,BVG,Bhx,Bhw,BZM,BbL,BXa,BUT,CVz,BUl,BUk,[B,K,'3584']]],[[U,'NAD83_NSRS2007_Massachusetts_Island_ftUS',Cbq,BVD,Bhx,Bhw,BZM,BbL,BXa,BUT,BUr]]],['3583',BQV+j+c+q+a,[[U,AL+' /'+BBW,ClW,BVG,Bhx,Bhw,BZM,BbL,BUc,BUT,CVy,BUl,BUk,[B,K,'3583']]],[[U,'NAD83_NSRS2007_Massachusetts_Island',Cbq,BVD,Bhx,Bhw,BZM,BbL,BUc,BUT,BUa]]],['3582',BTJ+AkO,[[U,AL+' /'+ASw+DE,ClW,BVG,Bhv,Bhu,BXq,Bbs,BsE,BUT,CVz,BUl,BUk,[B,K,'3582']]],[[U,'NAD83_NSRS2007_Maryland_ftUS',Cbq,BVD,Bhv,Bhu,BXq,Bbs,BsE,BUT,BUr]]],['3581',AU+' +lat_1=62 +lat_2=70'+At+' +lon_0=-112'+BTr,[[U,Cc+' / NWT'+PW,Cli,BVG,BuO,CII,BUX,CAU,BUy,BUT,CVy,BUj,BUm,[B,K,'3581']]],[[U,'NAD83_CSRS_NWT_Lambert',CcM,BVD,BuO,CII,BUX,CAU,BUy,BUT,BUa]]],['3580',AU+' +lat_1=62 +lat_2=70'+At+' +lon_0=-112'+BTr,[[U,Bx+' / NWT'+PW,ClV,BVG,BuO,CII,BUX,CAU,BUy,BUT,CVy,BUj,BUm,[B,K,'3580']]],[[U,'NAD83_NWT_Lambert',Cbn,BVD,BuO,CII,BUX,CAU,BUy,BUT,BUa]]],['3579',TR+AaO+' +lat_2=68 +lat_0=59 +lon_0=-132.5'+BLK+c+q+a,[[U,Cc+' / Yukon'+" "+Pk,Cli,BeL,CIH,CIG,CQC,[A,BV,AID],BUc,BWE,CVy,BUj,BUm,[B,K,'3579']]],[[U,'NAD83_CSRS_Yukon_Albers',CcM,BeK,CIH,CIG,CQU,[A,E,AID],BUc,BWE,BUa]]],['3578',TR+AaO+' +lat_2=68 +lat_0=59 +lon_0=-132.5'+BLK+c+q+a,[[U,Bx+' / Yukon'+" "+Pk,ClV,BeL,CIH,CIG,CQC,[A,BV,AID],BUc,BWE,CVy,BUj,BUm,[B,K,'3578']]],[[U,'NAD83_Yukon_Albers',Cbn,BeK,CIH,CIG,CQU,[A,E,AID],BUc,BWE,BUa]]],['3577',TR+' +lat_1=-18 +lat_2=-36'+Anw+BTr,[[U,gs+' /'+" "+Qy+" "+Pk,Clx,BeL,Bwl,Brc,Bwt,[A,BV,Sq],BUy,BUT,CVy,BUj,BUm,[B,K,'3577']]],[[U,'GDA94_Australian_Albers',Ccs,BeK,Bwl,Brc,BUX,BaU,BUy,BUT,BUa]]],['3576',BAm+eX+Aky,[[U,'WGS 84 /'+QM+' Pole LAEA Russia',ClU,BeA,Bpk,[A,BV,GV],BUy,BUT,CVy,BUl,BUk,[B,K,'3576']]],[[U,'WGS_84_North_Pole_LAEA_Russia',Cbp,BeA,Bcw,BYP,BUy,BUT,BUa]]],['3575',BAm+rD+Aky,[[U,'WGS 84 /'+QM+' Pole LAEA'+AMJ,ClU,BeA,Bpk,Bup,BUy,BUT,CVy,BUl,BUk,[B,K,'3575']]],[[U,'WGS_84_North_Pole_LAEA_Europe',Cbp,BeA,Bcw,BcM,BUy,BUT,BUa]]],['3574',BAm+' +lon_0=-40'+Aky,[[U,'WGS 84 /'+QM+' Pole LAEA Atlantic',ClU,BeA,Bpk,[A,BV,'raw:-40'],BUy,BUT,CVy,BUl,BUk,[B,K,'3574']]],[[U,'WGS_84_North_Pole_LAEA_Atlantic',Cbp,BeA,Bcw,[A,E,'raw:-40'],BUy,BUT,BUa]]],['3573',BAm+Ql+Aky,[[U,'WGS 84 /'+QM+' Pole LAEA Canada',ClU,BeA,Bpk,Buv,BUy,BUT,CVy,BUl,BUk,[B,K,'3573']]],[[U,'WGS_84_North_Pole_LAEA_Canada',Cbp,BeA,Bcw,BXb,BUy,BUT,BUa]]],['3572',BAm+xj+Aky,[[U,'WGS 84 /'+QM+' Pole LAEA Alaska',ClU,BeA,Bpk,[A,BV,dc],BUy,BUT,CVy,BUl,BUk,[B,K,'3572']]],[[U,'WGS_84_North_Pole_LAEA_Alaska',Cbp,BeA,Bcw,BkA,BUy,BUT,BUa]]],['3571',BAm+ATD+Aky,[[U,'WGS 84 /'+QM+' Pole LAEA Bering Sea',ClU,BeA,Bpk,[A,BV,oO],BUy,BUT,CVy,BUl,BUk,[B,K,'3571']]],[[U,'WGS_84_North_Pole_LAEA_Bering_Sea',Cbp,BeA,Bcw,BnL,BUy,BUT,BUa]]],['3570',BRi+AkO,[[U,Aj+' / Utah South'+DE,ClX,BVG,Bcd,Bcc,BWJ,BWm,BXQ,Blk,CVz,BUl,BUk,[B,K,'3570']]],[[U,'NAD83_HARN_Utah_South_ftUS',Cbs,BVD,Bcd,Bcc,BWJ,BWm,BXQ,Blk,BUr]]],['3569',BRg+AnX,[[U,Aj+' / Utah'+Akp,ClX,BVG,Bca,BcZ,BYl,BWm,BXQ,Bwh,CVz,BUl,BUk,[B,K,'3569']]],[[U,'NAD83_HARN_Utah_Central_ftUS',Cbs,BVD,Bca,BcZ,BYl,BWm,BXQ,Bwh,BUr]]],['3568',BRh+AnX,[[U,Aj+' / Utah'+Akg,ClX,BVG,BZD,Bcb,Bby,BWm,BXQ,BjM,CVz,BUl,BUk,[B,K,'3568']]],[[U,'NAD83_HARN_Utah_North_ftUS',Cbs,BVD,BZD,Bcb,Bby,BWm,BXQ,BjM,BUr]]],['3567',BRi+AkO,[[U,Bx+' / Utah South'+DE,ClV,BVG,Bcd,Bcc,BWJ,BWm,BXQ,Blk,CVz,BUl,BUk,[B,K,'3567']]],[[U,'NAD83_Utah_South_ftUS',Cbn,BVD,Bcd,Bcc,BWJ,BWm,BXQ,Blk,BUr]]],['3566',BRg+AnX,[[U,Bx+' / Utah'+Akp,ClV,BVG,Bca,BcZ,BYl,BWm,BXQ,Bwh,CVz,BUl,BUk,[B,K,'3566']]],[[U,'NAD83_Utah_Central_ftUS',Cbn,BVD,Bca,BcZ,BYl,BWm,BXQ,Bwh,BUr]]],['3565',l+pG+oC+' +k=1'+Akb+BEB+Ajg,[[U,'Old'+he+' / Hawaii zone 5',Cmu,BUd,Bsn,Bsm,BUf,BUc,BUT,CVz,BUl,BUk,[B,K,'3565']]],[[U,'Old_Hawaiian_Hawaii_zone_5',CeR,BUd,Bsn,Bsm,BUf,BUc,BUT,BUr]]],['3564',l+BFo+jz+Akb+BEB+Ajg,[[U,'Old'+he+' / Hawaii zone 4',Cmu,BUd,Bsl,Bsk,Bav,BUc,BUT,CVz,BUl,BUk,[B,K,'3564']]],[[U,'Old_Hawaiian_Hawaii_zone_4',CeR,BUd,Bsl,Bsk,Bav,BUc,BUT,BUr]]],['3563',BSo+Akb+BEB+Ajg,[[U,'Old'+he+' / Hawaii zone 3',Cmu,BUd,Bkf,Bce,Bav,BUc,BUT,CVz,BUl,BUk,[B,K,'3563']]],[[U,'Old_Hawaiian_Hawaii_zone_3',CeR,BUd,Bkf,Bce,Bav,BUc,BUT,BUr]]],['3562',l+pI+oD+BBV+Aks+Yp+Ajg,[[U,'Old'+he+' / Hawaii zone 2',Cmu,BUd,Bsj,Bsi,BWN,BUc,BUT,CVz,BUl,BUk,[B,K,'3562']]],[[U,'Old_Hawaiian_Hawaii_zone_2',CeR,BUd,Bsj,Bsi,BWN,BUc,BUT,BUr]]],['3561',l+BFm+BBV+Aks+Yp+Ajg,[[U,'Old'+he+' / Hawaii zone 1',Cmu,BUd,Bsh,Bsg,BWN,BUc,BUT,CVz,BUl,BUk,[B,K,'3561']]],[[U,'Old_Hawaiian_Hawaii_zone_1',CeR,BUd,Bsh,Bsg,BWN,BUc,BUT,BUr]]],['3560',BRh+AnX,[[U,Bx+' / Utah'+Akg,ClV,BVG,BZD,Bcb,Bby,BWm,BXQ,BjM,CVz,BUl,BUk,[B,K,'3560']]],[[U,'NAD83_Utah_North_ftUS',Cbn,BVD,BZD,Bcb,Bby,BWm,BXQ,BjM,BUr]]],['3559',BQU+j+c+q+a,[[U,AL+' /'+ASw,ClW,BVG,Bhv,Bhu,BXq,Bbs,BVh,BUT,CVy,BUl,BUk,[B,K,'3559']]],[[U,'NAD83_NSRS2007_Maryland',Cbq,BVD,Bhv,Bhu,BXq,Bbs,BVh,BUT,BUa]]],['3558',BGm+c+q+a,[[U,AL+' / Maine West',ClW,BUd,BZt,Bfn,BWN,BdV,BUT,CVy,BUl,BUk,[B,K,'3558']]],[[U,'NAD83_NSRS2007_Maine_West',Cbq,BUd,BZt,Bfn,BWN,BdV,BUT,BUa]]],['3557',BKn+c+q+a,[[U,AL+' / Maine East',ClW,BUd,BYN,Bau,BUt,BVl,BUT,CVy,BUl,BUk,[B,K,'3557']]],[[U,'NAD83_NSRS2007_Maine_East',Cbq,BUd,BYN,Bau,BUt,BVl,BUT,BUa]]],['3556',BQT+c+q+a,[[U,AL+' / Maine CS2000 West',ClW,BUd,BZt,BsD,Bab,BVl,BUT,CVy,BUl,BUk,[B,K,'3556']]],[[U,'NAD83_NSRS2007_Maine_CS2000_West',Cbq,BUd,BZt,BsD,Bab,BVl,BUT,BUa]]],['3555',l+BQS+c+q+a,[[U,AL+' / Maine CS2000 East',ClW,BUd,BYM,BsC,Bab,BWl,BUT,CVy,BUl,BUk,[B,K,'3555']]],[[U,'NAD83_NSRS2007_Maine_CS2000_East',Cbq,BUd,BYM,BsC,Bab,BWl,BUT,BUa]]],['3554',l+BQR+c+q+a,[[U,AL+' / Maine CS2000'+Gh,ClW,BUd,BsB,BsA,Bab,BUc,BUT,CVy,BUl,BUk,[B,K,'3554']]],[[U,'NAD83_NSRS2007_Maine_CS2000_Central',Cbq,BUd,BsB,BsA,Bab,BUc,BUT,BUa]]],['3553',BQQ+AnX,[[U,AL+' /'+kJ+' South'+DE,ClW,BVG,Bhs,Bhr,Bhq,Bbr,Bfm,BUT,CVz,BUl,BUk,[B,K,'3553']]],[[U,'NAD83_NSRS2007_Louisiana_South_ftUS',Cbq,BVD,Bhs,Bhr,Bhq,Bbr,Bfm,BUT,BUr]]],['3552',BQP+j+c+q+a,[[U,AL+' /'+kJ+' South',ClW,BVG,Bhs,Bhr,Bhq,Bbr,BWa,BUT,CVy,BUl,BUk,[B,K,'3552']]],[[U,'NAD83_NSRS2007_Louisiana_South',Cbq,BVD,Bhs,Bhr,Bhq,Bbr,BWa,BUT,BUa]]],['3551',BQO+AnX,[[U,AL+' /'+BBU+DE,ClW,BVG,Bhp,Bho,Bar,Bas,Bfm,BUT,CVz,BUl,BUk,[B,K,'3551']]],[[U,'NAD83_NSRS2007_Louisiana_North_ftUS',Cbq,BVD,Bhp,Bho,Bar,Bas,Bfm,BUT,BUr]]],['3550',BQN+j+c+q+a,[[U,AL+' /'+BBU,ClW,BVG,Bhp,Bho,Bar,Bas,BWa,BUT,CVy,BUl,BUk,[B,K,'3550']]],[[U,'NAD83_NSRS2007_Louisiana_North',Cbq,BVD,Bhp,Bho,Bar,Bas,BWa,BUT,BUa]]],['3549',BTI+AkO,[[U,AL+' /'+or+' South'+DE,ClW,BVG,Bhn,Bhm,BXr,BZZ,BXa,BXY,CVz,BUl,BUk,[B,K,'3549']]],[[U,'NAD83_NSRS2007_Kentucky_South_ftUS',Cbq,BVD,Bhn,Bhm,BXr,BZZ,BXa,BXY,BUr]]],['3548',BQM+j+c+q+a,[[U,AL+' /'+or+' South',ClW,BVG,Bhn,Bhm,BXr,BZZ,BUc,BWE,CVy,BUl,BUk,[B,K,'3548']]],[[U,'NAD83_NSRS2007_Kentucky_South',Cbq,BVD,Bhn,Bhm,BXr,BZZ,BUc,BWE,BUa]]],['3547',BQL+AkO,[[U,AL+' /'+or+' Single Zone'+DE,ClW,BVG,Bhl,Bhk,BXr,BZZ,Bhj,Bbv,CVz,BUl,BUk,[B,K,'3547']]],[[U,'NAD83_NSRS2007_Kentucky_Single_Zone_ftUS',Cbq,BVD,Bhl,Bhk,BXr,BZZ,Bhj,Bbv,BUr]]],['3546',BQK+c+q+a,[[U,AL+' /'+or+' Single Zone',ClW,BVG,Bhl,Bhk,BXr,BZZ,BWL,BVg,CVy,BUl,BUk,[B,K,'3546']]],[[U,'NAD83_NSRS2007_Kentucky_Single_Zone',Cbq,BVD,Bhl,Bhk,BXr,BZZ,BWL,BVg,BUa]]],['3545',BQJ+AnX,[[U,AL+' /'+BBT+DE,ClW,BVG,BZr,Bfl,BXf,Bfk,BXa,BUT,CVz,BUl,BUk,[B,K,'3545']]],[[U,'NAD83_NSRS2007_Kentucky_North_ftUS',Cbq,BVD,BZr,Bfl,BXf,Bfk,BXa,BUT,BUr]]],['3544',BQI+j+c+q+a,[[U,AL+' /'+BBT,ClW,BVG,BZr,Bfl,BXf,Bfk,BUc,BUT,CVy,BUl,BUk,[B,K,'3544']]],[[U,'NAD83_NSRS2007_Kentucky_North',Cbq,BVD,BZr,Bfl,BXf,Bfk,BUc,BUT,BUa]]],['3543',BQH+AnX,[[U,AL+' / Kansas South (ft US)',ClW,BVG,Bfj,Bfi,BWJ,BXp,BYa,Bhi,CVz,BUl,BUk,[B,K,'3543']]],[[U,'NAD83_NSRS2007_Kansas_South_ft_US',Cbq,BVD,Bfj,Bfi,BWJ,BXp,BYa,Bhi,BUr]]],['3542',BQG+j+c+q+a,[[U,AL+' / Kansas South',ClW,BVG,Bfj,Bfi,BWJ,BXp,BVh,Baa,CVy,BUl,BUk,[B,K,'3542']]],[[U,'NAD83_NSRS2007_Kansas_South',Cbq,BVD,Bfj,Bfi,BWJ,BXp,BVh,Baa,BUa]]],['3541',BQF+AnX,[[U,AL+' / Kansas'+QM+' (ft US)',ClW,BVG,Bfh,Bfg,BYl,BXh,BYa,BUT,CVz,BUl,BUk,[B,K,'3541']]],[[U,'NAD83_NSRS2007_Kansas_North_ft_US',Cbq,BVD,Bfh,Bfg,BYl,BXh,BYa,BUT,BUr]]],['3540',BQE+j+c+q+a,[[U,AL+' / Kansas'+QM,ClW,BVG,Bfh,Bfg,BYl,BXh,BVh,BUT,CVy,BUl,BUk,[B,K,'3540']]],[[U,'NAD83_NSRS2007_Kansas_North',Cbq,BVD,Bfh,Bfg,BYl,BXh,BVh,BUT,BUa]]],['3539',BQD+AnX,[[U,AL+' / Iowa South (ft US)',ClW,BVG,BZD,Bff,BXM,BZY,BXQ,BUT,CVz,BUl,BUk,[B,K,'3539']]],[[U,'NAD83_NSRS2007_Iowa_South_ft_US',Cbq,BVD,BZD,Bff,BXM,BZY,BXQ,BUT,BUr]]],['3538',BQC+j+c+q+a,[[U,AL+' / Iowa South',ClW,BVG,BZD,Bff,BXM,BZY,BUc,BUT,CVy,BUl,BUk,[B,K,'3538']]],[[U,'NAD83_NSRS2007_Iowa_South',Cbq,BVD,BZD,Bff,BXM,BZY,BUc,BUT,BUa]]],['3537',BQB+AnX,[[U,AL+' / Iowa'+QM+' (ft US)',ClW,BVG,Bfe,Bfd,BYb,BZY,Bhj,BjM,CVz,BUl,BUk,[B,K,'3537']]],[[U,'NAD83_NSRS2007_Iowa_North_ft_US',Cbq,BVD,Bfe,Bfd,BYb,BZY,Bhj,BjM,BUr]]],['3536',BQA+c+q+a,[[U,AL+' / Iowa'+QM,ClW,BVG,Bfe,Bfd,BYb,BZY,BWL,BVg,CVy,BUl,BUk,[B,K,'3536']]],[[U,'NAD83_NSRS2007_Iowa_North',Cbq,BVD,Bfe,Bfd,BYb,BZY,BWL,BVg,BUa]]],['3535',BIF+BTV,[[U,AL+' / Indiana West'+DE,ClW,BUd,BXf,Bfc,BWN,Bht,Blj,CVz,BUl,BUk,[B,K,'3535']]],[[U,'NAD83_NSRS2007_Indiana_West_ftUS',Cbq,BUd,BXf,Bfc,BWN,Bht,Blj,BUr]]],['3534',BTe+j+c+q+a,[[U,AL+' / Indiana West',ClW,BUd,BXf,Bfc,BWN,BdV,Bch,CVy,BUl,BUk,[B,K,'3534']]],[[U,'NAD83_NSRS2007_Indiana_West',Cbq,BUd,BXf,Bfc,BWN,BdV,Bch,BUa]]],['3533',BST+BTV,[[U,AL+' / Indiana East'+DE,ClW,BUd,BXf,Bfb,BWN,Brz,Blj,CVz,BUl,BUk,[B,K,'3533']]],[[U,'NAD83_NSRS2007_Indiana_East_ftUS',Cbq,BUd,BXf,Bfb,BWN,Brz,Blj,BUr]]],['3532',BTd+j+c+q+a,[[U,AL+' / Indiana East',ClW,BUd,BXf,Bfb,BWN,BWV,Bch,CVy,BUl,BUk,[B,K,'3532']]],[[U,'NAD83_NSRS2007_Indiana_East',Cbq,BUd,BXf,Bfb,BWN,BWV,Bch,BUa]]],['3531',BPj+AkO,[[U,AL+' /'+AGh+' West'+DE,ClW,BUd,BWJ,Bfa,BWj,Bry,BUT,CVz,BUl,BUk,[B,K,'3531']]],[[U,'NAD83_NSRS2007_Illinois_West_ftUS',Cbq,BUd,BWJ,Bfa,BWj,Bry,BUT,BUr]]],['3530',BPh+c+q+a,[[U,AL+' /'+AGh+' West',ClW,BUd,BWJ,Bfa,BWj,BWl,BUT,CVy,BUl,BUk,[B,K,'3530']]],[[U,'NAD83_NSRS2007_Illinois_West',Cbq,BUd,BWJ,Bfa,BWj,BWl,BUT,BUa]]],['3529',Avu+BBM,[[U,AL+' /'+AGh+' East'+DE,ClW,BUd,BWJ,BfZ,BdU,BZP,BUT,CVz,BUl,BUk,[B,K,'3529']]],[[U,'NAD83_NSRS2007_Illinois_East_ftUS',Cbq,BUd,BWJ,BfZ,BdU,BZP,BUT,BUr]]],['3528',BPe+c+q+a,[[U,AL+' /'+AGh+' East',ClW,BUd,BWJ,BfZ,BdU,BVl,BUT,CVy,BUl,BUk,[B,K,'3528']]],[[U,'NAD83_NSRS2007_Illinois_East',Cbq,BUd,BWJ,BfZ,BdU,BVl,BUT,BUa]]],['3527',BPc+AkO,[[U,AL+' / Idaho West'+DE,ClW,BUd,BWi,BfY,BWx,Brx,BUT,CVz,BUl,BUk,[B,K,'3527']]],[[U,'NAD83_NSRS2007_Idaho_West_ftUS',Cbq,BUd,BWi,BfY,BWx,Brx,BUT,BUr]]],['3526',BPa+c+q+a,[[U,AL+' / Idaho West',ClW,BUd,BWi,BfY,BWx,BXP,BUT,CVy,BUl,BUk,[B,K,'3526']]],[[U,'NAD83_NSRS2007_Idaho_West',Cbq,BUd,BWi,BfY,BWx,BXP,BUT,BUa]]],['3525',Avs+BBI,[[U,AL+' / Idaho East'+DE,ClW,BUd,BWi,BfX,BZX,BXZ,BUT,CVz,BUl,BUk,[B,K,'3525']]],[[U,'NAD83_NSRS2007_Idaho_East_ftUS',Cbq,BUd,BWi,BfX,BZX,BXZ,BUT,BUr]]],['3524',BPY+c+q+a,[[U,AL+' / Idaho East',ClW,BUd,BWi,BfX,BZX,BVP,BUT,CVy,BUl,BUk,[B,K,'3524']]],[[U,'NAD83_NSRS2007_Idaho_East',Cbq,BUd,BWi,BfX,BZX,BVP,BUT,BUa]]],['3523',Avr+BJP,[[U,AL+' / Idaho'+Akp,ClW,BUd,BWi,Bbq,BZX,BXa,BUT,CVz,BUl,BUk,[B,K,'3523']]],[[U,'NAD83_NSRS2007_Idaho_Central_ftUS',Cbq,BUd,BWi,Bbq,BZX,BXa,BUT,BUr]]],['3522',BPR+c+q+a,[[U,AL+' / Idaho'+Gh,ClW,BUd,BWi,Bbq,BZX,BUc,BUT,CVy,BUl,BUk,[B,K,'3522']]],[[U,'NAD83_NSRS2007_Idaho_Central',Cbq,BUd,BWi,Bbq,BZX,BUc,BUT,BUa]]],['3521',Avp+BJN,[[U,AL+' /'+Abp+' West'+DE,ClW,BUd,BXX,BfW,BUt,Bbu,BUT,CVz,BUl,BUk,[B,K,'3521']]],[[U,'NAD83_NSRS2007_Georgia_West_ftUS',Cbq,BUd,BXX,BfW,BUt,Bbu,BUT,BUr]]],['3520',BPI+c+q+a,[[U,AL+' /'+Abp+' West',ClW,BUd,BXX,BfW,BUt,BWl,BUT,CVy,BUl,BUk,[B,K,'3520']]],[[U,'NAD83_NSRS2007_Georgia_West',Cbq,BUd,BXX,BfW,BUt,BWl,BUT,BUa]]],['3519',Avo+BBI,[[U,AL+' /'+Abp+' East'+DE,ClW,BUd,BXX,BfV,BUt,BXZ,BUT,CVz,BUl,BUk,[B,K,'3519']]],[[U,'NAD83_NSRS2007_Georgia_East_ftUS',Cbq,BUd,BXX,BfV,BUt,BXZ,BUT,BUr]]],['3518',BPE+c+q+a,[[U,AL+' /'+Abp+' East',ClW,BUd,BXX,BfV,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'3518']]],[[U,'NAD83_NSRS2007_Georgia_East',Cbq,BUd,BXX,BfV,BUt,BVP,BUT,BUa]]],['3517',Avn+BBI,[[U,AL+' /'+tm+' West'+DE,ClW,BUd,BZW,BfU,BWj,BXZ,BUT,CVz,BUl,BUk,[B,K,'3517']]],[[U,'NAD83_NSRS2007_Florida_West_ftUS',Cbq,BUd,BZW,BfU,BWj,BXZ,BUT,BUr]]],['3516',BPC+c+q+a,[[U,AL+' /'+tm+' West',ClW,BUd,BZW,BfU,BWj,BVP,BUT,CVy,BUl,BUk,[B,K,'3516']]],[[U,'NAD83_NSRS2007_Florida_West',Cbq,BUd,BZW,BfU,BWj,BVP,BUT,BUa]]],['3515',BFH+AkO,[[U,AL+' /'+BBS+DE,ClW,BVG,BfT,BfS,BfR,BfQ,BVj,BUT,CVz,BUl,BUk,[B,K,'3515']]],[[U,'NAD83_NSRS2007_Florida_North_ftUS',Cbq,BVD,BfT,BfS,BfR,BfQ,BVj,BUT,BUr]]],['3514',BFH+c+q+a,[[U,AL+' /'+BBS,ClW,BVG,BfT,BfS,BfR,BfQ,BVY,BUT,CVy,BUl,BUk,[B,K,'3514']]],[[U,'NAD83_NSRS2007_Florida_North',Cbq,BVD,BfT,BfS,BfR,BfQ,BVY,BUT,BUa]]],['3513',TR+' +lat_1=24'+AgU+' +lat_0=24'+BNy+j+c+q+a,[[U,AL+' /'+tm+' GDL'+" "+Pk,ClW,BeL,Brw,Brv,CBF,CBE,BVh,BUT,CVy,BUl,BUk,[B,K,'3513']]],[[U,'NAD83_NSRS2007_Florida_GDL_Albers',Cbq,BeK,Brw,Brv,CIr,Bhh,BVh,BUT,BUa]]],['3512',Avk+BBI,[[U,AL+' /'+tm+' East'+DE,ClW,BUd,BZW,BVm,BWj,BXZ,BUT,CVz,BUl,BUk,[B,K,'3512']]],[[U,'NAD83_NSRS2007_Florida_East_ftUS',Cbq,BUd,BZW,BVm,BWj,BXZ,BUT,BUr]]],['3511',BPA+c+q+a,[[U,AL+' /'+tm+' East',ClW,BUd,BZW,BVm,BWj,BVP,BUT,CVy,BUl,BUk,[B,K,'3511']]],[[U,'NAD83_NSRS2007_Florida_East',Cbq,BUd,BZW,BVm,BWj,BVP,BUT,BUa]]],['3510',Avf+BBI,[[U,AL+' /'+ASx+DE,ClW,BUd,BWT,BfP,BfO,BXZ,BUT,CVz,BUl,BUk,[B,K,'3510']]],[[U,'NAD83_NSRS2007_Delaware_ftUS',Cbq,BUd,BWT,BfP,BfO,BXZ,BUT,BUr]]],['3509',BOy+c+q+a,[[U,AL+' /'+ASx,ClW,BUd,BWT,BfP,BfO,BVP,BUT,CVy,BUl,BUk,[B,K,'3509']]],[[U,'NAD83_NSRS2007_Delaware',Cbq,BUd,BWT,BfP,BfO,BVP,BUT,BUa]]],['3508',BUP+AnX,[[U,AL+' /'+wI+DE,ClW,BVG,BfN,BfM,BfL,BfK,BWa,BWE,CVz,BUl,BUk,[B,K,'3508']]],[[U,'NAD83_NSRS2007_Connecticut_ftUS',Cbq,BVD,BfN,BfM,BfL,BfK,BWa,BWE,BUr]]],['3507',BOv+j+c+q+a,[[U,AL+' /'+wI,ClW,BVG,BfN,BfM,BfL,BfK,Bru,Brt,CVy,BUl,BUk,[B,K,'3507']]],[[U,'NAD83_NSRS2007_Connecticut',Cbq,BVD,BfN,BfM,BfL,BfK,Bru,Brt,BUa]]],['3506',BOu+AkO,[[U,AL+' /'+nG+' South'+DE,ClW,BVG,BZV,BfJ,BWJ,BXR,BYY,BVg,CVz,BUl,BUk,[B,K,'3506']]],[[U,'NAD83_NSRS2007_Colorado_South_ftUS',Cbq,BVD,BZV,BfJ,BWJ,BXR,BYY,BVg,BUr]]],['3505',BOt+c+q+a,[[U,AL+' /'+nG+' South',ClW,BVG,BZV,BfJ,BWJ,BXR,Bbp,Bbo,CVy,BUl,BUk,[B,K,'3505']]],[[U,'NAD83_NSRS2007_Colorado_South',Cbq,BVD,BZV,BfJ,BWJ,BXR,Bbp,Bbo,BUa]]],['3504',BOr+AkO,[[U,AL+' /'+BBR+DE,ClW,BVG,Bhg,Bhf,BXi,BXR,BYY,BVg,CVz,BUl,BUk,[B,K,'3504']]],[[U,'NAD83_NSRS2007_Colorado_North_ftUS',Cbq,BVD,Bhg,Bhf,BXi,BXR,BYY,BVg,BUr]]],['3503',BOd+c+q+a,[[U,AL+' /'+BBR,ClW,BVG,Bhg,Bhf,BXi,BXR,Bbp,Bbo,CVy,BUl,BUk,[B,K,'3503']]],[[U,'NAD83_NSRS2007_Colorado_North',Cbq,BVD,Bhg,Bhf,BXi,BXR,Bbp,Bbo,BUa]]],['3502',BOb+AkO,[[U,AL+' /'+BBQ+DE,ClW,BVG,BfI,BfH,BdT,BXR,BYY,BVg,CVz,BUl,BUk,[B,K,'3502']]],[[U,'NAD83_NSRS2007_Colorado_Central_ftUS',Cbq,BVD,BfI,BfH,BdT,BXR,BYY,BVg,BUr]]],['3501',BOU+c+q+a,[[U,AL+' /'+BBQ,ClW,BVG,BfI,BfH,BdT,BXR,Bbp,Bbo,CVy,BUl,BUk,[B,K,'3501']]],[[U,'NAD83_NSRS2007_Colorado_Central',Cbq,BVD,BfI,BfH,BdT,BXR,Bbp,Bbo,BUa]]],['3500',BOS+AnX,[[U,AL+' /'+OB+' zone 6'+DE,ClW,BVG,BfG,BfF,BfE,BfD,BYG,BXY,CVz,BUl,BUk,[B,K,'3500']]],[[U,'NAD83_NSRS2007_California_zone_6_ftUS',Cbq,BVD,BfG,BfF,BfE,BfD,BYG,BXY,BUr]]],['3499',BOE+j+c+q+a,[[U,AL+' /'+OB+' zone 6',ClW,BVG,BfG,BfF,BfE,BfD,BVW,BWE,CVy,BUl,BUk,[B,K,'3499']]],[[U,'NAD83_NSRS2007_California_zone_6',Cbq,BVD,BfG,BfF,BfE,BfD,BVW,BWE,BUa]]],['3498',BOD+AnX,[[U,AL+' /'+OB+' zone 5'+DE,ClW,BVG,BfC,BfB,BfA,BbN,BYG,BXY,CVz,BUl,BUk,[B,K,'3498']]],[[U,'NAD83_NSRS2007_California_zone_5_ftUS',Cbq,BVD,BfC,BfB,BfA,BbN,BYG,BXY,BUr]]],['3497',BOC+j+c+q+a,[[U,AL+' /'+OB+' zone 5',ClW,BVG,BfC,BfB,BfA,BbN,BVW,BWE,CVy,BUl,BUk,[B,K,'3497']]],[[U,'NAD83_NSRS2007_California_zone_5',Cbq,BVD,BfC,BfB,BfA,BbN,BVW,BWE,BUa]]],['3496',BOA+AnX,[[U,AL+' /'+OB+' zone 4'+DE,ClW,BVG,Bez,Bey,Bex,Bew,BYG,BXY,CVz,BUl,BUk,[B,K,'3496']]],[[U,'NAD83_NSRS2007_California_zone_4_ftUS',Cbq,BVD,Bez,Bey,Bex,Bew,BYG,BXY,BUr]]],['3495',BNg+j+c+q+a,[[U,AL+' /'+OB+' zone 4',ClW,BVG,Bez,Bey,Bex,Bew,BVW,BWE,CVy,BUl,BUk,[B,K,'3495']]],[[U,'NAD83_NSRS2007_California_zone_4',Cbq,BVD,Bez,Bey,Bex,Bew,BVW,BWE,BUa]]],['3494',BNf+AnX,[[U,AL+' /'+OB+' zone 3'+DE,ClW,BVG,BZV,Bev,Beu,BWB,BYG,BXY,CVz,BUl,BUk,[B,K,'3494']]],[[U,'NAD83_NSRS2007_California_zone_3_ftUS',Cbq,BVD,BZV,Bev,Beu,BWB,BYG,BXY,BUr]]],['3493',BNT+j+c+q+a,[[U,AL+' /'+OB+' zone 3',ClW,BVG,BZV,Bev,Beu,BWB,BVW,BWE,CVy,BUl,BUk,[B,K,'3493']]],[[U,'NAD83_NSRS2007_California_zone_3',Cbq,BVD,BZV,Bev,Beu,BWB,BVW,BWE,BUa]]],['3492',BND+AkO,[[U,AL+' /'+OB+' zone 2'+DE,ClW,BVG,Bet,Bes,BXq,BZU,BYG,BXY,CVz,BUl,BUk,[B,K,'3492']]],[[U,'NAD83_NSRS2007_California_zone_2_ftUS',Cbq,BVD,Bet,Bes,BXq,BZU,BYG,BXY,BUr]]],['3491',BMz+c+q+a,[[U,AL+' /'+OB+' zone 2',ClW,BVG,Bet,Bes,BXq,BZU,BVW,BWE,CVy,BUl,BUk,[B,K,'3491']]],[[U,'NAD83_NSRS2007_California_zone_2',Cbq,BVD,Bet,Bes,BXq,BZU,BVW,BWE,BUa]]],['3490',BMx+AkO,[[U,AL+' /'+OB+' zone 1'+DE,ClW,BVG,Ber,BZu,BXi,BZU,BYG,BXY,CVz,BUl,BUk,[B,K,'3490']]],[[U,'NAD83_NSRS2007_California_zone_1_ftUS',Cbq,BVD,Ber,BZu,BXi,BZU,BYG,BXY,BUr]]],['3489',BMn+c+q+a,[[U,AL+' /'+OB+' zone 1',ClW,BVG,Ber,BZu,BXi,BZU,BVW,BWE,CVy,BUl,BUk,[B,K,'3489']]],[[U,'NAD83_NSRS2007_California_zone_1',Cbq,BVD,Ber,BZu,BXi,BZU,BVW,BWE,BUa]]],['3488',TR+' +lat_1=34'+BKm+j+c+q+a,[[U,AL+' /'+OB+" "+Pk,ClW,BeL,Bob,Boa,Bwt,Bxf,BUy,BoZ,CVy,BUl,BUk,[B,K,'3488']]],[[U,'NAD83_NSRS2007_California_Albers',Cbq,BeK,Bob,Boa,BUX,BlB,BUy,BoZ,BUa]]],['3487',BMd+AnX,[[U,AL+' /'+AGi+' South'+DE,ClW,BVG,Beq,Bep,Beo,BZT,BYa,Bhi,CVz,BUl,BUk,[B,K,'3487']]],[[U,'NAD83_NSRS2007_Arkansas_South_ftUS',Cbq,BVD,Beq,Bep,Beo,BZT,BYa,Bhi,BUr]]],['3486',BMb+j+c+q+a,[[U,AL+' /'+AGi+' South',ClW,BVG,Beq,Bep,Beo,BZT,BVh,Baa,CVy,BUl,BUk,[B,K,'3486']]],[[U,'NAD83_NSRS2007_Arkansas_South',Cbq,BVD,Beq,Bep,Beo,BZT,BVh,Baa,BUa]]],['3485',BMW+AkO,[[U,AL+' /'+ArC+DE,ClW,BVG,Ben,Bem,BZq,BZT,BYa,BUT,CVz,BUl,BUk,[B,K,'3485']]],[[U,'NAD83_NSRS2007_Arkansas_North_ftUS',Cbq,BVD,Ben,Bem,BZq,BZT,BYa,BUT,BUr]]],['3484',BMU+c+q+a,[[U,AL+' /'+ArC,ClW,BVG,Ben,Bem,BZq,BZT,BVh,BUT,CVy,BUl,BUk,[B,K,'3484']]],[[U,'NAD83_NSRS2007_Arkansas_North',Cbq,BVD,Ben,Bem,BZq,BZT,BVh,BUT,BUa]]],['3483',BGk+AoT,[[U,AL+' /'+yH+' West'+rv,ClW,BUd,BWA,Bel,BWx,BWl,BUT,CWY,BUl,BUk,[B,K,'3483']]],[[U,'NAD83_NSRS2007_Arizona_West_ft',Cbq,BUd,BWA,Bel,BWx,BWl,BUT,BXN]]],['3482',BGk+c+q+a,[[U,AL+' /'+yH+' West',ClW,BUd,BWA,Bel,BWx,Bbn,BUT,CVy,BUl,BUk,[B,K,'3482']]],[[U,'NAD83_NSRS2007_Arizona_West',Cbq,BUd,BWA,Bel,BWx,Bbn,BUT,BUa]]],['3481',BGj+AoT,[[U,AL+' /'+yH+' East'+rv,ClW,BUd,BWA,Bek,BUt,BWl,BUT,CWY,BUl,BUk,[B,K,'3481']]],[[U,'NAD83_NSRS2007_Arizona_East_ft',Cbq,BUd,BWA,Bek,BUt,BWl,BUT,BXN]]],['3480',BGj+c+q+a,[[U,AL+' /'+yH+' East',ClW,BUd,BWA,Bek,BUt,Bbn,BUT,CVy,BUl,BUk,[B,K,'3480']]],[[U,'NAD83_NSRS2007_Arizona_East',Cbq,BUd,BWA,Bek,BUt,Bbn,BUT,BUa]]],['3479',BGi+AoT,[[U,AL+' /'+BBP+rv,ClW,BUd,BWA,Bej,BUt,BWl,BUT,CWY,BUl,BUk,[B,K,'3479']]],[[U,'NAD83_NSRS2007_Arizona_Central_ft',Cbq,BUd,BWA,Bej,BUt,BWl,BUT,BXN]]],['3478',BGi+c+q+a,[[U,AL+' /'+BBP,ClW,BUd,BWA,Bej,BUt,Bbn,BUT,CVy,BUl,BUk,[B,K,'3478']]],[[U,'NAD83_NSRS2007_Arizona_Central',Cbq,BUd,BWA,Bej,BUt,Bbn,BUT,BUa]]],['3477',BTH+BUE,[[U,AL+' / Alaska zone 10',ClW,BVG,Brs,Brr,Blx,Brq,BWa,BUT,CVy,BUl,BUk,[B,K,'3477']]],[[U,'NAD83_NSRS2007_Alaska_zone_10',Cbq,BVD,Brs,Brr,Blx,Brq,BWa,BUT,BUa]]],['3476',BKV+BSv,[[U,AL+' / Alaska zone 9',ClW,BUd,BXL,BoY,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'3476']]],[[U,'NAD83_NSRS2007_Alaska_zone_9',Cbq,BUd,BXL,BoY,BUt,BUc,BUT,BUa]]],['3475',BKU+BSv,[[U,AL+' / Alaska zone 8',ClW,BUd,BXL,Brp,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'3475']]],[[U,'NAD83_NSRS2007_Alaska_zone_8',Cbq,BUd,BXL,Brp,BUt,BUc,BUT,BUa]]],['3474',BKT+BSv,[[U,AL+' / Alaska zone 7',ClW,BUd,BXL,Bro,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'3474']]],[[U,'NAD83_NSRS2007_Alaska_zone_7',Cbq,BUd,BXL,Bro,BUt,BUc,BUT,BUa]]],['3473',BNm+BUC,[[U,AL+' / Alaska zone 6',ClW,BUd,BXL,Bce,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'3473']]],[[U,'NAD83_NSRS2007_Alaska_zone_6',Cbq,BUd,BXL,Bce,BUt,BUc,BUT,BUa]]],['3472',BNl+BUC,[[U,AL+' / Alaska zone 5',ClW,BUd,BXL,Bka,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'3472']]],[[U,'NAD83_NSRS2007_Alaska_zone_5',Cbq,BUd,BXL,Bka,BUt,BUc,BUT,BUa]]],['3471',BNk+BUC,[[U,AL+' / Alaska zone 4',ClW,BUd,BXL,BkA,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'3471']]],[[U,'NAD83_NSRS2007_Alaska_zone_4',Cbq,BUd,BXL,BkA,BUt,BUc,BUT,BUa]]],['3470',BKS+BSv,[[U,AL+' / Alaska zone 3',ClW,BUd,BXL,Brn,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'3470']]],[[U,'NAD83_NSRS2007_Alaska_zone_3',Cbq,BUd,BXL,Brn,BUt,BUc,BUT,BUa]]],['3469',BKR+BSv,[[U,AL+' / Alaska zone 2',ClW,BUd,BXL,Brm,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'3469']]],[[U,'NAD83_NSRS2007_Alaska_zone_2',Cbq,BUd,BXL,Brm,BUt,BUc,BUT,BUa]]],['3468',Qw+' +lat_0=57'+pN+pO+CB+pl+UZ+BBw+j+c+q+a,[[U,AL+' / Alaska zone 1',ClW,BlD,Bpa,BpZ,BpY,BqI,BUt,Bei,BZJ,CVy,BUl,BUk,[B,K,'3468']]],[[U,'NAD83_NSRS2007_Alaska_zone_1',Cbq,BlC,Bpa,BpZ,BpY,BUt,Bei,BZJ,BUa]]],['3467',TR+' +lat_1=55'+AIa+' +lat_0=50'+BNj+j+c+q+a,[[U,AL+' / Alaska'+" "+Pk,ClW,BeL,BnM,Beh,CBD,CBC,BUy,BUT,CVy,BUl,BUk,[B,K,'3467']]],[[U,'NAD83_NSRS2007_Alaska_Albers',Cbq,BeK,BnM,Beh,Bws,Bka,BUy,BUT,BUa]]],['3466',BMF+j+c+q+a,[[U,AL+' / Alabama West',ClW,BUd,BXX,Bkh,BWx,BVY,BUT,CVy,BUl,BUk,[B,K,'3466']]],[[U,'NAD83_NSRS2007_Alabama_West',Cbq,BUd,BXX,Bkh,BWx,BVY,BUT,BUa]]],['3465',l+BMD+c+q+a,[[U,AL+' / Alabama East',ClW,BUd,Bar,BoX,Bhe,BVP,BUT,CVy,BUl,BUk,[B,K,'3465']]],[[U,'NAD83_NSRS2007_Alabama_East',Cbq,BUd,Bar,BoX,Bhe,BVP,BUT,BUa]]],['3464',l+BQR+c+q+a,[[U,Aj+' / Maine CS2000'+Gh,ClX,BUd,BsB,BsA,Bab,BUc,BUT,CVy,BUl,BUk,[B,K,'3464']]],[[U,'NAD83_HARN_Maine_CS2000_Central',Cbs,BUd,BsB,BsA,Bab,BUc,BUT,BUa]]],['3463',l+BQR+c+q+a,[[U,Bx+' / Maine CS2000'+Gh,ClV,BUd,BsB,BsA,Bab,BUc,BUT,CVy,BUl,BUk,[B,K,'3463']]],[[U,'NAD83_Maine_CS2000_Central',Cbn,BUd,BsB,BsA,Bab,BUc,BUT,BUa]]],['3462',AmJ+Akc+wj+q+a,[[U,'Dabola 1981 / UTM zone 29N',Cnv,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3462']]],[[U,'Dabola_1981_UTM_zone_29N',Chn,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['3461',Aly+Akc+wj+q+a,[[U,'Dabola 1981 / UTM zone 28N',Cnv,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3461']]],[[U,'Dabola_1981_UTM_zone_28N',Chn,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['3460',l+' +lat_0=-17 +lon_0=178.75 +k=0.99985'+Nz+pd+AtA,[[U,'Fiji 1986 / Fiji Map'+op,Crb,BUd,CQB,CIF,CGS,BVW,BgT,CVy,BUj,BUm,[B,K,'3460']]],[[U,'Fiji_1986_Fiji_Map_Grid',[S,'GCS_Fiji 1986',CaW,BUU,BUW],BUd,CQB,CIF,CGS,BVW,BgT,BUa]]],['3459',BGZ+AkO,[[U,Aj+' / South Dakota South'+DE,ClX,BVG,Bij,Bii,BgO,BZd,BVj,BUT,CVz,BUl,BUk,[B,K,'3459']]],[[U,'NAD83_HARN_South_Dakota_South_ftUS',Cbs,BVD,Bij,Bii,BgO,BZd,BVj,BUT,BUr]]],['3458',BGY+AkO,[[U,Aj+' / South Dakota'+Akg,ClX,BVG,Bih,Big,BYM,BXb,BVj,BUT,CVz,BUl,BUk,[B,K,'3458']]],[[U,'NAD83_HARN_South_Dakota_North_ftUS',Cbs,BVD,Bih,Big,BYM,BXb,BVj,BUT,BUr]]],['3457',BQQ+AnX,[[U,Aj+' /'+kJ+' South'+DE,ClX,BVG,Bhs,Bhr,Bhq,Bbr,Bfm,BUT,CVz,BUl,BUk,[B,K,'3457']]],[[U,'NAD83_HARN_Louisiana_South_ftUS',Cbs,BVD,Bhs,Bhr,Bhq,Bbr,Bfm,BUT,BUr]]],['3456',BQO+AnX,[[U,Aj+' /'+BBU+DE,ClX,BVG,Bhp,Bho,Bar,Bas,Bfm,BUT,CVz,BUl,BUk,[B,K,'3456']]],[[U,'NAD83_HARN_Louisiana_North_ftUS',Cbs,BVD,Bhp,Bho,Bar,Bas,Bfm,BUT,BUr]]],['3455',BGZ+AkO,[[U,Bx+' / South Dakota South'+DE,ClV,BVG,Bij,Bii,BgO,BZd,BVj,BUT,CVz,BUl,BUk,[B,K,'3455']]],[[U,'NAD83_South_Dakota_South_ftUS',Cbn,BVD,Bij,Bii,BgO,BZd,BVj,BUT,BUr]]],['3453',Aqg+QH+' +lat_0=25.5'+BLn+a,[[U,Bx+' /'+kJ+' Offshore'+DE,ClV,BVG,BcY,BcX,CAT,Bbr,Bfm,BUT,CVz,BUl,BUk,[B,K,'3453']]],[[U,'NAD83_Louisiana_Offshore_ftUS',Cbn,BVD,BcY,BcX,CAT,Bbr,Bfm,BUT,BUr]]],['3452',BQQ+AnX,[[U,Bx+' /'+kJ+' South'+DE,ClV,BVG,Bhs,Bhr,Bhq,Bbr,Bfm,BUT,CVz,BUl,BUk,[B,K,'3452']]],[[U,'NAD83_Louisiana_South_ftUS',Cbn,BVD,Bhs,Bhr,Bhq,Bbr,Bfm,BUT,BUr]]],['3451',BQO+AnX,[[U,Bx+' /'+BBU+DE,ClV,BVG,Bhp,Bho,Bar,Bas,Bfm,BUT,CVz,BUl,BUk,[B,K,'3451']]],[[U,'NAD83_Louisiana_North_ftUS',Cbn,BVD,Bhp,Bho,Bar,Bas,Bfm,BUT,BUr]]],['3450',AlJ+BAy,[[U,AGl+' / UTM zone 18N',CoA,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3450']]],[[U,'JAD2001_UTM_zone_18N',ChC,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['3449',AlW+BAy,[[U,AGl+' / UTM zone 17N',CoA,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3449']]],[[U,'JAD2001_UTM_zone_17N',ChC,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['3448',AU+' +lat_1=18'+yN+pu+' +k_0=1'+Agg+' +y_0=650000'+BAy,[[U,AGl+' / Jamaica Metric'+op,CoA,BWW,BgP,Bbs,BUf,BrX,Bwo,CVy,BUj,BUm,[B,K,'3448']]],[[U,'JAD2001_Jamaica_Metric_Grid',ChC,BVD,BgP,Bbs,BUf,BrX,Bwo,BUa,Bxs]]],['3447',AU+pP+pQ+' +lat_0=50.797815'+AaN+' +x_0=150328 +y_0=166262'+j+c+q+a,[[U,ED+' / Belgian'+PW+' 2005',Cld,BVG,BrZ,BrY,CAV,CIP,CIE,CID,CVy,BUl,BUk,[B,K,'3447']]],[[U,'ETRS89_Belgian_Lambert_2005',CcG,BVD,BrZ,BrY,CAV,CIP,CIE,CID,BUa]]],['3446',BTO+AkO,[[U,Aj+' / Rhode'+AsM,ClX,BUd,BgM,BZc,Bid,Bom,BUT,CVz,BUl,BUk,[B,K,'3446']]],[[U,'NAD83_HARN_Rhode_Island_ftUS',Cbs,BUd,BgM,BZc,Bid,Bom,BUT,BUr]]],['3445',Awj+BBM,[[U,Aj+' / New'+AGn+DE,ClX,BUd,BYX,Bfw,BWN,BZP,BUT,CVz,BUl,BUk,[B,K,'3445']]],[[U,'NAD83_HARN_New_Hampshire_ftUS',Cbs,BUd,BYX,Bfw,BWN,BZP,BUT,BUr]]],['3444',BPj+AkO,[[U,Aj+' /'+AGh+' West'+DE,ClX,BUd,BWJ,Bfa,BWj,Bry,BUT,CVz,BUl,BUk,[B,K,'3444']]],[[U,'NAD83_HARN_Illinois_West_ftUS',Cbs,BUd,BWJ,Bfa,BWj,Bry,BUT,BUr]]],['3443',Avu+BBM,[[U,Aj+' /'+AGh+' East'+DE,ClX,BUd,BWJ,BfZ,BdU,BZP,BUT,CVz,BUl,BUk,[B,K,'3443']]],[[U,'NAD83_HARN_Illinois_East_ftUS',Cbs,BUd,BWJ,BfZ,BdU,BZP,BUT,BUr]]],['3442',BMd+AnX,[[U,Aj+' /'+AGi+' South'+DE,ClX,BVG,Beq,Bep,Beo,BZT,BYa,Bhi,CVz,BUl,BUk,[B,K,'3442']]],[[U,'NAD83_HARN_Arkansas_South_ftUS',Cbs,BVD,Beq,Bep,Beo,BZT,BYa,Bhi,BUr]]],['3441',BMW+AkO,[[U,Aj+' /'+ArC+DE,ClX,BVG,Ben,Bem,BZq,BZT,BYa,BUT,CVz,BUl,BUk,[B,K,'3441']]],[[U,'NAD83_HARN_Arkansas_North_ftUS',Cbs,BVD,Ben,Bem,BZq,BZT,BYa,BUT,BUr]]],['3440',AnK+Cw+Zu+q+a,[[U,'PSD93 / UTM zone 40N',CoU,BUd,BUX,BXz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3440']]],[[U,'PSD93_UTM_zone_40N',CjD,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['3439',BNW+Zu+q+a,[[U,'PSD93 / UTM zone 39N',CoU,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3439']]],[[U,'PSD93_UTM_zone_39N',CjD,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['3438',BTO+AkO,[[U,Bx+' / Rhode'+AsM,ClV,BUd,BgM,BZc,Bid,Bom,BUT,CVz,BUl,BUk,[B,K,'3438']]],[[U,'NAD83_Rhode_Island_ftUS',Cbn,BUd,BgM,BZc,Bid,Bom,BUT,BUr]]],['3437',Awj+BBM,[[U,Bx+' / New'+AGn+DE,ClV,BUd,BYX,Bfw,BWN,BZP,BUT,CVz,BUl,BUk,[B,K,'3437']]],[[U,'NAD83_New_Hampshire_ftUS',Cbn,BUd,BYX,Bfw,BWN,BZP,BUT,BUr]]],['3436',BPj+AkO,[[U,Bx+' /'+AGh+' West'+DE,ClV,BUd,BWJ,Bfa,BWj,Bry,BUT,CVz,BUl,BUk,[B,K,'3436']]],[[U,'NAD83_Illinois_West_ftUS',Cbn,BUd,BWJ,Bfa,BWj,Bry,BUT,BUr]]],['3435',Avu+BBM,[[U,Bx+' /'+AGh+' East'+DE,ClV,BUd,BWJ,BfZ,BdU,BZP,BUT,CVz,BUl,BUk,[B,K,'3435']]],[[U,'NAD83_Illinois_East_ftUS',Cbn,BUd,BWJ,BfZ,BdU,BZP,BUT,BUr]]],['3434',BMd+AnX,[[U,Bx+' /'+AGi+' South'+DE,ClV,BVG,Beq,Bep,Beo,BZT,BYa,Bhi,CVz,BUl,BUk,[B,K,'3434']]],[[U,'NAD83_Arkansas_South_ftUS',Cbn,BVD,Beq,Bep,Beo,BZT,BYa,Bhi,BUr]]],['3433',BMW+AkO,[[U,Bx+' /'+ArC+DE,ClV,BVG,Ben,Bem,BZq,BZT,BYa,BUT,CVz,BUl,BUk,[B,K,'3433']]],[[U,'NAD83_Arkansas_North_ftUS',Cbn,BVD,Ben,Bem,BZq,BZT,BYa,BUT,BUr]]],['3432',BSC,[[U,Aj+' / New Jersey (ft US)',ClX,BUd,BZo,BaD,BUt,BiO,BUT,CVz,BUl,BUk,[B,K,'3432']]],[[U,'NAD83_HARN_New_Jersey_ft_US',Cbs,BUd,BZo,BaD,BUt,BiO,BUT,BUr]]],['3431',BTj+AnX,[[U,Aj+' / Nevada West (ft US)',ClX,BUd,BXg,Bfv,BUt,BZC,BsS,CVz,BUl,BUk,[B,K,'3431']]],[[U,'NAD83_HARN_Nevada_West_ft_US',Cbs,BUd,BXg,Bfv,BUt,BZC,BsS,BUr]]],['3430',BQp+AkO,[[U,Aj+' / Nevada'+Gh+' (ft US)',ClX,BUd,BXg,Bft,BUt,BXQ,BsP,CVz,BUl,BUk,[B,K,'3430']]],[[U,'NAD83_HARN_Nevada_Central_ft_US',Cbs,BUd,BXg,Bft,BUt,BXQ,BsP,BUr]]],['3429',BTh+AnX,[[U,Aj+' / Nevada East (ft US)',ClX,BUd,BXg,Bfu,BUt,BjL,BsR,CVz,BUl,BUk,[B,K,'3429']]],[[U,'NAD83_HARN_Nevada_East_ft_US',Cbs,BUd,BXg,Bfu,BUt,BjL,BsR,BUr]]],['3428',BQH+AnX,[[U,Aj+' / Kansas South (ft US)',ClX,BVG,Bfj,Bfi,BWJ,BXp,BYa,Bhi,CVz,BUl,BUk,[B,K,'3428']]],[[U,'NAD83_HARN_Kansas_South_ft_US',Cbs,BVD,Bfj,Bfi,BWJ,BXp,BYa,Bhi,BUr]]],['3427',BQF+AnX,[[U,Aj+' / Kansas'+QM+' (ft US)',ClX,BVG,Bfh,Bfg,BYl,BXh,BYa,BUT,CVz,BUl,BUk,[B,K,'3427']]],[[U,'NAD83_HARN_Kansas_North_ft_US',Cbs,BVD,Bfh,Bfg,BYl,BXh,BYa,BUT,BUr]]],['3426',BQD+AnX,[[U,Aj+' / Iowa South (ft US)',ClX,BVG,BZD,Bff,BXM,BZY,BXQ,BUT,CVz,BUl,BUk,[B,K,'3426']]],[[U,'NAD83_HARN_Iowa_South_ft_US',Cbs,BVD,BZD,Bff,BXM,BZY,BXQ,BUT,BUr]]],['3425',BQB+AnX,[[U,Aj+' / Iowa'+QM+' (ft US)',ClX,BVG,Bfe,Bfd,BYb,BZY,Bhj,BjM,CVz,BUl,BUk,[B,K,'3425']]],[[U,'NAD83_HARN_Iowa_North_ft_US',Cbs,BVD,Bfe,Bfd,BYb,BZY,Bhj,BjM,BUr]]],['3424',BSC,[[U,Bx+' / New Jersey (ft US)',ClV,BUd,BZo,BaD,BUt,BiO,BUT,CVz,BUl,BUk,[B,K,'3424']]],[[U,'NAD83_New_Jersey_ft_US',Cbn,BUd,BZo,BaD,BUt,BiO,BUT,BUr]]],['3423',BTj+AnX,[[U,Bx+' / Nevada West (ft US)',ClV,BUd,BXg,Bfv,BUt,BZC,BsS,CVz,BUl,BUk,[B,K,'3423']]],[[U,'NAD83_Nevada_West_ft_US',Cbn,BUd,BXg,Bfv,BUt,BZC,BsS,BUr]]],['3422',BQp+AkO,[[U,Bx+' / Nevada'+Gh+' (ft US)',ClV,BUd,BXg,Bft,BUt,BXQ,BsP,CVz,BUl,BUk,[B,K,'3422']]],[[U,'NAD83_Nevada_Central_ft_US',Cbn,BUd,BXg,Bft,BUt,BXQ,BsP,BUr]]],['3421',BTh+AnX,[[U,Bx+' / Nevada East (ft US)',ClV,BUd,BXg,Bfu,BUt,BjL,BsR,CVz,BUl,BUk,[B,K,'3421']]],[[U,'NAD83_Nevada_East_ft_US',Cbn,BUd,BXg,Bfu,BUt,BjL,BsR,BUr]]],['3420',BQH+AnX,[[U,Bx+' / Kansas South (ft US)',ClV,BVG,Bfj,Bfi,BWJ,BXp,BYa,Bhi,CVz,BUl,BUk,[B,K,'3420']]],[[U,'NAD83_Kansas_South_ft_US',Cbn,BVD,Bfj,Bfi,BWJ,BXp,BYa,Bhi,BUr]]],['3419',BQF+AnX,[[U,Bx+' / Kansas'+QM+' (ft US)',ClV,BVG,Bfh,Bfg,BYl,BXh,BYa,BUT,CVz,BUl,BUk,[B,K,'3419']]],[[U,'NAD83_Kansas_North_ft_US',Cbn,BVD,Bfh,Bfg,BYl,BXh,BYa,BUT,BUr]]],['3418',BQD+AnX,[[U,Bx+' / Iowa South (ft US)',ClV,BVG,BZD,Bff,BXM,BZY,BXQ,BUT,CVz,BUl,BUk,[B,K,'3418']]],[[U,'NAD83_Iowa_South_ft_US',Cbn,BVD,BZD,Bff,BXM,BZY,BXQ,BUT,BUr]]],['3417',BQB+AnX,[[U,Bx+' / Iowa'+QM+' (ft US)',ClV,BVG,Bfe,Bfd,BYb,BZY,Bhj,BjM,CVz,BUl,BUk,[B,K,'3417']]],[[U,'NAD83_Iowa_North_ft_US',Cbn,BVD,Bfe,Bfd,BYb,BZY,Bhj,BjM,BUr]]],['3416',AoM+wB+' +lat_0=47.5'+gn+Arb+j+c+q+a,[[U,ED+' /'+Abq+PW,Cld,BVG,BaG,Bbx,CIC,BoB,BVh,Baa,CVy,[B,K,'3416']]],[[U,'ETRS89_Austria_Lambert',CcG,BVD,BaG,Bbx,CIC,BoB,BVh,Baa,BUa]]],['3415',AU+' +lat_1=18 +lat_2=24 +lat_0=21'+gu+Aom+ArR,[[U,'WGS'+Xv+' / South'+" "+jw+' Sea'+PW,Clb,BVG,Bxs,[A,Y,NY],[A,C,HI],BZy,BUc,BWE,CVy,BUj,BUm,[B,K,'3415']]],[[U,'WGS_72BE_South_China_Sea_Lambert',CcC,BVD,Bxs,[A,Y,NY],[A,C,HI],BZy,BUc,BWE,BUa]]],['3414',l+' +lat_0=1.366666666666667 +lon_0=103.8333333333333 +k=1 +x_0=28001.642 +y_0=38744.572'+Dv+q+a,[[U,'SVY21 / Singapore TM',CsB,BUd,[A,C,APb],[A,E,APc],BUf,CAS,CAR,CVy,[B,K,'3414']]],[[U,'SVY21_Singapore_TM',[S,'GCS_SVY21',CbX,BUU,BUW],BUd,[A,C,APb],[A,E,APc],BUf,CAS,CAR,BUa]]],['3413',Apf+' +lat_ts=70 +lon_0=-45 +k=1'+Aky,[[U,'WGS 84 / NSIDC Sea Ice Polar'+RQ+QM,ClU,BcF,CQc,BYg,BUf,BUy,BUT,CVy,BUl,BUk,[B,K,'3413']]],[[U,'WGS_84_NSIDC_Sea_Ice_Polar_Stereographic_North',Cbp,BuP,CQb,BYg,BUy,BUT,BUa]]],['3412',AlU+' +lat_ts=-70'+ci+' +k=1'+Ajh+' +a=6378273'+AJR+q+a,[[U,'NSIDC Sea Ice Polar'+RQ+' South',Cme,BcF,[A,C,sR],BYA,BUf,BUy,BUT,CVy,BUl,BUk,[B,K,'3412']]],[[U,'NSIDC_Sea_Ice_Polar_Stereographic_South',CeS,Bhc,[A,W,sR],BYA,BUy,BUT,BUa]]],['3411',Apf+' +lat_ts=70 +lon_0=-45 +k=1'+Ajh+' +a=6378273'+AJR+q+a,[[U,'NSIDC Sea Ice Polar'+RQ+QM,Cme,BcF,CQc,BYg,BUf,BUy,BUT,CVy,BUl,BUk,[B,K,'3411']]],[[U,'NSIDC_Sea_Ice_Polar_Stereographic_North',CeS,BuP,CQb,BYg,BUy,BUT,BUa]]],['3410','+proj=cea'+ci+' +lat_ts=30'+Ajh+' +a=6371228 +b=6371228'+q+a,[[U,'NSIDC EASE-Grid Global',Cmj,CQl,CJL,BYA,BUy,BUT,CVy,BUl,BUk,[B,K,'3410']]],[[U,'NSIDC_EASE_Grid_Global',CeY,CQl,CJL,BYA,BUy,BUT,BUa]]],['3409',dn+ER+BCY+BQ+' +a=6371228 +b=6371228'+q+a,[[U,'NSIDC EASE-Grid South',Cmj,BeA,[A,BW,Bn],BxG,BUy,BUT,CVy,BUl,BUk,[B,K,'3409']]],[[U,'NSIDC_EASE_Grid_South',CeY,BeA,BVX,BYA,BUy,BUT,BUa]]],['3408',BAm+BCY+BQ+' +a=6371228 +b=6371228'+q+a,[[U,'NSIDC EASE-Grid'+QM,Cmj,BeA,Bpk,BxG,BUy,BUT,CVy,BUl,BUk,[B,K,'3408']]],[[U,'NSIDC_EASE_Grid_North',CeY,BeA,Bcw,BYA,BUy,BUT,BUa]]],['3407',SE+AaP+AaQ+' +x_0=40243.57775604237 +y_0=19069.93351512578'+Arw+rt+a,[[U,'Hong Kong 1963'+op+TN,Cqb,Bgy,CIB,CIA,CAQ,CFZ,CYB,[B,K,'3407']]],[[U,'Hong_Kong_1963_Grid_System',[S,'GCS_Hong Kong 1963',[V,AbN,BhF],BUU,BUW],Bgx,CIB,CIA,CAQ,CFZ,BqE,Bal]]],['3406',AnE+Dv+YV+q+a,[[U,ASy+' / UTM zone 49N',Cok,BUd,BUX,BWX,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3406']]],[[U,'VN_2000_UTM_zone_49N',Cii,BUd,BUX,BWX,BUg,BUc,BUT,BUa]]],['3405',AnD+Dv+YV+q+a,[[U,ASy+' / UTM zone 48N',Cok,BUd,BUX,BWK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3405']]],[[U,'VN_2000_UTM_zone_48N',Cii,BUd,BUX,BWK,BUg,BUc,BUT,BUa]]],['3404',BRA+AnX,[[U,Aj+' /'+BBZ+DE,ClX,BVG,BiQ,BiP,BgG,BdZ,BVW,BUT,CVz,BUl,BUk,[B,K,'3404']]],[[U,'NAD83_HARN_North_Carolina_ftUS',Cbs,BVD,BiQ,BiP,BgG,BdZ,BVW,BUT,BUr]]],['3403',BJd+' +k=0.9992'+BTr,[[U,Cc+' /'+Afb+' 10-TM (Resource)',Cli,BUd,BUX,BoU,BrW,BUy,BUT,CVy,BUj,BUm,[B,K,'3403']]],[[U,'NAD83_CSRS_Alberta_10_TM_Resource',CcM,BUd,BUX,BoU,BrW,BUy,BUT,BUa]]],['3402',BJd+' +k=0.9992'+BSv,[[U,Cc+' /'+Afb+' 10-TM (Forest)',Cli,BUd,BUX,BoU,BrW,BUc,BUT,CVy,BUj,BUm,[B,K,'3402']]],[[U,'NAD83_CSRS_Alberta_10_TM_Forest',CcM,BUd,BUX,BoU,BrW,BUc,BUT,BUa]]],['3401',BJd+' +k=0.9992'+BTr,[[U,Bx+' /'+Afb+' 10-TM (Resource)',ClV,BUd,BUX,BoU,BrW,BUy,BUT,CVy,BUj,BUm,[B,K,'3401']]],[[U,'NAD83_Alberta_10_TM_Resource',Cbn,BUd,BUX,BoU,BrW,BUy,BUT,BUa]]],['3400',BJd+' +k=0.9992'+BSv,[[U,Bx+' /'+Afb+' 10-TM (Forest)',ClV,BUd,BUX,BoU,BrW,BUc,BUT,CVy,BUj,BUm,[B,K,'3400']]],[[U,'NAD83_Alberta_10_TM_Forest',Cbn,BUd,BUX,BoU,BrW,BUc,BUT,BUa]]],['3399',ApP+' +k=1'+AmY+Apx,[[U,'RD/83 /'+Ajc+' zone 5',CnE,BUd,BUX,BWH,BUf,BYv,BUT,CVy,[B,K,'3399']]],[[U,'RD_83_3_degree_Gauss_Kruger_zone_5',CgF,BUd,BUX,BWH,BUf,BYv,BUT,BUa]]],['3398',AqA+' +k=1'+BHx+a,[[U,'RD/83 /'+Ajc+' zone 4',CnE,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,[B,K,'3398']]],[[U,'RD_83_3_degree_Gauss_Kruger_zone_4',CgF,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['3397',AqA+' +k=1'+BHx+a,[[U,'PD/83 /'+Ajc+' zone 4',CnF,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,[B,K,'3397']]],[[U,'PD_83_3_degree_Gauss_Kruger_zone_4',CgE,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['3396',Aqa+' +k=1'+Amo+Apx,[[U,'PD/83 /'+Ajc+' zone 3',CnF,BUd,BUX,BWO,BUf,BXO,BUT,CVy,[B,K,'3396']]],[[U,'PD_83_3_degree_Gauss_Kruger_zone_3',CgE,BUd,BUX,BWO,BUf,BXO,BUT,BUa]]],['3395',hB+ci+' +k=1'+Aky,[[U,'WGS 84 / World'+" "+aU,ClU,Bxi,BYA,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3395']]],[[U,'WGS_84_World_Mercator',Cbp,Bxp,BYA,BUy,BUT,BUa,Brg]]],['3394',BIX+iq+ABj+HV+' +y_0=1166200'+BJc,[[U,ASs+' 1934 / Iraq zone',Crd,BWW,BdX,BWe,Bwe,BWL,Bwd,CVy,BUj,BUm,[B,K,'3394']]],[[U,'Nahrwan_1934_Iraq_zone',[S,'GCS_Nahrwan 1934',[V,Ago,BVV],BUU,BUW],BVD,BdX,BWe,Bwe,BWL,Bwd,BUa,Bwc]]],['3393',BNW+VI+q+a,[[U,AcM+' 1979 / UTM zone 39N',CnV,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3393']]],[[U,'Karbala_1979_UTM_zone_39N',CfQ,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['3392',AmA+Cw+VI+q+a,[[U,AcM+' 1979 / UTM zone 38N',CnV,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3392']]],[[U,'Karbala_1979_UTM_zone_38N',CfQ,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['3391',AmP+Cw+VI+q+a,[[U,AcM+' 1979 / UTM zone 37N',CnV,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3391']]],[[U,'Karbala_1979_UTM_zone_37N',CfQ,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['3390',BJb+' +k=1 +x_0=60500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 60',Cla,BUd,BUX,BnL,BUf,CAP,BUT,CVy,[B,K,'3390']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_60',Cby,BUd,BUX,BnL,BUf,CAP,BUT,BUa]]],['3389',BJb+' +k=1 +x_0=60500000'+BBO,[[U,Aje+' /'+Ajc+' zone 60',ClY,BUd,BUX,BnL,BUf,CAP,BUT,CVy,[B,K,'3389']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_60',Cbv,BUd,BUX,BnL,BUf,CAP,BUT,BUa]]],['3388',hB+AGV+' +lat_ts=42'+Ajh+AoH,[[U,Aje+' / Caspian Sea'+" "+aU,ClY,CIe,[A,W,Pv],BWt,BUy,BUT,CVy,[B,K,'3388']]],[[U,'Pulkovo_1942_Caspian_Sea_Mercator',Cbv,CIe,[A,W,Pv],BWt,BUy,BUT,BUa]]],['3387',Aqn+' +k=1'+AmY+BSB,[[U,'KKJ / Finland zone 5',Cms,BUd,BUX,BWg,BUf,BYv,BUT,CVy,[B,K,'3387']]],[[U,'KKJ_Finland_zone_5',Cem,BUd,BUX,BWg,BUf,BYv,BUT,BUa]]],['3386',BEs+' +k=1'+Ajb+BSB,[[U,'KKJ / Finland zone 0',Cms,BUd,BUX,Bef,BUf,BUc,BUT,CVy,[B,K,'3386']]],[[U,'KKJ_Finland_zone_0',Cem,BUd,BUX,Bef,BUf,BUc,BUT,BUa]]],['3385',SE+' +lat_0=5.972543658333334 +lon_0=102.2952416694444 +x_0=13227.851 +y_0=8739.894'+j+q+a,[[U,cf+' / Kelantan'+op,CmT,Bgy,[A,C,APd],[A,E,APe],CAO,CFY,CVy,BUj,BUm,[B,K,'3385']]],[[U,'GDM2000_Kelantan_Grid',Cdb,Bgx,[A,C,APd],[A,E,APe],CAO,CFY,BUa,Bal]]],['3384',SE+' +lat_0=4.859063022222222 +lon_0=100.8154105861111 +x_0=-1.769 +y_0=133454.779'+j+q+a,[[U,cf+' / Perak'+op,CmT,Bgy,[A,C,APf],[A,E,APg],CHz,[A,G,Aiu],CVy,BUj,BUm,[B,K,'3384']]],[[U,'GDM2000_Perak_Grid',Cdb,Bgx,[A,C,APf],[A,E,APg],CHz,[A,G,Aiu],BUa,Bal]]],['3383',SE+' +lat_0=5.964672713888889 +lon_0=100.6363711111111'+Api+q+a,[[U,cf+' / Kedah and Perlis'+op,CmT,Bgy,[A,C,APh],[A,E,APi],BUy,BUT,CVy,BUj,BUm,[B,K,'3383']]],[[U,'GDM2000_Kedah_and_Perlis_Grid',Cdb,Bgx,[A,C,APh],[A,E,APi],BUy,BUT,BUa,Bal]]],['3382',SE+' +lat_0=5.421517541666667 +lon_0=100.3443769638889 +x_0=-23.414 +y_0=62.283'+j+q+a,[[U,cf+' / Pinang'+op,CmT,Bgy,[A,C,APj],[A,E,APk],CGR,CHy,CVy,BUj,BUm,[B,K,'3382']]],[[U,'GDM2000_Pinang_Grid',Cdb,Bgx,[A,C,APj],[A,E,APk],CGR,CHy,BUa,Bal]]],['3381',SE+' +lat_0=4.9762852 +lon_0=103.070275625 +x_0=19594.245 +y_0=3371.895'+j+q+a,[[U,cf+' / Terengganu'+op,CmT,Bgy,CAN,[A,E,AaR],CAM,CFX,CVy,BUj,BUm,[B,K,'3381']]],[[U,'GDM2000_Terengganu_Grid',Cdb,Bgx,CAN,[A,E,AaR],CAM,CFX,BUa,Bal]]],['3380',SE+' +lat_0=3.68464905 +lon_0=101.3891079138889 +x_0=-34836.161 +y_0=56464.049'+j+q+a,[[U,cf+' / Selangor'+op,CmT,Bgy,[A,C,Aiv],[A,E,APl],[A,I,Aiw],CAL,CVy,BUj,BUm,[B,K,'3380']]],[[U,'GDM2000_Selangor_Grid',Cdb,Bgx,[A,C,Aiv],[A,E,APl],[A,I,Aiw],CAL,BUa,Bal]]],['3379',SE+' +lat_0=3.769388088888889 +lon_0=102.3682989833333 +x_0=-7368.228 +y_0=6485.858'+j+q+a,[[U,cf+' / PahangGrid',CmT,Bgy,[A,C,APm],[A,E,APn],CAK,CFW,CVy,BUj,BUm,[B,K,'3379']]],[[U,'GDM2000_PahangGrid',Cdb,Bgx,[A,C,APm],[A,E,APn],CAK,CFW,BUa,Bal]]],['3378',SE+' +lat_0=2.682347636111111 +lon_0=101.9749050416667 +x_0=3673.785 +y_0=-4240.573'+j+q+a,[[U,cf+' / Sembilan and Melaka'+op,CmT,Bgy,[A,C,APo],[A,E,APp],CFV,CAJ,CVy,BUj,BUm,[B,K,'3378']]],[[U,'GDM2000_Sembilan_and_Melaka_Grid',Cdb,Bgx,[A,C,APo],[A,E,APp],CFV,CAJ,BUa,Bal]]],['3377',SE+' +lat_0=2.121679744444445 +lon_0=103.4279362361111 +x_0=-14810.562 +y_0=8758.32'+j+q+a,[[U,cf+' / Johor'+op,CmT,Bgy,[A,C,APq],[A,E,APr],[A,I,Aix],CGQ,CVy,BUj,BUm,[B,K,'3377']]],[[U,'GDM2000_Johor_Grid',Cdb,Bgx,[A,C,APq],[A,E,APr],[A,I,Aix],CGQ,BUa,Bal]]],['3376',AqD+' +lonc=115 +alpha=53.31580995'+AEw+Ajh+nD+gm+j+q+a,[[U,cf+' / East Malaysia BRSO',CmT,BlD,BeI,BmX,CAj,Bxb,BhZ,BUy,BUT,CVy,BUj,BUm,[B,K,'3376']]],[[U,'GDM2000_East_Malaysia_BRSO',Cdb,BlC,BeI,BmX,CAj,BhZ,BUy,BUT,BUa]]],['3375',AqD+' +lonc=102.25 +alpha=323.0257964666666'+AEw+' +x_0=804671'+BQ+BBw+j+q+a,[[U,cf+' / Peninsula RSO',CmT,BlD,BeI,Bul,[A,IC,APs],BqI,BhZ,CHx,BUT,CVy,BUj,BUm,[B,K,'3375']]],[[U,'GDM2000_Peninsula_RSO',Cdb,BlC,BeI,Bul,[A,IC,APs],BhZ,CHx,BUT,BUa]]],['3374',AmJ+BNB,[[U,'FD54 / UTM zone 29N',CsK,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3374']]],[[U,'FD54_UTM_zone_29N',[S,'GCS_FD54',[V,AVX,BUs],BUU,BUW],BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['3373',Ame+j+c+q+a,[[U,Bx+' / UTM zone 60N',ClV,BUd,BUX,BXo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3373']]],[[U,'NAD_1983_UTM_Zone_60N',Cbn,BUd,BUX,BXo,BUg,BUc,BUT,BUa]]],['3372',AoK+j+c+q+a,[[U,Bx+' / UTM zone 59N',ClV,BUd,BUX,BXj,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3372']]],[[U,'NAD_1983_UTM_Zone_59N',Cbn,BUd,BUX,BXj,BUg,BUc,BUT,BUa]]],['3371',Ame+Apt,[[U,Dg+' / UTM zone 60N',ClZ,BUd,BUX,BXo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3371']]],[[U,'NAD_1927_UTM_Zone_60N',Cbw,BUd,BUX,BXo,BUg,BUc,BUT,BUa]]],['3370',AoK+Apt,[[U,Dg+' / UTM zone 59N',ClZ,BUd,BUX,BXj,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3370']]],[[U,'NAD_1927_UTM_Zone_59N',Cbw,BUd,BUX,BXj,BUg,BUc,BUT,BUa]]],['3369',AmR+BJc,[[U,'IGN Astro 1960 / UTM zone 30N',CnD,BUd,BUX,Bak,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3369']]],[[U,'IGN_Astro_1960_UTM_zone_30N',CfD,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['3368',AmJ+BJc,[[U,'IGN Astro 1960 / UTM zone 29N',CnD,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3368']]],[[U,'IGN_Astro_1960_UTM_zone_29N',CfD,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['3367',Aly+BJc,[[U,'IGN Astro 1960 / UTM zone 28N',CnD,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3367']]],[[U,'IGN_Astro_1960_UTM_zone_28N',CfD,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['3365',BGW+AkO,[[U,Aj+' /'+eG+' South'+DE,ClX,BVG,BgL,BgK,BXi,BZb,BVj,BUT,CVz,BUl,BUk,[B,K,'3365']]],[[U,'NAD83_HARN_Pennsylvania_South_ftUS',Cbs,BVD,BgL,BgK,BXi,BZb,BVj,BUT,BUr]]],['3364',BGW+c+q+a,[[U,Aj+' /'+eG+' South',ClX,BVG,BgL,BgK,BXi,BZb,BVY,BUT,CVy,BUl,BUk,[B,K,'3364']]],[[U,'NAD83_HARN_Pennsylvania_South',Cbs,BVD,BgL,BgK,BXi,BZb,BVY,BUT,BUa]]],['3363',BFe+AkO,[[U,Aj+' /'+BBa+DE,ClX,BVG,Bic,Bib,BZp,BZb,BVj,BUT,CVz,BUl,BUk,[B,K,'3363']]],[[U,'NAD83_HARN_Pennsylvania_North_ftUS',Cbs,BVD,Bic,Bib,BZp,BZb,BVj,BUT,BUr]]],['3362',BFe+c+q+a,[[U,Aj+' /'+BBa,ClX,BVG,Bic,Bib,BZp,BZb,BVY,BUT,CVy,BUl,BUk,[B,K,'3362']]],[[U,'NAD83_HARN_Pennsylvania_North',Cbs,BVD,Bic,Bib,BZp,BZb,BVY,BUT,BUa]]],['3361',BGX+AoT,[[U,Aj+' / South'+pa+rv,ClX,BVG,Bif,Bie,BgN,BVm,BVW,BUT,CWY,BUl,BUk,[B,K,'3361']]],[[U,'NAD83_HARN_South_Carolina_ft',Cbs,BVD,Bif,Bie,BgN,BVm,BVW,BUT,BXN]]],['3360',BGX+c+q+a,[[U,Aj+' / South'+pa,ClX,BVG,Bif,Bie,BgN,BVm,BsZ,BUT,CVy,BUl,BUk,[B,K,'3360']]],[[U,'NAD83_HARN_South_Carolina',Cbs,BVD,Bif,Bie,BgN,BVm,BsZ,BUT,BUa]]],['3358',BQz+c+q+a,[[U,Aj+' /'+BBZ,ClX,BVG,BiQ,BiP,BgG,BdZ,BsY,BUT,CVy,BUl,BUk,[B,K,'3358']]],[[U,'NAD83_HARN_North_Carolina',Cbs,BVD,BiQ,BiP,BgG,BdZ,BsY,BUT,BUa]]],['3355',AoV+AIc+' +k=1 +x_0=615000 +y_0=810000'+aO+AEQ+q+a,[[U,'Egypt Gulf of Suez S-650 TL / Red Belt',Coa,BUd,BXX,Bed,BUf,CAI,CAH,CVy,BUj,BUm,[B,K,'3355']]],[[U,'Egypt_Gulf_of_Suez_S_650_TL_Red_Belt',[S,AXN+' Gulf of Suez S-650 TL',[V,AER,BcH],BUU,BUW],BUd,BXX,Bed,BUf,CAI,CAH,BUa]]],['3354',Alu+BNI+a,[[U,'Mhast'+AJD+' / UTM zone 32S',Cra,BUd,BUX,BWO,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3354']]],[[U,'Mhast_offshore_UTM_zone_32S',[S,'GCS_Mhast'+AJD,[V,AbO,BUs],BUU,BUW],BUd,BUX,BWO,BUg,BUc,BUo,BUa]]],['3353',Alu+BNI+a,[[U,'Mhast'+ATM+' / UTM zone 32S',CrZ,BUd,BUX,BWO,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3353']]],[[U,'Mhast_onshore_UTM_zone_32S',[S,'GCS_Mhast'+ATM,[V,Adb,BUs],BUU,BUW],BUd,BUX,BWO,BUg,BUc,BUo,BUa]]],['3352',l+' +lat_0=0.1 +lon_0=27.95 +k=1 +x_0=2250000'+BBO,[[U,Aje+' / CS63 zone C2',ClY,BUd,Buk,COO,BUf,CGP,BUT,CVy,[B,K,'3352']]],[[U,'Pulkovo_1942_CS63_zone_C2',Cbv,BUd,Buk,COO,BUf,CGP,BUT,BUa]]],['3351',l+' +lat_0=0.1 +lon_0=24.95 +k=1 +x_0=1250000'+BBO,[[U,Aje+' / CS63 zone C1',ClY,BUd,Buk,CON,BUf,CGO,BUT,CVy,[B,K,'3351']]],[[U,'Pulkovo_1942_CS63_zone_C1',Cbv,BUd,Buk,CON,BUf,CGO,BUT,BUa]]],['3350',l+' +lat_0=0.1 +lon_0=21.95 +k=1'+Aoo+AoH,[[U,Aje+' / CS63 zone C0',ClY,BUd,Buk,COM,BUf,BWp,BUT,CVy,[B,K,'3350']]],[[U,'Pulkovo_1942_CS63_zone_C0',Cbv,BUd,Buk,COM,BUf,BWp,BUT,BUa]]],['3348',BNY+' +lat_0=63.390675'+AWt+' +x_0=6200000'+BHu+q+a,[[U,Cc+' / Statistics Canada'+PW,Cli,BVG,BaG,BYR,CAG,CHw,CHv,Bbw,CVy,BUj,BUm,[B,K,'3348']]],[[U,'NAD83_CSRS_Statistics_Canada_Lambert',CcM,BVD,BaG,BYR,CAG,CHw,CHv,Bbw,BUa]]],['3347',BNY+' +lat_0=63.390675'+AWt+' +x_0=6200000'+BHu+q+a,[[U,Bx+' / Statistics Canada'+PW,ClV,BVG,BaG,BYR,CAG,CHw,CHv,Bbw,CVy,BUj,BUm,[B,K,'3347']]],[[U,'NAD83_Statistics_Canada_Lambert',Cbn,BVD,BaG,BYR,CAG,CHw,CHv,Bbw,BUa]]],['3346',ArK+Afu+BSv,[[U,'LKS94 / Lithuania TM',CsA,BUd,BUX,BYU,Bli,BUc,BUT,CVy,[B,K,'3346']]],[[U,'LKS94_Lithuania_TM',[S,'GCS_LKS94',[V,AbQ,BUh],BUU,BUW],BUd,BUX,BYU,Bli,BUc,BUT,BUa]]],['3345',AmR+j+c+q+a,[[U,wG+' 1999 / UTM zone 30N',Cnb,BUd,BUX,Bak,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3345']]],[[U,'Mauritania_1999_UTM_zone_30N',CgA,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['3344',AmJ+j+c+q+a,[[U,wG+' 1999 / UTM zone 29N',Cnb,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3344']]],[[U,'Mauritania_1999_UTM_zone_29N',CgA,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['3343',BUO,[[U,wG+' 1999 / UTM zone 28N',Cnb,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3343']]],[[U,'Mauritania_1999_UTM_zone_28N',CgA,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['3342',AmO+BDE+ZH+q+a,[[U,'IGCB 1955 / UTM zone 33S',Cmy,BUd,BUX,BWH,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3342']]],[[U,'IGCB_1955_UTM_zone_33S',Ceh,BUd,BUX,BWH,BUg,BUc,BUo,BUa]]],['3341',AjX+' +lon_0=16'+Aqd+ZH+q+a,[[U,'IGCB 1955 / Congo TM zone 16',Cmy,BUd,BUX,Bri,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3341']]],[[U,'IGCB_1955_Congo_TM_zone_16',Ceh,BUd,BUX,Bri,BUt,BUc,BUo,BUa]]],['3340',AjX+' +lon_0=14'+Aqd+ZH+q+a,[[U,'IGCB 1955 / Congo TM zone 14',Cmy,BUd,BUX,Brj,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3340']]],[[U,'IGCB_1955_Congo_TM_zone_14',Ceh,BUd,BUX,Brj,BUt,BUc,BUo,BUa]]],['3339',AqA+Aqd+ZH+q+a,[[U,'IGCB 1955 / Congo TM zone 12',Cmy,BUd,BUX,BYZ,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3339']]],[[U,'IGCB_1955_Congo_TM_zone_12',Ceh,BUd,BUX,BYZ,BUt,BUc,BUo,BUa]]],['3338',TR+' +lat_1=55'+AIa+' +lat_0=50'+BNj+j+c+q+a,[[U,Bx+' / Alaska'+" "+Pk,ClV,BeL,BnM,Beh,CBD,CBC,BUy,BUT,CVy,BUl,BUk,[B,K,'3338']]],[[U,'NAD83_Alaska_Albers',Cbn,BeK,BnM,Beh,Bws,Bka,BUy,BUT,BUa]]],['3337',AU+' +lat_1=-20.19506944444445 +lat_0=-20.19506944444445 +lon_0=57.52182777777778 +k_0=1'+Anu+Cw+AES+q+a,[[U,'Le Pouce 1934 / Mauritius'+op,Cql,BWW,[A,C,wk],[A,E,APt],BUf,BWa,BVg,CVy,BUj,BUm,[B,K,'3337']]],[[U,'Le_Pouce_1934_Mauritius_Grid',[S,'GCS_Le Pouce 1934',[V,Adc,BVV],BUU,BUW],BVD,[A,C,wk],[A,E,APt],BUf,BWa,BVg,BUa,[A,W,wk]]]],['3336',Aob+Aka+AJy+q+a,[[U,'IGN 1962'+ATN+' / UTM zone 42S',Cqz,BUd,BUX,BZh,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3336']]],[[U,'IGN_1962_Kerguelen_UTM_zone_42S',[S,'GCS_IGN 1962'+ATN,[V,AJi,BUs],BUU,BUW],BUd,BUX,BZh,BUg,BUc,BUo,BUa]]],['3335',Apz+' +k=1'+AmY+BCx,[[U,Akd+' /'+AW+' zone 5',Clq,BUd,BUX,BWP,BUf,BYv,BUT,CVy,[B,K,'3335']]],[[U,'Pulkovo_1942_58_Gauss_Kruger_zone_5',Ccf,BUd,BUX,BWP,BUf,BYv,BUT,BUa]]],['3334',ApT+' +k=1'+Alz+BCx,[[U,Akd+' /'+AW+' zone 4',Clq,BUd,BUX,BWR,BUf,BYJ,BUT,CVy,[B,K,'3334']]],[[U,'Pulkovo_1942_58_Gauss_Kruger_zone_4',Ccf,BUd,BUX,BWR,BUf,BYJ,BUT,BUa]]],['3333',ApP+' +k=1'+BKE+q+a,[[U,Akd+' /'+AW+' zone 3',Clq,BUd,BUX,BWH,BUf,BXO,BUT,CVy,[B,K,'3333']]],[[U,'Pulkovo_1942_58_Gauss_Kruger_zone_3',Ccf,BUd,BUX,BWH,BUf,BXO,BUT,BUa]]],['3332',ArK+' +k=1'+AwR+BCx,[[U,Akd+' /'+Ajc+' zone 8',Clq,BUd,BUX,BYU,BUf,BhY,BUT,CVy,[B,K,'3332']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_8',Ccf,BUd,BUX,BYU,BUf,BhY,BUT,BUa]]],['3331',ApT+' +k=1'+ApC+BCx,[[U,Akd+' /'+Ajc+' zone 7',Clq,BUd,BUX,BWR,BUf,BbK,BUT,CVy,[B,K,'3331']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_7',Ccf,BUd,BUX,BWR,BUf,BbK,BUT,BUa]]],['3330',BEs+' +k=1'+ArU+BCx,[[U,Akd+' /'+Ajc+' zone 6',Clq,BUd,BUX,Bef,BUf,BdL,BUT,CVy,[B,K,'3330']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_6',Ccf,BUd,BUX,Bef,BUf,BdL,BUT,BUa]]],['3329',ApP+' +k=1'+AmY+BCx,[[U,Akd+' /'+Ajc+' zone 5',Clq,BUd,BUX,BWH,BUf,BYv,BUT,CVy,[B,K,'3329']]],[[U,'Pulkovo_1942_58_3_degree_Gauss_Kruger_zone_5',Ccf,BUd,BUX,BWH,BUf,BYv,BUT,BUa]]],['3328',ZQ+' +lat_0=52.16666666666666 +lon_0=19.16666666666667 +k=0.999714'+Aom+BCx,[[U,Akd+' / GUGiK-80',Clq,Bpn,[A,C,APu],[A,E,APv],CFU,BUc,BWE,CVy,[B,K,'3328']]],[[U,'Pulkovo_1942_58_GUGiK_80',Ccf,Bpm,[A,C,APu],[A,E,APv],CFU,BUc,BWE,BUa]]],['3327',ArX+BRl,[[U,'IGC 1962 / Congo TM zone 30',Clt,BUd,BUX,BYz,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3327']]],[[U,'IGC_1962_Congo_TM_zone_30',Ccg,BUd,BUX,BYz,BUt,BUc,BUo,BUa]]],['3326',BEt+BRl,[[U,'IGC 1962 / Congo TM zone 28',Clt,BUd,BUX,BhX,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3326']]],[[U,'IGC_1962_Congo_TM_zone_28',Ccg,BUd,BUX,BhX,BUt,BUc,BUo,BUa]]],['3325',BJi+BRl,[[U,'IGC 1962 / Congo TM zone 26',Clt,BUd,BUX,Blm,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3325']]],[[U,'IGC_1962_Congo_TM_zone_26',Ccg,BUd,BUX,Blm,BUt,BUc,BUo,BUa]]],['3324',ArK+BRl,[[U,'IGC 1962 / Congo TM zone 24',Clt,BUd,BUX,BYU,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3324']]],[[U,'IGC_1962_Congo_TM_zone_24',Ccg,BUd,BUX,BYU,BUt,BUc,BUo,BUa]]],['3323',AjX+' +lon_0=22'+BRl,[[U,'IGC 1962 / Congo TM zone 22',Clt,BUd,BUX,BoD,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3323']]],[[U,'IGC_1962_Congo_TM_zone_22',Ccg,BUd,BUX,BoD,BUt,BUc,BUo,BUa]]],['3322',BIM+BRl,[[U,'IGC 1962 / Congo TM zone 20',Clt,BUd,BUX,BmG,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3322']]],[[U,'IGC_1962_Congo_TM_zone_20',Ccg,BUd,BUX,BmG,BUt,BUc,BUo,BUa]]],['3321',BEs+BRl,[[U,'IGC 1962 / Congo TM zone 18',Clt,BUd,BUX,Bef,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3321']]],[[U,'IGC_1962_Congo_TM_zone_18',Ccg,BUd,BUX,Bef,BUt,BUc,BUo,BUa]]],['3320',AjX+' +lon_0=16'+BRl,[[U,'IGC 1962 / Congo TM zone 16',Clt,BUd,BUX,Bri,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3320']]],[[U,'IGC_1962_Congo_TM_zone_16',Ccg,BUd,BUX,Bri,BUt,BUc,BUo,BUa]]],['3319',AjX+' +lon_0=14'+BRl,[[U,'IGC 1962 / Congo TM zone 14',Clt,BUd,BUX,Brj,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3319']]],[[U,'IGC_1962_Congo_TM_zone_14',Ccg,BUd,BUX,Brj,BUt,BUc,BUo,BUa]]],['3318',AqA+BRl,[[U,'IGC 1962 / Congo TM zone 12',Clt,BUd,BUX,BYZ,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3318']]],[[U,'IGC_1962_Congo_TM_zone_12',Ccg,BUd,BUX,BYZ,BUt,BUc,BUo,BUa]]],['3317',ArK+BRl,[[U,'Kasai 1953 / Congo TM zone 24',CoF,BUd,BUX,BYU,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3317']]],[[U,'Kasai_1953_Congo_TM_zone_24',CiD,BUd,BUX,BYU,BUt,BUc,BUo,BUa]]],['3316',AjX+' +lon_0=22'+BRl,[[U,'Kasai 1953 / Congo TM zone 22',CoF,BUd,BUX,BoD,BUt,BUc,BUo,CVy,BUj,BUm,[B,K,'3316']]],[[U,'Kasai_1953_Congo_TM_zone_22',CiD,BUd,BUX,BoD,BUt,BUc,BUo,BUa]]],['3313',BUD,[[U,Afo+' / UTM zone 21N',Coj,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3313']]],[[U,'RGFG95_UTM_zone_21N',Cis,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['3312',AlI+BP+te+q+a,[[U,'CSG67 / UTM zone 21N',CoV,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3312']]],[[U,'CSG67_UTM_zone_21N',CjC,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['3311',TR+' +lat_1=34'+BKm+j+c+q+a,[[U,Aj+' /'+OB+" "+Pk,ClX,BeL,Bob,Boa,Bwt,Bxf,BUy,BoZ,CVy,BUl,BUk,[B,K,'3311']]],[[U,'NAD83_HARN_California_Albers',Cbs,BeK,Bob,Boa,BUX,BlB,BUy,BoZ,BUa]]],['3310',TR+' +lat_1=34'+BKm+j+c+q+a,[[U,Bx+' /'+OB+" "+Pk,ClV,BeL,Bob,Boa,Bwt,Bxf,BUy,BoZ,CVy,BUl,BUk,[B,K,'3310']]],[[U,'NAD83_California_Albers',Cbn,BeK,Bob,Boa,BUX,BlB,BUy,BoZ,BUa]]],['3309',TR+' +lat_1=34'+BKm+Apt,[[U,Dg+' /'+OB+" "+Pk,ClZ,BeL,Bob,Boa,Bwt,Bxf,BUy,BoZ,CVy,BUl,BUk,[B,K,'3309']]],[[U,'NAD27_California_Albers',Cbw,BeK,Bob,Boa,BUX,BlB,BUy,BoZ,BUa]]],['3308',AU+' +lat_1=-30.75 +lat_2=-35.75 +lat_0=-33.25'+yb+' +x_0=9300000'+Zl+j+c+q+a,[[U,gs+' / NSW'+PW,Clx,BVG,CHu,CHt,CHs,BYW,CGN,BZm,CVy,BUj,BUm,[B,K,'3308']]],[[U,'GDA94_NSW_Lambert',Ccs,BVD,CHu,CHt,CHs,BYW,CGN,BZm,BUa]]],['3307',Alt+Dv+AJz+q+a,[[U,'Nakhl-e Ghanem / UTM zone 39N',Cqa,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3307']]],[[U,'Nakhl_e_Ghanem_UTM_zone_39N',[S,'GCS_Nakhl-e Ghanem',[V,AbP,BUw],BUU,BUW],BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['3306',AV+' +zone=5'+Aka+ACg+q+a,[[U,'Maupiti 83 / UTM zone 5S',CrJ,BUd,BUX,BZK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3306']]],[[U,'Maupiti_83_UTM_zone_5S',[S,'GCS_Maupiti 83',[V,Ags,BUs],BUU,BUW],BUd,BUX,BZK,BUg,BUc,BUo,BUa]]],['3305',AV+' +zone=6'+Aka+on+q+a,[[U,'Moorea 87 / UTM zone 6S',CrY,BUd,BUX,BYy,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3305']]],[[U,'Moorea_87_UTM_zone_6S',[S,'GCS_Moorea 87',CaG,BUU,BUW],BUd,BUX,BYy,BUg,BUc,BUo,BUa]]],['3304',AV+' +zone=6'+Aka+oo+q+a,[[U,'Tahiti 79 / UTM zone 6S',CrX,BUd,BUX,BYy,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3304']]],[[U,'Tahiti_79_UTM_zone_6S',[S,'GCS_Tahiti 79',CaF,BUU,BUW],BUd,BUX,BYy,BUg,BUc,BUo,BUa]]],['3303',AV+' +zone=7'+Aka+oI+q+a,[[U,'Fatu Iva 72 / UTM zone 7S',CrF,BUd,BUX,BZn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3303']]],[[U,'Fatu_Iva_72_UTM_zone_7S',[S,'GCS_Fatu Iva 72',[V,Ade,BUs],BUU,BUW],BUd,BUX,BZn,BUg,BUc,BUo,BUa]]],['3302',AV+' +zone=7'+Aka+qf+q+a,[[U,'IGN63 Hiva Oa / UTM zone 7S',Cqk,BUd,BUX,BZn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3302']]],[[U,'IGN63_Hiva_Oa_UTM_zone_7S',[S,'GCS_IGN63 Hiva Oa',[V,Add,BUs],BUU,BUW],BUd,BUX,BZn,BUg,BUc,BUo,BUa]]],['3301',AU+AaS+' +lat_2=58'+AaT+fO+Ay+' +y_0=6375000'+j+c+q+a,[[U,'Estonian'+Ajt+' of 1997',Crt,BVG,CHr,CHq,CHp,BYU,BUc,CAF,CVy,[B,K,'3301']]],[[U,'Estonian_Coordinate_System_of_1997',[S,'GCS_EST97',[V,AhG,BUh],BUU,BUW],BVD,CHr,CHq,CHp,BYU,BUc,CAF,BUa]]],['3300',AU+AaS+' +lat_2=58'+AaT+fO+Ay+' +y_0=6375000'+j+rd+q+a,[[U,'Estonian'+Ajt+' of 1992',Crs,BVG,CHr,CHq,CHp,BYU,BUc,CAF,CVy,[B,K,'3300']]],[[U,'Estonian_Coordinate_System_of_1992',[S,'GCS_EST92',[V,AhI,BUh],BUU,BUW],BVD,CHr,CHq,CHp,BYU,BUc,CAF,BUa]]],['3299',AV+' +zone=8'+BNV+q+a,[[U,'RGPF / UTM zone 8S',CnL,BUd,BUX,BZz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3299']]],[[U,'RGPF_UTM_zone_8S',Cfz,BUd,BUX,BZz,BUg,BUc,BUo,BUa]]],['3298',AV+' +zone=7'+BNV+q+a,[[U,'RGPF / UTM zone 7S',CnL,BUd,BUX,BZn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3298']]],[[U,'RGPF_UTM_zone_7S',Cfz,BUd,BUX,BZn,BUg,BUc,BUo,BUa]]],['3297',AV+' +zone=6'+BNV+q+a,[[U,'RGPF / UTM zone 6S',CnL,BUd,BUX,BYy,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3297']]],[[U,'RGPF_UTM_zone_6S',Cfz,BUd,BUX,BYy,BUg,BUc,BUo,BUa]]],['3296',AV+' +zone=5'+BNV+q+a,[[U,'RGPF / UTM zone 5S',CnL,BUd,BUX,BZK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3296']]],[[U,'RGPF_UTM_zone_5S',Cfz,BUd,BUX,BZK,BUg,BUc,BUo,BUa]]],['3294',Amn+It+' +lat_0=-78'+AIh+Aky,[[U,'WGS 84 / USGS Transantarctic Mountains',ClU,BVG,BZR,BZQ,CIb,BkM,BUy,BUT,CVy,BUj,BUm,[B,K,'3294']]],[[U,'WGS_84_USGS_Transantarctic_Mountains',Cbp,BVD,BZR,BZQ,CIb,BkM,BUy,BUT,BUa]]],['3293',Aql+ci+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SW01-60',ClU,BcF,BeH,BYA,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3293']]],[[U,'WGS_84_SCAR_IMW_SW01_60',Cbp,Bhc,BeG,BYA,BUy,BUT,BUa]]],['3292',Aql+ya+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SV51-60',ClU,BcF,BeH,Beg,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3292']]],[[U,'WGS_84_SCAR_IMW_SV51_60',Cbp,Bhc,BeG,Beg,BUy,BUT,BUa]]],['3291',Aql+eX+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SV41-50',ClU,BcF,BeH,BYP,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3291']]],[[U,'WGS_84_SCAR_IMW_SV41_50',Cbp,Bhc,BeG,BYP,BUy,BUT,BUa]]],['3290',Aql+gR+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SV31-40',ClU,BcF,BeH,BYz,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3290']]],[[U,'WGS_84_SCAR_IMW_SV31_40',Cbp,Bhc,BeG,BYz,BUy,BUT,BUa]]],['3289',Aql+' +lon_0=-30 +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SV21-30',ClU,BcF,BeH,CAw,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3289']]],[[U,'WGS_84_SCAR_IMW_SV21_30',Cbp,Bhc,BeG,CAw,BUy,BUT,BUa]]],['3288',Aql+PQ+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SV11-20',ClU,BcF,BeH,BWb,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3288']]],[[U,'WGS_84_SCAR_IMW_SV11_20',Cbp,Bhc,BeG,BWb,BUy,BUT,BUa]]],['3287',Aql+xj+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SV01-10',ClU,BcF,BeH,BkA,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3287']]],[[U,'WGS_84_SCAR_IMW_SV01_10',Cbp,Bhc,BeG,BkA,BUy,BUT,BUa]]],['3286',Aql+vt+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU56-60',ClU,BcF,BeH,BXW,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3286']]],[[U,'WGS_84_SCAR_IMW_SU56_60',Cbp,Bhc,BeG,BXW,BUy,BUT,BUa]]],['3285',Aql+Xi+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU51-55',ClU,BcF,BeH,BWd,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3285']]],[[U,'WGS_84_SCAR_IMW_SU51_55',Cbp,Bhc,BeG,BWd,BUy,BUT,BUa]]],['3284',Aql+UW+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU46-50',ClU,BcF,BeH,BWK,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3284']]],[[U,'WGS_84_SCAR_IMW_SU46_50',Cbp,Bhc,BeG,BWK,BUy,BUT,BUa]]],['3283',Aql+co+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU41-45',ClU,BcF,BeH,BWs,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3283']]],[[U,'WGS_84_SCAR_IMW_SU41_45',Cbp,Bhc,BeG,BWs,BUy,BUT,BUa]]],['3282',Aql+iq+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU36-40',ClU,BcF,BeH,BWe,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3282']]],[[U,'WGS_84_SCAR_IMW_SU36_40',Cbp,Bhc,BeG,BWe,BUy,BUT,BUa]]],['3281',Aql+aL+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU31-35',ClU,BcF,BeH,BWH,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3281']]],[[U,'WGS_84_SCAR_IMW_SU31_35',Cbp,Bhc,BeG,BWH,BUy,BUT,BUa]]],['3280',Aql+' +lon_0=-15 +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU26-30',ClU,BcF,BeH,BYE,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3280']]],[[U,'WGS_84_SCAR_IMW_SU26_30',Cbp,Bhc,BeG,BYE,BUy,BUT,BUa]]],['3279',Aql+' +lon_0=-45 +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU21-25',ClU,BcF,BeH,BYg,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3279']]],[[U,'WGS_84_SCAR_IMW_SU21_25',Cbp,Bhc,BeG,BYg,BUy,BUT,BUa]]],['3278',Aql+Aca+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU16-20',ClU,BcF,BeH,BWo,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3278']]],[[U,'WGS_84_SCAR_IMW_SU16_20',Cbp,Bhc,BeG,BWo,BUy,BUT,BUa]]],['3277',Aql+' +lon_0=-105 +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU11-15',ClU,BcF,BeH,BZS,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3277']]],[[U,'WGS_84_SCAR_IMW_SU11_15',Cbp,Bhc,BeG,BZS,BUy,BUT,BUa]]],['32766',AtL+BLz,[[U,'WGS 84 / TM 36 SE',ClU,BUd,BUX,BdS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32766']]],[[U,'WGS_84_TM_36_SE',Cbp,BUd,BUX,BdS,BUg,BUc,BUo,BUa]]],['32761',AlU+' +lat_ts=-90'+BLq,[[U,'WGS 84 / UPS South (N,E)',ClU,BcF,BVX,BYA,BoS,BVW,BYH,CVy,[B,K,'32761']]],[[U,'WGS_84_UPS_South_N_E',Cbp,Bhc,CQa,BYA,BVW,BYH,BUa]]],['32760',Ame+AuM,[[U,'WGS 84 / UTM zone 60S',ClU,BUd,BUX,BXo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32760']]],[[U,'WGS_1984_UTM_Zone_60S',Cbp,BUd,BUX,BXo,BUg,BUc,BUo,BUa]]],['3276',Aql+Agf+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU06-10',ClU,BcF,BeH,BZz,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3276']]],[[U,'WGS_84_SCAR_IMW_SU06_10',Cbp,Bhc,BeG,BZz,BUy,BUT,BUa]]],['32759',AoK+AuM,[[U,'WGS 84 / UTM zone 59S',ClU,BUd,BUX,BXj,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32759']]],[[U,'WGS_1984_UTM_Zone_59S',Cbp,BUd,BUX,BXj,BUg,BUc,BUo,BUa]]],['32758',Aml+AuM,[[U,'WGS 84 / UTM zone 58S',ClU,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32758']]],[[U,'WGS_1984_UTM_Zone_58S',Cbp,BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['32757',Aos+AuM,[[U,'WGS 84 / UTM zone 57S',ClU,BUd,BUX,BZl,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32757']]],[[U,'WGS_1984_UTM_Zone_57S',Cbp,BUd,BUX,BZl,BUg,BUc,BUo,BUa]]],['32756',AoS+AuM,[[U,'WGS 84 / UTM zone 56S',ClU,BUd,BUX,BYu,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32756']]],[[U,'WGS_1984_UTM_Zone_56S',Cbp,BUd,BUX,BYu,BUg,BUc,BUo,BUa]]],['32755',Amg+AuM,[[U,'WGS 84 / UTM zone 55S',ClU,BUd,BUX,BYW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32755']]],[[U,'WGS_1984_UTM_Zone_55S',Cbp,BUd,BUX,BYW,BUg,BUc,BUo,BUa]]],['32754',AoI+AuM,[[U,'WGS 84 / UTM zone 54S',ClU,BUd,BUX,BYK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32754']]],[[U,'WGS_1984_UTM_Zone_54S',Cbp,BUd,BUX,BYK,BUg,BUc,BUo,BUa]]],['32753',AmT+AuM,[[U,'WGS 84 / UTM zone 53S',ClU,BUd,BUX,BWd,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32753']]],[[U,'WGS_1984_UTM_Zone_53S',Cbp,BUd,BUX,BWd,BUg,BUc,BUo,BUa]]],['32752',Ank+AuM,[[U,'WGS 84 / UTM zone 52S',ClU,BUd,BUX,BWQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32752']]],[[U,'WGS_1984_UTM_Zone_52S',Cbp,BUd,BUX,BWQ,BUg,BUc,BUo,BUa]]],['32751',AnJ+AuM,[[U,'WGS 84 / UTM zone 51S',ClU,BUd,BUX,BWU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32751']]],[[U,'WGS_1984_UTM_Zone_51S',Cbp,BUd,BUX,BWU,BUg,BUc,BUo,BUa]]],['32750',AnS+AuM,[[U,'WGS 84 / UTM zone 50S',ClU,BUd,BUX,BWS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32750']]],[[U,'WGS_1984_UTM_Zone_50S',Cbp,BUd,BUX,BWS,BUg,BUc,BUo,BUa]]],['3275',Aql+ATZ+' +k=1'+Aky,[[U,'WGS 84 / SCAR IMW SU01-05',ClU,BcF,BeH,BaZ,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3275']]],[[U,'WGS_84_SCAR_IMW_SU01_05',Cbp,Bhc,BeG,BaZ,BUy,BUT,BUa]]],['32749',AnE+AuM,[[U,'WGS 84 / UTM zone 49S',ClU,BUd,BUX,BWX,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32749']]],[[U,'WGS_1984_UTM_Zone_49S',Cbp,BUd,BUX,BWX,BUg,BUc,BUo,BUa]]],['32748',AnD+AuM,[[U,'WGS 84 / UTM zone 48S',ClU,BUd,BUX,BWK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32748']]],[[U,'WGS_1984_UTM_Zone_48S',Cbp,BUd,BUX,BWK,BUg,BUc,BUo,BUa]]],['32747',AoJ+AuM,[[U,'WGS 84 / UTM zone 47S',ClU,BUd,BUX,BWf,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32747']]],[[U,'WGS_1984_UTM_Zone_47S',Cbp,BUd,BUX,BWf,BUg,BUc,BUo,BUa]]],['32746',AnA+AuM,[[U,'WGS 84 / UTM zone 46S',ClU,BUd,BUX,BWk,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32746']]],[[U,'WGS_1984_UTM_Zone_46S',Cbp,BUd,BUX,BWk,BUg,BUc,BUo,BUa]]],['32745',AV+' +zone=45'+AuM,[[U,'WGS 84 / UTM zone 45S',ClU,BUd,BUX,BXK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32745']]],[[U,'WGS_1984_UTM_Zone_45S',Cbp,BUd,BUX,BXK,BUg,BUc,BUo,BUa]]],['32744',AV+' +zone=44'+AuM,[[U,'WGS 84 / UTM zone 44S',ClU,BUd,BUX,BWz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32744']]],[[U,'WGS_1984_UTM_Zone_44S',Cbp,BUd,BUX,BWz,BUg,BUc,BUo,BUa]]],['32743',ApL+AuM,[[U,'WGS 84 / UTM zone 43S',ClU,BUd,BUX,BWs,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32743']]],[[U,'WGS_1984_UTM_Zone_43S',Cbp,BUd,BUX,BWs,BUg,BUc,BUo,BUa]]],['32742',Aob+AuM,[[U,'WGS 84 / UTM zone 42S',ClU,BUd,BUX,BZh,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32742']]],[[U,'WGS_1984_UTM_Zone_42S',Cbp,BUd,BUX,BZh,BUg,BUc,BUo,BUa]]],['32741',Aoc+AuM,[[U,'WGS 84 / UTM zone 41S',ClU,BUd,BUX,BZN,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32741']]],[[U,'WGS_1984_UTM_Zone_41S',Cbp,BUd,BUX,BZN,BUg,BUc,BUo,BUa]]],['32740',AnK+AuM,[[U,'WGS 84 / UTM zone 40S',ClU,BUd,BUX,BXz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32740']]],[[U,'WGS_1984_UTM_Zone_40S',Cbp,BUd,BUX,BXz,BUg,BUc,BUo,BUa]]],['3274',AqB+Acd+Aky,[[U,'WGS 84 / SCAR IMW ST57-60',ClU,BVG,BZR,BZQ,BVX,BoA,BUy,BUT,CVy,BUj,BUm,[B,K,'3274']]],[[U,'WGS_84_SCAR_IMW_ST57_60',Cbp,BVD,BZR,BZQ,BVX,BoA,BUy,BUT,BUa]]],['32739',Alt+AuM,[[U,'WGS 84 / UTM zone 39S',ClU,BUd,BUX,BWt,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32739']]],[[U,'WGS_1984_UTM_Zone_39S',Cbp,BUd,BUX,BWt,BUg,BUc,BUo,BUa]]],['32738',AmA+AuM,[[U,'WGS 84 / UTM zone 38S',ClU,BUd,BUX,BWe,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32738']]],[[U,'WGS_1984_UTM_Zone_38S',Cbp,BUd,BUX,BWe,BUg,BUc,BUo,BUa]]],['32737',AmP+AuM,[[U,'WGS 84 / UTM zone 37S',ClU,BUd,BUX,BWn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32737']]],[[U,'WGS_1984_UTM_Zone_37S',Cbp,BUd,BUX,BWn,BUg,BUc,BUo,BUa]]],['32736',AnF+AuM,[[U,'WGS 84 / UTM zone 36S',ClU,BUd,BUX,BWg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32736']]],[[U,'WGS_1984_UTM_Zone_36S',Cbp,BUd,BUX,BWg,BUg,BUc,BUo,BUa]]],['32735',Amc+AuM,[[U,'WGS 84 / UTM zone 35S',ClU,BUd,BUX,BWP,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32735']]],[[U,'WGS_1984_UTM_Zone_35S',Cbp,BUd,BUX,BWP,BUg,BUc,BUo,BUa]]],['32734',Anl+AuM,[[U,'WGS 84 / UTM zone 34S',ClU,BUd,BUX,BWR,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32734']]],[[U,'WGS_1984_UTM_Zone_34S',Cbp,BUd,BUX,BWR,BUg,BUc,BUo,BUa]]],['32733',AmO+AuM,[[U,'WGS 84 / UTM zone 33S',ClU,BUd,BUX,BWH,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32733']]],[[U,'WGS_1984_UTM_Zone_33S',Cbp,BUd,BUX,BWH,BUg,BUc,BUo,BUa]]],['32732',Alu+AuM,[[U,'WGS 84 / UTM zone 32S',ClU,BUd,BUX,BWO,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32732']]],[[U,'WGS_1984_UTM_Zone_32S',Cbp,BUd,BUX,BWO,BUg,BUc,BUo,BUa]]],['32731',Amw+AuM,[[U,'WGS 84 / UTM zone 31S',ClU,BUd,BUX,BXt,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32731']]],[[U,'WGS_1984_UTM_Zone_31S',Cbp,BUd,BUX,BXt,BUg,BUc,BUo,BUa]]],['32730',AmR+AuM,[[U,'WGS 84 / UTM zone 30S',ClU,BUd,BUX,Bak,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32730']]],[[U,'WGS_1984_UTM_Zone_30S',Cbp,BUd,BUX,Bak,BUg,BUc,BUo,BUa]]],['3273',AqB+Ace+Aky,[[U,'WGS 84 / SCAR IMW ST53-56',ClU,BVG,BZR,BZQ,BVX,Bnz,BUy,BUT,CVy,BUj,BUm,[B,K,'3273']]],[[U,'WGS_84_SCAR_IMW_ST53_56',Cbp,BVD,BZR,BZQ,BVX,Bnz,BUy,BUT,BUa]]],['32729',AmJ+AuM,[[U,'WGS 84 / UTM zone 29S',ClU,BUd,BUX,BYQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32729']]],[[U,'WGS_1984_UTM_Zone_29S',Cbp,BUd,BUX,BYQ,BUg,BUc,BUo,BUa]]],['32728',Aly+AuM,[[U,'WGS 84 / UTM zone 28S',ClU,BUd,BUX,BYE,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32728']]],[[U,'WGS_1984_UTM_Zone_28S',Cbp,BUd,BUX,BYE,BUg,BUc,BUo,BUa]]],['32727',Aou+AuM,[[U,'WGS 84 / UTM zone 27S',ClU,BUd,BUX,Bee,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32727']]],[[U,'WGS_1984_UTM_Zone_27S',Cbp,BUd,BUX,Bee,BUg,BUc,BUo,BUa]]],['32726',AmS+AuM,[[U,'WGS 84 / UTM zone 26S',ClU,BUd,BUX,BaV,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32726']]],[[U,'WGS_1984_UTM_Zone_26S',Cbp,BUd,BUX,BaV,BUg,BUc,BUo,BUa]]],['32725',Any+AuM,[[U,'WGS 84 / UTM zone 25S',ClU,BUd,BUX,BZx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32725']]],[[U,'WGS_1984_UTM_Zone_25S',Cbp,BUd,BUX,BZx,BUg,BUc,BUo,BUa]]],['32724',AoC+AuM,[[U,'WGS 84 / UTM zone 24S',ClU,BUd,BUX,BYx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32724']]],[[U,'WGS_1984_UTM_Zone_24S',Cbp,BUd,BUX,BYx,BUg,BUc,BUo,BUa]]],['32723',Amp+AuM,[[U,'WGS 84 / UTM zone 23S',ClU,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32723']]],[[U,'WGS_1984_UTM_Zone_23S',Cbp,BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['32722',Alb+AuM,[[U,'WGS 84 / UTM zone 22S',ClU,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32722']]],[[U,'WGS_1984_UTM_Zone_22S',Cbp,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['32721',AlI+AuM,[[U,'WGS 84 / UTM zone 21S',ClU,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32721']]],[[U,'WGS_1984_UTM_Zone_21S',Cbp,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['32720',Aku+AuM,[[U,'WGS 84 / UTM zone 20S',ClU,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32720']]],[[U,'WGS_1984_UTM_Zone_20S',Cbp,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['3272',AqB+nK+Aky,[[U,'WGS 84 / SCAR IMW ST49-52',ClU,BVG,BZR,BZQ,BVX,BbG,BUy,BUT,CVy,BUj,BUm,[B,K,'3272']]],[[U,'WGS_84_SCAR_IMW_ST49_52',Cbp,BVD,BZR,BZQ,BVX,BbG,BUy,BUT,BUa]]],['32719',AlG+AuM,[[U,'WGS 84 / UTM zone 19S',ClU,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32719']]],[[U,'WGS_1984_UTM_Zone_19S',Cbp,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['32718',AlJ+AuM,[[U,'WGS 84 / UTM zone 18S',ClU,BUd,BUX,BWo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32718']]],[[U,'WGS_1984_UTM_Zone_18S',Cbp,BUd,BUX,BWo,BUg,BUc,BUo,BUa]]],['32717',AlW+AuM,[[U,'WGS 84 / UTM zone 17S',ClU,BUd,BUX,BVm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32717']]],[[U,'WGS_1984_UTM_Zone_17S',Cbp,BUd,BUX,BVm,BUg,BUc,BUo,BUa]]],['32716',AnW+AuM,[[U,'WGS 84 / UTM zone 16S',ClU,BUd,BUX,BXS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32716']]],[[U,'WGS_1984_UTM_Zone_16S',Cbp,BUd,BUX,BXS,BUg,BUc,BUo,BUa]]],['32715',AnV+AuM,[[U,'WGS 84 / UTM zone 15S',ClU,BUd,BUX,BYT,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32715']]],[[U,'WGS_1984_UTM_Zone_15S',Cbp,BUd,BUX,BYT,BUg,BUc,BUo,BUa]]],['32714',AoG+AuM,[[U,'WGS 84 / UTM zone 14S',ClU,BUd,BUX,BXU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32714']]],[[U,'WGS_1984_UTM_Zone_14S',Cbp,BUd,BUX,BXU,BUg,BUc,BUo,BUa]]],['32713',AoF+AuM,[[U,'WGS 84 / UTM zone 13S',ClU,BUd,BUX,BZS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32713']]],[[U,'WGS_1984_UTM_Zone_13S',Cbp,BUd,BUX,BZS,BUg,BUc,BUo,BUa]]],['32712',AoE+AuM,[[U,'WGS 84 / UTM zone 12S',ClU,BUd,BUX,BXs,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32712']]],[[U,'WGS_1984_UTM_Zone_12S',Cbp,BUd,BUX,BXs,BUg,BUc,BUo,BUa]]],['32711',AoD+AuM,[[U,'WGS 84 / UTM zone 11S',ClU,BUd,BUX,BXx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32711']]],[[U,'WGS_1984_UTM_Zone_11S',Cbp,BUd,BUX,BXx,BUg,BUc,BUo,BUa]]],['32710',Amy+AuM,[[U,'WGS 84 / UTM zone 10S',ClU,BUd,BUX,Bap,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32710']]],[[U,'WGS_1984_UTM_Zone_10S',Cbp,BUd,BUX,Bap,BUg,BUc,BUo,BUa]]],['3271',AqB+tA+Aky,[[U,'WGS 84 / SCAR IMW ST45-48',ClU,BVG,BZR,BZQ,BVX,BbF,BUy,BUT,CVy,BUj,BUm,[B,K,'3271']]],[[U,'WGS_84_SCAR_IMW_ST45_48',Cbp,BVD,BZR,BZQ,BVX,BbF,BUy,BUT,BUa]]],['32709',AV+' +zone=9'+AuM,[[U,'WGS 84 / UTM zone 9S',ClU,BUd,BUX,BaA,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32709']]],[[U,'WGS_1984_UTM_Zone_9S',Cbp,BUd,BUX,BaA,BUg,BUc,BUo,BUa]]],['32708',AV+' +zone=8'+AuM,[[U,'WGS 84 / UTM zone 8S',ClU,BUd,BUX,BZz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32708']]],[[U,'WGS_1984_UTM_Zone_8S',Cbp,BUd,BUX,BZz,BUg,BUc,BUo,BUa]]],['32707',AV+' +zone=7'+AuM,[[U,'WGS 84 / UTM zone 7S',ClU,BUd,BUX,BZn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32707']]],[[U,'WGS_1984_UTM_Zone_7S',Cbp,BUd,BUX,BZn,BUg,BUc,BUo,BUa]]],['32706',AV+' +zone=6'+AuM,[[U,'WGS 84 / UTM zone 6S',ClU,BUd,BUX,BYy,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32706']]],[[U,'WGS_1984_UTM_Zone_6S',Cbp,BUd,BUX,BYy,BUg,BUc,BUo,BUa]]],['32705',AV+' +zone=5'+AuM,[[U,'WGS 84 / UTM zone 5S',ClU,BUd,BUX,BZK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32705']]],[[U,'WGS_1984_UTM_Zone_5S',Cbp,BUd,BUX,BZK,BUg,BUc,BUo,BUa]]],['32704',AV+' +zone=4'+AuM,[[U,'WGS 84 / UTM zone 4S',ClU,BUd,BUX,Bac,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32704']]],[[U,'WGS_1984_UTM_Zone_4S',Cbp,BUd,BUX,Bac,BUg,BUc,BUo,BUa]]],['32703',AV+' +zone=3'+AuM,[[U,'WGS 84 / UTM zone 3S',ClU,BUd,BUX,BaZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32703']]],[[U,'WGS_1984_UTM_Zone_3S',Cbp,BUd,BUX,BaZ,BUg,BUc,BUo,BUa]]],['32702',AV+' +zone=2'+AuM,[[U,'WGS 84 / UTM zone 2S',ClU,BUd,BUX,BYV,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32702']]],[[U,'WGS_1984_UTM_Zone_2S',Cbp,BUd,BUX,BYV,BUg,BUc,BUo,BUa]]],['32701',AV+' +zone=1'+AuM,[[U,'WGS 84 / UTM zone 1S',ClU,BUd,BUX,BYF,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32701']]],[[U,'WGS_1984_UTM_Zone_1S',Cbp,BUd,BUX,BYF,BUg,BUc,BUo,BUa]]],['3270',AqB+' +lon_0=72'+Aky,[[U,'WGS 84 / SCAR IMW ST41-44',ClU,BVG,BZR,BZQ,BVX,Bny,BUy,BUT,CVy,BUj,BUm,[B,K,'3270']]],[[U,'WGS_84_SCAR_IMW_ST41_44',Cbp,BVD,BZR,BZQ,BVX,Bny,BUy,BUT,BUa]]],['3269',AqB+AXM+Aky,[[U,'WGS 84 / SCAR IMW ST37-40',ClU,BVG,BZR,BZQ,BVX,BkL,BUy,BUT,CVy,BUj,BUm,[B,K,'3269']]],[[U,'WGS_84_SCAR_IMW_ST37_40',Cbp,BVD,BZR,BZQ,BVX,BkL,BUy,BUT,BUa]]],['3268',AqB+fO+Aky,[[U,'WGS 84 / SCAR IMW ST33-36',ClU,BVG,BZR,BZQ,BVX,BYU,BUy,BUT,CVy,BUj,BUm,[B,K,'3268']]],[[U,'WGS_84_SCAR_IMW_ST33_36',Cbp,BVD,BZR,BZQ,BVX,BYU,BUy,BUT,BUa]]],['3267',AqB+BCY+Ajx+q+a,[[U,'WGS 84 / SCAR IMW ST29-32',ClU,BVG,BZR,BZQ,BVX,BYA,BUy,BUT,CVy,BUj,BUm,[B,K,'3267']]],[[U,'WGS_84_SCAR_IMW_ST29_32',Cbp,BVD,BZR,BZQ,BVX,BYA,BUy,BUT,BUa]]],['32667',BIW+BLl,[[U,'WGS 84 / BLM 17N'+DE,ClU,BUd,BUX,BVm,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32667']]],[[U,'WGS_84_BLM_17N_ftUS',Cbp,BUd,BUX,BVm,BUg,BWI,BUT,BUr]]],['32666',BIV+BLl,[[U,'WGS 84 / BLM 16N'+DE,ClU,BUd,BUX,BXS,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32666']]],[[U,'WGS_84_BLM_16N_ftUS',Cbp,BUd,BUX,BXS,BUg,BWI,BUT,BUr]]],['32665',BHA+BLl,[[U,'WGS 84 / BLM 15N'+DE,ClU,BUd,BUX,BYT,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32665']]],[[U,'WGS_84_BLM_15N_ftUS',Cbp,BUd,BUX,BYT,BUg,BWI,BUT,BUr]]],['32664',AjX+kA+BLl,[[U,'WGS 84 / BLM 14N'+DE,ClU,BUd,BUX,BXU,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32664']]],[[U,'WGS_84_BLM_14N_ftUS',Cbp,BUd,BUX,BXU,BUg,BWI,BUT,BUr]]],['32661',BEu+BLq,[[U,'WGS 84 / UPS'+QM+' (N,E)',ClU,BcF,Bcw,BYA,BoS,BVW,BYH,CVy,[B,K,'32661']]],[[U,'WGS_84_UPS_North_N_E',Cbp,BuP,Buq,BYA,BVW,BYH,BUa]]],['32660',Ame+Akk,[[U,'WGS 84 / UTM zone 60N',ClU,BUd,BUX,BXo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32660']]],[[U,'WGS_1984_UTM_Zone_60N',Cbp,BUd,BUX,BXo,BUg,BUc,BUT,BUa]]],['3266',AqB+' +lon_0=-24'+Aky,[[U,'WGS 84 / SCAR IMW ST25-28',ClU,BVG,BZR,BZQ,BVX,CIS,BUy,BUT,CVy,BUj,BUm,[B,K,'3266']]],[[U,'WGS_84_SCAR_IMW_ST25_28',Cbp,BVD,BZR,BZQ,BVX,CIS,BUy,BUT,BUa]]],['32659',AoK+Akk,[[U,'WGS 84 / UTM zone 59N',ClU,BUd,BUX,BXj,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32659']]],[[U,'WGS_1984_UTM_Zone_59N',Cbp,BUd,BUX,BXj,BUg,BUc,BUT,BUa]]],['32658',Aml+Akk,[[U,'WGS 84 / UTM zone 58N',ClU,BUd,BUX,BXW,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32658']]],[[U,'WGS_1984_UTM_Zone_58N',Cbp,BUd,BUX,BXW,BUg,BUc,BUT,BUa]]],['32657',Aos+Akk,[[U,'WGS 84 / UTM zone 57N',ClU,BUd,BUX,BZl,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32657']]],[[U,'WGS_1984_UTM_Zone_57N',Cbp,BUd,BUX,BZl,BUg,BUc,BUT,BUa]]],['32656',AoS+Akk,[[U,'WGS 84 / UTM zone 56N',ClU,BUd,BUX,BYu,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32656']]],[[U,'WGS_1984_UTM_Zone_56N',Cbp,BUd,BUX,BYu,BUg,BUc,BUT,BUa]]],['32655',Amg+Akk,[[U,'WGS 84 / UTM zone 55N',ClU,BUd,BUX,BYW,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32655']]],[[U,'WGS_1984_UTM_Zone_55N',Cbp,BUd,BUX,BYW,BUg,BUc,BUT,BUa]]],['32654',AoI+Akk,[[U,'WGS 84 / UTM zone 54N',ClU,BUd,BUX,BYK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32654']]],[[U,'WGS_1984_UTM_Zone_54N',Cbp,BUd,BUX,BYK,BUg,BUc,BUT,BUa]]],['32653',AmT+Akk,[[U,'WGS 84 / UTM zone 53N',ClU,BUd,BUX,BWd,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32653']]],[[U,'WGS_1984_UTM_Zone_53N',Cbp,BUd,BUX,BWd,BUg,BUc,BUT,BUa]]],['32652',Ank+Akk,[[U,'WGS 84 / UTM zone 52N',ClU,BUd,BUX,BWQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32652']]],[[U,'WGS_1984_UTM_Zone_52N',Cbp,BUd,BUX,BWQ,BUg,BUc,BUT,BUa]]],['32651',AnJ+Akk,[[U,'WGS 84 / UTM zone 51N',ClU,BUd,BUX,BWU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32651']]],[[U,'WGS_1984_UTM_Zone_51N',Cbp,BUd,BUX,BWU,BUg,BUc,BUT,BUa]]],['32650',AnS+Akk,[[U,'WGS 84 / UTM zone 50N',ClU,BUd,BUX,BWS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32650']]],[[U,'WGS_1984_UTM_Zone_50N',Cbp,BUd,BUX,BWS,BUg,BUc,BUT,BUa]]],['3265',AqB+' +lon_0=-48'+Aky,[[U,'WGS 84 / SCAR IMW ST21-24',ClU,BVG,BZR,BZQ,BVX,[A,E,bi],BUy,BUT,CVy,BUj,BUm,[B,K,'3265']]],[[U,'WGS_84_SCAR_IMW_ST21_24',Cbp,BVD,BZR,BZQ,BVX,[A,E,bi],BUy,BUT,BUa]]],['32649',AnE+Akk,[[U,'WGS 84 / UTM zone 49N',ClU,BUd,BUX,BWX,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32649']]],[[U,'WGS_1984_UTM_Zone_49N',Cbp,BUd,BUX,BWX,BUg,BUc,BUT,BUa]]],['32648',AnD+Akk,[[U,'WGS 84 / UTM zone 48N',ClU,BUd,BUX,BWK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32648']]],[[U,'WGS_1984_UTM_Zone_48N',Cbp,BUd,BUX,BWK,BUg,BUc,BUT,BUa]]],['32647',AoJ+Akk,[[U,'WGS 84 / UTM zone 47N',ClU,BUd,BUX,BWf,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32647']]],[[U,'WGS_1984_UTM_Zone_47N',Cbp,BUd,BUX,BWf,BUg,BUc,BUT,BUa]]],['32646',AnA+Akk,[[U,'WGS 84 / UTM zone 46N',ClU,BUd,BUX,BWk,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32646']]],[[U,'WGS_1984_UTM_Zone_46N',Cbp,BUd,BUX,BWk,BUg,BUc,BUT,BUa]]],['32645',AV+' +zone=45'+Akk,[[U,'WGS 84 / UTM zone 45N',ClU,BUd,BUX,BXK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32645']]],[[U,'WGS_1984_UTM_Zone_45N',Cbp,BUd,BUX,BXK,BUg,BUc,BUT,BUa]]],['32644',AV+' +zone=44'+Akk,[[U,'WGS 84 / UTM zone 44N',ClU,BUd,BUX,BWz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32644']]],[[U,'WGS_1984_UTM_Zone_44N',Cbp,BUd,BUX,BWz,BUg,BUc,BUT,BUa]]],['32643',ApL+Akk,[[U,'WGS 84 / UTM zone 43N',ClU,BUd,BUX,BWs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32643']]],[[U,'WGS_1984_UTM_Zone_43N',Cbp,BUd,BUX,BWs,BUg,BUc,BUT,BUa]]],['32642',Aob+Akk,[[U,'WGS 84 / UTM zone 42N',ClU,BUd,BUX,BZh,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32642']]],[[U,'WGS_1984_UTM_Zone_42N',Cbp,BUd,BUX,BZh,BUg,BUc,BUT,BUa]]],['32641',Aoc+Akk,[[U,'WGS 84 / UTM zone 41N',ClU,BUd,BUX,BZN,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32641']]],[[U,'WGS_1984_UTM_Zone_41N',Cbp,BUd,BUX,BZN,BUg,BUc,BUT,BUa]]],['32640',AnK+Akk,[[U,'WGS 84 / UTM zone 40N',ClU,BUd,BUX,BXz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32640']]],[[U,'WGS_1984_UTM_Zone_40N',Cbp,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['3264',AqB+Acc+Aky,[[U,'WGS 84 / SCAR IMW ST17-20',ClU,BVG,BZR,BZQ,BVX,BoF,BUy,BUT,CVy,BUj,BUm,[B,K,'3264']]],[[U,'WGS_84_SCAR_IMW_ST17_20',Cbp,BVD,BZR,BZQ,BVX,BoF,BUy,BUT,BUa]]],['32639',Alt+Akk,[[U,'WGS 84 / UTM zone 39N',ClU,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32639']]],[[U,'WGS_1984_UTM_Zone_39N',Cbp,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['32638',AmA+Akk,[[U,'WGS 84 / UTM zone 38N',ClU,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32638']]],[[U,'WGS_1984_UTM_Zone_38N',Cbp,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['32637',AmP+Akk,[[U,'WGS 84 / UTM zone 37N',ClU,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32637']]],[[U,'WGS_1984_UTM_Zone_37N',Cbp,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['32636',AnF+Akk,[[U,'WGS 84 / UTM zone 36N',ClU,BUd,BUX,BWg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32636']]],[CpX]],['32635',Amc+Akk,[[U,'WGS 84 / UTM zone 35N',ClU,BUd,BUX,BWP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32635']]],[CpW]],['32634',Anl+Akk,[[U,'WGS 84 / UTM zone 34N',ClU,BUd,BUX,BWR,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32634']]],[[U,'WGS_1984_UTM_Zone_34N',Cbp,BUd,BUX,BWR,BUg,BUc,BUT,BUa]]],['32632',Alu+Akk,[[U,'WGS 84 / UTM zone 32N',ClU,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32632']]],[[U,'WGS_1984_UTM_Zone_32N',Cbp,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['32631',Amw+Akk,[[U,'WGS 84 / UTM zone 31N',ClU,BUd,BUX,BXt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32631']]],[[U,'WGS_1984_UTM_Zone_31N',Cbp,BUd,BUX,BXt,BUg,BUc,BUT,BUa]]],['32630',AmR+Akk,[[U,'WGS 84 / UTM zone 30N',ClU,BUd,BUX,Bak,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32630']]],[[U,'WGS_1984_UTM_Zone_30N',Cbp,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['3263',AqB+BDd+Ajx+q+a,[[U,'WGS 84 / SCAR IMW ST13-16',ClU,BVG,BZR,BZQ,BVX,BlA,BUy,BUT,CVy,BUj,BUm,[B,K,'3263']]],[[U,'WGS_84_SCAR_IMW_ST13_16',Cbp,BVD,BZR,BZQ,BVX,BlA,BUy,BUT,BUa]]],['32629',AmJ+Akk,[[U,'WGS 84 / UTM zone 29N',ClU,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32629']]],[[U,'WGS_1984_UTM_Zone_29N',Cbp,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['32628',Aly+Akk,[[U,'WGS 84 / UTM zone 28N',ClU,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32628']]],[[U,'WGS_1984_UTM_Zone_28N',Cbp,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['32627',Aou+Akk,[[U,'WGS 84 / UTM zone 27N',ClU,BUd,BUX,Bee,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32627']]],[[U,'WGS_1984_UTM_Zone_27N',Cbp,BUd,BUX,Bee,BUg,BUc,BUT,BUa]]],['32626',AmS+Akk,[[U,'WGS 84 / UTM zone 26N',ClU,BUd,BUX,BaV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32626']]],[[U,'WGS_1984_UTM_Zone_26N',Cbp,BUd,BUX,BaV,BUg,BUc,BUT,BUa]]],['32625',Any+Akk,[[U,'WGS 84 / UTM zone 25N',ClU,BUd,BUX,BZx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32625']]],[[U,'WGS_1984_UTM_Zone_25N',Cbp,BUd,BUX,BZx,BUg,BUc,BUT,BUa]]],['32624',AoC+Akk,[[U,'WGS 84 / UTM zone 24N',ClU,BUd,BUX,BYx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32624']]],[[U,'WGS_1984_UTM_Zone_24N',Cbp,BUd,BUX,BYx,BUg,BUc,BUT,BUa]]],['32623',Amp+Akk,[[U,'WGS 84 / UTM zone 23N',ClU,BUd,BUX,BYg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32623']]],[[U,'WGS_1984_UTM_Zone_23N',Cbp,BUd,BUX,BYg,BUg,BUc,BUT,BUa]]],['32622',Alb+Akk,[[U,'WGS 84 / UTM zone 22N',ClU,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32622']]],[[U,'WGS_1984_UTM_Zone_22N',Cbp,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['32621',AlI+Akk,[[U,'WGS 84 / UTM zone 21N',ClU,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32621']]],[[U,'WGS_1984_UTM_Zone_21N',Cbp,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['32620',Aku+Akk,[[U,'WGS 84 / UTM zone 20N',ClU,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32620']]],[[U,'WGS_1984_UTM_Zone_20N',Cbp,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['3262',AqB+BDf+Ajx+q+a,[[U,'WGS 84 / SCAR IMW ST09-12',ClU,BVG,BZR,BZQ,BVX,BlB,BUy,BUT,CVy,BUj,BUm,[B,K,'3262']]],[[U,'WGS_84_SCAR_IMW_ST09_12',Cbp,BVD,BZR,BZQ,BVX,BlB,BUy,BUT,BUa]]],['32619',AlG+Akk,[[U,'WGS 84 / UTM zone 19N',ClU,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32619']]],[[U,'WGS_1984_UTM_Zone_19N',Cbp,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['32618',AlJ+Akk,[[U,'WGS 84 / UTM zone 18N',ClU,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32618']]],[[U,'WGS_1984_UTM_Zone_18N',Cbp,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['32617',AlW+Akk,[[U,'WGS 84 / UTM zone 17N',ClU,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32617']]],[[U,'WGS_1984_UTM_Zone_17N',Cbp,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['32616',AnW+Akk,[[U,'WGS 84 / UTM zone 16N',ClU,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32616']]],[[U,'WGS_1984_UTM_Zone_16N',Cbp,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['32615',AnV+Akk,[[U,'WGS 84 / UTM zone 15N',ClU,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32615']]],[[U,'WGS_1984_UTM_Zone_15N',Cbp,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['32614',AoG+Akk,[[U,'WGS 84 / UTM zone 14N',ClU,BUd,BUX,BXU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32614']]],[[U,'WGS_1984_UTM_Zone_14N',Cbp,BUd,BUX,BXU,BUg,BUc,BUT,BUa]]],['32613',AoF+Akk,[[U,'WGS 84 / UTM zone 13N',ClU,BUd,BUX,BZS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32613']]],[[U,'WGS_1984_UTM_Zone_13N',Cbp,BUd,BUX,BZS,BUg,BUc,BUT,BUa]]],['32612',AoE+Akk,[[U,'WGS 84 / UTM zone 12N',ClU,BUd,BUX,BXs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32612']]],[[U,'WGS_1984_UTM_Zone_12N',Cbp,BUd,BUX,BXs,BUg,BUc,BUT,BUa]]],['32611',AoD+Akk,[[U,'WGS 84 / UTM zone 11N',ClU,BUd,BUX,BXx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32611']]],[[U,'WGS_1984_UTM_Zone_11N',Cbp,BUd,BUX,BXx,BUg,BUc,BUT,BUa]]],['32610',Amy+Akk,[[U,'WGS 84 / UTM zone 10N',ClU,BUd,BUX,Bap,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32610']]],[[U,'WGS_1984_UTM_Zone_10N',Cbp,BUd,BUX,Bap,BUg,BUc,BUT,BUa]]],['3261',AqB+' +lon_0=-144'+Aky,[[U,'WGS 84 / SCAR IMW ST05-08',ClU,BVG,BZR,BZQ,BVX,CPS,BUy,BUT,CVy,BUj,BUm,[B,K,'3261']]],[[U,'WGS_84_SCAR_IMW_ST05_08',Cbp,BVD,BZR,BZQ,BVX,CPS,BUy,BUT,BUa]]],['32609',AV+' +zone=9'+Akk,[[U,'WGS 84 / UTM zone 9N',ClU,BUd,BUX,BaA,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32609']]],[[U,'WGS_1984_UTM_Zone_9N',Cbp,BUd,BUX,BaA,BUg,BUc,BUT,BUa]]],['32608',AV+' +zone=8'+Akk,[[U,'WGS 84 / UTM zone 8N',ClU,BUd,BUX,BZz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32608']]],[[U,'WGS_1984_UTM_Zone_8N',Cbp,BUd,BUX,BZz,BUg,BUc,BUT,BUa]]],['32607',AV+' +zone=7'+Akk,[[U,'WGS 84 / UTM zone 7N',ClU,BUd,BUX,BZn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32607']]],[[U,'WGS_1984_UTM_Zone_7N',Cbp,BUd,BUX,BZn,BUg,BUc,BUT,BUa]]],['32606',AV+' +zone=6'+Akk,[[U,'WGS 84 / UTM zone 6N',ClU,BUd,BUX,BYy,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32606']]],[[U,'WGS_1984_UTM_Zone_6N',Cbp,BUd,BUX,BYy,BUg,BUc,BUT,BUa]]],['32605',AV+' +zone=5'+Akk,[[U,'WGS 84 / UTM zone 5N',ClU,BUd,BUX,BZK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32605']]],[[U,'WGS_1984_UTM_Zone_5N',Cbp,BUd,BUX,BZK,BUg,BUc,BUT,BUa]]],['32604',AV+' +zone=4'+Akk,[[U,'WGS 84 / UTM zone 4N',ClU,BUd,BUX,Bac,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32604']]],[[U,'WGS_1984_UTM_Zone_4N',Cbp,BUd,BUX,Bac,BUg,BUc,BUT,BUa]]],['32603',AV+' +zone=3'+Akk,[[U,'WGS 84 / UTM zone 3N',ClU,BUd,BUX,BaZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32603']]],[[U,'WGS_1984_UTM_Zone_3N',Cbp,BUd,BUX,BaZ,BUg,BUc,BUT,BUa]]],['32602',AV+' +zone=2'+Akk,[[U,'WGS 84 / UTM zone 2N',ClU,BUd,BUX,BYV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32602']]],[[U,'WGS_1984_UTM_Zone_2N',Cbp,BUd,BUX,BYV,BUg,BUc,BUT,BUa]]],['32601',AV+' +zone=1'+Akk,[[U,'WGS 84 / UTM zone 1N',ClU,BUd,BUX,BYF,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32601']]],[[U,'WGS_1984_UTM_Zone_1N',Cbp,BUd,BUX,BYF,BUg,BUc,BUT,BUa]]],['3260',AqB+ATd+Aky,[[U,'WGS 84 / SCAR IMW ST01-04',ClU,BVG,BZR,BZQ,BVX,Bnx,BUy,BUT,CVy,BUj,BUm,[B,K,'3260']]],[[U,'WGS_84_SCAR_IMW_ST01_04',Cbp,BVD,BZR,BZQ,BVX,Bnx,BUy,BUT,BUa]]],['3259',Apg+pw+Aky,[[U,'WGS 84 / SCAR IMW SS58-60',ClU,BVG,BZO,BZI,BVX,BXj,BUy,BUT,CVy,BUj,BUm,[B,K,'3259']]],[[U,'WGS_84_SCAR_IMW_SS58_60',Cbp,BVD,BZO,BZI,BVX,BXj,BUy,BUT,BUa]]],['3258',Apg+vu+Aky,[[U,'WGS 84 / SCAR IMW SS55-57',ClU,BVG,BZO,BZI,BVX,BYu,BUy,BUT,CVy,BUj,BUm,[B,K,'3258']]],[[U,'WGS_84_SCAR_IMW_SS55_57',Cbp,BVD,BZO,BZI,BVX,BYu,BUy,BUT,BUa]]],['3257',Apg+Xi+Aky,[[U,'WGS 84 / SCAR IMW SS52-54',ClU,BVG,BZO,BZI,BVX,BWd,BUy,BUT,CVy,BUj,BUm,[B,K,'3257']]],[[U,'WGS_84_SCAR_IMW_SS52_54',Cbp,BVD,BZO,BZI,BVX,BWd,BUy,BUT,BUa]]],['32560',Ame+AuI,[[U,'WGS'+Xv+' / UTM zone 60S',Clb,BUd,BUX,BXo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32560']]],[[U,'WGS_72BE_UTM_zone_60S',CcC,BUd,BUX,BXo,BUg,BUc,BUo,BUa]]],['3256',Apg+Xj+Aky,[[U,'WGS 84 / SCAR IMW SS49-51',ClU,BVG,BZO,BZI,BVX,BWS,BUy,BUT,CVy,BUj,BUm,[B,K,'3256']]],[[U,'WGS_84_SCAR_IMW_SS49_51',Cbp,BVD,BZO,BZI,BVX,BWS,BUy,BUT,BUa]]],['32559',AoK+AuI,[[U,'WGS'+Xv+' / UTM zone 59S',Clb,BUd,BUX,BXj,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32559']]],[[U,'WGS_72BE_UTM_zone_59S',CcC,BUd,BUX,BXj,BUg,BUc,BUo,BUa]]],['32558',Aml+AuI,[[U,'WGS'+Xv+' / UTM zone 58S',Clb,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32558']]],[[U,'WGS_72BE_UTM_zone_58S',CcC,BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['32557',Aos+AuI,[[U,'WGS'+Xv+' / UTM zone 57S',Clb,BUd,BUX,BZl,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32557']]],[[U,'WGS_72BE_UTM_zone_57S',CcC,BUd,BUX,BZl,BUg,BUc,BUo,BUa]]],['32556',AoS+AuI,[[U,'WGS'+Xv+' / UTM zone 56S',Clb,BUd,BUX,BYu,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32556']]],[[U,'WGS_72BE_UTM_zone_56S',CcC,BUd,BUX,BYu,BUg,BUc,BUo,BUa]]],['32555',Amg+AuI,[[U,'WGS'+Xv+' / UTM zone 55S',Clb,BUd,BUX,BYW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32555']]],[[U,'WGS_72BE_UTM_zone_55S',CcC,BUd,BUX,BYW,BUg,BUc,BUo,BUa]]],['32554',AoI+AuI,[[U,'WGS'+Xv+' / UTM zone 54S',Clb,BUd,BUX,BYK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32554']]],[[U,'WGS_72BE_UTM_zone_54S',CcC,BUd,BUX,BYK,BUg,BUc,BUo,BUa]]],['32553',AmT+AuI,[[U,'WGS'+Xv+' / UTM zone 53S',Clb,BUd,BUX,BWd,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32553']]],[[U,'WGS_72BE_UTM_zone_53S',CcC,BUd,BUX,BWd,BUg,BUc,BUo,BUa]]],['32552',Ank+AuI,[[U,'WGS'+Xv+' / UTM zone 52S',Clb,BUd,BUX,BWQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32552']]],[[U,'WGS_72BE_UTM_zone_52S',CcC,BUd,BUX,BWQ,BUg,BUc,BUo,BUa]]],['32551',AnJ+AuI,[[U,'WGS'+Xv+' / UTM zone 51S',Clb,BUd,BUX,BWU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32551']]],[[U,'WGS_72BE_UTM_zone_51S',CcC,BUd,BUX,BWU,BUg,BUc,BUo,BUa]]],['32550',AnS+AuI,[[U,'WGS'+Xv+' / UTM zone 50S',Clb,BUd,BUX,BWS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32550']]],[[U,'WGS_72BE_UTM_zone_50S',CcC,BUd,BUX,BWS,BUg,BUc,BUo,BUa]]],['3255',Apg+cm+Aky,[[U,'WGS 84 / SCAR IMW SS46-48',ClU,BVG,BZO,BZI,BVX,BWf,BUy,BUT,CVy,BUj,BUm,[B,K,'3255']]],[[U,'WGS_84_SCAR_IMW_SS46_48',Cbp,BVD,BZO,BZI,BVX,BWf,BUy,BUT,BUa]]],['32549',AnE+AuI,[[U,'WGS'+Xv+' / UTM zone 49S',Clb,BUd,BUX,BWX,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32549']]],[[U,'WGS_72BE_UTM_zone_49S',CcC,BUd,BUX,BWX,BUg,BUc,BUo,BUa]]],['32548',AnD+AuI,[[U,'WGS'+Xv+' / UTM zone 48S',Clb,BUd,BUX,BWK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32548']]],[[U,'WGS_72BE_UTM_zone_48S',CcC,BUd,BUX,BWK,BUg,BUc,BUo,BUa]]],['32547',AoJ+AuI,[[U,'WGS'+Xv+' / UTM zone 47S',Clb,BUd,BUX,BWf,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32547']]],[[U,'WGS_72BE_UTM_zone_47S',CcC,BUd,BUX,BWf,BUg,BUc,BUo,BUa]]],['32546',AnA+AuI,[[U,'WGS'+Xv+' / UTM zone 46S',Clb,BUd,BUX,BWk,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32546']]],[[U,'WGS_72BE_UTM_zone_46S',CcC,BUd,BUX,BWk,BUg,BUc,BUo,BUa]]],['32545',AV+' +zone=45'+AuI,[[U,'WGS'+Xv+' / UTM zone 45S',Clb,BUd,BUX,BXK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32545']]],[[U,'WGS_72BE_UTM_zone_45S',CcC,BUd,BUX,BXK,BUg,BUc,BUo,BUa]]],['32544',AV+' +zone=44'+AuI,[[U,'WGS'+Xv+' / UTM zone 44S',Clb,BUd,BUX,BWz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32544']]],[[U,'WGS_72BE_UTM_zone_44S',CcC,BUd,BUX,BWz,BUg,BUc,BUo,BUa]]],['32543',ApL+AuI,[[U,'WGS'+Xv+' / UTM zone 43S',Clb,BUd,BUX,BWs,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32543']]],[[U,'WGS_72BE_UTM_zone_43S',CcC,BUd,BUX,BWs,BUg,BUc,BUo,BUa]]],['32542',Aob+AuI,[[U,'WGS'+Xv+' / UTM zone 42S',Clb,BUd,BUX,BZh,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32542']]],[[U,'WGS_72BE_UTM_zone_42S',CcC,BUd,BUX,BZh,BUg,BUc,BUo,BUa]]],['32541',Aoc+AuI,[[U,'WGS'+Xv+' / UTM zone 41S',Clb,BUd,BUX,BZN,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32541']]],[[U,'WGS_72BE_UTM_zone_41S',CcC,BUd,BUX,BZN,BUg,BUc,BUo,BUa]]],['32540',AnK+AuI,[[U,'WGS'+Xv+' / UTM zone 40S',Clb,BUd,BUX,BXz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32540']]],[[U,'WGS_72BE_UTM_zone_40S',CcC,BUd,BUX,BXz,BUg,BUc,BUo,BUa]]],['3254',Apg+cn+Aky,[[U,'WGS 84 / SCAR IMW SS43-45',ClU,BVG,BZO,BZI,BVX,BWz,BUy,BUT,CVy,BUj,BUm,[B,K,'3254']]],[[U,'WGS_84_SCAR_IMW_SS43_45',Cbp,BVD,BZO,BZI,BVX,BWz,BUy,BUT,BUa]]],['32539',Alt+AuI,[[U,'WGS'+Xv+' / UTM zone 39S',Clb,BUd,BUX,BWt,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32539']]],[[U,'WGS_72BE_UTM_zone_39S',CcC,BUd,BUX,BWt,BUg,BUc,BUo,BUa]]],['32538',AmA+AuI,[[U,'WGS'+Xv+' / UTM zone 38S',Clb,BUd,BUX,BWe,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32538']]],[[U,'WGS_72BE_UTM_zone_38S',CcC,BUd,BUX,BWe,BUg,BUc,BUo,BUa]]],['32537',AmP+AuI,[[U,'WGS'+Xv+' / UTM zone 37S',Clb,BUd,BUX,BWn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32537']]],[[U,'WGS_72BE_UTM_zone_37S',CcC,BUd,BUX,BWn,BUg,BUc,BUo,BUa]]],['32536',AnF+AuI,[[U,'WGS'+Xv+' / UTM zone 36S',Clb,BUd,BUX,BWg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32536']]],[[U,'WGS_72BE_UTM_zone_36S',CcC,BUd,BUX,BWg,BUg,BUc,BUo,BUa]]],['32535',Amc+AuI,[[U,'WGS'+Xv+' / UTM zone 35S',Clb,BUd,BUX,BWP,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32535']]],[[U,'WGS_72BE_UTM_zone_35S',CcC,BUd,BUX,BWP,BUg,BUc,BUo,BUa]]],['32534',Anl+AuI,[[U,'WGS'+Xv+' / UTM zone 34S',Clb,BUd,BUX,BWR,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32534']]],[[U,'WGS_72BE_UTM_zone_34S',CcC,BUd,BUX,BWR,BUg,BUc,BUo,BUa]]],['32533',AmO+AuI,[[U,'WGS'+Xv+' / UTM zone 33S',Clb,BUd,BUX,BWH,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32533']]],[[U,'WGS_72BE_UTM_zone_33S',CcC,BUd,BUX,BWH,BUg,BUc,BUo,BUa]]],['32532',Alu+AuI,[[U,'WGS'+Xv+' / UTM zone 32S',Clb,BUd,BUX,BWO,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32532']]],[[U,'WGS_72BE_UTM_zone_32S',CcC,BUd,BUX,BWO,BUg,BUc,BUo,BUa]]],['32531',Amw+AuI,[[U,'WGS'+Xv+' / UTM zone 31S',Clb,BUd,BUX,BXt,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32531']]],[[U,'WGS_72BE_UTM_zone_31S',CcC,BUd,BUX,BXt,BUg,BUc,BUo,BUa]]],['32530',AmR+AuI,[[U,'WGS'+Xv+' / UTM zone 30S',Clb,BUd,BUX,Bak,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32530']]],[[U,'WGS_72BE_UTM_zone_30S',CcC,BUd,BUX,Bak,BUg,BUc,BUo,BUa]]],['3253',Apg+AId+Aky,[[U,'WGS 84 / SCAR IMW SS40-42',ClU,BVG,BZO,BZI,BVX,BZN,BUy,BUT,CVy,BUj,BUm,[B,K,'3253']]],[[U,'WGS_84_SCAR_IMW_SS40_42',Cbp,BVD,BZO,BZI,BVX,BZN,BUy,BUT,BUa]]],['32529',AmJ+AuI,[[U,'WGS'+Xv+' / UTM zone 29S',Clb,BUd,BUX,BYQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32529']]],[[U,'WGS_72BE_UTM_zone_29S',CcC,BUd,BUX,BYQ,BUg,BUc,BUo,BUa]]],['32528',Aly+AuI,[[U,'WGS'+Xv+' / UTM zone 28S',Clb,BUd,BUX,BYE,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32528']]],[[U,'WGS_72BE_UTM_zone_28S',CcC,BUd,BUX,BYE,BUg,BUc,BUo,BUa]]],['32527',Aou+AuI,[[U,'WGS'+Xv+' / UTM zone 27S',Clb,BUd,BUX,Bee,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32527']]],[[U,'WGS_72BE_UTM_zone_27S',CcC,BUd,BUX,Bee,BUg,BUc,BUo,BUa]]],['32526',AmS+AuI,[[U,'WGS'+Xv+' / UTM zone 26S',Clb,BUd,BUX,BaV,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32526']]],[[U,'WGS_72BE_UTM_zone_26S',CcC,BUd,BUX,BaV,BUg,BUc,BUo,BUa]]],['32525',Any+AuI,[[U,'WGS'+Xv+' / UTM zone 25S',Clb,BUd,BUX,BZx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32525']]],[[U,'WGS_72BE_UTM_zone_25S',CcC,BUd,BUX,BZx,BUg,BUc,BUo,BUa]]],['32524',AoC+AuI,[[U,'WGS'+Xv+' / UTM zone 24S',Clb,BUd,BUX,BYx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32524']]],[[U,'WGS_72BE_UTM_zone_24S',CcC,BUd,BUX,BYx,BUg,BUc,BUo,BUa]]],['32523',Amp+AuI,[[U,'WGS'+Xv+' / UTM zone 23S',Clb,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32523']]],[[U,'WGS_72BE_UTM_zone_23S',CcC,BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['32522',Alb+AuI,[[U,'WGS'+Xv+' / UTM zone 22S',Clb,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32522']]],[[U,'WGS_72BE_UTM_zone_22S',CcC,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['32521',AlI+AuI,[[U,'WGS'+Xv+' / UTM zone 21S',Clb,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32521']]],[[U,'WGS_72BE_UTM_zone_21S',CcC,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['32520',Aku+AuI,[[U,'WGS'+Xv+' / UTM zone 20S',Clb,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32520']]],[[U,'WGS_72BE_UTM_zone_20S',CcC,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['3252',Apg+iq+Aky,[[U,'WGS 84 / SCAR IMW SS37-39',ClU,BVG,BZO,BZI,BVX,BWe,BUy,BUT,CVy,BUj,BUm,[B,K,'3252']]],[[U,'WGS_84_SCAR_IMW_SS37_39',Cbp,BVD,BZO,BZI,BVX,BWe,BUy,BUT,BUa]]],['32519',AlG+AuI,[[U,'WGS'+Xv+' / UTM zone 19S',Clb,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32519']]],[[U,'WGS_72BE_UTM_zone_19S',CcC,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['32518',AlJ+AuI,[[U,'WGS'+Xv+' / UTM zone 18S',Clb,BUd,BUX,BWo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32518']]],[[U,'WGS_72BE_UTM_zone_18S',CcC,BUd,BUX,BWo,BUg,BUc,BUo,BUa]]],['32517',AlW+AuI,[[U,'WGS'+Xv+' / UTM zone 17S',Clb,BUd,BUX,BVm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32517']]],[[U,'WGS_72BE_UTM_zone_17S',CcC,BUd,BUX,BVm,BUg,BUc,BUo,BUa]]],['32516',AnW+AuI,[[U,'WGS'+Xv+' / UTM zone 16S',Clb,BUd,BUX,BXS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32516']]],[[U,'WGS_72BE_UTM_zone_16S',CcC,BUd,BUX,BXS,BUg,BUc,BUo,BUa]]],['32515',AnV+AuI,[[U,'WGS'+Xv+' / UTM zone 15S',Clb,BUd,BUX,BYT,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32515']]],[[U,'WGS_72BE_UTM_zone_15S',CcC,BUd,BUX,BYT,BUg,BUc,BUo,BUa]]],['32514',AoG+AuI,[[U,'WGS'+Xv+' / UTM zone 14S',Clb,BUd,BUX,BXU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32514']]],[[U,'WGS_72BE_UTM_zone_14S',CcC,BUd,BUX,BXU,BUg,BUc,BUo,BUa]]],['32513',AoF+AuI,[[U,'WGS'+Xv+' / UTM zone 13S',Clb,BUd,BUX,BZS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32513']]],[[U,'WGS_72BE_UTM_zone_13S',CcC,BUd,BUX,BZS,BUg,BUc,BUo,BUa]]],['32512',AoE+AuI,[[U,'WGS'+Xv+' / UTM zone 12S',Clb,BUd,BUX,BXs,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32512']]],[[U,'WGS_72BE_UTM_zone_12S',CcC,BUd,BUX,BXs,BUg,BUc,BUo,BUa]]],['32511',AoD+AuI,[[U,'WGS'+Xv+' / UTM zone 11S',Clb,BUd,BUX,BXx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32511']]],[[U,'WGS_72BE_UTM_zone_11S',CcC,BUd,BUX,BXx,BUg,BUc,BUo,BUa]]],['32510',Amy+AuI,[[U,'WGS'+Xv+' / UTM zone 10S',Clb,BUd,BUX,Bap,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32510']]],[[U,'WGS_72BE_UTM_zone_10S',CcC,BUd,BUX,Bap,BUg,BUc,BUo,BUa]]],['3251',Apg+ck+Aky,[[U,'WGS 84 / SCAR IMW SS34-36',ClU,BVG,BZO,BZI,BVX,BWP,BUy,BUT,CVy,BUj,BUm,[B,K,'3251']]],[[U,'WGS_84_SCAR_IMW_SS34_36',Cbp,BVD,BZO,BZI,BVX,BWP,BUy,BUT,BUa]]],['32509',AV+' +zone=9'+AuI,[[U,'WGS'+Xv+' / UTM zone 9S',Clb,BUd,BUX,BaA,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32509']]],[[U,'WGS_72BE_UTM_zone_9S',CcC,BUd,BUX,BaA,BUg,BUc,BUo,BUa]]],['32508',AV+' +zone=8'+AuI,[[U,'WGS'+Xv+' / UTM zone 8S',Clb,BUd,BUX,BZz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32508']]],[[U,'WGS_72BE_UTM_zone_8S',CcC,BUd,BUX,BZz,BUg,BUc,BUo,BUa]]],['32507',AV+' +zone=7'+AuI,[[U,'WGS'+Xv+' / UTM zone 7S',Clb,BUd,BUX,BZn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32507']]],[[U,'WGS_72BE_UTM_zone_7S',CcC,BUd,BUX,BZn,BUg,BUc,BUo,BUa]]],['32506',AV+' +zone=6'+AuI,[[U,'WGS'+Xv+' / UTM zone 6S',Clb,BUd,BUX,BYy,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32506']]],[[U,'WGS_72BE_UTM_zone_6S',CcC,BUd,BUX,BYy,BUg,BUc,BUo,BUa]]],['32505',AV+' +zone=5'+AuI,[[U,'WGS'+Xv+' / UTM zone 5S',Clb,BUd,BUX,BZK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32505']]],[[U,'WGS_72BE_UTM_zone_5S',CcC,BUd,BUX,BZK,BUg,BUc,BUo,BUa]]],['32504',AV+' +zone=4'+AuI,[[U,'WGS'+Xv+' / UTM zone 4S',Clb,BUd,BUX,Bac,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32504']]],[[U,'WGS_72BE_UTM_zone_4S',CcC,BUd,BUX,Bac,BUg,BUc,BUo,BUa]]],['32503',AV+' +zone=3'+AuI,[[U,'WGS'+Xv+' / UTM zone 3S',Clb,BUd,BUX,BaZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32503']]],[[U,'WGS_72BE_UTM_zone_3S',CcC,BUd,BUX,BaZ,BUg,BUc,BUo,BUa]]],['32502',AV+' +zone=2'+AuI,[[U,'WGS'+Xv+' / UTM zone 2S',Clb,BUd,BUX,BYV,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32502']]],[[U,'WGS_72BE_UTM_zone_2S',CcC,BUd,BUX,BYV,BUg,BUc,BUo,BUa]]],['32501',AV+' +zone=1'+AuI,[[U,'WGS'+Xv+' / UTM zone 1S',Clb,BUd,BUX,BYF,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32501']]],[[U,'WGS_72BE_UTM_zone_1S',CcC,BUd,BUX,BYF,BUg,BUc,BUo,BUa]]],['3250',Apg+nF+Aky,[[U,'WGS 84 / SCAR IMW SS31-33',ClU,BVG,BZO,BZI,BVX,BWO,BUy,BUT,CVy,BUj,BUm,[B,K,'3250']]],[[U,'WGS_84_SCAR_IMW_SS31_33',Cbp,BVD,BZO,BZI,BVX,BWO,BUy,BUT,BUa]]],['3249',Apg+' +lon_0=-9'+Aky,[[U,'WGS 84 / SCAR IMW SS28-30',ClU,BVG,BZO,BZI,BVX,BYQ,BUy,BUT,CVy,BUj,BUm,[B,K,'3249']]],[[U,'WGS_84_SCAR_IMW_SS28_30',Cbp,BVD,BZO,BZI,BVX,BYQ,BUy,BUT,BUa]]],['3248',Apg+' +lon_0=-27'+Aky,[[U,'WGS 84 / SCAR IMW SS25-27',ClU,BVG,BZO,BZI,BVX,BaV,BUy,BUT,CVy,BUj,BUm,[B,K,'3248']]],[[U,'WGS_84_SCAR_IMW_SS25_27',Cbp,BVD,BZO,BZI,BVX,BaV,BUy,BUT,BUa]]],['3247',Apg+AIg+Aky,[[U,'WGS 84 / SCAR IMW SS19-21',ClU,BVG,BZO,BZI,BVX,BWY,BUy,BUT,CVy,BUj,BUm,[B,K,'3247']]],[[U,'WGS_84_SCAR_IMW_SS19_21',Cbp,BVD,BZO,BZI,BVX,BWY,BUy,BUT,BUa]]],['32460',Ame+ArR,[[U,'WGS'+Xv+' / UTM zone 60N',Clb,BUd,BUX,BXo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32460']]],[[U,'WGS_72BE_UTM_zone_60N',CcC,BUd,BUX,BXo,BUg,BUc,BUT,BUa]]],['3246',Apg+Qk+Aky,[[U,'WGS 84 / SCAR IMW SS16-18',ClU,BVG,BZO,BZI,BVX,BVm,BUy,BUT,CVy,BUj,BUm,[B,K,'3246']]],[[U,'WGS_84_SCAR_IMW_SS16_18',Cbp,BVD,BZO,BZI,BVX,BVm,BUy,BUT,BUa]]],['32459',AoK+ArR,[[U,'WGS'+Xv+' / UTM zone 59N',Clb,BUd,BUX,BXj,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32459']]],[[U,'WGS_72BE_UTM_zone_59N',CcC,BUd,BUX,BXj,BUg,BUc,BUT,BUa]]],['32458',Aml+ArR,[[U,'WGS'+Xv+' / UTM zone 58N',Clb,BUd,BUX,BXW,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32458']]],[[U,'WGS_72BE_UTM_zone_58N',CcC,BUd,BUX,BXW,BUg,BUc,BUT,BUa]]],['32457',Aos+ArR,[[U,'WGS'+Xv+' / UTM zone 57N',Clb,BUd,BUX,BZl,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32457']]],[[U,'WGS_72BE_UTM_zone_57N',CcC,BUd,BUX,BZl,BUg,BUc,BUT,BUa]]],['32456',AoS+ArR,[[U,'WGS'+Xv+' / UTM zone 56N',Clb,BUd,BUX,BYu,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32456']]],[[U,'WGS_72BE_UTM_zone_56N',CcC,BUd,BUX,BYu,BUg,BUc,BUT,BUa]]],['32455',Amg+ArR,[[U,'WGS'+Xv+' / UTM zone 55N',Clb,BUd,BUX,BYW,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32455']]],[[U,'WGS_72BE_UTM_zone_55N',CcC,BUd,BUX,BYW,BUg,BUc,BUT,BUa]]],['32454',AoI+ArR,[[U,'WGS'+Xv+' / UTM zone 54N',Clb,BUd,BUX,BYK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32454']]],[[U,'WGS_72BE_UTM_zone_54N',CcC,BUd,BUX,BYK,BUg,BUc,BUT,BUa]]],['32453',AmT+ArR,[[U,'WGS'+Xv+' / UTM zone 53N',Clb,BUd,BUX,BWd,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32453']]],[[U,'WGS_72BE_UTM_zone_53N',CcC,BUd,BUX,BWd,BUg,BUc,BUT,BUa]]],['32452',Ank+ArR,[[U,'WGS'+Xv+' / UTM zone 52N',Clb,BUd,BUX,BWQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32452']]],[[U,'WGS_72BE_UTM_zone_52N',CcC,BUd,BUX,BWQ,BUg,BUc,BUT,BUa]]],['32451',AnJ+ArR,[[U,'WGS'+Xv+' / UTM zone 51N',Clb,BUd,BUX,BWU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32451']]],[[U,'WGS_72BE_UTM_zone_51N',CcC,BUd,BUX,BWU,BUg,BUc,BUT,BUa]]],['32450',AnS+ArR,[[U,'WGS'+Xv+' / UTM zone 50N',Clb,BUd,BUX,BWS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32450']]],[[U,'WGS_72BE_UTM_zone_50N',CcC,BUd,BUX,BWS,BUg,BUc,BUT,BUa]]],['3245',Apg+kA+Aky,[[U,'WGS 84 / SCAR IMW SS13-15',ClU,BVG,BZO,BZI,BVX,BXU,BUy,BUT,CVy,BUj,BUm,[B,K,'3245']]],[[U,'WGS_84_SCAR_IMW_SS13_15',Cbp,BVD,BZO,BZI,BVX,BXU,BUy,BUT,BUa]]],['32449',AnE+ArR,[[U,'WGS'+Xv+' / UTM zone 49N',Clb,BUd,BUX,BWX,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32449']]],[[U,'WGS_72BE_UTM_zone_49N',CcC,BUd,BUX,BWX,BUg,BUc,BUT,BUa]]],['32448',AnD+ArR,[[U,'WGS'+Xv+' / UTM zone 48N',Clb,BUd,BUX,BWK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32448']]],[[U,'WGS_72BE_UTM_zone_48N',CcC,BUd,BUX,BWK,BUg,BUc,BUT,BUa]]],['32447',AoJ+ArR,[[U,'WGS'+Xv+' / UTM zone 47N',Clb,BUd,BUX,BWf,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32447']]],[[U,'WGS_72BE_UTM_zone_47N',CcC,BUd,BUX,BWf,BUg,BUc,BUT,BUa]]],['32446',AnA+ArR,[[U,'WGS'+Xv+' / UTM zone 46N',Clb,BUd,BUX,BWk,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32446']]],[[U,'WGS_72BE_UTM_zone_46N',CcC,BUd,BUX,BWk,BUg,BUc,BUT,BUa]]],['32445',AV+' +zone=45'+ArR,[[U,'WGS'+Xv+' / UTM zone 45N',Clb,BUd,BUX,BXK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32445']]],[[U,'WGS_72BE_UTM_zone_45N',CcC,BUd,BUX,BXK,BUg,BUc,BUT,BUa]]],['32444',AV+' +zone=44'+ArR,[[U,'WGS'+Xv+' / UTM zone 44N',Clb,BUd,BUX,BWz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32444']]],[[U,'WGS_72BE_UTM_zone_44N',CcC,BUd,BUX,BWz,BUg,BUc,BUT,BUa]]],['32443',ApL+ArR,[[U,'WGS'+Xv+' / UTM zone 43N',Clb,BUd,BUX,BWs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32443']]],[[U,'WGS_72BE_UTM_zone_43N',CcC,BUd,BUX,BWs,BUg,BUc,BUT,BUa]]],['32442',Aob+ArR,[[U,'WGS'+Xv+' / UTM zone 42N',Clb,BUd,BUX,BZh,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32442']]],[[U,'WGS_72BE_UTM_zone_42N',CcC,BUd,BUX,BZh,BUg,BUc,BUT,BUa]]],['32441',Aoc+ArR,[[U,'WGS'+Xv+' / UTM zone 41N',Clb,BUd,BUX,BZN,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32441']]],[[U,'WGS_72BE_UTM_zone_41N',CcC,BUd,BUX,BZN,BUg,BUc,BUT,BUa]]],['32440',AnK+ArR,[[U,'WGS'+Xv+' / UTM zone 40N',Clb,BUd,BUX,BXz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32440']]],[[U,'WGS_72BE_UTM_zone_40N',CcC,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['3244',Apg+qM+Aky,[[U,'WGS 84 / SCAR IMW SS10-12',ClU,BVG,BZO,BZI,BVX,BXx,BUy,BUT,CVy,BUj,BUm,[B,K,'3244']]],[[U,'WGS_84_SCAR_IMW_SS10_12',Cbp,BVD,BZO,BZI,BVX,BXx,BUy,BUT,BUa]]],['32439',Alt+ArR,[[U,'WGS'+Xv+' / UTM zone 39N',Clb,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32439']]],[[U,'WGS_72BE_UTM_zone_39N',CcC,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['32438',AmA+ArR,[[U,'WGS'+Xv+' / UTM zone 38N',Clb,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32438']]],[[U,'WGS_72BE_UTM_zone_38N',CcC,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['32437',AmP+ArR,[[U,'WGS'+Xv+' / UTM zone 37N',Clb,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32437']]],[[U,'WGS_72BE_UTM_zone_37N',CcC,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['32436',AnF+ArR,[[U,'WGS'+Xv+' / UTM zone 36N',Clb,BUd,BUX,BWg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32436']]],[[U,'WGS_72BE_UTM_zone_36N',CcC,BUd,BUX,BWg,BUg,BUc,BUT,BUa]]],['32435',Amc+ArR,[[U,'WGS'+Xv+' / UTM zone 35N',Clb,BUd,BUX,BWP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32435']]],[[U,'WGS_72BE_UTM_zone_35N',CcC,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['32434',Anl+ArR,[[U,'WGS'+Xv+' / UTM zone 34N',Clb,BUd,BUX,BWR,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32434']]],[[U,'WGS_72BE_UTM_zone_34N',CcC,BUd,BUX,BWR,BUg,BUc,BUT,BUa]]],['32433',AmO+ArR,[[U,'WGS'+Xv+' / UTM zone 33N',Clb,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32433']]],[[U,'WGS_72BE_UTM_zone_33N',CcC,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['32432',Alu+ArR,[[U,'WGS'+Xv+' / UTM zone 32N',Clb,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32432']]],[[U,'WGS_72BE_UTM_zone_32N',CcC,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['32431',Amw+ArR,[[U,'WGS'+Xv+' / UTM zone 31N',Clb,BUd,BUX,BXt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32431']]],[[U,'WGS_72BE_UTM_zone_31N',CcC,BUd,BUX,BXt,BUg,BUc,BUT,BUa]]],['32430',AmR+ArR,[[U,'WGS'+Xv+' / UTM zone 30N',Clb,BUd,BUX,Bak,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32430']]],[[U,'WGS_72BE_UTM_zone_30N',CcC,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['3243',Apg+Agf+Aky,[[U,'WGS 84 / SCAR IMW SS07-09',ClU,BVG,BZO,BZI,BVX,BZz,BUy,BUT,CVy,BUj,BUm,[B,K,'3243']]],[[U,'WGS_84_SCAR_IMW_SS07_09',Cbp,BVD,BZO,BZI,BVX,BZz,BUy,BUT,BUa]]],['32429',AmJ+ArR,[[U,'WGS'+Xv+' / UTM zone 29N',Clb,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32429']]],[[U,'WGS_72BE_UTM_zone_29N',CcC,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['32428',Aly+ArR,[[U,'WGS'+Xv+' / UTM zone 28N',Clb,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32428']]],[[U,'WGS_72BE_UTM_zone_28N',CcC,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['32427',Aou+ArR,[[U,'WGS'+Xv+' / UTM zone 27N',Clb,BUd,BUX,Bee,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32427']]],[[U,'WGS_72BE_UTM_zone_27N',CcC,BUd,BUX,Bee,BUg,BUc,BUT,BUa]]],['32426',AmS+ArR,[[U,'WGS'+Xv+' / UTM zone 26N',Clb,BUd,BUX,BaV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32426']]],[[U,'WGS_72BE_UTM_zone_26N',CcC,BUd,BUX,BaV,BUg,BUc,BUT,BUa]]],['32425',Any+ArR,[[U,'WGS'+Xv+' / UTM zone 25N',Clb,BUd,BUX,BZx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32425']]],[[U,'WGS_72BE_UTM_zone_25N',CcC,BUd,BUX,BZx,BUg,BUc,BUT,BUa]]],['32424',AoC+ArR,[[U,'WGS'+Xv+' / UTM zone 24N',Clb,BUd,BUX,BYx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32424']]],[[U,'WGS_72BE_UTM_zone_24N',CcC,BUd,BUX,BYx,BUg,BUc,BUT,BUa]]],['32423',Amp+ArR,[[U,'WGS'+Xv+' / UTM zone 23N',Clb,BUd,BUX,BYg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32423']]],[[U,'WGS_72BE_UTM_zone_23N',CcC,BUd,BUX,BYg,BUg,BUc,BUT,BUa]]],['32422',Alb+ArR,[[U,'WGS'+Xv+' / UTM zone 22N',Clb,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32422']]],[[U,'WGS_72BE_UTM_zone_22N',CcC,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['32421',AlI+ArR,[[U,'WGS'+Xv+' / UTM zone 21N',Clb,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32421']]],[[U,'WGS_72BE_UTM_zone_21N',CcC,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['32420',Aku+ArR,[[U,'WGS'+Xv+' / UTM zone 20N',Clb,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32420']]],[[U,'WGS_72BE_UTM_zone_20N',CcC,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['3242',Apg+Aga+Aky,[[U,'WGS 84 / SCAR IMW SS04-06',ClU,BVG,BZO,BZI,BVX,BZK,BUy,BUT,CVy,BUj,BUm,[B,K,'3242']]],[[U,'WGS_84_SCAR_IMW_SS04_06',Cbp,BVD,BZO,BZI,BVX,BZK,BUy,BUT,BUa]]],['32419',AlG+ArR,[[U,'WGS'+Xv+' / UTM zone 19N',Clb,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32419']]],[[U,'WGS_72BE_UTM_zone_19N',CcC,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['32418',AlJ+ArR,[[U,'WGS'+Xv+' / UTM zone 18N',Clb,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32418']]],[[U,'WGS_72BE_UTM_zone_18N',CcC,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['32417',AlW+ArR,[[U,'WGS'+Xv+' / UTM zone 17N',Clb,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32417']]],[[U,'WGS_72BE_UTM_zone_17N',CcC,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['32416',AnW+ArR,[[U,'WGS'+Xv+' / UTM zone 16N',Clb,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32416']]],[[U,'WGS_72BE_UTM_zone_16N',CcC,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['32415',AnV+ArR,[[U,'WGS'+Xv+' / UTM zone 15N',Clb,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32415']]],[[U,'WGS_72BE_UTM_zone_15N',CcC,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['32414',AoG+ArR,[[U,'WGS'+Xv+' / UTM zone 14N',Clb,BUd,BUX,BXU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32414']]],[[U,'WGS_72BE_UTM_zone_14N',CcC,BUd,BUX,BXU,BUg,BUc,BUT,BUa]]],['32413',AoF+ArR,[[U,'WGS'+Xv+' / UTM zone 13N',Clb,BUd,BUX,BZS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32413']]],[[U,'WGS_72BE_UTM_zone_13N',CcC,BUd,BUX,BZS,BUg,BUc,BUT,BUa]]],['32412',AoE+ArR,[[U,'WGS'+Xv+' / UTM zone 12N',Clb,BUd,BUX,BXs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32412']]],[[U,'WGS_72BE_UTM_zone_12N',CcC,BUd,BUX,BXs,BUg,BUc,BUT,BUa]]],['32411',AoD+ArR,[[U,'WGS'+Xv+' / UTM zone 11N',Clb,BUd,BUX,BXx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32411']]],[[U,'WGS_72BE_UTM_zone_11N',CcC,BUd,BUX,BXx,BUg,BUc,BUT,BUa]]],['32410',Amy+ArR,[[U,'WGS'+Xv+' / UTM zone 10N',Clb,BUd,BUX,Bap,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32410']]],[[U,'WGS_72BE_UTM_zone_10N',CcC,BUd,BUX,Bap,BUg,BUc,BUT,BUa]]],['3241',Aow+Acf+Aky,[[U,'WGS 84 / SCAR IMW SR59-60',ClU,BVG,BYf,BYe,BVX,Bnw,BUy,BUT,CVy,BUj,BUm,[B,K,'3241']]],[[U,'WGS_84_SCAR_IMW_SR59_60',Cbp,BVD,BYf,BYe,BVX,Bnw,BUy,BUT,BUa]]],['32409',AV+' +zone=9'+ArR,[[U,'WGS'+Xv+' / UTM zone 9N',Clb,BUd,BUX,BaA,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32409']]],[[U,'WGS_72BE_UTM_zone_9N',CcC,BUd,BUX,BaA,BUg,BUc,BUT,BUa]]],['32408',AV+' +zone=8'+ArR,[[U,'WGS'+Xv+' / UTM zone 8N',Clb,BUd,BUX,BZz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32408']]],[[U,'WGS_72BE_UTM_zone_8N',CcC,BUd,BUX,BZz,BUg,BUc,BUT,BUa]]],['32407',AV+' +zone=7'+ArR,[[U,'WGS'+Xv+' / UTM zone 7N',Clb,BUd,BUX,BZn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32407']]],[[U,'WGS_72BE_UTM_zone_7N',CcC,BUd,BUX,BZn,BUg,BUc,BUT,BUa]]],['32406',AV+' +zone=6'+ArR,[[U,'WGS'+Xv+' / UTM zone 6N',Clb,BUd,BUX,BYy,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32406']]],[[U,'WGS_72BE_UTM_zone_6N',CcC,BUd,BUX,BYy,BUg,BUc,BUT,BUa]]],['32405',AV+' +zone=5'+ArR,[[U,'WGS'+Xv+' / UTM zone 5N',Clb,BUd,BUX,BZK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32405']]],[[U,'WGS_72BE_UTM_zone_5N',CcC,BUd,BUX,BZK,BUg,BUc,BUT,BUa]]],['32404',AV+' +zone=4'+ArR,[[U,'WGS'+Xv+' / UTM zone 4N',Clb,BUd,BUX,Bac,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32404']]],[[U,'WGS_72BE_UTM_zone_4N',CcC,BUd,BUX,Bac,BUg,BUc,BUT,BUa]]],['32403',AV+' +zone=3'+ArR,[[U,'WGS'+Xv+' / UTM zone 3N',Clb,BUd,BUX,BaZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32403']]],[[U,'WGS_72BE_UTM_zone_3N',CcC,BUd,BUX,BaZ,BUg,BUc,BUT,BUa]]],['32402',AV+' +zone=2'+ArR,[[U,'WGS'+Xv+' / UTM zone 2N',Clb,BUd,BUX,BYV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32402']]],[[U,'WGS_72BE_UTM_zone_2N',CcC,BUd,BUX,BYV,BUg,BUc,BUT,BUa]]],['32401',AV+' +zone=1'+ArR,[[U,'WGS'+Xv+' / UTM zone 1N',Clb,BUd,BUX,BYF,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32401']]],[[U,'WGS_72BE_UTM_zone_1N',CcC,BUd,BUX,BYF,BUg,BUc,BUT,BUa]]],['3240',Aow+AIh+Aky,[[U,'WGS 84 / SCAR IMW SR57-58',ClU,BVG,BYf,BYe,BVX,BkM,BUy,BUT,CVy,BUj,BUm,[B,K,'3240']]],[[U,'WGS_84_SCAR_IMW_SR57_58',Cbp,BVD,BYf,BYe,BVX,BkM,BUy,BUT,BUa]]],['3239',Aow+ya+Aky,[[U,'WGS 84 / SCAR IMW SR55-56',ClU,BVG,BYf,BYe,BVX,Beg,BUy,BUT,CVy,BUj,BUm,[B,K,'3239']]],[[U,'WGS_84_SCAR_IMW_SR55_56',Cbp,BVD,BYf,BYe,BVX,Beg,BUy,BUT,BUa]]],['3238',Aow+ATI+Aky,[[U,'WGS 84 / SCAR IMW SR53-54',ClU,BVG,BYf,BYe,BVX,Blh,BUy,BUT,CVy,BUj,BUm,[B,K,'3238']]],[[U,'WGS_84_SCAR_IMW_SR53_54',Cbp,BVD,BYf,BYe,BVX,Blh,BUy,BUT,BUa]]],['3237',Aow+kC+Aky,[[U,'WGS 84 / SCAR IMW SR51-52',ClU,BVG,BYf,BYe,BVX,Bao,BUy,BUT,CVy,BUj,BUm,[B,K,'3237']]],[[U,'WGS_84_SCAR_IMW_SR51_52',Cbp,BVD,BYf,BYe,BVX,Bao,BUy,BUT,BUa]]],['32360',Ame+AuB,[[U,'WGS 72 / UTM zone 60S',Clc,BUd,BUX,BXo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32360']]],[[U,'WGS_72_UTM_zone_60S',CcA,BUd,BUX,BXo,BUg,BUc,BUo,BUa]]],['3236',Aow+gu+Aky,[[U,'WGS 84 / SCAR IMW SR49-50',ClU,BVG,BYf,BYe,BVX,BZy,BUy,BUT,CVy,BUj,BUm,[B,K,'3236']]],[[U,'WGS_84_SCAR_IMW_SR49_50',Cbp,BVD,BYf,BYe,BVX,BZy,BUy,BUT,BUa]]],['32359',AoK+AuB,[[U,'WGS 72 / UTM zone 59S',Clc,BUd,BUX,BXj,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32359']]],[[U,'WGS_72_UTM_zone_59S',CcA,BUd,BUX,BXj,BUg,BUc,BUo,BUa]]],['32358',Aml+AuB,[[U,'WGS 72 / UTM zone 58S',Clc,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32358']]],[[U,'WGS_72_UTM_zone_58S',CcA,BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['32357',Aos+AuB,[[U,'WGS 72 / UTM zone 57S',Clc,BUd,BUX,BZl,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32357']]],[[U,'WGS_72_UTM_zone_57S',CcA,BUd,BUX,BZl,BUg,BUc,BUo,BUa]]],['32356',AoS+AuB,[[U,'WGS 72 / UTM zone 56S',Clc,BUd,BUX,BYu,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32356']]],[[U,'WGS_72_UTM_zone_56S',CcA,BUd,BUX,BYu,BUg,BUc,BUo,BUa]]],['32355',Amg+AuB,[[U,'WGS 72 / UTM zone 55S',Clc,BUd,BUX,BYW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32355']]],[[U,'WGS_72_UTM_zone_55S',CcA,BUd,BUX,BYW,BUg,BUc,BUo,BUa]]],['32354',AoI+AuB,[[U,'WGS 72 / UTM zone 54S',Clc,BUd,BUX,BYK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32354']]],[[U,'WGS_72_UTM_zone_54S',CcA,BUd,BUX,BYK,BUg,BUc,BUo,BUa]]],['32353',AmT+AuB,[[U,'WGS 72 / UTM zone 53S',Clc,BUd,BUX,BWd,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32353']]],[[U,'WGS_72_UTM_zone_53S',CcA,BUd,BUX,BWd,BUg,BUc,BUo,BUa]]],['32352',Ank+AuB,[[U,'WGS 72 / UTM zone 52S',Clc,BUd,BUX,BWQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32352']]],[[U,'WGS_72_UTM_zone_52S',CcA,BUd,BUX,BWQ,BUg,BUc,BUo,BUa]]],['32351',AnJ+AuB,[[U,'WGS 72 / UTM zone 51S',Clc,BUd,BUX,BWU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32351']]],[[U,'WGS_72_UTM_zone_51S',CcA,BUd,BUX,BWU,BUg,BUc,BUo,BUa]]],['32350',AnS+AuB,[[U,'WGS 72 / UTM zone 50S',Clc,BUd,BUX,BWS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32350']]],[[U,'WGS_72_UTM_zone_50S',CcA,BUd,BUX,BWS,BUg,BUc,BUo,BUa]]],['3235',Aow+kD+Aky,[[U,'WGS 84 / SCAR IMW SR47-48',ClU,BVG,BYf,BYe,BVX,Ban,BUy,BUT,CVy,BUj,BUm,[B,K,'3235']]],[[U,'WGS_84_SCAR_IMW_SR47_48',Cbp,BVD,BYf,BYe,BVX,Ban,BUy,BUT,BUa]]],['32349',AnE+AuB,[[U,'WGS 72 / UTM zone 49S',Clc,BUd,BUX,BWX,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32349']]],[[U,'WGS_72_UTM_zone_49S',CcA,BUd,BUX,BWX,BUg,BUc,BUo,BUa]]],['32348',AnD+AuB,[[U,'WGS 72 / UTM zone 48S',Clc,BUd,BUX,BWK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32348']]],[[U,'WGS_72_UTM_zone_48S',CcA,BUd,BUX,BWK,BUg,BUc,BUo,BUa]]],['32347',AoJ+AuB,[[U,'WGS 72 / UTM zone 47S',Clc,BUd,BUX,BWf,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32347']]],[[U,'WGS_72_UTM_zone_47S',CcA,BUd,BUX,BWf,BUg,BUc,BUo,BUa]]],['32346',AnA+AuB,[[U,'WGS 72 / UTM zone 46S',Clc,BUd,BUX,BWk,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32346']]],[[U,'WGS_72_UTM_zone_46S',CcA,BUd,BUX,BWk,BUg,BUc,BUo,BUa]]],['32345',AV+' +zone=45'+AuB,[[U,'WGS 72 / UTM zone 45S',Clc,BUd,BUX,BXK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32345']]],[[U,'WGS_72_UTM_zone_45S',CcA,BUd,BUX,BXK,BUg,BUc,BUo,BUa]]],['32344',AV+' +zone=44'+AuB,[[U,'WGS 72 / UTM zone 44S',Clc,BUd,BUX,BWz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32344']]],[[U,'WGS_72_UTM_zone_44S',CcA,BUd,BUX,BWz,BUg,BUc,BUo,BUa]]],['32343',ApL+AuB,[[U,'WGS 72 / UTM zone 43S',Clc,BUd,BUX,BWs,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32343']]],[[U,'WGS_72_UTM_zone_43S',CcA,BUd,BUX,BWs,BUg,BUc,BUo,BUa]]],['32342',Aob+AuB,[[U,'WGS 72 / UTM zone 42S',Clc,BUd,BUX,BZh,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32342']]],[[U,'WGS_72_UTM_zone_42S',CcA,BUd,BUX,BZh,BUg,BUc,BUo,BUa]]],['32341',Aoc+AuB,[[U,'WGS 72 / UTM zone 41S',Clc,BUd,BUX,BZN,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32341']]],[[U,'WGS_72_UTM_zone_41S',CcA,BUd,BUX,BZN,BUg,BUc,BUo,BUa]]],['32340',AnK+AuB,[[U,'WGS 72 / UTM zone 40S',Clc,BUd,BUX,BXz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32340']]],[[U,'WGS_72_UTM_zone_40S',CcA,BUd,BUX,BXz,BUg,BUc,BUo,BUa]]],['3234',Aow+eX+Aky,[[U,'WGS 84 / SCAR IMW SR45-46',ClU,BVG,BYf,BYe,BVX,BYP,BUy,BUT,CVy,BUj,BUm,[B,K,'3234']]],[[U,'WGS_84_SCAR_IMW_SR45_46',Cbp,BVD,BYf,BYe,BVX,BYP,BUy,BUT,BUa]]],['32339',Alt+AuB,[[U,'WGS 72 / UTM zone 39S',Clc,BUd,BUX,BWt,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32339']]],[[U,'WGS_72_UTM_zone_39S',CcA,BUd,BUX,BWt,BUg,BUc,BUo,BUa]]],['32338',AmA+AuB,[[U,'WGS 72 / UTM zone 38S',Clc,BUd,BUX,BWe,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32338']]],[[U,'WGS_72_UTM_zone_38S',CcA,BUd,BUX,BWe,BUg,BUc,BUo,BUa]]],['32337',AmP+AuB,[[U,'WGS 72 / UTM zone 37S',Clc,BUd,BUX,BWn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32337']]],[[U,'WGS_72_UTM_zone_37S',CcA,BUd,BUX,BWn,BUg,BUc,BUo,BUa]]],['32336',AnF+AuB,[[U,'WGS 72 / UTM zone 36S',Clc,BUd,BUX,BWg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32336']]],[[U,'WGS_72_UTM_zone_36S',CcA,BUd,BUX,BWg,BUg,BUc,BUo,BUa]]],['32335',Amc+AuB,[[U,'WGS 72 / UTM zone 35S',Clc,BUd,BUX,BWP,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32335']]],[[U,'WGS_72_UTM_zone_35S',CcA,BUd,BUX,BWP,BUg,BUc,BUo,BUa]]],['32334',Anl+AuB,[[U,'WGS 72 / UTM zone 34S',Clc,BUd,BUX,BWR,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32334']]],[[U,'WGS_72_UTM_zone_34S',CcA,BUd,BUX,BWR,BUg,BUc,BUo,BUa]]],['32333',AmO+AuB,[[U,'WGS 72 / UTM zone 33S',Clc,BUd,BUX,BWH,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32333']]],[[U,'WGS_72_UTM_zone_33S',CcA,BUd,BUX,BWH,BUg,BUc,BUo,BUa]]],['32332',Alu+AuB,[[U,'WGS 72 / UTM zone 32S',Clc,BUd,BUX,BWO,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32332']]],[[U,'WGS_72_UTM_zone_32S',CcA,BUd,BUX,BWO,BUg,BUc,BUo,BUa]]],['32331',Amw+AuB,[[U,'WGS 72 / UTM zone 31S',Clc,BUd,BUX,BXt,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32331']]],[[U,'WGS_72_UTM_zone_31S',CcA,BUd,BUX,BXt,BUg,BUc,BUo,BUa]]],['32330',AmR+AuB,[[U,'WGS 72 / UTM zone 30S',Clc,BUd,BUX,Bak,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32330']]],[[U,'WGS_72_UTM_zone_30S',CcA,BUd,BUX,Bak,BUg,BUc,BUo,BUa]]],['3233',Aow+rE+Aky,[[U,'WGS 84 / SCAR IMW SR43-44',ClU,BVG,BYf,BYe,BVX,Bam,BUy,BUT,CVy,BUj,BUm,[B,K,'3233']]],[[U,'WGS_84_SCAR_IMW_SR43_44',Cbp,BVD,BYf,BYe,BVX,Bam,BUy,BUT,BUa]]],['32329',AmJ+AuB,[[U,'WGS 72 / UTM zone 29S',Clc,BUd,BUX,BYQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32329']]],[[U,'WGS_72_UTM_zone_29S',CcA,BUd,BUX,BYQ,BUg,BUc,BUo,BUa]]],['32328',Aly+AuB,[[U,'WGS 72 / UTM zone 28S',Clc,BUd,BUX,BYE,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32328']]],[[U,'WGS_72_UTM_zone_28S',CcA,BUd,BUX,BYE,BUg,BUc,BUo,BUa]]],['32327',Aou+AuB,[[U,'WGS 72 / UTM zone 27S',Clc,BUd,BUX,Bee,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32327']]],[[U,'WGS_72_UTM_zone_27S',CcA,BUd,BUX,Bee,BUg,BUc,BUo,BUa]]],['32326',AmS+AuB,[[U,'WGS 72 / UTM zone 26S',Clc,BUd,BUX,BaV,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32326']]],[[U,'WGS_72_UTM_zone_26S',CcA,BUd,BUX,BaV,BUg,BUc,BUo,BUa]]],['32325',Any+AuB,[[U,'WGS 72 / UTM zone 25S',Clc,BUd,BUX,BZx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32325']]],[[U,'WGS_72_UTM_zone_25S',CcA,BUd,BUX,BZx,BUg,BUc,BUo,BUa]]],['32324',AoC+AuB,[[U,'WGS 72 / UTM zone 24S',Clc,BUd,BUX,BYx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32324']]],[[U,'WGS_72_UTM_zone_24S',CcA,BUd,BUX,BYx,BUg,BUc,BUo,BUa]]],['32323',Amp+AuB,[[U,'WGS 72 / UTM zone 23S',Clc,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32323']]],[[U,'WGS_72_UTM_zone_23S',CcA,BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['32322',Alb+AuB,[[U,'WGS 72 / UTM zone 22S',Clc,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32322']]],[[U,'WGS_72_UTM_zone_22S',CcA,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['32321',AlI+AuB,[[U,'WGS 72 / UTM zone 21S',Clc,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32321']]],[[U,'WGS_72_UTM_zone_21S',CcA,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['32320',Aku+AuB,[[U,'WGS 72 / UTM zone 20S',Clc,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32320']]],[[U,'WGS_72_UTM_zone_20S',CcA,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['3232',Aow+Afv+Aky,[[U,'WGS 84 / SCAR IMW SR41-42',ClU,BVG,BYf,BYe,BVX,Blg,BUy,BUT,CVy,BUj,BUm,[B,K,'3232']]],[[U,'WGS_84_SCAR_IMW_SR41_42',Cbp,BVD,BYf,BYe,BVX,Blg,BUy,BUT,BUa]]],['32319',AlG+AuB,[[U,'WGS 72 / UTM zone 19S',Clc,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32319']]],[[U,'WGS_72_UTM_zone_19S',CcA,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['32318',AlJ+AuB,[[U,'WGS 72 / UTM zone 18S',Clc,BUd,BUX,BWo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32318']]],[[U,'WGS_72_UTM_zone_18S',CcA,BUd,BUX,BWo,BUg,BUc,BUo,BUa]]],['32317',AlW+AuB,[[U,'WGS 72 / UTM zone 17S',Clc,BUd,BUX,BVm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32317']]],[[U,'WGS_72_UTM_zone_17S',CcA,BUd,BUX,BVm,BUg,BUc,BUo,BUa]]],['32316',AnW+AuB,[[U,'WGS 72 / UTM zone 16S',Clc,BUd,BUX,BXS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32316']]],[[U,'WGS_72_UTM_zone_16S',CcA,BUd,BUX,BXS,BUg,BUc,BUo,BUa]]],['32315',AnV+AuB,[[U,'WGS 72 / UTM zone 15S',Clc,BUd,BUX,BYT,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32315']]],[[U,'WGS_72_UTM_zone_15S',CcA,BUd,BUX,BYT,BUg,BUc,BUo,BUa]]],['32314',AoG+AuB,[[U,'WGS 72 / UTM zone 14S',Clc,BUd,BUX,BXU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32314']]],[[U,'WGS_72_UTM_zone_14S',CcA,BUd,BUX,BXU,BUg,BUc,BUo,BUa]]],['32313',AoF+AuB,[[U,'WGS 72 / UTM zone 13S',Clc,BUd,BUX,BZS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32313']]],[[U,'WGS_72_UTM_zone_13S',CcA,BUd,BUX,BZS,BUg,BUc,BUo,BUa]]],['32312',AoE+AuB,[[U,'WGS 72 / UTM zone 12S',Clc,BUd,BUX,BXs,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32312']]],[[U,'WGS_72_UTM_zone_12S',CcA,BUd,BUX,BXs,BUg,BUc,BUo,BUa]]],['32311',AoD+AuB,[[U,'WGS 72 / UTM zone 11S',Clc,BUd,BUX,BXx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32311']]],[[U,'WGS_72_UTM_zone_11S',CcA,BUd,BUX,BXx,BUg,BUc,BUo,BUa]]],['32310',Amy+AuB,[[U,'WGS 72 / UTM zone 10S',Clc,BUd,BUX,Bap,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32310']]],[[U,'WGS_72_UTM_zone_10S',CcA,BUd,BUX,Bap,BUg,BUc,BUo,BUa]]],['3231',Aow+AXK+Aky,[[U,'WGS 84 / SCAR IMW SR39-40',ClU,BVG,BYf,BYe,BVX,BkW,BUy,BUT,CVy,BUj,BUm,[B,K,'3231']]],[[U,'WGS_84_SCAR_IMW_SR39_40',Cbp,BVD,BYf,BYe,BVX,BkW,BUy,BUT,BUa]]],['32309',AV+' +zone=9'+AuB,[[U,'WGS 72 / UTM zone 9S',Clc,BUd,BUX,BaA,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32309']]],[[U,'WGS_72_UTM_zone_9S',CcA,BUd,BUX,BaA,BUg,BUc,BUo,BUa]]],['32308',AV+' +zone=8'+AuB,[[U,'WGS 72 / UTM zone 8S',Clc,BUd,BUX,BZz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32308']]],[[U,'WGS_72_UTM_zone_8S',CcA,BUd,BUX,BZz,BUg,BUc,BUo,BUa]]],['32307',AV+' +zone=7'+AuB,[[U,'WGS 72 / UTM zone 7S',Clc,BUd,BUX,BZn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32307']]],[[U,'WGS_72_UTM_zone_7S',CcA,BUd,BUX,BZn,BUg,BUc,BUo,BUa]]],['32306',AV+' +zone=6'+AuB,[[U,'WGS 72 / UTM zone 6S',Clc,BUd,BUX,BYy,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32306']]],[[U,'WGS_72_UTM_zone_6S',CcA,BUd,BUX,BYy,BUg,BUc,BUo,BUa]]],['32305',AV+' +zone=5'+AuB,[[U,'WGS 72 / UTM zone 5S',Clc,BUd,BUX,BZK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32305']]],[[U,'WGS_72_UTM_zone_5S',CcA,BUd,BUX,BZK,BUg,BUc,BUo,BUa]]],['32304',AV+' +zone=4'+AuB,[[U,'WGS 72 / UTM zone 4S',Clc,BUd,BUX,Bac,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32304']]],[[U,'WGS_72_UTM_zone_4S',CcA,BUd,BUX,Bac,BUg,BUc,BUo,BUa]]],['32303',AV+' +zone=3'+AuB,[[U,'WGS 72 / UTM zone 3S',Clc,BUd,BUX,BaZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32303']]],[[U,'WGS_72_UTM_zone_3S',CcA,BUd,BUX,BaZ,BUg,BUc,BUo,BUa]]],['32302',AV+' +zone=2'+AuB,[[U,'WGS 72 / UTM zone 2S',Clc,BUd,BUX,BYV,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32302']]],[[U,'WGS_72_UTM_zone_2S',CcA,BUd,BUX,BYV,BUg,BUc,BUo,BUa]]],['32301',AV+' +zone=1'+AuB,[[U,'WGS 72 / UTM zone 1S',Clc,BUd,BUX,BYF,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32301']]],[[U,'WGS_72_UTM_zone_1S',CcA,BUd,BUX,BYF,BUg,BUc,BUo,BUa]]],['3230',Aow+AGU+Aky,[[U,'WGS 84 / SCAR IMW SR37-38',ClU,BVG,BYf,BYe,BVX,BdJ,BUy,BUT,CVy,BUj,BUm,[B,K,'3230']]],[[U,'WGS_84_SCAR_IMW_SR37_38',Cbp,BVD,BYf,BYe,BVX,BdJ,BUy,BUT,BUa]]],['3229',Aow+gR+Aky,[[U,'WGS 84 / SCAR IMW SR35-36',ClU,BVG,BYf,BYe,BVX,BYz,BUy,BUT,CVy,BUj,BUm,[B,K,'3229']]],[[U,'WGS_84_SCAR_IMW_SR35_36',Cbp,BVD,BYf,BYe,BVX,BYz,BUy,BUT,BUa]]],['3228',Aow+AIb+Aky,[[U,'WGS 84 / SCAR IMW SR33-34',ClU,BVG,BYf,BYe,BVX,Bef,BUy,BUT,CVy,BUj,BUm,[B,K,'3228']]],[[U,'WGS_84_SCAR_IMW_SR33_34',Cbp,BVD,BYf,BYe,BVX,Bef,BUy,BUT,BUa]]],['3227',Aow+' +lon_0=6'+Aky,[[U,'WGS 84 / SCAR IMW SR31-32',ClU,BVG,BYf,BYe,BVX,Blt,BUy,BUT,CVy,BUj,BUm,[B,K,'3227']]],[[U,'WGS_84_SCAR_IMW_SR31_32',Cbp,BVD,BYf,BYe,BVX,Blt,BUy,BUT,BUa]]],['32260',Ame+AtA,[[U,'WGS 72 / UTM zone 60N',Clc,BUd,BUX,BXo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32260']]],[[U,'WGS_72_UTM_zone_60N',CcA,BUd,BUX,BXo,BUg,BUc,BUT,BUa]]],['3226',Aow+' +lon_0=-6'+Aky,[[U,'WGS 84 / SCAR IMW SR29-30',ClU,BVG,BYf,BYe,BVX,[A,E,ir],BUy,BUT,CVy,BUj,BUm,[B,K,'3226']]],[[U,'WGS_84_SCAR_IMW_SR29_30',Cbp,BVD,BYf,BYe,BVX,[A,E,ir],BUy,BUT,BUa]]],['32259',AoK+AtA,[[U,'WGS 72 / UTM zone 59N',Clc,BUd,BUX,BXj,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32259']]],[[U,'WGS_72_UTM_zone_59N',CcA,BUd,BUX,BXj,BUg,BUc,BUT,BUa]]],['32258',Aml+AtA,[[U,'WGS 72 / UTM zone 58N',Clc,BUd,BUX,BXW,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32258']]],[[U,'WGS_72_UTM_zone_58N',CcA,BUd,BUX,BXW,BUg,BUc,BUT,BUa]]],['32257',Aos+AtA,[[U,'WGS 72 / UTM zone 57N',Clc,BUd,BUX,BZl,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32257']]],[[U,'WGS_72_UTM_zone_57N',CcA,BUd,BUX,BZl,BUg,BUc,BUT,BUa]]],['32256',AoS+AtA,[[U,'WGS 72 / UTM zone 56N',Clc,BUd,BUX,BYu,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32256']]],[[U,'WGS_72_UTM_zone_56N',CcA,BUd,BUX,BYu,BUg,BUc,BUT,BUa]]],['32255',Amg+AtA,[[U,'WGS 72 / UTM zone 55N',Clc,BUd,BUX,BYW,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32255']]],[[U,'WGS_72_UTM_zone_55N',CcA,BUd,BUX,BYW,BUg,BUc,BUT,BUa]]],['32254',AoI+AtA,[[U,'WGS 72 / UTM zone 54N',Clc,BUd,BUX,BYK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32254']]],[[U,'WGS_72_UTM_zone_54N',CcA,BUd,BUX,BYK,BUg,BUc,BUT,BUa]]],['32253',AmT+AtA,[[U,'WGS 72 / UTM zone 53N',Clc,BUd,BUX,BWd,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32253']]],[[U,'WGS_72_UTM_zone_53N',CcA,BUd,BUX,BWd,BUg,BUc,BUT,BUa]]],['32252',Ank+AtA,[[U,'WGS 72 / UTM zone 52N',Clc,BUd,BUX,BWQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32252']]],[[U,'WGS_72_UTM_zone_52N',CcA,BUd,BUX,BWQ,BUg,BUc,BUT,BUa]]],['32251',AnJ+AtA,[[U,'WGS 72 / UTM zone 51N',Clc,BUd,BUX,BWU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32251']]],[[U,'WGS_72_UTM_zone_51N',CcA,BUd,BUX,BWU,BUg,BUc,BUT,BUa]]],['32250',AnS+AtA,[[U,'WGS 72 / UTM zone 50N',Clc,BUd,BUX,BWS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32250']]],[[U,'WGS_72_UTM_zone_50N',CcA,BUd,BUX,BWS,BUg,BUc,BUT,BUa]]],['3225',Aow+' +lon_0=-18'+Aky,[[U,'WGS 84 / SCAR IMW SR27-28',ClU,BVG,BYf,BYe,BVX,[A,E,sQ],BUy,BUT,CVy,BUj,BUm,[B,K,'3225']]],[[U,'WGS_84_SCAR_IMW_SR27_28',Cbp,BVD,BYf,BYe,BVX,[A,E,sQ],BUy,BUT,BUa]]],['32249',AnE+AtA,[[U,'WGS 72 / UTM zone 49N',Clc,BUd,BUX,BWX,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32249']]],[[U,'WGS_72_UTM_zone_49N',CcA,BUd,BUX,BWX,BUg,BUc,BUT,BUa]]],['32248',AnD+AtA,[[U,'WGS 72 / UTM zone 48N',Clc,BUd,BUX,BWK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32248']]],[[U,'WGS_72_UTM_zone_48N',CcA,BUd,BUX,BWK,BUg,BUc,BUT,BUa]]],['32247',AoJ+AtA,[[U,'WGS 72 / UTM zone 47N',Clc,BUd,BUX,BWf,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32247']]],[[U,'WGS_72_UTM_zone_47N',CcA,BUd,BUX,BWf,BUg,BUc,BUT,BUa]]],['32246',AnA+AtA,[[U,'WGS 72 / UTM zone 46N',Clc,BUd,BUX,BWk,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32246']]],[[U,'WGS_72_UTM_zone_46N',CcA,BUd,BUX,BWk,BUg,BUc,BUT,BUa]]],['32245',AV+' +zone=45'+AtA,[[U,'WGS 72 / UTM zone 45N',Clc,BUd,BUX,BXK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32245']]],[[U,'WGS_72_UTM_zone_45N',CcA,BUd,BUX,BXK,BUg,BUc,BUT,BUa]]],['32244',AV+' +zone=44'+AtA,[[U,'WGS 72 / UTM zone 44N',Clc,BUd,BUX,BWz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32244']]],[[U,'WGS_72_UTM_zone_44N',CcA,BUd,BUX,BWz,BUg,BUc,BUT,BUa]]],['32243',ApL+AtA,[[U,'WGS 72 / UTM zone 43N',Clc,BUd,BUX,BWs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32243']]],[[U,'WGS_72_UTM_zone_43N',CcA,BUd,BUX,BWs,BUg,BUc,BUT,BUa]]],['32242',Aob+AtA,[[U,'WGS 72 / UTM zone 42N',Clc,BUd,BUX,BZh,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32242']]],[[U,'WGS_72_UTM_zone_42N',CcA,BUd,BUX,BZh,BUg,BUc,BUT,BUa]]],['32241',Aoc+AtA,[[U,'WGS 72 / UTM zone 41N',Clc,BUd,BUX,BZN,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32241']]],[[U,'WGS_72_UTM_zone_41N',CcA,BUd,BUX,BZN,BUg,BUc,BUT,BUa]]],['32240',AnK+AtA,[[U,'WGS 72 / UTM zone 40N',Clc,BUd,BUX,BXz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32240']]],[[U,'WGS_72_UTM_zone_40N',CcA,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['3224',Aow+AEv+Aky,[[U,'WGS 84 / SCAR IMW SR19-20',ClU,BVG,BYf,BYe,BVX,Bhb,BUy,BUT,CVy,BUj,BUm,[B,K,'3224']]],[[U,'WGS_84_SCAR_IMW_SR19_20',Cbp,BVD,BYf,BYe,BVX,Bhb,BUy,BUT,BUa]]],['32239',Alt+AtA,[[U,'WGS 72 / UTM zone 39N',Clc,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32239']]],[[U,'WGS_72_UTM_zone_39N',CcA,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['32238',AmA+AtA,[[U,'WGS 72 / UTM zone 38N',Clc,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32238']]],[[U,'WGS_72_UTM_zone_38N',CcA,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['32237',AmP+AtA,[[U,'WGS 72 / UTM zone 37N',Clc,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32237']]],[[U,'WGS_72_UTM_zone_37N',CcA,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['32236',AnF+AtA,[[U,'WGS 72 / UTM zone 36N',Clc,BUd,BUX,BWg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32236']]],[[U,'WGS_72_UTM_zone_36N',CcA,BUd,BUX,BWg,BUg,BUc,BUT,BUa]]],['32235',Amc+AtA,[[U,'WGS 72 / UTM zone 35N',Clc,BUd,BUX,BWP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32235']]],[[U,'WGS_72_UTM_zone_35N',CcA,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['32234',Anl+AtA,[[U,'WGS 72 / UTM zone 34N',Clc,BUd,BUX,BWR,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32234']]],[[U,'WGS_72_UTM_zone_34N',CcA,BUd,BUX,BWR,BUg,BUc,BUT,BUa]]],['32233',AmO+AtA,[[U,'WGS 72 / UTM zone 33N',Clc,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32233']]],[[U,'WGS_72_UTM_zone_33N',CcA,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['32232',Alu+AtA,[[U,'WGS 72 / UTM zone 32N',Clc,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32232']]],[[U,'WGS_72_UTM_zone_32N',CcA,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['32231',Amw+AtA,[[U,'WGS 72 / UTM zone 31N',Clc,BUd,BUX,BXt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32231']]],[[U,'WGS_72_UTM_zone_31N',CcA,BUd,BUX,BXt,BUg,BUc,BUT,BUa]]],['32230',AmR+AtA,[[U,'WGS 72 / UTM zone 30N',Clc,BUd,BUX,Bak,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32230']]],[[U,'WGS_72_UTM_zone_30N',CcA,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['3223',Aow+' +lon_0=-78'+Aky,[[U,'WGS 84 / SCAR IMW SR17-18',ClU,BVG,BYf,BYe,BVX,[A,E,au],BUy,BUT,CVy,BUj,BUm,[B,K,'3223']]],[[U,'WGS_84_SCAR_IMW_SR17_18',Cbp,BVD,BYf,BYe,BVX,[A,E,au],BUy,BUT,BUa]]],['32229',AmJ+AtA,[[U,'WGS 72 / UTM zone 29N',Clc,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32229']]],[[U,'WGS_72_UTM_zone_29N',CcA,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['32228',Aly+AtA,[[U,'WGS 72 / UTM zone 28N',Clc,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32228']]],[[U,'WGS_72_UTM_zone_28N',CcA,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['32227',Aou+AtA,[[U,'WGS 72 / UTM zone 27N',Clc,BUd,BUX,Bee,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32227']]],[[U,'WGS_72_UTM_zone_27N',CcA,BUd,BUX,Bee,BUg,BUc,BUT,BUa]]],['32226',AmS+AtA,[[U,'WGS 72 / UTM zone 26N',Clc,BUd,BUX,BaV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32226']]],[[U,'WGS_72_UTM_zone_26N',CcA,BUd,BUX,BaV,BUg,BUc,BUT,BUa]]],['32225',Any+AtA,[[U,'WGS 72 / UTM zone 25N',Clc,BUd,BUX,BZx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32225']]],[[U,'WGS_72_UTM_zone_25N',CcA,BUd,BUX,BZx,BUg,BUc,BUT,BUa]]],['32224',AoC+AtA,[[U,'WGS 72 / UTM zone 24N',Clc,BUd,BUX,BYx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32224']]],[[U,'WGS_72_UTM_zone_24N',CcA,BUd,BUX,BYx,BUg,BUc,BUT,BUa]]],['32223',Amp+AtA,[[U,'WGS 72 / UTM zone 23N',Clc,BUd,BUX,BYg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32223']]],[[U,'WGS_72_UTM_zone_23N',CcA,BUd,BUX,BYg,BUg,BUc,BUT,BUa]]],['32222',Alb+AtA,[[U,'WGS 72 / UTM zone 22N',Clc,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32222']]],[[U,'WGS_72_UTM_zone_22N',CcA,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['32221',AlI+AtA,[[U,'WGS 72 / UTM zone 21N',Clc,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32221']]],[[U,'WGS_72_UTM_zone_21N',CcA,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['32220',Aku+AtA,[[U,'WGS 72 / UTM zone 20N',Clc,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32220']]],[[U,'WGS_72_UTM_zone_20N',CcA,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['3222',Aow+PQ+Aky,[[U,'WGS 84 / SCAR IMW SR15-16',ClU,BVG,BYf,BYe,BVX,BWb,BUy,BUT,CVy,BUj,BUm,[B,K,'3222']]],[[U,'WGS_84_SCAR_IMW_SR15_16',Cbp,BVD,BYf,BYe,BVX,BWb,BUy,BUT,BUa]]],['32219',AlG+AtA,[[U,'WGS 72 / UTM zone 19N',Clc,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32219']]],[[U,'WGS_72_UTM_zone_19N',CcA,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['32218',AlJ+AtA,[[U,'WGS 72 / UTM zone 18N',Clc,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32218']]],[[U,'WGS_72_UTM_zone_18N',CcA,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['32217',AlW+AtA,[[U,'WGS 72 / UTM zone 17N',Clc,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32217']]],[[U,'WGS_72_UTM_zone_17N',CcA,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['32216',AnW+AtA,[[U,'WGS 72 / UTM zone 16N',Clc,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32216']]],[[U,'WGS_72_UTM_zone_16N',CcA,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['32215',AnV+AtA,[[U,'WGS 72 / UTM zone 15N',Clc,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32215']]],[[U,'WGS_72_UTM_zone_15N',CcA,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['32214',AoG+AtA,[[U,'WGS 72 / UTM zone 14N',Clc,BUd,BUX,BXU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32214']]],[[U,'WGS_72_UTM_zone_14N',CcA,BUd,BUX,BXU,BUg,BUc,BUT,BUa]]],['32213',AoF+AtA,[[U,'WGS 72 / UTM zone 13N',Clc,BUd,BUX,BZS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32213']]],[[U,'WGS_72_UTM_zone_13N',CcA,BUd,BUX,BZS,BUg,BUc,BUT,BUa]]],['32212',AoE+AtA,[[U,'WGS 72 / UTM zone 12N',Clc,BUd,BUX,BXs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32212']]],[[U,'WGS_72_UTM_zone_12N',CcA,BUd,BUX,BXs,BUg,BUc,BUT,BUa]]],['32211',AoD+AtA,[[U,'WGS 72 / UTM zone 11N',Clc,BUd,BUX,BXx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32211']]],[[U,'WGS_72_UTM_zone_11N',CcA,BUd,BUX,BXx,BUg,BUc,BUT,BUa]]],['32210',Amy+AtA,[[U,'WGS 72 / UTM zone 10N',Clc,BUd,BUX,Bap,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32210']]],[[U,'WGS_72_UTM_zone_10N',CcA,BUd,BUX,Bap,BUg,BUc,BUT,BUa]]],['3221',Aow+' +lon_0=-102'+Aky,[[U,'WGS 84 / SCAR IMW SR13-14',ClU,BVG,BYf,BYe,BVX,Buu,BUy,BUT,CVy,BUj,BUm,[B,K,'3221']]],[[U,'WGS_84_SCAR_IMW_SR13_14',Cbp,BVD,BYf,BYe,BVX,Buu,BUy,BUT,BUa]]],['32209',AV+' +zone=9'+AtA,[[U,'WGS 72 / UTM zone 9N',Clc,BUd,BUX,BaA,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32209']]],[[U,'WGS_72_UTM_zone_9N',CcA,BUd,BUX,BaA,BUg,BUc,BUT,BUa]]],['32208',AV+' +zone=8'+AtA,[[U,'WGS 72 / UTM zone 8N',Clc,BUd,BUX,BZz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32208']]],[[U,'WGS_72_UTM_zone_8N',CcA,BUd,BUX,BZz,BUg,BUc,BUT,BUa]]],['32207',AV+' +zone=7'+AtA,[[U,'WGS 72 / UTM zone 7N',Clc,BUd,BUX,BZn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32207']]],[[U,'WGS_72_UTM_zone_7N',CcA,BUd,BUX,BZn,BUg,BUc,BUT,BUa]]],['32206',AV+' +zone=6'+AtA,[[U,'WGS 72 / UTM zone 6N',Clc,BUd,BUX,BYy,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32206']]],[[U,'WGS_72_UTM_zone_6N',CcA,BUd,BUX,BYy,BUg,BUc,BUT,BUa]]],['32205',AV+' +zone=5'+AtA,[[U,'WGS 72 / UTM zone 5N',Clc,BUd,BUX,BZK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32205']]],[[U,'WGS_72_UTM_zone_5N',CcA,BUd,BUX,BZK,BUg,BUc,BUT,BUa]]],['32204',AV+' +zone=4'+AtA,[[U,'WGS 72 / UTM zone 4N',Clc,BUd,BUX,Bac,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32204']]],[[U,'WGS_72_UTM_zone_4N',CcA,BUd,BUX,Bac,BUg,BUc,BUT,BUa]]],['32203',AV+' +zone=3'+AtA,[[U,'WGS 72 / UTM zone 3N',Clc,BUd,BUX,BaZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32203']]],[[U,'WGS_72_UTM_zone_3N',CcA,BUd,BUX,BaZ,BUg,BUc,BUT,BUa]]],['32202',AV+' +zone=2'+AtA,[[U,'WGS 72 / UTM zone 2N',Clc,BUd,BUX,BYV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32202']]],[[U,'WGS_72_UTM_zone_2N',CcA,BUd,BUX,BYV,BUg,BUc,BUT,BUa]]],['32201',AV+' +zone=1'+AtA,[[U,'WGS 72 / UTM zone 1N',Clc,BUd,BUX,BYF,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32201']]],[[U,'WGS_72_UTM_zone_1N',CcA,BUd,BUX,BYF,BUg,BUc,BUT,BUa]]],['3220',ArG+AIh+Aky,[[U,'WGS 84 / SCAR IMW SQ57-58',ClU,BVG,Baj,Bai,BVX,BkM,BUy,BUT,CVy,BUj,BUm,[B,K,'3220']]],[[U,'WGS_84_SCAR_IMW_SQ57_58',Cbp,BVD,Baj,Bai,BVX,BkM,BUy,BUT,BUa]]],['32199',Aqg+QH+' +lat_0=25.5'+BLL+j+c+q+a,[[U,Bx+' /'+kJ+' Offshore',ClV,BVG,BcY,BcX,CAT,Bbr,BWa,BUT,CVy,BUl,BUk,[B,K,'32199']]],[[U,'NAD83_Louisiana_Offshore',Cbn,BVD,BcY,BcX,CAT,Bbr,BWa,BUT,BUa]]],['32198',BRf+BRq,[[U,Bx+' / Quebec'+PW,ClV,BVG,BmB,Bbx,BZL,Bau,BUy,BUT,CVy,BUl,BUk,[B,K,'32198']]],[[U,'NAD83_Quebec_Lambert',Cbn,BVD,BmB,Bbx,BZL,Bau,BUy,BUT,BUa]]],['32197',AjX+yZ+BTo,[[U,Bx+' / MTM zone 17',ClV,BUd,BUX,BlA,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32197']]],[[U,'NAD83_MTM_zone_17',Cbn,BUd,BUX,BlA,BUt,BVt,BUT,BUa]]],['32196',BHA+BTo,[[U,Bx+' / MTM zone 16',ClV,BUd,BUX,BYT,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32196']]],[[U,'NAD83_MTM_zone_16',Cbn,BUd,BUX,BYT,BUt,BVt,BUT,BUa]]],['32195',BGq+BTo,[[U,Bx+' / MTM zone 15',ClV,BUd,BUX,BWb,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32195']]],[[U,'NAD83_MTM_zone_15',Cbn,BUd,BUX,BWb,BUt,BVt,BUT,BUa]]],['32194',BIV+BTo,[[U,Bx+' / MTM zone 14',ClV,BUd,BUX,BXS,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32194']]],[[U,'NAD83_MTM_zone_14',Cbn,BUd,BUX,BXS,BUt,BVt,BUT,BUa]]],['32193',BNe+BTo,[[U,Bx+' / MTM zone 13',ClV,BUd,BUX,Bhh,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32193']]],[[U,'NAD83_MTM_zone_13',Cbn,BUd,BUX,Bhh,BUt,BVt,BUT,BUa]]],['32192',BIW+BTo,[[U,Bx+' / MTM zone 12',ClV,BUd,BUX,BVm,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32192']]],[[U,'NAD83_MTM_zone_12',Cbn,BUd,BUX,BVm,BUt,BVt,BUT,BUa]]],['32191',AjX+VA+BTo,[[U,Bx+' / MTM zone 11',ClV,BUd,BUX,BYk,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32191']]],[[U,'NAD83_MTM_zone_11',Cbn,BUd,BUX,BYk,BUt,BVt,BUT,BUa]]],['32190',BNU+BTo,[[U,Bx+' / MTM zone 10',ClV,BUd,BUX,BZs,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'32190']]],[[U,'NAD83_MTM_zone_10',Cbn,BUd,BUX,BZs,BUt,BVt,BUT,BUa]]],['3219',ArG+ya+Aky,[[U,'WGS 84 / SCAR IMW SQ55-56',ClU,BVG,Baj,Bai,BVX,Beg,BUy,BUT,CVy,BUj,BUm,[B,K,'3219']]],[[U,'WGS_84_SCAR_IMW_SQ55_56',Cbp,BVD,Baj,Bai,BVX,Beg,BUy,BUT,BUa]]],['32189',BJY+BTu,[[U,Bx+' / MTM zone 9',ClV,BUd,BUX,BrV,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'32189']]],[[U,'NAD83_MTM_zone_9',Cbn,BUd,BUX,BrV,BUt,BVt,BUT,BUa]]],['32188',BJW+BTu,[[U,Bx+' / MTM zone 8',ClV,BUd,BUX,BrU,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'32188']]],[[U,'NAD83_MTM_zone_8',Cbn,BUd,BUX,BrU,BUt,BVt,BUT,BUa]]],['32187',AjX+fS+BTo,[[U,Bx+' / MTM zone 7',ClV,BUd,BUX,BbL,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'32187']]],[[U,'NAD83_MTM_zone_7',Cbn,BUd,BUX,BbL,BUt,BVt,BUT,BUa]]],['32186',BJU+BTu,[[U,Bx+' / MTM zone 6',ClV,BUd,BUX,BrT,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'32186']]],[[U,'NAD83_MTM_zone_6',Cbn,BUd,BUX,BrT,BUt,BVt,BUT,BUa]]],['32185',BHq+BTu,[[U,Bx+' / MTM zone 5',ClV,BUd,BUX,Bnv,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'32185']]],[[U,'NAD83_MTM_zone_5',Cbn,BUd,BUX,Bnv,BUt,BVt,BUT,BUa]]],['32184',BHp+BTu,[[U,Bx+' / MTM zone 4',ClV,BUd,BUX,Bnu,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'32184']]],[[U,'NAD83_MTM_zone_4',Cbn,BUd,BUX,Bnu,BUt,BVt,BUT,BUa]]],['32183',BJQ+BTu,[[U,Bx+' / MTM zone 3',ClV,BUd,BUX,BrS,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'32183']]],[[U,'NAD83_MTM_zone_3',Cbn,BUd,BUX,BrS,BUt,BVt,BUT,BUa]]],['32182',AjX+' +lon_0=-56'+BTo,[[U,Bx+' / MTM zone 2',ClV,BUd,BUX,BpV,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'32182']]],[[U,'NAD83_MTM_zone_2',Cbn,BUd,BUX,BpV,BUt,BVt,BUT,BUa]]],['32181',AjX+' +lon_0=-53'+BTo,[[U,Bx+' / MTM zone 1',ClV,BUd,BUX,Buj,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'32181']]],[[U,'NAD83_MTM_zone_1',Cbn,BUd,BUX,Buj,BUt,BVt,BUT,BUa]]],['3218',ArG+ATI+Aky,[[U,'WGS 84 / SCAR IMW SQ53-54',ClU,BVG,Baj,Bai,BVX,Blh,BUy,BUT,CVy,BUj,BUm,[B,K,'3218']]],[[U,'WGS_84_SCAR_IMW_SQ53_54',Cbp,BVD,Baj,Bai,BVX,Blh,BUy,BUT,BUa]]],['3217',ArG+kC+Aky,[[U,'WGS 84 / SCAR IMW SQ51-52',ClU,BVG,Baj,Bai,BVX,Bao,BUy,BUT,CVy,BUj,BUm,[B,K,'3217']]],[[U,'WGS_84_SCAR_IMW_SQ51_52',Cbp,BVD,Baj,Bai,BVX,Bao,BUy,BUT,BUa]]],['32167',BIW+AyF,[[U,Bx+' / BLM 17N'+DE,ClV,BUd,BUX,BVm,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32167']]],[[U,'NAD83_BLM_17N_ftUS',Cbn,BUd,BUX,BVm,BUg,BWI,BUT,BUr]]],['32166',BIV+AyF,[[U,Bx+' / BLM 16N'+DE,ClV,BUd,BUX,BXS,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32166']]],[[U,'NAD83_BLM_16N_ftUS',Cbn,BUd,BUX,BXS,BUg,BWI,BUT,BUr]]],['32165',BHA+AyF,[[U,Bx+' / BLM 15N'+DE,ClV,BUd,BUX,BYT,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32165']]],[[U,'NAD83_BLM_15N_ftUS',Cbn,BUd,BUX,BYT,BUg,BWI,BUT,BUr]]],['32164',AjX+kA+AyF,[[U,Bx+' / BLM 14N'+DE,ClV,BUd,BUX,BXU,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32164']]],[[U,'NAD83_BLM_14N_ftUS',Cbn,BUd,BUX,BXU,BUg,BWI,BUT,BUr]]],['32161',BKq+j+c+q+a,[[U,Bx+' / Puerto Rico & Virgin Is.',ClV,BVG,Bke,Bkd,Bkc,Bkb,BVP,Bae,CVy,BUl,BUk,[B,K,'32161']]],[[U,'NAD83_Puerto_Rico_Virgin_Is',Cbn,BVD,Bke,Bkd,Bkc,Bkb,BVP,Bae,BUa]]],['3216',ArG+gu+Aky,[[U,'WGS 84 / SCAR IMW SQ49-50',ClU,BVG,Baj,Bai,BVX,BZy,BUy,BUT,CVy,BUj,BUm,[B,K,'3216']]],[[U,'WGS_84_SCAR_IMW_SQ49_50',Cbp,BVD,Baj,Bai,BVX,BZy,BUy,BUT,BUa]]],['32158',BRb+c+q+a,[[U,Bx+' /'+pz+' West',ClV,BUd,BWy,Bgf,BWF,BXP,BXV,CVy,BUl,BUk,[B,K,'32158']]],[[U,'NAD83_Wyoming_West',Cbn,BUd,BWy,Bgf,BWF,BXP,BXV,BUa]]],['32157',BGo+c+q+a,[[U,Bx+' /'+pz+' West'+Gh,ClV,BUd,BWy,Bgg,BWF,BVY,BUT,CVy,BUl,BUk,[B,K,'32157']]],[[U,'NAD83_Wyoming_West_Central',Cbn,BUd,BWy,Bgg,BWF,BVY,BUT,BUa]]],['32156',BRZ+c+q+a,[[U,Bx+' /'+pz+' East'+Gh,ClV,BUd,BWy,Bge,BWF,BVh,BXV,CVy,BUl,BUk,[B,K,'32156']]],[[U,'NAD83_Wyoming_East_Central',Cbn,BUd,BWy,Bge,BWF,BVh,BXV,BUa]]],['32155',BRX+c+q+a,[[U,Bx+' /'+pz+' East',ClV,BUd,BWy,Bgd,BWF,BVP,BUT,CVy,BUl,BUk,[B,K,'32155']]],[[U,'NAD83_Wyoming_East',Cbn,BUd,BWy,Bgd,BWF,BVP,BUT,BUa]]],['32154',BGe+c+q+a,[[U,Bx+' /'+cp+' South',ClV,BVG,BjK,BjJ,Bde,BWb,BVY,BUT,CVy,BUl,BUk,[B,K,'32154']]],[[U,'NAD83_Wisconsin_South',Cbn,BVD,BjK,BjJ,Bde,BWb,BVY,BUT,BUa]]],['32153',BGf+c+q+a,[[U,Bx+' /'+BBd,ClV,BVG,Bdi,BjS,BYM,BWb,BVY,BUT,CVy,BUl,BUk,[B,K,'32153']]],[[U,'NAD83_Wisconsin_Central',Cbn,BVD,Bdi,BjS,BYM,BWb,BVY,BUT,BUa]]],['32152',BGd+c+q+a,[[U,Bx+' /'+BBe,ClV,BVG,BjI,BjH,Bgc,BWb,BVY,BUT,CVy,BUl,BUk,[B,K,'32152']]],[[U,'NAD83_Wisconsin_North',Cbn,BVD,BjI,BjH,Bgc,BWb,BVY,BUT,BUa]]],['32151',BGc+c+q+a,[[U,Bx+' / West'+eI+' South',ClV,BVG,BjG,BjF,Bgb,BVm,BVY,BUT,CVy,BUl,BUk,[B,K,'32151']]],[[U,'NAD83_West_Virginia_South',Cbn,BVD,BjG,BjF,Bgb,BVm,BVY,BUT,BUa]]],['32150',BGb+c+q+a,[[U,Bx+' / West'+Aoh,ClV,BVG,BjE,BjD,Bga,BZs,BVY,BUT,CVy,BUl,BUk,[B,K,'32150']]],[[U,'NAD83_West_Virginia_North',Cbn,BVD,BjE,BjD,Bga,BZs,BVY,BUT,BUa]]],['3215',ArG+kD+Aky,[[U,'WGS 84 / SCAR IMW SQ47-48',ClU,BVG,Baj,Bai,BVX,Ban,BUy,BUT,CVy,BUj,BUm,[B,K,'3215']]],[[U,'WGS_84_SCAR_IMW_SQ47_48',Cbp,BVD,Baj,Bai,BVX,Ban,BUy,BUT,BUa]]],['32149',BRU+j+c+q+a,[[U,Bx+' /'+kE+' South',ClV,BVG,BjC,BjB,BgZ,BWB,BUc,BUT,CVy,BUl,BUk,[B,K,'32149']]],[[U,'NAD83_Washington_South',Cbn,BVD,BjC,BjB,BgZ,BWB,BUc,BUT,BUa]]],['32148',BRS+j+c+q+a,[[U,Bx+' /'+BBc,ClV,BVG,BaE,BjA,BZA,BgY,BUc,BUT,CVy,BUl,BUk,[B,K,'32148']]],[[U,'NAD83_Washington_North',Cbn,BVD,BaE,BjA,BZA,BgY,BUc,BUT,BUa]]],['32147',BRQ+c+q+a,[[U,Bx+' /'+eI+' South',ClV,BVG,BZr,BgX,BXr,BZe,BXO,BVg,CVy,BUl,BUk,[B,K,'32147']]],[[U,'NAD83_Virginia_South',Cbn,BVD,BZr,BgX,BXr,BZe,BXO,BVg,BUa]]],['32146',BRO+c+q+a,[[U,Bx+' /'+Aoh,ClV,BVG,Biy,Bix,BXq,BZe,BXO,BYH,CVy,BUl,BUk,[B,K,'32146']]],[[U,'NAD83_Virginia_North',Cbn,BVD,Biy,Bix,BXq,BZe,BXO,BYH,BUa]]],['32145',BRM+c+q+a,[[U,Bx+' / Vermont',ClV,BUd,BYX,BgW,BgV,BUc,BUT,CVy,BUl,BUk,[B,K,'32145']]],[[U,'NAD83_Vermont',Cbn,BUd,BYX,BgW,BgV,BUc,BUT,BUa]]],['32144',BRe+c+q+a,[[U,Bx+' / Utah South',ClV,BVG,Bcd,Bcc,BWJ,BWm,BUc,Bbw,CVy,BUl,BUk,[B,K,'32144']]],[[U,'NAD83_Utah_South',Cbn,BVD,Bcd,Bcc,BWJ,BWm,BUc,Bbw,BUa]]],['32143',BRc+c+q+a,[[U,Bx+' / Utah'+Gh,ClV,BVG,Bca,BcZ,BYl,BWm,BUc,BYH,CVy,BUl,BUk,[B,K,'32143']]],[[U,'NAD83_Utah_Central',Cbn,BVD,Bca,BcZ,BYl,BWm,BUc,BYH,BUa]]],['32142',BRd+c+q+a,[[U,Bx+' / Utah'+QM,ClV,BVG,BZD,Bcb,Bby,BWm,BUc,BVg,CVy,BUl,BUk,[B,K,'32142']]],[[U,'NAD83_Utah_North',Cbn,BVD,BZD,Bcb,Bby,BWm,BUc,BVg,BUa]]],['32141',BTT+c+q+a,[[U,Bx+' / Texas South',ClV,BVG,BcY,BcX,Bdd,BXp,BVl,Bdc,CVy,BUl,BUk,[B,K,'32141']]],[[U,'NAD83_Texas_South',Cbn,BVD,BcY,BcX,Bdd,BXp,BVl,Bdc,BUa]]],['32140',BRK+j+c+q+a,[[U,Bx+' / Texas South'+Gh,ClV,BVG,Biv,Biu,BgU,BXU,BVY,BgT,CVy,BUl,BUk,[B,K,'32140']]],[[U,'NAD83_Texas_South_Central',Cbn,BVD,Biv,Biu,BgU,BXU,BVY,BgT,BUa]]],['3214',ArG+eX+Aky,[[U,'WGS 84 / SCAR IMW SQ45-46',ClU,BVG,Baj,Bai,BVX,BYP,BUy,BUT,CVy,BUj,BUm,[B,K,'3214']]],[[U,'WGS_84_SCAR_IMW_SQ45_46',Cbp,BVD,Baj,Bai,BVX,BYP,BUy,BUT,BUa]]],['32139',BTP+c+q+a,[[U,Bx+' / Texas'+Gh,ClV,BVG,Bin,Bim,Bda,BZd,BWl,Bbw,CVy,BUl,BUk,[B,K,'32139']]],[[U,'NAD83_Texas_Central',Cbn,BVD,Bin,Bim,Bda,BZd,BWl,Bbw,BUa]]],['32138',BRI+c+q+a,[[U,Bx+' / Texas'+BBb,ClV,BVG,Bit,Bis,BgS,BXp,BVY,BYH,CVy,BUl,BUk,[B,K,'32138']]],[[U,'NAD83_Texas_North_Central',Cbn,BVD,Bit,Bis,BgS,BXp,BVY,BYH,BUa]]],['32137',BTR+c+q+a,[[U,Bx+' / Texas'+QM,ClV,BVG,Bir,Biq,BgR,BgQ,BVP,BVg,CVy,BUl,BUk,[B,K,'32137']]],[[U,'NAD83_Texas_North',Cbn,BVD,Bir,Biq,BgR,BgQ,BVP,BVg,BUa]]],['32136',BGa+c+q+a,[[U,Bx+' /'+AGm,ClV,BVG,Bil,Bik,BZq,Bcg,BVY,BUT,CVy,BUl,BUk,[B,K,'32136']]],[[U,'NAD83_Tennessee',Cbn,BVD,Bil,Bik,BZq,Bcg,BVY,BUT,BUa]]],['32135',BGZ+c+q+a,[[U,Bx+' / South Dakota South',ClV,BVG,Bij,Bii,BgO,BZd,BVY,BUT,CVy,BUl,BUk,[B,K,'32135']]],[[U,'NAD83_South_Dakota_South',Cbn,BVD,Bij,Bii,BgO,BZd,BVY,BUT,BUa]]],['32134',BGY+c+q+a,[[U,Bx+' / South Dakota'+QM,ClV,BVG,Bih,Big,BYM,BXb,BVY,BUT,CVy,BUl,BUk,[B,K,'32134']]],[[U,'NAD83_South_Dakota_North',Cbn,BVD,Bih,Big,BYM,BXb,BVY,BUT,BUa]]],['32133',BGX+c+q+a,[[U,Bx+' / South'+pa,ClV,BVG,Bif,Bie,BgN,BVm,BsZ,BUT,CVy,BUl,BUk,[B,K,'32133']]],[[U,'NAD83_South_Carolina',Cbn,BVD,Bif,Bie,BgN,BVm,BsZ,BUT,BUa]]],['32130',BRF+j+c+q+a,[[U,Bx+' / Rhode'+fA,ClV,BUd,BgM,BZc,Bid,BWV,BUT,CVy,BUl,BUk,[B,K,'32130']]],[[U,'NAD83_Rhode_Island',Cbn,BUd,BgM,BZc,Bid,BWV,BUT,BUa]]],['3213',ArG+rE+Aky,[[U,'WGS 84 / SCAR IMW SQ43-44',ClU,BVG,Baj,Bai,BVX,Bam,BUy,BUT,CVy,BUj,BUm,[B,K,'3213']]],[[U,'WGS_84_SCAR_IMW_SQ43_44',Cbp,BVD,Baj,Bai,BVX,Bam,BUy,BUT,BUa]]],['32129',BGW+c+q+a,[[U,Bx+' /'+eG+' South',ClV,BVG,BgL,BgK,BXi,BZb,BVY,BUT,CVy,BUl,BUk,[B,K,'32129']]],[[U,'NAD83_Pennsylvania_South',Cbn,BVD,BgL,BgK,BXi,BZb,BVY,BUT,BUa]]],['32128',BFe+c+q+a,[[U,Bx+' /'+BBa,ClV,BVG,Bic,Bib,BZp,BZb,BVY,BUT,CVy,BUl,BUk,[B,K,'32128']]],[[U,'NAD83_Pennsylvania_North',Cbn,BVD,Bic,Bib,BZp,BZb,BVY,BUT,BUa]]],['32127',BKu+j+c+q+a,[[U,Bx+' / Oregon South',ClV,BVG,Bdm,Bdl,BWi,BWB,BWL,BUT,CVy,BUl,BUk,[B,K,'32127']]],[[U,'NAD83_Oregon_South',Cbn,BVD,Bdm,Bdl,BWi,BWB,BWL,BUT,BUa]]],['32126',BKt+j+c+q+a,[[U,Bx+' / Oregon'+QM,ClV,BVG,Bdk,Bdj,BYN,BWB,BXy,BUT,CVy,BUl,BUk,[B,K,'32126']]],[[U,'NAD83_Oregon_North',Cbn,BVD,Bdk,Bdj,BYN,BWB,BXy,BUT,BUa]]],['32125',BFc+c+q+a,[[U,Bx+' /'+AGg+' South',ClV,BVG,Bia,BiZ,BgJ,BXh,BVY,BUT,CVy,BUl,BUk,[B,K,'32125']]],[[U,'NAD83_Oklahoma_South',Cbn,BVD,Bia,BiZ,BgJ,BXh,BVY,BUT,BUa]]],['32124',BFM+c+q+a,[[U,Bx+' /'+ArE,ClV,BVG,BgI,BiY,BgH,BXh,BVY,BUT,CVy,BUl,BUk,[B,K,'32124']]],[[U,'NAD83_Oklahoma_North',Cbn,BVD,BgI,BiY,BgH,BXh,BVY,BUT,BUa]]],['32123',BFL+c+q+a,[[U,Bx+' / Ohio South',ClV,BVG,BiX,BiW,BWT,BYk,BVY,BUT,CVy,BUl,BUk,[B,K,'32123']]],[[U,'NAD83_Ohio_South',Cbn,BVD,BiX,BiW,BWT,BYk,BVY,BUT,BUa]]],['32122',BFI+c+q+a,[[U,Bx+' / Ohio'+QM,ClV,BVG,BiV,BiU,Bat,BYk,BVY,BUT,CVy,BUl,BUk,[B,K,'32122']]],[[U,'NAD83_Ohio_North',Cbn,BVD,BiV,BiU,Bat,BYk,BVY,BUT,BUa]]],['32121',BRD+c+q+a,[[U,Bx+' /'+QM+' Dakota South',ClV,BVG,BiT,BiS,BbM,BZa,BVY,BUT,CVy,BUl,BUk,[B,K,'32121']]],[[U,'NAD83_North_Dakota_South',Cbn,BVD,BiT,BiS,BbM,BZa,BVY,BUT,BUa]]],['32120',BRB+c+q+a,[[U,Bx+' /'+QM+' Dakota'+QM,ClV,BVG,BaE,BiR,BZA,BZa,BVY,BUT,CVy,BUl,BUk,[B,K,'32120']]],[[U,'NAD83_North_Dakota_North',Cbn,BVD,BaE,BiR,BZA,BZa,BVY,BUT,BUa]]],['3212',ArG+Afv+Aky,[[U,'WGS 84 / SCAR IMW SQ41-42',ClU,BVG,Baj,Bai,BVX,Blg,BUy,BUT,CVy,BUj,BUm,[B,K,'3212']]],[[U,'WGS_84_SCAR_IMW_SQ41_42',Cbp,BVD,Baj,Bai,BVX,Blg,BUy,BUT,BUa]]],['32119',BQz+c+q+a,[[U,Bx+' /'+BBZ,ClV,BVG,BiQ,BiP,BgG,BdZ,BsY,BUT,CVy,BUl,BUk,[B,K,'32119']]],[[U,'NAD83_North_Carolina',Cbn,BVD,BiQ,BiP,BgG,BdZ,BsY,BUT,BUa]]],['32118',BKp+j+c+q+a,[[U,Bx+' / New York Long'+fA,ClV,BVG,BgE,BgD,BZp,BgC,BVl,BUT,CVy,BUl,BUk,[B,K,'32118']]],[[U,'NAD83_New_York_Long_Island',Cbn,BVD,BgE,BgD,BZp,BgC,BVl,BUT,BUa]]],['32117',BQx+j+c+q+a,[[U,Bx+' / New York West',ClV,BUd,BXM,BgF,BWF,Blz,BUT,CVy,BUl,BUk,[B,K,'32117']]],[[U,'NAD83_New_York_West',Cbn,BUd,BXM,BgF,BWF,Blz,BUT,BUa]]],['32116',BQv+c+q+a,[[U,Bx+' / New York'+Gh,ClV,BUd,BXM,BgB,BWF,BWp,BUT,CVy,BUl,BUk,[B,K,'32116']]],[[U,'NAD83_New_York_Central',Cbn,BUd,BXM,BgB,BWF,BWp,BUT,BUa]]],['32115',BUS,[[U,Bx+' / New York East',ClV,BUd,BZo,BaD,BUt,BXc,BUT,CVy,BUl,BUk,[B,K,'32115']]],[[U,'NAD83_New_York_East',Cbn,BUd,BZo,BaD,BUt,BXc,BUT,BUa]]],['32114',BQt+j+c+q+a,[[U,Bx+' / New Mexico West',ClV,BUd,BWA,BgA,Bfz,BsV,BUT,CVy,BUl,BUk,[B,K,'32114']]],[[U,'NAD83_New_Mexico_West',Cbn,BUd,BWA,BgA,Bfz,BsV,BUT,BUa]]],['32113',BQs+c+q+a,[[U,Bx+' / New Mexico'+Gh,ClV,BUd,BWA,Bfx,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'32113']]],[[U,'NAD83_New_Mexico_Central',Cbn,BUd,BWA,Bfx,BUt,BUc,BUT,BUa]]],['32112',BGn+c+q+a,[[U,Bx+' / New Mexico East',ClV,BUd,BWA,Bfy,BcW,BsT,BUT,CVy,BUl,BUk,[B,K,'32112']]],[[U,'NAD83_New_Mexico_East',Cbn,BUd,BWA,Bfy,BcW,BsT,BUT,BUa]]],['32111',BUS,[[U,Bx+' / New Jersey',ClV,BUd,BZo,BaD,BUt,BXc,BUT,CVy,BUl,BUk,[B,K,'32111']]],[[U,'NAD83_New_Jersey',Cbn,BUd,BZo,BaD,BUt,BXc,BUT,BUa]]],['32110',BQr+c+q+a,[[U,Bx+' / New'+AGn,ClV,BUd,BYX,Bfw,BWN,BVl,BUT,CVy,BUl,BUk,[B,K,'32110']]],[[U,'NAD83_New_Hampshire',Cbn,BUd,BYX,Bfw,BWN,BVl,BUT,BUa]]],['3211',ArG+AXK+Aky,[[U,'WGS 84 / SCAR IMW SQ39-40',ClU,BVG,Baj,Bai,BVX,BkW,BUy,BUT,CVy,BUj,BUm,[B,K,'3211']]],[[U,'WGS_84_SCAR_IMW_SQ39_40',Cbp,BVD,Baj,Bai,BVX,BkW,BUy,BUT,BUa]]],['32109',BTi+j+c+q+a,[[U,Bx+' / Nevada West',ClV,BUd,BXg,Bfv,BUt,BXP,BgT,CVy,BUl,BUk,[B,K,'32109']]],[[U,'NAD83_Nevada_West',Cbn,BUd,BXg,Bfv,BUt,BXP,BgT,BUa]]],['32108',BQo+c+q+a,[[U,Bx+' / Nevada'+Gh,ClV,BUd,BXg,Bft,BUt,BUc,Bdb,CVy,BUl,BUk,[B,K,'32108']]],[[U,'NAD83_Nevada_Central',Cbn,BUd,BXg,Bft,BUt,BUc,Bdb,BUa]]],['32107',BQq+j+c+q+a,[[U,Bx+' / Nevada East',ClV,BUd,BXg,Bfu,BUt,BVP,BsQ,CVy,BUl,BUk,[B,K,'32107']]],[[U,'NAD83_Nevada_East',Cbn,BUd,BXg,Bfu,BUt,BVP,BsQ,BUa]]],['32104',BQn+j+c+q+a,[[U,Bx+' /'+ASu,ClV,BVG,BZg,BZu,BjT,BXb,BUc,BUT,CVy,BUl,BUk,[B,K,'32104']]],[[U,'NAD83_Nebraska',Cbn,BVD,BZg,BZu,BjT,BXb,BUc,BUT,BUa]]],['32100',BQl+j+c+q+a,[[U,Bx+' / Montana',ClV,BVG,BaG,BiN,BiM,BcV,BVY,BUT,CVy,BUl,BUk,[B,K,'32100']]],[[U,'NAD83_Montana',Cbn,BVD,BaG,BiN,BiM,BcV,BVY,BUT,BUa]]],['3210',ArG+AGU+Aky,[[U,'WGS 84 / SCAR IMW SQ37-38',ClU,BVG,Baj,Bai,BVX,BdJ,BUy,BUT,CVy,BUj,BUm,[B,K,'3210']]],[[U,'WGS_84_SCAR_IMW_SQ37_38',Cbp,BVD,Baj,Bai,BVX,BdJ,BUy,BUT,BUa]]],['32099',AxA+Oc+Asy,[[U,Dg+' /'+kJ+' Offshore',ClZ,BVG,BcY,BcX,Bdd,Bbr,BVW,BUT,CVz,BUl,BUk,[B,K,'32099']]],[[U,'NAD27_Louisiana_Offshore',Cbw,BVD,BcY,BcX,Bdd,Bbr,BVW,BUT,BUr]]],['32098',BRf+BIh+a,[[U,Dg+' / Quebec'+PW,ClZ,BVG,BmB,Bbx,BZL,Bau,BUy,BUT,CVy,BUl,BUk,[B,K,'32098']]],[[U,'NAD27_Quebec_Lambert',Cbw,BVD,BmB,Bbx,BZL,Bau,BUy,BUT,BUa]]],['3209',ArG+vs+Aky,[[U,'WGS 84 / SCAR IMW SQ21-22',ClU,BVG,Baj,Bai,BVX,BdM,BUy,BUT,CVy,BUj,BUm,[B,K,'3209']]],[[U,'WGS_84_SCAR_IMW_SQ21_22',Cbp,BVD,Baj,Bai,BVX,BdM,BUy,BUT,BUa]]],['32086',BJU+BJO+a,[[U,Dg+' / MTM zone 6',ClZ,BUd,BUX,BrT,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32086']]],[[U,'NAD27_MTM_zone_6',Cbw,BUd,BUX,BrT,BUt,BVt,BUT,BUa]]],['32085',BHq+BJO+a,[[U,Dg+' / MTM zone 5',ClZ,BUd,BUX,Bnv,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32085']]],[[U,'NAD27_MTM_zone_5',Cbw,BUd,BUX,Bnv,BUt,BVt,BUT,BUa]]],['32084',BHp+BJO+a,[[U,Dg+' / MTM zone 4',ClZ,BUd,BUX,Bnu,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32084']]],[[U,'NAD27_MTM_zone_4',Cbw,BUd,BUX,Bnu,BUt,BVt,BUT,BUa]]],['32083',BJQ+BJO+a,[[U,Dg+' / MTM zone 3',ClZ,BUd,BUX,BrS,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32083']]],[[U,'NAD27_MTM_zone_3',Cbw,BUd,BUX,BrS,BUt,BVt,BUT,BUa]]],['32082',AjX+' +lon_0=-56'+AkY+BIh+a,[[U,Dg+' / MTM zone 2',ClZ,BUd,BUX,BpV,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32082']]],[[U,'NAD27_MTM_zone_2',Cbw,BUd,BUX,BpV,BUt,BVt,BUT,BUa]]],['32081',AjX+' +lon_0=-53'+AkY+BIh+a,[[U,Dg+' / MTM zone 1',ClZ,BUd,BUX,Buj,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'32081']]],[[U,'NAD27_MTM_zone_1',Cbw,BUd,BUX,Buj,BUt,BVt,BUT,BUa]]],['3208',ArG+AEv+Aky,[[U,'WGS 84 / SCAR IMW SQ19-20',ClU,BVG,Baj,Bai,BVX,Bhb,BUy,BUT,CVy,BUj,BUm,[B,K,'3208']]],[[U,'WGS_84_SCAR_IMW_SQ19_20',Cbp,BVD,Baj,Bai,BVX,Bhb,BUy,BUT,BUa]]],['3207',ArG+ATe+Aky,[[U,'WGS 84 / SCAR IMW SQ01-02',ClU,BVG,Baj,Bai,BVX,Bnt,BUy,BUT,CVy,BUj,BUm,[B,K,'3207']]],[[U,'WGS_84_SCAR_IMW_SQ01_02',Cbp,BVD,Baj,Bai,BVX,Bnt,BUy,BUT,BUa]]],['32067',BIW+Axo,[[U,Dg+' / BLM 17N'+DE,ClZ,BUd,BUX,BVm,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32067']]],[[U,'NAD27_BLM_17N_ftUS',Cbw,BUd,BUX,BVm,BUg,BWI,BUT,BUr]]],['32066',BIV+Axo,[[U,Dg+' / BLM 16N'+DE,ClZ,BUd,BUX,BXS,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32066']]],[[U,'NAD27_BLM_16N_ftUS',Cbw,BUd,BUX,BXS,BUg,BWI,BUT,BUr]]],['32065',BHA+Axo,[[U,Dg+' / BLM 15N'+DE,ClZ,BUd,BUX,BYT,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32065']]],[[U,'NAD27_BLM_15N_ftUS',Cbw,BUd,BUX,BYT,BUg,BWI,BUT,BUr]]],['32064',AjX+kA+Axo,[[U,Dg+' / BLM 14N'+DE,ClZ,BUd,BUX,BXU,BUg,BWI,BUT,CVz,BUl,BUk,[B,K,'32064']]],[[U,'NAD27_BLM_14N_ftUS',Cbw,BUd,BUX,BXU,BUg,BWI,BUT,BUr]]],['3206',AU+AAF+AAG+ER+' +lon_0=-42'+Aky,[[U,'WGS 84 / SCAR IMW SP23-24',ClU,BVG,Bwb,Bwa,BVX,CAx,BUy,BUT,CVy,BUj,BUm,[B,K,'3206']]],[[U,'WGS_84_SCAR_IMW_SP23_24',Cbp,BVD,Bwb,Bwa,BVX,CAx,BUy,BUT,BUa]]],['32058',l+pR+SM+BIz,[[U,Dg+' /'+pz+' West',ClZ,BUd,BrR,Bgf,BWj,BUc,BUT,CVz,BUl,BUk,[B,K,'32058']]],[[U,'NAD27_Wyoming_West',Cbw,BUd,BrR,Bgf,BWj,BUc,BUT,BUr]]],['32057',l+pR+hk+BIz,[[U,Dg+' /'+pz+' West'+Gh,ClZ,BUd,BrR,Bgg,BWj,BUc,BUT,CVz,BUl,BUk,[B,K,'32057']]],[[U,'NAD27_Wyoming_West_Central',Cbw,BUd,BrR,Bgg,BWj,BUc,BUT,BUr]]],['32056',l+pR+SN+BIz,[[U,Dg+' /'+pz+' East'+Gh,ClZ,BUd,BrR,Bge,BWj,BUc,BUT,CVz,BUl,BUk,[B,K,'32056']]],[[U,'NAD27_Wyoming_East_Central',Cbw,BUd,BrR,Bge,BWj,BUc,BUT,BUr]]],['32055',l+pR+SO+BIz,[[U,Dg+' /'+pz+' East',ClZ,BUd,BrR,Bgd,BWj,BUc,BUT,CVz,BUl,BUk,[B,K,'32055']]],[[U,'NAD27_Wyoming_East',Cbw,BUd,BrR,Bgd,BWj,BUc,BUT,BUr]]],['32054',AU+' +lat_1=42.73333333333333 +lat_2=44.06666666666667'+ApK+Asy,[[U,Dg+' /'+cp+' South',ClZ,BVG,[A,W,JI],[A,Y,JH],Bde,BWb,BVW,BUT,CVz,BUl,BUk,[B,K,'32054']]],[[U,'NAD27_Wisconsin_South',Cbw,BVD,[A,W,JI],[A,Y,JH],Bde,BWb,BVW,BUT,BUr]]],['32053',AU+' +lat_1=44.25'+eK+Ave+Asy,[[U,Dg+' /'+BBd,ClZ,BVG,CIQ,BaF,BYM,BWb,BVW,BUT,CVz,BUl,BUk,[B,K,'32053']]],[[U,'NAD27_Wisconsin_Central',Cbw,BVD,CIQ,BaF,BYM,BWb,BVW,BUT,BUr]]],['32052',AU+' +lat_1=45.56666666666667 +lat_2=46.76666666666667'+AvZ+Asy,[[U,Dg+' /'+BBe,ClZ,BVG,[A,W,JK],[A,Y,JJ],Bgc,BWb,BVW,BUT,CVz,BUl,BUk,[B,K,'32052']]],[[U,'NAD27_Wisconsin_North',Cbw,BVD,[A,W,JK],[A,Y,JJ],Bgc,BWb,BVW,BUT,BUr]]],['32051',AU+' +lat_1=37.48333333333333 +lat_2=38.88333333333333'+ApJ+Asy,[[U,Dg+' / West'+eI+' South',ClZ,BVG,[A,W,JN],[A,Y,JM],Bgb,BVm,BVW,BUT,CVz,BUl,BUk,[B,K,'32051']]],[[U,'NAD27_West_Virginia_South',Cbw,BVD,[A,W,JN],[A,Y,JM],Bgb,BVm,BVW,BUT,BUr]]],['32050',AU+' +lat_1=39 +lat_2=40.25'+AvY+Asy,[[U,Dg+' / West'+Aoh,ClZ,BVG,CJM,[A,Y,Np],Bga,BZs,BVW,BUT,CVz,BUl,BUk,[B,K,'32050']]],[[U,'NAD27_West_Virginia_North',Cbw,BVD,CJM,[A,Y,Np],Bga,BZs,BVW,BUT,BUr]]],['3205',AU+AAF+AAG+BDY+Aky,[[U,'WGS 84 / SCAR IMW SP21-22',ClU,BVG,Bwb,Bwa,BVX,BdM,BUy,BUT,CVy,BUj,BUm,[B,K,'3205']]],[[U,'WGS_84_SCAR_IMW_SP21_22',Cbp,BVD,Bwb,Bwa,BVX,BdM,BUy,BUT,BUa]]],['32049',AU+' +lat_1=45.83333333333334 +lat_2=47.33333333333334'+AvX+Asy,[[U,Dg+' /'+kE+' South',ClZ,BVG,[A,W,Hm],[A,Y,JO],BgZ,BWB,BVW,BUT,CVz,BUl,BUk,[B,K,'32049']]],[[U,'NAD27_Washington_South',Cbw,BVD,[A,W,Hm],[A,Y,JO],BgZ,BWB,BVW,BUT,BUr]]],['32048',AU+' +lat_1=47.5'+AaU+AvW+Asy,[[U,Dg+' /'+BBc,ClZ,BVG,[A,W,Xl],CHo,BZA,BgY,BVW,BUT,CVz,BUl,BUk,[B,K,'32048']]],[[U,'NAD27_Washington_North',Cbw,BVD,[A,W,Xl],CHo,BZA,BgY,BVW,BUT,BUr]]],['32047',AvD+' +lat_2=37.96666666666667'+AvV+Asy,[[U,Dg+' /'+eI+' South',ClZ,BVG,BgI,[A,Y,EH],BXr,BZe,BVW,BUT,CVz,BUl,BUk,[B,K,'32047']]],[[U,'NAD27_Virginia_South',Cbw,BVD,BgI,[A,Y,EH],BXr,BZe,BVW,BUT,BUr]]],['32046',AU+' +lat_1=38.03333333333333 +lat_2=39.2'+AvU+Asy,[[U,Dg+' /'+Aoh,ClZ,BVG,[A,W,JQ],[A,Y,aX],BXq,BZe,BVW,BUT,CVz,BUl,BUk,[B,K,'32046']]],[[U,'NAD27_Virginia_North',Cbw,BVD,[A,W,JQ],[A,Y,aX],BXq,BZe,BVW,BUT,BUr]]],['32045',AxD+AyJ,[[U,Dg+' / Vermont',ClZ,BUd,BYX,BgW,BgV,BUc,BUT,CVz,BUl,BUk,[B,K,'32045']]],[[U,'NAD27_Vermont',Cbw,BUd,BYX,BgW,BgV,BUc,BUT,BUr]]],['32044',AU+' +lat_1=37.21666666666667 +lat_2=38.35'+App+Asy,[[U,Dg+' / Utah South',ClZ,BVG,[A,W,GI],[A,Y,SB],BWJ,BWm,BVW,BUT,CVz,BUl,BUk,[B,K,'32044']]],[[U,'NAD27_Utah_South',Cbw,BVD,[A,W,GI],[A,Y,SB],BWJ,BWm,BVW,BUT,BUr]]],['32043',AU+' +lat_1=39.01666666666667 +lat_2=40.65'+Apm+Asy,[[U,Dg+' / Utah'+Gh,ClZ,BVG,[A,W,GL],[A,Y,OW],BYl,BWm,BVW,BUT,CVz,BUl,BUk,[B,K,'32043']]],[[U,'NAD27_Utah_Central',Cbw,BVD,[A,W,GL],[A,Y,OW],BYl,BWm,BVW,BUT,BUr]]],['32042',AU+' +lat_1=40.71666666666667 +lat_2=41.78333333333333'+Apn+Asy,[[U,Dg+' / Utah'+QM,ClZ,BVG,[A,W,GJ],[A,Y,Db],Bby,BWm,BVW,BUT,CVz,BUl,BUk,[B,K,'32042']]],[[U,'NAD27_Utah_North',Cbw,BVD,[A,W,GJ],[A,Y,Db],Bby,BWm,BVW,BUT,BUr]]],['32041',AU+' +lat_1=26.16666666666667 +lat_2=27.83333333333333'+AvP+Asy,[[U,Dg+' / Texas South',ClZ,BVG,[A,W,GM],[A,Y,Dc],Bdd,BXp,BVW,BUT,CVz,BUl,BUk,[B,K,'32041']]],[[U,'NAD27_Texas_South',Cbw,BVD,[A,W,GM],[A,Y,Dc],Bdd,BXp,BVW,BUT,BUr]]],['32040',AU+' +lat_1=28.38333333333333 +lat_2=30.28333333333333'+AvR+Asy,[[U,Dg+' / Texas South'+Gh,ClZ,BVG,[A,W,JS],[A,Y,JR],BgU,BXU,BVW,BUT,CVz,BUl,BUk,[B,K,'32040']]],[[U,'NAD27_Texas_South_Central',Cbw,BVD,[A,W,JS],[A,Y,JR],BgU,BXU,BVW,BUT,BUr]]],['3204',AU+AAF+AAG+ArQ+Aky,[[U,'WGS 84 / SCAR IMW SP19-20',ClU,BVG,Bwb,Bwa,BVX,Bhb,BUy,BUT,CVy,BUj,BUm,[B,K,'3204']]],[[U,'WGS_84_SCAR_IMW_SP19_20',Cbp,BVD,Bwb,Bwa,BVX,Bhb,BUy,BUT,BUa]]],['32039',AU+' +lat_1=30.11666666666667 +lat_2=31.88333333333333'+AvO+Asy,[[U,Dg+' / Texas'+Gh,ClZ,BVG,[A,W,JY],[A,Y,JX],Bda,BZd,BVW,BUT,CVz,BUl,BUk,[B,K,'32039']]],[[U,'NAD27_Texas_Central',Cbw,BVD,[A,W,JY],[A,Y,JX],Bda,BZd,BVW,BUT,BUr]]],['32038',AU+' +lat_1=32.13333333333333 +lat_2=33.96666666666667'+TY+' +lon_0=-97.5'+Asy,[[U,Dg+' / Texas'+BBb,ClZ,BVG,[A,W,JU],[A,Y,JT],BgS,COL,BVW,BUT,CVz,BUl,BUk,[B,K,'32038']]],[[U,'NAD27_Texas_North_Central',Cbw,BVD,[A,W,JU],[A,Y,JT],BgS,COL,BVW,BUT,BUr]]],['32037',AU+' +lat_1=34.65 +lat_2=36.18333333333333'+ApI+Asy,[[U,Dg+' / Texas'+QM,ClZ,BVG,CHn,[A,Y,JW],BgR,BgQ,BVW,BUT,CVz,BUl,BUk,[B,K,'32037']]],[[U,'NAD27_Texas_North',Cbw,BVD,CHn,[A,Y,JW],BgR,BgQ,BVW,BUT,BUr]]],['32035',AU+' +lat_1=42.83333333333334 +lat_2=44.4'+AvN+Asy,[[U,Dg+' / South Dakota South',ClZ,BVG,[A,W,Co],[A,Y,Xk],BgO,BZd,BVW,BUT,CVz,BUl,BUk,[B,K,'32035']]],[[U,'NAD27_South_Dakota_South',Cbw,BVD,[A,W,Co],[A,Y,Xk],BgO,BZd,BVW,BUT,BUr]]],['32034',AU+' +lat_1=44.41666666666666 +lat_2=45.68333333333333'+AvM+Asy,[[U,Dg+' / South Dakota'+QM,ClZ,BVG,[A,W,Jb],[A,Y,Ja],BYM,BXb,BVW,BUT,CVz,BUl,BUk,[B,K,'32034']]],[[U,'NAD27_South_Dakota_North',Cbw,BVD,[A,W,Jb],[A,Y,Ja],BYM,BXb,BVW,BUT,BUr]]],['32033',AU+' +lat_1=32.33333333333334 +lat_2=33.66666666666666'+AvL+Asy,[[U,Dg+' / South'+pa+' South',ClZ,BVG,[A,W,APw],[A,Y,APx],BgN,BVm,BVW,BUT,CVz,BUl,BUk,[B,K,'32033']]],[[U,'NAD27_South_Carolina_South',Cbw,BVD,[A,W,APw],[A,Y,APx],BgN,BVm,BVW,BUT,BUr]]],['32031',AU+' +lat_1=33.76666666666667 +lat_2=34.96666666666667'+AGQ+Qk+Asy,[[U,Dg+' / South'+pa+QM,ClZ,BVG,[A,W,APy],[A,Y,APz],Bdf,BVm,BVW,BUT,CVz,BUl,BUk,[B,K,'32031']]],[[U,'NAD27_South_Carolina_North',Cbw,BVD,[A,W,APy],[A,Y,APz],Bdf,BVm,BVW,BUT,BUr]]],['32030',BIL+' +k=0.9999938'+AyJ,[[U,Dg+' / Rhode'+fA,ClZ,BUd,BgM,BZc,CAE,BUc,BUT,CVz,BUl,BUk,[B,K,'32030']]],[[U,'NAD27_Rhode_Island',Cbw,BUd,BgM,BZc,CAE,BUc,BUT,BUr]]],['3203',Amc+AoQ+q+a,[[U,YX+' / UTM zone 35N',CmI,BUd,BUX,BWP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3203']]],[[U,'LGD2006_UTM_zone_35N',CdM,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['32028',AU+' +lat_1=40.88333333333333 +lat_2=41.95'+AvF+Asy,[[U,Dg+' /'+BBa,ClZ,BVG,[A,W,Jg],[A,Y,YM],BZp,BZb,BVW,BUT,CVz,BUl,BUk,[B,K,'32028']]],[[U,'NAD27_Pennsylvania_North',Cbw,BVD,[A,W,Jg],[A,Y,YM],BZp,BZb,BVW,BUT,BUr]]],['32027',AU+' +lat_1=42.33333333333334 +lat_2=44'+Aqq+Asy,[[U,Dg+' / Oregon South',ClZ,BVG,[A,W,Dj],CNd,BWi,BWB,BVW,BUT,CVz,BUl,BUk,[B,K,'32027']]],[[U,'NAD27_Oregon_South',Cbw,BVD,[A,W,Dj],CNd,BWi,BWB,BVW,BUT,BUr]]],['32026',AU+' +lat_1=44.33333333333334'+wB+Aqp+Asy,[[U,Dg+' / Oregon'+QM,ClZ,BVG,[A,W,FA],Bbx,BYN,BWB,BVW,BUT,CVz,BUl,BUk,[B,K,'32026']]],[[U,'NAD27_Oregon_North',Cbw,BVD,[A,W,FA],Bbx,BYN,BWB,BVW,BUT,BUr]]],['32025',AU+' +lat_1=33.93333333333333 +lat_2=35.23333333333333'+AvE+Asy,[[U,Dg+' /'+AGg+' South',ClZ,BVG,[A,W,Ji],[A,Y,Jh],BgJ,BXh,BVW,BUT,CVz,BUl,BUk,[B,K,'32025']]],[[U,'NAD27_Oklahoma_South',Cbw,BVD,[A,W,Ji],[A,Y,Jh],BgJ,BXh,BVW,BUT,BUr]]],['32024',AU+' +lat_1=35.56666666666667'+TW+ApH+Asy,[[U,Dg+' /'+ArE,ClZ,BVG,[A,W,Jk],BgX,BgH,BXh,BVW,BUT,CVz,BUl,BUk,[B,K,'32024']]],[[U,'NAD27_Oklahoma_North',Cbw,BVD,[A,W,Jk],BgX,BgH,BXh,BVW,BUT,BUr]]],['32023',AU+' +lat_1=38.73333333333333 +lat_2=40.03333333333333'+AvC+Asy,[[U,Dg+' / Ohio South',ClZ,BVG,[A,W,Jm],[A,Y,Jl],BWT,BYk,BVW,BUT,CVz,BUl,BUk,[B,K,'32023']]],[[U,'NAD27_Ohio_South',Cbw,BVD,[A,W,Jm],[A,Y,Jl],BWT,BYk,BVW,BUT,BUr]]],['32022',AU+' +lat_1=40.43333333333333 +lat_2=41.7'+AvB+Asy,[[U,Dg+' / Ohio'+QM,ClZ,BVG,[A,W,Jn],[A,Y,aY],Bat,BYk,BVW,BUT,CVz,BUl,BUk,[B,K,'32022']]],[[U,'NAD27_Ohio_North',Cbw,BVD,[A,W,Jn],[A,Y,aY],Bat,BYk,BVW,BUT,BUr]]],['32021',AU+' +lat_1=46.18333333333333 +lat_2=47.48333333333333'+AvA+Asy,[[U,Dg+' /'+QM+' Dakota South',ClZ,BVG,[A,W,Jp],[A,Y,Jo],BbM,BZa,BVW,BUT,CVz,BUl,BUk,[B,K,'32021']]],[[U,'NAD27_North_Dakota_South',Cbw,BVD,[A,W,Jp],[A,Y,Jo],BbM,BZa,BVW,BUT,BUr]]],['32020',AU+' +lat_1=47.43333333333333'+AaU+Auz+Asy,[[U,Dg+' /'+QM+' Dakota'+QM,ClZ,BVG,[A,W,Jq],CHo,BZA,BZa,BVW,BUT,CVz,BUl,BUk,[B,K,'32020']]],[[U,'NAD27_North_Dakota_North',Cbw,BVD,[A,W,Jq],CHo,BZA,BZa,BVW,BUT,BUr]]],['3202',Anl+AoQ+q+a,[[U,YX+' / UTM zone 34N',CmI,BUd,BUX,BWR,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3202']]],[[U,'LGD2006_UTM_zone_34N',CdM,BUd,BUX,BWR,BUg,BUc,BUT,BUa]]],['32019',AU+' +lat_1=34.33333333333334 +lat_2=36.16666666666666'+Auy+Asy,[[U,Dg+' /'+BBZ,ClZ,BVG,[A,W,Cr],[A,Y,FS],BgG,BdZ,BVW,BUT,CVz,BUl,BUk,[B,K,'32019']]],[[U,'NAD27_North_Carolina',Cbw,BVD,[A,W,Cr],[A,Y,FS],BgG,BdZ,BVW,BUT,BUr]]],['32017',Aww+AyJ,[[U,Dg+' / New York West',ClZ,BUd,BXM,BgF,BWF,BUc,BUT,CVz,BUl,BUk,[B,K,'32017']]],[[U,'NAD27_New_York_West',Cbw,BUd,BXM,BgF,BWF,BUc,BUT,BUr]]],['32016',Awu+AyJ,[[U,Dg+' / New York'+Gh,ClZ,BUd,BXM,BgB,BWF,BUc,BUT,CVz,BUl,BUk,[B,K,'32016']]],[[U,'NAD27_New_York_Central',Cbw,BUd,BXM,BgB,BWF,BUc,BUT,BUr]]],['32015',AqP+' +lon_0=-74.33333333333333'+BBV+Alm,[[U,Dg+' / New York East',ClZ,BUd,BXM,[A,E,AKh],BWN,BUc,BUT,CVz,BUl,BUk,[B,K,'32015']]],[[U,'NAD27_New_York_East',Cbw,BUd,BXM,[A,E,AKh],BWN,BUc,BUT,BUr]]],['32014',Aws+AyJ,[[U,Dg+' / New Mexico West',ClZ,BUd,BWA,BgA,Bfz,BUc,BUT,CVz,BUl,BUk,[B,K,'32014']]],[[U,'NAD27_New_Mexico_West',Cbw,BUd,BWA,BgA,Bfz,BUc,BUT,BUr]]],['32013',Awm+AyJ,[[U,Dg+' / New Mexico'+Gh,ClZ,BUd,BWA,Bfx,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'32013']]],[[U,'NAD27_New_Mexico_Central',Cbw,BUd,BWA,Bfx,BUt,BUc,BUT,BUr]]],['32012',Awp+AyJ,[[U,Dg+' / New Mexico East',ClZ,BUd,BWA,Bfy,BcW,BUc,BUT,CVz,BUl,BUk,[B,K,'32012']]],[[U,'NAD27_New_Mexico_East',Cbw,BUd,BWA,Bfy,BcW,BUc,BUT,BUr]]],['32011',Aut+' +lon_0=-74.66666666666667'+Uf+Asy,[[U,Dg+' / New Jersey',ClZ,BUd,BZo,[A,E,AKi],BdU,BVW,BUT,CVz,BUl,BUk,[B,K,'32011']]],[[U,'NAD27_New_Jersey',Cbw,BUd,BZo,[A,E,AKi],BdU,BVW,BUT,BUr]]],['32010',Awj+AyJ,[[U,Dg+' / New'+AGn,ClZ,BUd,BYX,Bfw,BWN,BUc,BUT,CVz,BUl,BUk,[B,K,'32010']]],[[U,'NAD27_New_Hampshire',Cbw,BUd,BYX,Bfw,BWN,BUc,BUT,BUr]]],['3201',AmO+AoQ+q+a,[[U,YX+' / UTM zone 33N',CmI,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3201']]],[[U,'LGD2006_UTM_zone_33N',CdM,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['32009',Awi+AyJ,[[U,Dg+' / Nevada West',ClZ,BUd,BXg,Bfv,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'32009']]],[[U,'NAD27_Nevada_West',Cbw,BUd,BXg,Bfv,BUt,BUc,BUT,BUr]]],['32008',Awb+AyJ,[[U,Dg+' / Nevada'+Gh,ClZ,BUd,BXg,Bft,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'32008']]],[[U,'NAD27_Nevada_Central',Cbw,BUd,BXg,Bft,BUt,BUc,BUT,BUr]]],['32007',Awf+AyJ,[[U,Dg+' / Nevada East',ClZ,BUd,BXg,Bfu,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'32007']]],[[U,'NAD27_Nevada_East',Cbw,BUd,BXg,Bfu,BUt,BUc,BUT,BUr]]],['32006',AU+' +lat_1=40.28333333333333'+Ti+Na+' +lon_0=-99.5'+Asy,[[U,Dg+' /'+ASu+' South',ClZ,BVG,[A,W,AQA],Bfo,Bat,COK,BVW,BUT,CVz,BUl,BUk,[B,K,'32006']]],[[U,'NAD27_Nebraska_South',Cbw,BVD,[A,W,AQA],Bfo,Bat,COK,BVW,BUT,BUr]]],['32005',AU+' +lat_1=41.85 +lat_2=42.81666666666667 +lat_0=41.33333333333334'+Ql+Asy,[[U,Dg+' /'+ASu+QM,ClZ,BVG,COJ,[A,Y,AQB],[A,C,AQC],BXb,BVW,BUT,CVz,BUl,BUk,[B,K,'32005']]],[[U,'NAD27_Nebraska_North',Cbw,BVD,COJ,[A,Y,AQB],[A,C,AQC],BXb,BVW,BUT,BUr]]],['32003',AU+' +lat_1=46.4 +lat_2=44.86666666666667'+gP+fx+Asy,[[U,Dg+' / Montana South',ClZ,BVG,CPR,[A,Y,AQD],BZL,BcV,BVW,BUT,CVz,BUl,BUk,[B,K,'32003']]],[[U,'NAD27_Montana_South',Cbw,BVD,CPR,[A,Y,AQD],BZL,BcV,BVW,BUT,BUr]]],['32002',AU+' +lat_1=47.88333333333333 +lat_2=46.45 +lat_0=45.83333333333334'+fx+Asy,[[U,Dg+' / Montana'+Gh,ClZ,BVG,[A,W,AQE],COI,[A,C,Hm],BcV,BVW,BUT,CVz,BUl,BUk,[B,K,'32002']]],[[U,'NAD27_Montana_Central',Cbw,BVD,[A,W,AQE],COI,[A,C,Hm],BcV,BVW,BUT,BUr]]],['32001',AU+' +lat_1=48.71666666666667 +lat_2=47.85'+gQ+fx+Asy,[[U,Dg+' / Montana'+QM,ClZ,BVG,[A,W,AQF],COH,BZA,BcV,BVW,BUT,CVz,BUl,BUk,[B,K,'32001']]],[[U,'NAD27_Montana_North',Cbw,BVD,[A,W,AQF],COH,BZA,BcV,BVW,BUT,BUr]]],['32000',Any+BEd,[[U,AlD+' / UTM zone 25S',CmA,BUd,BUX,BZx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'32000']]],[[U,'SIRGAS_1995_UTM_zone_25S',CdB,BUd,BUX,BZx,BUg,BUc,BUo,BUa]]],['3200',BIX+iq+ABj+HV+' +y_0=1166200'+Cw+ABu+q+a,[[U,'FD58 / Iraq zone',CsD,BWW,BdX,BWe,Bwe,BWL,Bwd,CVy,BUj,BUm,[B,K,'3200']]],[[U,'FD58_Iraq_zone',[S,'GCS_FD58',Cag,BUU,BUW],BVD,BdX,BWe,Bwe,BWL,Bwd,BUa,Bwc]]],['31999',AoC+BEd,[[U,AlD+' / UTM zone 24S',CmA,BUd,BUX,BYx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31999']]],[[U,'SIRGAS_1995_UTM_zone_24S',CdB,BUd,BUX,BYx,BUg,BUc,BUo,BUa]]],['31998',Amp+BEd,[[U,AlD+' / UTM zone 23S',CmA,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31998']]],[[U,'SIRGAS_1995_UTM_zone_23S',CdB,BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['31997',Alb+BEd,[[U,AlD+' / UTM zone 22S',CmA,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31997']]],[[U,'SIRGAS_1995_UTM_zone_22S',CdB,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['31996',AlI+BEd,[[U,AlD+' / UTM zone 21S',CmA,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31996']]],[[U,'SIRGAS_1995_UTM_zone_21S',CdB,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['31995',Aku+BEd,[[U,AlD+' / UTM zone 20S',CmA,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31995']]],[[U,'SIRGAS_1995_UTM_zone_20S',CdB,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['31994',BHt+c+q+a,[[U,AlD+' / UTM zone 19S',CmA,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31994']]],[[U,'SIRGAS_1995_UTM_zone_19S',CdB,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['31993',BJt+c+q+a,[[U,AlD+' / UTM zone 18S',CmA,BUd,BUX,BWo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31993']]],[[U,'SIRGAS_1995_UTM_zone_18S',CdB,BUd,BUX,BWo,BUg,BUc,BUo,BUa]]],['31992',AlW+BEd,[[U,AlD+' / UTM zone 17S',CmA,BUd,BUX,BVm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31992']]],[[U,'SIRGAS_1995_UTM_zone_17S',CdB,BUd,BUX,BVm,BUg,BUc,BUo,BUa]]],['31991',BUN,[[U,AlD+' / UTM zone 22N',CmA,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31991']]],[[U,'SIRGAS_1995_UTM_zone_22N',CdB,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['31990',BUD,[[U,AlD+' / UTM zone 21N',CmA,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31990']]],[[U,'SIRGAS_1995_UTM_zone_21N',CdB,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['3199',Alu+AoQ+q+a,[[U,YX+' / UTM zone 32N',CmI,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3199']]],[[U,'LGD2006_UTM_zone_32N',CdM,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['31989',BUA,[[U,AlD+' / UTM zone 20N',CmA,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31989']]],[[U,'SIRGAS_1995_UTM_zone_20N',CdB,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['31988',BTz,[[U,AlD+' / UTM zone 19N',CmA,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31988']]],[[U,'SIRGAS_1995_UTM_zone_19N',CdB,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['31987',BTy,[[U,AlD+' / UTM zone 18N',CmA,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31987']]],[[U,'SIRGAS_1995_UTM_zone_18N',CdB,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['31986',BUM,[[U,AlD+' / UTM zone 17N',CmA,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31986']]],[[U,'SIRGAS_1995_UTM_zone_17N',CdB,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['31985',Any+BEd,[[U,SD+' 2000 / UTM zone 25S',Clk,BUd,BUX,BZx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31985']]],[[U,'SIRGAS_2000_UTM_zone_25S',CcU,BUd,BUX,BZx,BUg,BUc,BUo,BUa]]],['31984',AoC+BEd,[[U,SD+' 2000 / UTM zone 24S',Clk,BUd,BUX,BYx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31984']]],[[U,'SIRGAS_2000_UTM_zone_24S',CcU,BUd,BUX,BYx,BUg,BUc,BUo,BUa]]],['31983',Amp+BEd,[[U,SD+' 2000 / UTM zone 23S',Clk,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31983']]],[[U,'SIRGAS_2000_UTM_zone_23S',CcU,BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['31982',Alb+BEd,[[U,SD+' 2000 / UTM zone 22S',Clk,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31982']]],[[U,'SIRGAS_2000_UTM_zone_22S',CcU,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['31981',AlI+BEd,[[U,SD+' 2000 / UTM zone 21S',Clk,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31981']]],[[U,'SIRGAS_2000_UTM_zone_21S',CcU,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['31980',Aku+BEd,[[U,SD+' 2000 / UTM zone 20S',Clk,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31980']]],[[U,'SIRGAS_2000_UTM_zone_20S',CcU,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['3198',BHD+BEX,[[U,YX+' / Libya TM zone 13',CmI,BUd,BUX,BhW,BWh,BVP,BUT,CVy,BUl,BUk,[B,K,'3198']]],[[U,'LGD2006_Libya_TM_zone_13',CdM,BUd,BUX,BhW,BWh,BVP,BUT,BUa]]],['31979',BHt+c+q+a,[[U,SD+' 2000 / UTM zone 19S',Clk,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31979']]],[[U,'SIRGAS_2000_UTM_zone_19S',CcU,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['31978',BJt+c+q+a,[[U,SD+' 2000 / UTM zone 18S',Clk,BUd,BUX,BWo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31978']]],[[U,'SIRGAS_2000_UTM_zone_18S',CcU,BUd,BUX,BWo,BUg,BUc,BUo,BUa]]],['31977',AlW+BEd,[[U,SD+' 2000 / UTM zone 17S',Clk,BUd,BUX,BVm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'31977']]],[[U,'SIRGAS_2000_UTM_zone_17S',CcU,BUd,BUX,BVm,BUg,BUc,BUo,BUa]]],['31976',BUN,[[U,SD+' 2000 / UTM zone 22N',Clk,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31976']]],[[U,'SIRGAS_2000_UTM_zone_22N',CcU,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['31975',BUD,[[U,SD+' 2000 / UTM zone 21N',Clk,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31975']]],[[U,'SIRGAS_2000_UTM_zone_21N',CcU,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['31974',BUA,[[U,SD+' 2000 / UTM zone 20N',Clk,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31974']]],[[U,'SIRGAS_2000_UTM_zone_20N',CcU,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['31973',BTz,[[U,SD+' 2000 / UTM zone 19N',Clk,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31973']]],[[U,'SIRGAS_2000_UTM_zone_19N',CcU,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['31972',BTy,[[U,SD+' 2000 / UTM zone 18N',Clk,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31972']]],[[U,'SIRGAS_2000_UTM_zone_18N',CcU,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['31971',BUM,[[U,SD+' 2000 / UTM zone 17N',Clk,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31971']]],[[U,'SIRGAS_2000_UTM_zone_17N',CcU,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['31970',BUK,[[U,SD+' 2000 / UTM zone 16N',Clk,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31970']]],[[U,'SIRGAS_2000_UTM_zone_16N',CcU,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['3197',BHC+BEX,[[U,YX+' / Libya TM zone 12',CmI,BUd,BUX,BkN,BWh,BVP,BUT,CVy,BUl,BUk,[B,K,'3197']]],[[U,'LGD2006_Libya_TM_zone_12',CdM,BUd,BUX,BkN,BWh,BVP,BUT,BUa]]],['31969',BUJ,[[U,SD+' 2000 / UTM zone 15N',Clk,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31969']]],[[U,'SIRGAS_2000_UTM_zone_15N',CcU,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['31968',BUI,[[U,SD+' 2000 / UTM zone 14N',Clk,BUd,BUX,BXU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31968']]],[[U,'SIRGAS_2000_UTM_zone_14N',CcU,BUd,BUX,BXU,BUg,BUc,BUT,BUa]]],['31967',BUH,[[U,SD+' 2000 / UTM zone 13N',Clk,BUd,BUX,BZS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31967']]],[[U,'SIRGAS_2000_UTM_zone_13N',CcU,BUd,BUX,BZS,BUg,BUc,BUT,BUa]]],['31966',BUG,[[U,SD+' 2000 / UTM zone 12N',Clk,BUd,BUX,BXs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31966']]],[[U,'SIRGAS_2000_UTM_zone_12N',CcU,BUd,BUX,BXs,BUg,BUc,BUT,BUa]]],['31965',BUF,[[U,SD+' 2000 / UTM zone 11N',Clk,BUd,BUX,BXx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31965']]],[[U,'SIRGAS_2000_UTM_zone_11N',CcU,BUd,BUX,BXx,BUg,BUc,BUT,BUa]]],['3196',ApT+BEX,[[U,YX+' / Libya TM zone 11',CmI,BUd,BUX,BWR,BWh,BVP,BUT,CVy,BUl,BUk,[B,K,'3196']]],[[U,'LGD2006_Libya_TM_zone_11',CdM,BUd,BUX,BWR,BWh,BVP,BUT,BUa]]],['3195',BEp+BEX,[[U,YX+' / Libya TM zone 10',CmI,BUd,BUX,BhV,BWh,BVP,BUT,CVy,BUl,BUk,[B,K,'3195']]],[[U,'LGD2006_Libya_TM_zone_10',CdM,BUd,BUX,BhV,BWh,BVP,BUT,BUa]]],['3194',BHn+BEX,[[U,YX+' / Libya TM zone 9',CmI,BUd,BUX,Blf,BWh,BVP,BUT,CVy,BUl,BUk,[B,K,'3194']]],[[U,'LGD2006_Libya_TM_zone_9',CdM,BUd,BUX,Blf,BWh,BVP,BUT,BUa]]],['3193',ApP+BEX,[[U,YX+' / Libya TM zone 8',CmI,BUd,BUX,BWH,BWh,BVP,BUT,CVy,BUl,BUk,[B,K,'3193']]],[[U,'LGD2006_Libya_TM_zone_8',CdM,BUd,BUX,BWH,BWh,BVP,BUT,BUa]]],['3192',AjX+' +lon_0=13'+BEX,[[U,YX+' / Libya TM zone 7',CmI,BUd,BUX,BpS,BWh,BVP,BUT,CVy,BUl,BUk,[B,K,'3192']]],[[U,'LGD2006_Libya_TM_zone_7',CdM,BUd,BUX,BpS,BWh,BVP,BUT,BUa]]],['3191',AjX+' +lon_0=11'+BEX,[[U,YX+' / Libya TM zone 6',CmI,BUd,BUX,BrQ,BWh,BVP,BUT,CVy,BUl,BUk,[B,K,'3191']]],[[U,'LGD2006_Libya_TM_zone_6',CdM,BUd,BUX,BrQ,BWh,BVP,BUT,BUa]]],['31901',BHm+' +k=1'+Alh+AIL+q+a,[[U,'KUDAMS / KTM',Crn,BUd,BUX,BkL,BUf,BUc,BUT,CVy,BUj,BUm,[B,K,'31901']]],[[U,'KUDAMS_KTM',[S,'GCS_KUDAMS',[V,AbV,BUh],BUU,BUW],BUd,BUX,BkL,BUf,BUc,BUT,BUa]]],['3190',Aqa+BEX,[[U,YX+' / Libya TM zone 5',CmI,BUd,BUX,BWO,BWh,BVP,BUT,CVy,BUl,BUk,[B,K,'3190']]],[[U,'LGD2006_Libya_TM_zone_5',CdM,BUd,BUX,BWO,BWh,BVP,BUT,BUa]]],['3189',AmJ+j+c+q+a,[[U,ii+' / UTM zone 29N',Cln,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3189']]],[[U,'GR96_UTM_zone_29N',Ccb,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['3188',BUO,[[U,ii+' / UTM zone 28N',Cln,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3188']]],[[U,'GR96_UTM_zone_28N',Ccb,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['3187',Aou+j+c+q+a,[[U,ii+' / UTM zone 27N',Cln,BUd,BUX,Bee,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3187']]],[[U,'GR96_UTM_zone_27N',Ccb,BUd,BUX,Bee,BUg,BUc,BUT,BUa]]],['3186',AmS+j+c+q+a,[[U,ii+' / UTM zone 26N',Cln,BUd,BUX,BaV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3186']]],[[U,'GR96_UTM_zone_26N',Ccb,BUd,BUX,BaV,BUg,BUc,BUT,BUa]]],['3185',Any+j+c+q+a,[[U,ii+' / UTM zone 25N',Cln,BUd,BUX,BZx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3185']]],[[U,'GR96_UTM_zone_25N',Ccb,BUd,BUX,BZx,BUg,BUc,BUT,BUa]]],['3184',AoC+j+c+q+a,[[U,ii+' / UTM zone 24N',Cln,BUd,BUX,BYx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3184']]],[[U,'GR96_UTM_zone_24N',Ccb,BUd,BUX,BYx,BUg,BUc,BUT,BUa]]],['31839',Alt+Dv+sD+q+a,[[U,'NGN / UTM zone 39N',Cob,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31839']]],[[U,'NGN_UTM_zone_39N',Cjb,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['31838',AmA+Dv+sD+q+a,[[U,'NGN / UTM zone 38N',Cob,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31838']]],[[U,'NGN_UTM_zone_38N',Cjb,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['3183',Amp+j+c+q+a,[[U,ii+' / UTM zone 23N',Cln,BUd,BUX,BYg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3183']]],[[U,'GR96_UTM_zone_23N',Ccb,BUd,BUX,BYg,BUg,BUc,BUT,BUa]]],['3182',BUN,[[U,ii+' / UTM zone 22N',Cln,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3182']]],[[U,'GR96_UTM_zone_22N',Ccb,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['3181',BUD,[[U,ii+' / UTM zone 21N',Cln,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3181']]],[[U,'GR96_UTM_zone_21N',Ccb,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['3180',BUA,[[U,ii+' / UTM zone 20N',Cln,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3180']]],[[U,'GR96_UTM_zone_20N',Ccb,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['3179',BTz,[[U,ii+' / UTM zone 19N',Cln,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3179']]],[[U,'GR96_UTM_zone_19N',Ccb,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['3178',BTy,[[U,ii+' / UTM zone 18N',Cln,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3178']]],[[U,'GR96_UTM_zone_18N',Ccb,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['3177',BHn+' +k=0.9965000000000001'+Amt+AoQ+q+a,[[U,YX+' / Libya TM',CmI,BUd,BUX,Blf,CHm,BWa,BUT,CVy,BUl,BUk,[B,K,'3177']]],[[U,'LGD2006_Libya_TM',CdM,BUd,BUX,Blf,CHm,BWa,BUT,BUa]]],['3176',AjX+' +lon_0=106'+BIU+AmB+ih+q+a,[[U,ik+' 1960 / TM 106 NE',CnW,BUd,BUX,BpW,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3176']]],[[U,'Indian_1960_TM_106_NE',Cfy,BUd,BUX,BpW,BUg,BUc,BUT,BUa]]],['3175',TR+' +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-83.248627'+BTx,[[U,Bx+' / Great Lakes and St Lawrence'+" "+Pk,ClV,BeL,CAD,CAC,[A,BW,ABc],[A,BV,Aiy],BWa,BVg,CVy,BUl,BUk,[B,K,'3175']]],[[U,'NAD83_Great_Lakes_and_St_Lawrence_Albers',Cbn,BeK,CAD,CAC,[A,C,ABc],[A,E,Aiy],BWa,BVg,BUa]]],['3174',TR+' +lat_1=42.122774 +lat_2=49.01518 +lat_0=45.568977 +lon_0=-84.455955'+BTx,[[U,Bx+' / Great Lakes'+" "+Pk,ClV,BeL,CAD,CAC,[A,BW,ABc],[A,BV,Aiz],BWa,BVg,CVy,BUl,BUk,[B,K,'3174']]],[[U,'NAD83_Great_Lakes_Albers',Cbn,BeK,CAD,CAC,[A,C,ABc],[A,E,Aiz],BWa,BVg,BUa]]],['3172',AoK+Aka+ju+q+a,[[U,'IGN53 Mare / UTM zone 59S',CoE,BUd,BUX,BXj,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3172']]],[[U,'IGN53_Mare_UTM_zone_59S',CiC,BUd,BUX,BXj,BUg,BUc,BUo,BUa]]],['3171',AoK+BEd,[[U,oR+' / UTM zone 59S',Cnm,BUd,BUX,BXj,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3171']]],[[U,'RGNC91_93_UTM_zone_59S',Cfx,BUd,BUX,BXj,BUg,BUc,BUo,BUa]]],['3170',Aml+BEd,[[U,oR+' / UTM zone 58S',Cnm,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3170']]],[[U,'RGNC91_93_UTM_zone_58S',Cfx,BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['3169',Aos+BEd,[[U,oR+' / UTM zone 57S',Cnm,BUd,BUX,BZl,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3169']]],[[U,'RGNC91_93_UTM_zone_57S',Cfx,BUd,BUX,BZl,BUg,BUc,BUo,BUa]]],['3168',AqD+' +lonc=102.25 +alpha=323.0257905'+AEw+' +x_0=804670.24'+BQ+BBw+AdH+AGA+q+a,[[U,Afc+' (RSO) / RSO Malaya (m)',CoG,BlD,BeI,Bul,CAB,BqI,BhZ,CAA,BUT,CVy,BUj,BUm,[B,K,'3168']]],[[U,'Kertau_RSO_RSO_Malaya_m',Cir,BlC,BeI,Bul,CAB,BhZ,CAA,BUT,BUa]]],['3167',AqD+' +lonc=102.25 +alpha=323.0257905'+AEw+BCQ+BBw+AdH+AGA+' +to_meter=20.116756'+a,[[U,Afc+' (RSO) / RSO Malaya (ch)',CoG,BlD,BeI,Bul,CAB,BqI,BhZ,[A,I,AQG],BUT,[Q,ASj+' chain (Sears 1922 truncated)','raw:20.116756',[B,K,'9301']],BUj,BUm,[B,K,'3167']]],[[U,'Kertau_RSO_RSO_Malaya_ch',Cir,BlC,BeI,Bul,CAB,BhZ,[A,I,AQG],BUT,[Q,ASj+' chain (Sears 1922 truncated)','raw:20.116756']]]],['3166',AU+' +lat_1=-22.24472222222222 +lat_2=-22.29472222222222 +lat_0=-22.26972222222222 +lon_0=166.4425 +x_0=8.313000000000001 +y_0=-2.354'+BP+cX+q+a,[[U,'NEA74'+AcC+' /'+AcC+PW+' 2',CnT,BVG,[A,W,AKj],[A,Y,AKk],[A,C,AKl],CFT,COG,CHl,CVy,BUl,BUk,[B,K,'3166']]],[[U,'NEA74_Noumea_Noumea_Lambert_2',Cfl,BVD,[A,W,AKj],[A,Y,AKk],[A,C,AKl],CFT,COG,CHl,BUa]]],['3165',AU+' +lat_1=-22.24469175 +lat_2=-22.29469175 +lat_0=-22.26969175 +lon_0=166.44242575 +x_0=0.66 +y_0=1.02'+BP+cX+q+a,[[U,'NEA74'+AcC+' /'+AcC+PW,CnT,BVG,[A,W,Abf],[A,Y,Abg],[A,C,Abh],[A,E,Abi],CPQ,CPP,CVy,BUl,BUk,[B,K,'3165']]],[[U,'NEA74_Noumea_Noumea_Lambert',Cfl,BVD,[A,W,Abf],[A,Y,Abg],[A,C,Abh],[A,E,Abi],CPQ,CPP,BUa]]],['3164',Aml+Aoj+ABo+q+a,[[U,'ST87 Ouvea / UTM zone 58S',CrK,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3164']]],[[U,'ST87_Ouvea_UTM_zone_58S',[S,'GCS_ST87 Ouvea',CaP,BUU,BUW],BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['3163',AU+' +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5 +lon_0=166'+Fm+eM+j+c+q+a,[[U,oR+' /'+PW+' New Caledonia',Cnm,BVG,[A,W,AKm],[A,Y,AKn],COF,Brk,BVh,BZw,CVy,BUl,BUk,[B,K,'3163']]],[[U,'RGNC91_93_Lambert_New_Caledonia',Cfx,BVD,[A,W,AKm],[A,Y,AKn],COF,Brk,BVh,BZw,BUa]]],['3162',BEq+' +lat_2=53.5'+At+ASz+' +x_0=930000 +y_0=6430000'+j+c+q+a,[[U,Cc+' / Ontario MNR'+PW,Cli,BVG,Brf,CHk,BUX,BmT,Byz,Byy,CVy,BUj,BUm,[B,K,'3162']]],[[U,'NAD83_CSRS_Ontario_MNR_Lambert',CcM,BVD,Brf,CHk,BUX,BmT,Byz,Byy,BUa]]],['3161',BEq+' +lat_2=53.5'+At+ASz+' +x_0=930000 +y_0=6430000'+j+c+q+a,[[U,Bx+' / Ontario MNR'+PW,ClV,BVG,Brf,CHk,BUX,BmT,Byz,Byy,CVy,BUj,BUm,[B,K,'3161']]],[[U,'NAD83_Ontario_MNR_Lambert',Cbn,BVD,Brf,CHk,BUX,BmT,Byz,Byy,BUa]]],['31600',ZQ+' +lat_0=45.9 +lon_0=25.39246588888889 +k=0.9996667'+Aom+BP+ACj+q+a,[[U,'Dealul Piscului 1930 / Stereo 33',Cos,Bpn,CPO,[A,E,AQH],Byx,BUc,BWE,CVy,BUl,BUk,[B,K,'31600']]],[[U,'Dealul_Piscului_1930_Stereo_33',[S,'GCS_Dealul Piscului 1930',[V,AKG,BUs],BUU,BUW],Bpm,CPO,[A,E,AQH],Byx,BUc,BWE,BUa]]],['3160',BUK,[[U,Cc+' / UTM zone 16N',Cli,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3160']]],[[U,'NAD83_CSRS_UTM_zone_16N',CcM,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['3159',BUJ,[[U,Cc+' / UTM zone 15N',Cli,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3159']]],[[U,'NAD83_CSRS_UTM_zone_15N',CcM,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['3158',BUI,[[U,Cc+' / UTM zone 14N',Cli,BUd,BUX,BXU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3158']]],[[U,'NAD83_CSRS_UTM_zone_14N',CcM,BUd,BUX,BXU,BUg,BUc,BUT,BUa]]],['3157',Amy+j+c+q+a,[[U,Cc+' / UTM zone 10N',Cli,BUd,BUX,Bap,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3157']]],[[U,'NAD83_CSRS_UTM_zone_10N',CcM,BUd,BUX,Bap,BUg,BUc,BUT,BUa]]],['3156',AV+' +zone=9'+j+c+q+a,[[U,Cc+' / UTM zone 9N',Cli,BUd,BUX,BaA,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3156']]],[[U,'NAD83_CSRS_UTM_zone_9N',CcM,BUd,BUX,BaA,BUg,BUc,BUT,BUa]]],['3155',AV+' +zone=8'+j+c+q+a,[[U,Cc+' / UTM zone 8N',Cli,BUd,BUX,BZz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3155']]],[[U,'NAD83_CSRS_UTM_zone_8N',CcM,BUd,BUX,BZz,BUg,BUc,BUT,BUa]]],['3154',AV+' +zone=7'+j+c+q+a,[[U,Cc+' / UTM zone 7N',Cli,BUd,BUX,BZn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3154']]],[[U,'NAD83_CSRS_UTM_zone_7N',CcM,BUd,BUX,BZn,BUg,BUc,BUT,BUa]]],['3153',TR+' +lat_1=50 +lat_2=58.5'+fq+' +lon_0=-126'+BUE,[[U,Cc+' / BC'+" "+Pk,Cli,BeL,BoC,Byw,CQA,[A,BV,AVS],BWa,BUT,CVy,BUj,BUm,[B,K,'3153']]],[[U,'NAD83_CSRS_BC_Albers',CcM,BeK,BoC,Byw,BZE,[A,E,AVS],BWa,BUT,BUa]]],['31529',AmJ+Akc+wh+q+a,[[U,'Conakry 1905 / UTM zone 29N',Cnt,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31529']]],[[U,'Conakry_1905_UTM_zone_29N',Chi,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['31528',Aly+Akc+wh+q+a,[[U,'Conakry 1905 / UTM zone 28N',Cnt,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31528']]],[[U,'Conakry_1905_UTM_zone_28N',Chi,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['3152',AjX+' +lon_0=18.05779 +k=0.99999425 +x_0=100178.1808 +y_0=-6500614.7836'+j+c+q+a,[[U,'ST74',Clu,BUd,BUX,CFS,[A,N,AjA],[A,I,AfN],[A,G,AaV],CVy,[B,K,'3152']]],[[U,'ST74',Ccp,BUd,BUX,CFS,[A,N,AjA],[A,I,AfN],[A,G,AaV],BUa]]],['3149',AnE+AmB+ih+q+a,[[U,ik+' 1960 / UTM zone 49N',CnW,BUd,BUX,BWX,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3149']]],[[U,'Indian_1960_UTM_zone_49N',Cfy,BUd,BUX,BWX,BUg,BUc,BUT,BUa]]],['3148',AnD+AmB+ih+q+a,[[U,ik+' 1960 / UTM zone 48N',CnW,BUd,BUX,BWK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3148']]],[[U,'Indian_1960_UTM_zone_48N',Cfy,BUd,BUX,BWK,BUg,BUc,BUT,BUa]]],['31469',ApP+' +k=1'+AmY+BJe,[[U,'DHDN /'+Ajc+' zone 5',CmJ,BUd,BUX,BWH,BUf,BYv,BUT,CVy,[B,K,'31469']]],[[U,'DHDN_3_degree_Gauss_Kruger_zone_5',Cdc,BUd,BUX,BWH,BUf,BYv,BUT,BUa]]],['31468',AqA+' +k=1'+Alz+BJe,[[U,'DHDN /'+Ajc+' zone 4',CmJ,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,[B,K,'31468']]],[[U,'DHDN_3_degree_Gauss_Kruger_zone_4',Cdc,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['31467',Aqa+' +k=1'+Amo+BJe,[[U,'DHDN /'+Ajc+' zone 3',CmJ,BUd,BUX,BWO,BUf,BXO,BUT,CVy,[B,K,'31467']]],[[U,'DHDN_3_degree_Gauss_Kruger_zone_3',Cdc,BUd,BUX,BWO,BUf,BXO,BUT,BUa]]],['31466',AjX+' +lon_0=6 +k=1'+AmF+BJe,[[U,'DHDN /'+Ajc+' zone 2',CmJ,BUd,BUX,Blt,BUf,BXy,BUT,CVy,[B,K,'31466']]],[[U,'DHDN_3_degree_Gauss_Kruger_zone_2',Cdc,BUd,BUX,Blt,BUf,BXy,BUT,BUa]]],['3142',AV+' +zone=1'+Aka+ht+q+a,[[U,'Fiji 1956 / UTM zone 1S',CoN,BUd,BUX,BYF,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3142']]],[[U,'Fiji_1956_UTM_zone_1S',CiH,BUd,BUX,BYF,BUg,BUc,BUo,BUa]]],['3141',Ame+Aka+ht+q+a,[[U,'Fiji 1956 / UTM zone 60S',CoN,BUd,BUX,BXo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3141']]],[[U,'Fiji_1956_UTM_zone_60S',CiH,BUd,BUX,BXo,BUg,BUc,BUo,BUa]]],['3140',SE+' +lat_0=-18 +lon_0=178 +x_0=109435.392 +y_0=141622.272'+AXn+AdF+wg+' +to_meter=0.201168'+a,[[U,'Viti Levu 1912 / Viti Levu'+op,Cqc,Bgy,[A,C,sQ],CPz,CHj,CHi,[Q,'link','raw:0.201168',[B,K,'9098']],[B,K,'3140']]],[[U,'Viti_Levu_1912_Viti_Levu_Grid',[S,'GCS_Viti Levu 1912',[V,AbL,CEo],BUU,BUW],Bgx,[A,C,sQ],CPz,CHj,CHi,[Q,'link','raw:0.201168'],Bal]]],['3138',BEr+' +k=1'+BSv,[[U,ED+' / ETRS-GK31FIN',Cld,BUd,BUX,Bed,BUf,BUc,BUT,CVy,[B,K,'3138']]],[[U,'ETRS89_ETRS_GK31FIN',CcG,BUd,BUX,Bed,BUf,BUc,BUT,BUa]]],['3137',ArX+' +k=1'+BSv,[[U,ED+' / ETRS-GK30FIN',Cld,BUd,BUX,BYz,BUf,BUc,BUT,CVy,[B,K,'3137']]],[[U,'ETRS89_ETRS_GK30FIN',CcG,BUd,BUX,BYz,BUf,BUc,BUT,BUa]]],['3136',AjX+' +lon_0=29 +k=1'+BSv,[[U,ED+' / ETRS-GK29FIN',Cld,BUd,BUX,Brb,BUf,BUc,BUT,CVy,[B,K,'3136']]],[[U,'ETRS89_ETRS_GK29FIN',CcG,BUd,BUX,Brb,BUf,BUc,BUT,BUa]]],['3135',BEt+' +k=1'+BSv,[[U,ED+' / ETRS-GK28FIN',Cld,BUd,BUX,BhX,BUf,BUc,BUT,CVy,[B,K,'3135']]],[[U,'ETRS89_ETRS_GK28FIN',CcG,BUd,BUX,BhX,BUf,BUc,BUT,BUa]]],['3134',Apz+' +k=1'+BSv,[[U,ED+' / ETRS-GK27FIN',Cld,BUd,BUX,BWP,BUf,BUc,BUT,CVy,[B,K,'3134']]],[[U,'ETRS89_ETRS_GK27FIN',CcG,BUd,BUX,BWP,BUf,BUc,BUT,BUa]]],['3133',BJi+' +k=1'+BSv,[[U,ED+' / ETRS-GK26FIN',Cld,BUd,BUX,Blm,BUf,BUc,BUT,CVy,[B,K,'3133']]],[[U,'ETRS89_ETRS_GK26FIN',CcG,BUd,BUX,Blm,BUf,BUc,BUT,BUa]]],['3132',BHD+' +k=1'+BSv,[[U,ED+' / ETRS-GK25FIN',Cld,BUd,BUX,BhW,BUf,BUc,BUT,CVy,[B,K,'3132']]],[[U,'ETRS89_ETRS_GK25FIN',CcG,BUd,BUX,BhW,BUf,BUc,BUT,BUa]]],['3131',ArK+' +k=1'+BSv,[[U,ED+' / ETRS-GK24FIN',Cld,BUd,BUX,BYU,BUf,BUc,BUT,CVy,[B,K,'3131']]],[[U,'ETRS89_ETRS_GK24FIN',CcG,BUd,BUX,BYU,BUf,BUc,BUT,BUa]]],['31300',AU+pP+pQ+eW+' +lon_0=4.356939722222222 +x_0=150000.01256 +y_0=5400088.4378'+BP+ZK+q+a,[[U,'Belge 1972 / Belge'+PW+' 72',CoD,[L,AAu],BrZ,BrY,Bcw,[A,E,AQI],[A,I,Abj],[A,G,Abk],CVy,BUl,BUk,[B,K,'31300']]],[[U,'Belge_1972_Belge_Lambert_72',CiE,[L,AAu],BrZ,BrY,Bcw,[A,E,AQI],[A,I,Abj],[A,G,Abk],BUa]]],['3130',BHC+' +k=1'+BSv,[[U,ED+' / ETRS-GK23FIN',Cld,BUd,BUX,BkN,BUf,BUc,BUT,CVy,[B,K,'3130']]],[[U,'ETRS89_ETRS_GK23FIN',CcG,BUd,BUX,BkN,BUf,BUc,BUT,BUa]]],['31290',AjX+' +lon_0=34 +k=1'+Agg+AkI+Art+q+a,[[U,'MGI'+cj+' / M34',CmO,BUd,BUX,BoT,BUf,BrX,BUT,CVy,[B,K,'31290']]],[[U,'MGI_Ferro_M34',Cdz,BUd,BUX,BoT,BUf,BrX,BUT,BUa]]],['3129',AjX+' +lon_0=22 +k=1'+BSv,[[U,ED+' / ETRS-GK22FIN',Cld,BUd,BUX,BoD,BUf,BUc,BUT,CVy,[B,K,'3129']]],[[U,'ETRS89_ETRS_GK22FIN',CcG,BUd,BUX,BoD,BUf,BUc,BUT,BUa]]],['31289',BEr+' +k=1 +x_0=450000'+AkI+Art+q+a,[[U,'MGI'+cj+' / M31',CmO,BUd,BUX,Bed,BUf,BwZ,BUT,CVy,[B,K,'31289']]],[[U,'MGI_Ferro_M31',Cdz,BUd,BUX,Bed,BUf,BwZ,BUT,BUa]]],['31288',BEt+' +k=1'+AlH+BLi,[[U,'MGI'+cj+' / M28',CmO,BUd,BUX,BhX,BUf,BXc,BUT,CVy,[B,K,'31288']]],[[U,'MGI_Ferro_M28',Cdz,BUd,BUX,BhX,BUf,BXc,BUT,BUa]]],['31287',AoM+wB+' +lat_0=47.5'+gn+Arb+Aqs+q+a,[[U,'MGI /'+Abq+PW,CmQ,BVG,BaG,Bbx,CIC,BoB,BVh,Baa,CVy,[B,K,'31287']]],[[U,'MGI_Austria_Lambert',Cdk,BVD,BaG,Bbx,CIC,BoB,BVh,Baa,BUa]]],['31286',AjX+AAk+' +k=1'+Agg+AkI+BEZ+a,[[U,'MGI /'+Abq+' M34',CmQ,BUd,BUX,BwY,BUf,BrX,BUT,CVy,[B,K,'31286']]],[[U,'MGI_Austria_M34',Cdk,BUd,BUX,BwY,BUf,BrX,BUT,BUa]]],['31285',AjX+gn+' +k=1 +x_0=450000'+AkI+BEZ+a,[[U,'MGI /'+Abq+' M31',CmQ,BUd,BUX,BoB,BUf,BwZ,BUT,CVy,[B,K,'31285']]],[[U,'MGI_Austria_M31',Cdk,BUd,BUX,BoB,BUf,BwZ,BUT,BUa]]],['31284',AjX+AAl+' +k=1'+AlH+Aqs+q+a,[[U,'MGI /'+Abq+' M28',CmQ,BUd,BUX,BwX,BUf,BXc,BUT,CVy,[B,K,'31284']]],[[U,'MGI_Austria_M28',Cdk,BUd,BUX,BwX,BUf,BXc,BUT,BUa]]],['31283',AjX+' +lon_0=34 +k=1'+Ajh+BLi,[[U,'MGI'+cj+' /'+Abq+' East Zone',CmO,BUd,BUX,BoT,BUf,BUy,BUT,CVy,[B,K,'31283']]],[[U,'MGI_Ferro_Austria_East_Zone',Cdz,BUd,BUX,BoT,BUf,BUy,BUT,BUa]]],['31282',BEr+' +k=1'+Ajh+BLi,[[U,'MGI'+cj+' /'+Abq+Gh+' Zone',CmO,BUd,BUX,Bed,BUf,BUy,BUT,CVy,[B,K,'31282']]],[[U,'MGI_Ferro_Austria_Central_Zone',Cdz,BUd,BUX,Bed,BUf,BUy,BUT,BUa]]],['31281',BEt+' +k=1'+Ajh+BLi,[[U,'MGI'+cj+' /'+Abq+' West Zone',CmO,BUd,BUX,BhX,BUf,BUy,BUT,CVy,[B,K,'31281']]],[[U,'MGI_Ferro_Austria_West_Zone',Cdz,BUd,BUX,BhX,BUf,BUy,BUT,BUa]]],['3128',ApT+' +k=1'+BSv,[[U,ED+' / ETRS-GK21FIN',Cld,BUd,BUX,BWR,BUf,BUc,BUT,CVy,[B,K,'3128']]],[[U,'ETRS89_ETRS_GK21FIN',CcG,BUd,BUX,BWR,BUf,BUc,BUT,BUa]]],['3127',BIM+' +k=1'+BSv,[[U,ED+' / ETRS-GK20FIN',Cld,BUd,BUX,BmG,BUf,BUc,BUT,CVy,[B,K,'3127']]],[[U,'ETRS89_ETRS_GK20FIN',CcG,BUd,BUX,BmG,BUf,BUc,BUT,BUa]]],['3126',BEp+' +k=1'+BSv,[[U,ED+' / ETRS-GK19FIN',Cld,BUd,BUX,BhV,BUf,BUc,BUT,CVy,[B,K,'3126']]],[[U,'ETRS89_ETRS_GK19FIN',CcG,BUd,BUX,BhV,BUf,BUc,BUT,BUa]]],['31259',AjX+AAk+' +k=1'+Agg+ArH+BEZ+a,[[U,'MGI /'+Abq+' GK M34',CmQ,BUd,BUX,BwY,BUf,BrX,BZJ,CVy,[B,K,'31259']]],[[U,'MGI_Austria_GK_M34',Cdk,BUd,BUX,BwY,BUf,BrX,BZJ,BUa]]],['31258',AjX+gn+' +k=1 +x_0=450000'+ArH+BEZ+a,[[U,'MGI /'+Abq+' GK M31',CmQ,BUd,BUX,BoB,BUf,BwZ,BZJ,CVy,[B,K,'31258']]],[[U,'MGI_Austria_GK_M31',Cdk,BUd,BUX,BoB,BUf,BwZ,BZJ,BUa]]],['31257',AjX+AAl+' +k=1'+Oz+ArH+BEZ+a,[[U,'MGI /'+Abq+' GK M28',CmQ,BUd,BUX,BwX,BUf,BXc,BZJ,CVy,[B,K,'31257']]],[[U,'MGI_Austria_GK_M28',Cdk,BUd,BUX,BwX,BUf,BXc,BZJ,BUa]]],['31256',AjX+AAk+' +k=1'+BDB+Aqs+q+a,[[U,'MGI /'+Abq+' GK East',CmQ,BUd,BUX,BwY,BUf,BUy,BZJ,CVy,[B,K,'31256']]],[[U,'MGI_Austria_GK_East',Cdk,BUd,BUX,BwY,BUf,BUy,BZJ,BUa]]],['31255',AjX+gn+' +k=1'+BDB+Aqs+q+a,[[U,'MGI /'+Abq+' GK'+Gh,CmQ,BUd,BUX,BoB,BUf,BUy,BZJ,CVy,[B,K,'31255']]],[[U,'MGI_Austria_GK_Central',Cdk,BUd,BUX,BoB,BUf,BUy,BZJ,BUa]]],['31254',AjX+AAl+' +k=1'+BDB+Aqs+q+a,[[U,'MGI /'+Abq+' GK West',CmQ,BUd,BUX,BwX,BUf,BUy,BZJ,CVy,[B,K,'31254']]],[[U,'MGI_Austria_GK_West',Cdk,BUd,BUX,BwX,BUf,BUy,BZJ,BUa]]],['31253',AjX+' +lon_0=34 +k=1'+BDB+BLi,[[U,'MGI'+cj+' /'+Abq+' GK East Zone',CmO,BUd,BUX,BoT,BUf,BUy,BZJ,CVy,[B,K,'31253']]],[[U,'MGI_Ferro_Austria_GK_East_Zone',Cdz,BUd,BUX,BoT,BUf,BUy,BZJ,BUa]]],['31252',BEr+' +k=1'+BDB+BLi,[[U,'MGI'+cj+' /'+Abq+' GK'+Gh+' Zone',CmO,BUd,BUX,Bed,BUf,BUy,BZJ,CVy,[B,K,'31252']]],[[U,'MGI_Ferro_Austria_GK_Central_Zone',Cdz,BUd,BUX,Bed,BUf,BUy,BZJ,BUa]]],['31251',BEt+' +k=1'+BDB+BLi,[[U,'MGI'+cj+' /'+Abq+' GK West Zone',CmO,BUd,BUX,BhX,BUf,BUy,BZJ,CVy,[B,K,'31251']]],[[U,'MGI_Ferro_Austria_GK_West_Zone',Cdz,BUd,BUX,BhX,BUf,BUy,BZJ,BUa]]],['3125',AjX+ATF+BLh+q+a,[[U,AcD+' /'+qP+' zone 5',CnB,BUd,BUX,Blp,BWh,BUc,BUT,CVy,BUl,BUk,[B,K,'3125']]],[[U,'PRS92_Philippines_zone_5',CfJ,BUd,BUX,Blp,BWh,BUc,BUT,BUa]]],['3124',ApF+BLh+q+a,[[U,AcD+' /'+qP+' zone 4',CnB,BUd,BUX,BWU,BWh,BUc,BUT,CVy,BUl,BUk,[B,K,'3124']]],[[U,'PRS92_Philippines_zone_4',CfJ,BUd,BUX,BWU,BWh,BUc,BUT,BUa]]],['3123',AjX+' +lon_0=121'+BLh+q+a,[[U,AcD+' /'+qP+' zone 3',CnB,BUd,BUX,BpT,BWh,BUc,BUT,CVy,BUl,BUk,[B,K,'3123']]],[[U,'PRS92_Philippines_zone_3',CfJ,BUd,BUX,BpT,BWh,BUc,BUT,BUa]]],['3122',AjX+' +lon_0=119'+BLh+q+a,[[U,AcD+' /'+qP+' zone 2',CnB,BUd,BUX,Bra,BWh,BUc,BUT,CVy,BUl,BUk,[B,K,'3122']]],[[U,'PRS92_Philippines_zone_2',CfJ,BUd,BUX,Bra,BWh,BUc,BUT,BUa]]],['3121',ApE+BLh+q+a,[[U,AcD+' /'+qP+' zone 1',CnB,BUd,BUX,BWS,BWh,BUc,BUT,CVy,BUl,BUk,[B,K,'3121']]],[[U,'PRS92_Philippines_zone_1',CfJ,BUd,BUX,BWS,BWh,BUc,BUT,BUa]]],['3120',ZQ+' +lat_0=50.625 +lon_0=21.08333333333333'+Afu+' +x_0=4637000 +y_0=5467000'+BCx,[[U,Akd+' / Poland zone I',Clq,Bpn,CHh,[A,E,AQJ],Bli,CGM,CGL,CVy,[B,K,'3120']]],[[U,'Pulkovo_1942_58_Poland_zone_I',Ccf,Bpm,CHh,[A,E,AQJ],Bli,CGM,CGL,BUa]]],['3119',AjX+Agd+' +k=0.999'+Anu+BP+AEW+q+a,[[U,'Douala 1948 / AEF west',CrA,BUd,BUX,Bre,COE,BWa,BVg,CVy,BUj,BUm,[B,K,'3119']]],[[U,'Douala_1948_AEF_west',[S,'GCS_Douala 1948',CZw,BUU,BUW],BUd,BUX,Bre,COE,BWa,BVg,BUa]]],['3118',l+go+' +lon_0=-68.07750791666666 +k=1'+BTx,[[U,ay+' /'+AcL+' East zone',CnI,BUd,Bns,[A,E,AKo],BUf,BWa,BVg,CVy,[B,K,'3118']]],[[U,'MAGNA_SIRGAS_Colombia_East_zone',CfT,BUd,Bns,[A,E,AKo],BUf,BWa,BVg,BUa]]],['31171',AjX+AWu+AkS+AkR+bc+q+a,[[U,fu+' / Suriname TM',Cnl,BUd,BUX,CHg,BUt,BUc,BUT,CVy,BUj,BUm,[B,K,'31171']]],[[U,'Zanderij_Suriname_TM',Cfw,BUd,BUX,CHg,BUt,BUc,BUT,BUa]]],['31170',AjX+AWu+BHH+bc+q+a,[[U,fu+' / Suriname Old TM',Cnl,BUd,BUX,CHg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31170']]],[[U,'Zanderij_Suriname_Old_TM',Cfw,BUd,BUX,CHg,BUg,BUc,BUT,BUa]]],['3117',l+go+' +lon_0=-71.07750791666666 +k=1'+BTx,[[U,ay+' /'+AcL+' East'+Gh+' zone',CnI,BUd,Bns,[A,E,AKp],BUf,BWa,BVg,CVy,[B,K,'3117']]],[[U,'MAGNA_SIRGAS_Colombia_East_Central_zone',CfT,BUd,Bns,[A,E,AKp],BUf,BWa,BVg,BUa]]],['3116',l+go+' +lon_0=-74.07750791666666 +k=1'+BTx,[[U,ay+' /'+AcL+" "+AUY+' zone',CnI,BUd,Bns,[A,E,AKq],BUf,BWa,BVg,CVy,[B,K,'3116']]],[[U,'MAGNA_SIRGAS_Colombia_Bogota_zone',CfT,BUd,Bns,[A,E,AKq],BUf,BWa,BVg,BUa]]],['31154',AjX+vs+BHH+bc+q+a,[[U,fu+' / TM 54 NW',Cnl,BUd,BUX,BdM,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31154']]],[[U,'Zanderij_TM_54_NW',Cfw,BUd,BUX,BdM,BUg,BUc,BUT,BUa]]],['3115',l+go+' +lon_0=-77.07750791666666 +k=1'+BTx,[[U,ay+' /'+AcL+' West zone',CnI,BUd,Bns,[A,E,AKr],BUf,BWa,BVg,CVy,[B,K,'3115']]],[[U,'MAGNA_SIRGAS_Colombia_West_zone',CfT,BUd,Bns,[A,E,AKr],BUf,BWa,BVg,BUa]]],['3114',l+go+' +lon_0=-80.07750791666666 +k=1'+BTx,[[U,ay+' /'+AcL+' Far West zone',CnI,BUd,Bns,[A,E,AKs],BUf,BWa,BVg,CVy,[B,K,'3114']]],[[U,'MAGNA_SIRGAS_Colombia_Far_West_zone',CfT,BUd,Bns,[A,E,AKs],BUf,BWa,BVg,BUa]]],['3113',l+' +lat_0=-28'+vu+jz+jy+Aps+c+q+a,[[U,gs+' / BCSG02',Clx,BUd,[A,C,ATO],BYu,Bav,Baw,BXV,CVy,BUj,BUm,[B,K,'3113']]],[[U,'GDA94_BCSG02',Ccs,BUd,[A,C,ATO],BYu,Bav,Baw,BXV,BUa]]],['31121',AlI+BP+bc+q+a,[[U,fu+' / UTM zone 21N',Cnl,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31121']]],[[U,'Zanderij_UTM_zone_21N',Cfw,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['3112',AU+' +lat_1=-18 +lat_2=-36'+At+' +lon_0=134'+BTr,[[U,gs+' / Geoscience Australia'+PW,Clx,BVG,Bwl,Brc,BUX,CPy,BUy,BUT,CVy,BUj,BUm,[B,K,'3112']]],[[U,'GDA94_Geoscience_Australia_Lambert',Ccs,BVD,Bwl,Brc,BUX,CPy,BUy,BUT,BUa]]],['3111',AU+' +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145'+Rw+iM+j+c+q+a,[[U,gs+' / Vicgrid94',Clx,BVG,CHf,CHe,Byv,Bwq,BXy,BcP,CVy,BUj,BUm,[B,K,'3111']]],[[U,'GDA94_Vicgrid94',Ccs,BVD,CHf,CHe,Byv,Bwq,BXy,BcP,BUa]]],['3110',AU+' +lat_1=-36 +lat_2=-38 +lat_0=-37 +lon_0=145'+Rw+Zl+ApN+q+a,[[U,pt+' / Vicgrid66',CmM,BVG,CHf,CHe,Byv,Bwq,BXy,BZm,CVy,BUj,BUm,[B,K,'3110']]],[[U,'AGD66_Vicgrid66',CdU,BVD,CHf,CHe,Byv,Bwq,BXy,BZm,BUa]]],['3109',l+' +lat_0=49.225 +lon_0=-2.135 +k=0.9999999000000001'+yW+' +y_0=70000'+j+c+q+a,[[U,ED+' / Jersey'+AEt+" "+aU,Cld,BUd,CHd,CHc,Byu,BjP,COD,CVy,BUj,BUm,[B,K,'3109']]],[[U,'ETRS89_Jersey_Transverse_Mercator',CcG,BUd,CHd,CHc,Byu,BjP,COD,BUa]]],['3108',l+ATU+' +lon_0=-2.416666666666667 +k=0.999997 +x_0=47000'+ATB+j+c+q+a,[[U,ED+' / Guernsey'+op,Cld,BUd,[A,C,oe],[A,E,AKt],CAn,COC,BmI,CVy,BUj,BUm,[B,K,'3108']]],[[U,'ETRS89_Guernsey_Grid',CcG,BUd,[A,C,oe],[A,E,AKt],CAn,COC,BmI,BUa]]],['3107',AU+' +lat_1=-28 +lat_2=-36 +lat_0=-32'+Xi+Nd+BHF+q+a,[[U,gs+' / SA'+PW,Clx,BVG,[A,W,ATO],Brc,CPx,BWd,BWa,BYH,CVy,BUj,BUm,[B,K,'3107']]],[[U,'GDA94_SA_Lambert',Ccs,BVD,[A,W,ATO],Brc,CPx,BWd,BWa,BYH,BUa]]],['3106',Asm+BIU+AmB+AGJ+q+a,[[U,'Gulshan 303 / Bangladesh'+AEt+" "+aU,CrE,BUd,BUX,BYP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3106']]],[[U,'Gulshan_303_Bangladesh_Transverse_Mercator',[S,'GCS_Gulshan 303',CaE,BUU,BUW],BUd,BUX,BYP,BUg,BUc,BUT,BUa]]],['31028',Aly+Akc+q+a,[[U,'Yoff / UTM zone 28N',CsJ,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'31028']]],[[U,'Yoff_UTM_zone_28N',[S,'GCS_Yoff',Cbe,BUU,BUW],BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['3102',AU+' +lat_1=-14.26666666666667 +lat_0=-14.26666666666667'+ATY+' +k_0=1'+Cv+' +y_0=95169.31165862332'+Dr+AKO+Ajg,[[U,'American Samoa 1962 / American Samoa'+PW,CpL,BWW,[A,C,wl],BoY,BUf,BUc,Byt,CVz,BUl,BUk,[B,K,'3102']]],[[U,'American_Samoa_1962_American_Samoa_Lambert',[S,'GCS_American Samoa 1962',[V,ANt,BUx],BUU,BUW],BVD,[A,C,wl],BoY,BUf,BUc,Byt,BUr,[A,W,wl]]]],['3101',Amg+j+c+q+a,[[U,PV+' / UTM zone 55N',Cls,BUd,BUX,BYW,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3101']]],[[U,'JGD2000_UTM_zone_55N',Ccm,BUd,BUX,BYW,BUg,BUc,BUT,BUa]]],['3100',AoI+j+c+q+a,[[U,PV+' / UTM zone 54N',Cls,BUd,BUX,BYK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3100']]],[[U,'JGD2000_UTM_zone_54N',Ccm,BUd,BUX,BYK,BUg,BUc,BUT,BUa]]],['3099',AmT+j+c+q+a,[[U,PV+' / UTM zone 53N',Cls,BUd,BUX,BWd,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3099']]],[[U,'JGD2000_UTM_zone_53N',Ccm,BUd,BUX,BWd,BUg,BUc,BUT,BUa]]],['3098',Ank+j+c+q+a,[[U,PV+' / UTM zone 52N',Cls,BUd,BUX,BWQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3098']]],[[U,'JGD2000_UTM_zone_52N',Ccm,BUd,BUX,BWQ,BUg,BUc,BUT,BUa]]],['3097',AnJ+j+c+q+a,[[U,PV+' / UTM zone 51N',Cls,BUd,BUX,BWU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3097']]],[[U,'JGD2000_UTM_zone_51N',Ccm,BUd,BUX,BWU,BUg,BUc,BUT,BUa]]],['3096',Amg+BKe,[[U,QL+' / UTM zone 55N',Clr,BUd,BUX,BYW,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3096']]],[[U,'Tokyo_UTM_zone_55N',Ccl,BUd,BUX,BYW,BUg,BUc,BUT,BUa]]],['3095',AoI+BKe,[[U,QL+' / UTM zone 54N',Clr,BUd,BUX,BYK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3095']]],[[U,'Tokyo_UTM_zone_54N',Ccl,BUd,BUX,BYK,BUg,BUc,BUT,BUa]]],['3094',AmT+BKe,[[U,QL+' / UTM zone 53N',Clr,BUd,BUX,BWd,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3094']]],[[U,'Tokyo_UTM_zone_53N',Ccl,BUd,BUX,BWd,BUg,BUc,BUT,BUa]]],['3093',Ank+BKe,[[U,QL+' / UTM zone 52N',Clr,BUd,BUX,BWQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3093']]],[[U,'Tokyo_UTM_zone_52N',Ccl,BUd,BUX,BWQ,BUg,BUc,BUT,BUa]]],['3092',AnJ+BKe,[[U,QL+' / UTM zone 51N',Clr,BUd,BUX,BWU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3092']]],[[U,'Tokyo_UTM_zone_51N',Ccl,BUd,BUX,BWU,BUg,BUc,BUT,BUa]]],['3091',BQL+AkO,[[U,Aj+' /'+or+' Single Zone'+DE,ClX,BVG,Bhl,Bhk,BXr,BZZ,Bhj,Bbv,CVz,BUl,BUk,[B,K,'3091']]],[[U,'NAD83_HARN_Kentucky_Single_Zone_ftUS',Cbs,BVD,Bhl,Bhk,BXr,BZZ,Bhj,Bbv,BUr]]],['3090',BQK+c+q+a,[[U,Aj+' /'+or+' Single Zone',ClX,BVG,Bhl,Bhk,BXr,BZZ,BWL,BVg,CVy,BUl,BUk,[B,K,'3090']]],[[U,'NAD83_HARN_Kentucky_Single_Zone',Cbs,BVD,Bhl,Bhk,BXr,BZZ,BWL,BVg,BUa]]],['3089',BQL+AkO,[[U,Bx+' /'+or+' Single Zone'+DE,ClV,BVG,Bhl,Bhk,BXr,BZZ,Bhj,Bbv,CVz,BUl,BUk,[B,K,'3089']]],[[U,'NAD83_Kentucky_Single_Zone_ftUS',Cbn,BVD,Bhl,Bhk,BXr,BZZ,Bhj,Bbv,BUr]]],['3088',BQK+c+q+a,[[U,Bx+' /'+or+' Single Zone',ClV,BVG,Bhl,Bhk,BXr,BZZ,BWL,BVg,CVy,BUl,BUk,[B,K,'3088']]],[[U,'NAD83_Kentucky_Single_Zone',Cbn,BVD,Bhl,Bhk,BXr,BZZ,BWL,BVg,BUa]]],['3087',TR+' +lat_1=24'+AgU+' +lat_0=24'+BNy+j+c+q+a,[[U,Aj+' /'+tm+' GDL'+" "+Pk,ClX,BeL,Brw,Brv,CBF,CBE,BVh,BUT,CVy,BUl,BUk,[B,K,'3087']]],[[U,'NAD83_HARN_Florida_GDL_Albers',Cbs,BeK,Brw,Brv,CIr,Bhh,BVh,BUT,BUa]]],['3086',TR+' +lat_1=24'+AgU+' +lat_0=24'+BNy+j+c+q+a,[[U,Bx+' /'+tm+' GDL'+" "+Pk,ClV,BeL,Brw,Brv,CBF,CBE,BVh,BUT,CVy,BUl,BUk,[B,K,'3086']]],[[U,'NAD83_Florida_GDL_Albers',Cbn,BeK,Brw,Brv,CIr,Bhh,BVh,BUT,BUa]]],['3085',BRG+BNF+q+a,[[U,Aj+' / Texas Centric'+" "+Pk+' Equal Area',ClX,BeL,Bip,Bio,CBH,Buv,BWL,Bdb,CVy,BUl,BUk,[B,K,'3085']]],[[U,'NAD83_HARN_Texas_Centric_Albers_Equal_Area',Cbs,BeK,Bip,Bio,BgP,BXb,BWL,Bdb,BUa]]],['3084',BRH+BJv+q+a,[[U,Aj+' / Texas Centric'+PW+' Conformal',ClX,BVG,Bip,Bio,BgP,BXb,BWL,Bdc,CVy,BUl,BUk,[B,K,'3084']]],[[U,'NAD83_HARN_Texas_Centric_Lambert_Conformal',Cbs,BVD,Bip,Bio,BgP,BXb,BWL,Bdc,BUa]]],['3083',BRG+BNF+q+a,[[U,Bx+' / Texas Centric'+" "+Pk+' Equal Area',ClV,BeL,Bip,Bio,CBH,Buv,BWL,Bdb,CVy,BUl,BUk,[B,K,'3083']]],[[U,'NAD83_Texas_Centric_Albers_Equal_Area',Cbn,BeK,Bip,Bio,BgP,BXb,BWL,Bdb,BUa]]],['3082',BRH+BJv+q+a,[[U,Bx+' / Texas Centric'+PW+' Conformal',ClV,BVG,Bip,Bio,BgP,BXb,BWL,Bdc,CVy,BUl,BUk,[B,K,'3082']]],[[U,'NAD83_Texas_Centric_Lambert_Conformal',Cbn,BVD,Bip,Bio,BgP,BXb,BWL,Bdc,BUa]]],['3081',AU+AaW+AaX+AaY+Ql+BTx,[[U,Bx+' / Texas State Mapping'+TN,ClV,BVG,CHb,CHa,CHZ,BXb,BWa,BVg,CVy,BUl,BUk,[B,K,'3081']]],[[U,'NAD83_Texas_State_Mapping_System',Cbn,BVD,CHb,CHa,CHZ,BXb,BWa,BVg,BUa]]],['3080',AU+AaW+AaX+AaY+Ql+' +x_0=914400 +y_0=914400'+CA+AkW,[[U,Dg+' / Shackleford',ClZ,BVG,CHb,CHa,CHZ,BXb,BYY,Bbw,CWY,BUl,BUk,[B,K,'3080']]],[[U,'NAD27_Shackleford',Cbw,BVD,CHb,CHa,CHZ,BXb,BYY,Bbw,BXN]]],['30792',BHl+ATJ+wf+' +x_0=500135 +y_0=300090'+BSA,[[U,'Nord Sahara 1959 / Sud Algerie',CmS,BWW,Bnr,Ble,Bnq,Bys,Byr,CVy,BUl,BUk,[B,K,'30792']]],[[U,'Nord_Sahara_1959_Sud_Algerie',CdY,BVD,Bnr,Ble,Bnq,Bys,Byr,BUa,Bxr]]],['30791',AU+' +lat_1=36'+ZE+ATJ+AEO+' +x_0=500135 +y_0=300090'+BSA,[[U,'Nord Sahara 1959 / Nord Algerie',CmS,BWW,BXT,Ble,BrP,Bys,Byr,CVy,BUl,BUk,[B,K,'30791']]],[[U,'Nord_Sahara_1959_Nord_Algerie',CdY,BVD,BXT,Ble,BrP,Bys,Byr,BUa,CHY]]],['3079',Qw+pK+' +lonc=-86'+BQZ+j+c+q+a,[[U,Aj+' /'+iV+' Oblique'+" "+aU,ClX,BlD,Bpd,Bpc,Bpb,CBG,BUg,BsK,BsJ,CVy,BUl,BUk,[B,K,'3079']]],[[U,'NAD83_HARN_Michigan_Oblique_Mercator',Cbs,BlC,Bpd,Bpc,Bpb,BUg,BsK,BsJ,BUa]]],['3078',Qw+pK+' +lonc=-86'+BQZ+j+c+q+a,[[U,Bx+' /'+iV+' Oblique'+" "+aU,ClV,BlD,Bpd,Bpc,Bpb,CBG,BUg,BsK,BsJ,CVy,BUl,BUk,[B,K,'3078']]],[[U,'NAD83_Michigan_Oblique_Mercator',Cbn,BlC,Bpd,Bpc,Bpb,BUg,BsK,BsJ,BUa]]],['3077',BQT+c+q+a,[[U,Aj+' / Maine CS2000 West',ClX,BUd,BZt,BsD,Bab,BVl,BUT,CVy,BUl,BUk,[B,K,'3077']]],[[U,'NAD83_HARN_Maine_CS2000_West',Cbs,BUd,BZt,BsD,Bab,BVl,BUT,BUa]]],['3075',l+BQS+c+q+a,[[U,Aj+' / Maine CS2000 East',ClX,BUd,BYM,BsC,Bab,BWl,BUT,CVy,BUl,BUk,[B,K,'3075']]],[[U,'NAD83_HARN_Maine_CS2000_East',Cbs,BUd,BYM,BsC,Bab,BWl,BUT,BUa]]],['3074',BQT+c+q+a,[[U,Bx+' / Maine CS2000 West',ClV,BUd,BZt,BsD,Bab,BVl,BUT,CVy,BUl,BUk,[B,K,'3074']]],[[U,'NAD83_Maine_CS2000_West',Cbn,BUd,BZt,BsD,Bab,BVl,BUT,BUa]]],['30732',Alu+BSA,[[U,'Nord Sahara 1959 / UTM zone 32N',CmS,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'30732']]],[[U,'Nord_Sahara_1959_UTM_zone_32N',CdY,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['30731',Amw+BSA,[[U,'Nord Sahara 1959 / UTM zone 31N',CmS,BUd,BUX,BXt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'30731']]],[[U,'Nord_Sahara_1959_UTM_zone_31N',CdY,BUd,BUX,BXt,BUg,BUc,BUT,BUa]]],['30730',AmR+BSA,[[U,'Nord Sahara 1959 / UTM zone 30N',CmS,BUd,BUX,Bak,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'30730']]],[[U,'Nord_Sahara_1959_UTM_zone_30N',CdY,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['30729',AmJ+BSA,[[U,'Nord Sahara 1959 / UTM zone 29N',CmS,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'30729']]],[[U,'Nord_Sahara_1959_UTM_zone_29N',CdY,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['3072',l+BQS+c+q+a,[[U,Bx+' / Maine CS2000 East',ClV,BUd,BYM,BsC,Bab,BWl,BUT,CVy,BUl,BUk,[B,K,'3072']]],[[U,'NAD83_Maine_CS2000_East',Cbn,BUd,BYM,BsC,Bab,BWl,BUT,BUa]]],['3071',BRW+j+c+q+a,[[U,Aj+' /'+BEm+" "+aU,ClX,BUd,BUX,BWb,BUg,Bsf,Bse,CVy,BUl,BUk,[B,K,'3071']]],[[U,'NAD83_HARN_Wisconsin_Transverse_Mercator',Cbs,BUd,BUX,BWb,BUg,Bsf,Bse,BUa]]],['3070',BRW+j+c+q+a,[[U,Bx+' /'+BEm+" "+aU,ClV,BUd,BUX,BWb,BUg,Bsf,Bse,CVy,BUl,BUk,[B,K,'3070']]],[[U,'NAD83_Wisconsin_Transverse_Mercator',Cbn,BUd,BUX,BWb,BUg,Bsf,Bse,BUa]]],['3069',BGq+AlL+' +y_0=-4500000'+Apt,[[U,Dg+' /'+BEm+" "+aU,ClZ,BUd,BUX,BWb,BUg,BUc,CFR,CVy,BUl,BUk,[B,K,'3069']]],[[U,'NAD27_Wisconsin_Transverse_Mercator',Cbw,BUd,BUX,BWb,BUg,BUc,CFR,BUa]]],['3068',SE+' +lat_0=52.41864827777778 +lon_0=13.62720366666667'+yW+' +y_0=10000'+BJe,[[U,'DHDN / Soldner Berlin',CmJ,Bgy,[A,C,AQK],[A,E,AQL],BjP,[A,G,ABG],CVy,[B,K,'3068']]],[[U,'DHDN_Soldner_Berlin',Cdc,Bgx,[A,C,AQK],[A,E,AQL],BjP,[A,G,ABG],BUa,Bal]]],['3066',AjX+' +lon_0=37'+Afu+Ay+' +y_0=-3000000'+BDH,[[U,ij+' / Jordan TM',Clm,BUd,BUX,[A,E,Xr],Bli,BUc,BxF,CVy,BUj,BUm,[B,K,'3066']]],[[U,'ED50_Jordan_TM',Ccc,BUd,BUX,[A,E,Xr],Bli,BUc,BxF,BUa]]],['3065',AmO+BAy,[[U,'IGM95 / UTM zone 33N',CoY,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3065']]],[[U,'IGM95_UTM_zone_33N',CjB,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['3064',Alu+BAy,[[U,'IGM95 / UTM zone 32N',CoY,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3064']]],[[U,'IGM95_UTM_zone_32N',CjB,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['3063',BJM+AAx+q+a,[[U,BPy+' / UTM zone 26N',Csb,BUd,BUX,BaV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3063']]],[[U,'Azores_Central_1995_UTM_zone_26N',[S,AMQ+Gh+PP,[V,AET,BUs],BUU,BUW],BUd,BUX,BaV,BUg,BUc,BUT,BUa]]],['3062',BJM+ABk+q+a,[[U,BPx+' / UTM zone 26N',Csa,BUd,BUX,BaV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3062']]],[[U,'Azores_Oriental_1995_UTM_zone_26N',[S,AMQ+BCk,[V,ADo,BUs],BUU,BUW],BUd,BUX,BaV,BUg,BUc,BUT,BUa]]],['3061',BJL+AAr+q+a,[[U,'Porto Santo'+PP+' / UTM zone 28N',CqZ,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3061']]],[[U,'Porto_Santo_1995_UTM_zone_28N',[S,'GCS_Porto Santo'+PP,[V,AVZ,BUs],BUU,BUW],BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['3060',BEk+ADp+q+a,[[U,'IGN72 Grande Terre / UTM zone 58S',CpV,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3060']]],[[U,'IGN72_Grande_Terre_UTM_zone_58S',[S,'GCS_IGN72 Grande Terre',[V,ASa,BUs],BUU,BUW],BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['3059',ArK+AlL+' +y_0=-6000000'+j+c+q+a,[[U,'LKS92 / Latvia TM',Crz,BUd,BUX,BYU,BUg,BUc,CAm,CVy,[B,K,'3059']]],[[U,'LKS92_Latvia_TM',[S,'GCS_LKS92',CaD,BUU,BUW],BUd,BUX,BYU,BUg,BUc,CAm,BUa]]],['3058',AjX+' +lon_0=-8.5 +k=1'+jy+' +y_0=-7800000'+BP+nB+q+a,[[U,'Helle'+gr+' / Jan Mayen'+op,Crh,BUd,BUX,CPN,BUf,Baw,CFQ,CVy,[B,K,'3058']]],[[U,'Helle_1954_Jan_Mayen_Grid',[S,'GCS_Helle'+gr,CaO,BUU,BUW],BUd,BUX,CPN,BUf,Baw,CFQ,BUa]]],['3057',AU+' +lat_1=64.25 +lat_2=65.75 +lat_0=65 +lon_0=-19'+BLK+c+q+a,[[U,'ISN93 /'+PW+' 1993',Cry,BVG,CAr,CAq,CIa,CAp,BUc,BWE,CVy,BUl,BUk,[B,K,'3057']]],[[U,'ISN93_Lambert_1993',[S,'GCS_ISN93',[V,AKB,BUh],BUU,BUW],BVD,CAr,CAq,CIa,CAp,BUc,BWE,BUa]]],['3056',BJL+js+q+a,[[U,AcN+' 1955 / UTM zone 28N',CnU,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3056']]],[[U,'Hjorsey_1955_UTM_zone_28N',CfP,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['3055',Aou+BP+js+q+a,[[U,AcN+' 1955 / UTM zone 27N',CnU,BUd,BUX,Bee,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3055']]],[[U,'Hjorsey_1955_UTM_zone_27N',CfP,BUd,BUX,Bee,BUg,BUc,BUT,BUa]]],['3054',BJM+js+q+a,[[U,AcN+' 1955 / UTM zone 26N',CnU,BUd,BUX,BaV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'3054']]],[[U,'Hjorsey_1955_UTM_zone_26N',CfP,BUd,BUX,BaV,BUg,BUc,BUT,BUa]]],['30494',BHl+ATJ+BNS+Akc+q+a,[[U,Aaq+' 1879 / Sud Algerie'+ATh,CoM,BWW,Bnr,Ble,Bnq,BUc,BZw,CVy,BUl,BUk,[B,K,'30494']]],[[U,'Voirol_1879_Sud_Algerie_ancienne',Chm,BVD,Bnr,Ble,Bnq,BUc,BZw,BUa,Bxr]]],['30493',AU+' +lat_1=36'+ZE+ATJ+AEO+Axs+q+a,[[U,Aaq+' 1879 / Nord Algerie'+ATh,CoM,BWW,BXT,Ble,BrP,BUc,BZw,CVy,BUl,BUk,[B,K,'30493']]],[[U,'Voirol_1879_Nord_Algerie_ancienne',Chm,BVD,BXT,Ble,BrP,BUc,BZw,BUa,CHY]]],['30492',BHl+ATJ+BNS+Akc+hs+q+a,[[U,Aaq+' 1875 / Sud Algerie'+ATh,CoL,BWW,Bnr,Ble,Bnq,BUc,BZw,CVy,BUl,BUk,[B,K,'30492']]],[[U,'Voirol_1875_Sud_Algerie_ancienne',Cjm,BVD,Bnr,Ble,Bnq,BUc,BZw,BUa,Bxr]]],['30491',AU+' +lat_1=36'+ZE+ATJ+AEO+Axs+hs+q+a,[[U,Aaq+' 1875 / Nord Algerie'+ATh,CoL,BWW,BXT,Ble,BrP,BUc,BZw,CVy,BUl,BUk,[B,K,'30491']]],[[U,'Voirol_1875_Nord_Algerie_ancienne',Cjm,BVD,BXT,Ble,BrP,BUc,BZw,BUa,CHY]]],['3049',AmP+j+c+q+a,[[U,ED+' / UTM zone 37N (N-E)',Cld,BUd,BUX,BWn,BUg,BUc,BUT,CVy,[B,K,'3049']]],[[U,'ETRS89_UTM_zone_37N_N_E',CcG,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['3048',AnF+j+c+q+a,[[U,ED+' / UTM zone 36N (N-E)',Cld,BUd,BUX,BWg,BUg,BUc,BUT,CVy,[B,K,'3048']]],[[U,'ETRS89_UTM_zone_36N_N_E',CcG,BUd,BUX,BWg,BUg,BUc,BUT,BUa]]],['3047',Amc+j+c+q+a,[[U,ED+' / UTM zone 35N (N-E)',Cld,BUd,BUX,BWP,BUg,BUc,BUT,CVy,[B,K,'3047']]],[[U,'ETRS89_UTM_zone_35N_N_E',CcG,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['3046',Anl+j+c+q+a,[[U,ED+' / UTM zone 34N (N-E)',Cld,BUd,BUX,BWR,BUg,BUc,BUT,CVy,[B,K,'3046']]],[[U,'ETRS89_UTM_zone_34N_N_E',CcG,BUd,BUX,BWR,BUg,BUc,BUT,BUa]]],['3045',AmO+j+c+q+a,[[U,ED+' / UTM zone 33N (N-E)',Cld,BUd,BUX,BWH,BUg,BUc,BUT,CVy,[B,K,'3045']]],[[U,'ETRS89_UTM_zone_33N_N_E',CcG,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['3044',Alu+j+c+q+a,[[U,ED+' / UTM zone 32N (N-E)',Cld,BUd,BUX,BWO,BUg,BUc,BUT,CVy,[B,K,'3044']]],[[U,'ETRS89_UTM_zone_32N_N_E',CcG,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['3043',Amw+j+c+q+a,[[U,ED+' / UTM zone 31N (N-E)',Cld,BUd,BUX,BXt,BUg,BUc,BUT,CVy,[B,K,'3043']]],[[U,'ETRS89_UTM_zone_31N_N_E',CcG,BUd,BUX,BXt,BUg,BUc,BUT,BUa]]],['3042',AmR+j+c+q+a,[[U,ED+' / UTM zone 30N (N-E)',Cld,BUd,BUX,Bak,BUg,BUc,BUT,CVy,[B,K,'3042']]],[[U,'ETRS89_UTM_zone_30N_N_E',CcG,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['3041',AmJ+j+c+q+a,[[U,ED+' / UTM zone 29N (N-E)',Cld,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,[B,K,'3041']]],[[U,'ETRS89_UTM_zone_29N_N_E',CcG,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['3040',BUO,[[U,ED+' / UTM zone 28N (N-E)',Cld,BUd,BUX,BYE,BUg,BUc,BUT,CVy,[B,K,'3040']]],[[U,'ETRS89_UTM_zone_28N_N_E',CcG,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['3037',AmP+Aoj+nr+q+a,[[U,AUm+' / UTM zone 37S',Cnu,BUd,BUX,BWn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3037']]],[[U,'Moznet_UTM_zone_37S',ChF,BUd,BUX,BWn,BUg,BUc,BUo,BUa]]],['3036',AnF+Aoj+nr+q+a,[[U,AUm+' / UTM zone 36S',Cnu,BUd,BUX,BWg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'3036']]],[[U,'Moznet_UTM_zone_36S',ChF,BUd,BUX,BWg,BUg,BUc,BUo,BUa]]],['3035',BKi+j+c+q+a,[[U,ED+' / LAEA'+AMJ,Cld,BeA,Bxc,Bup,BoI,BoH,CVy,[B,K,'3035']]],[[U,'ETRS89_LAEA_Europe',CcG,BeA,BeJ,BcM,BoI,BoH,BUa]]],['30340',AnK+aO+q+a,[[U,AHE+' / UTM zone 40N',Coh,BUd,BUX,BXz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'30340']]],[[U,'TC_1948_UTM_zone_40N',CiV,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['3034',AU+' +lat_1=35'+BKj+j+c+q+a,[[U,ED+' / LCC'+AMJ,Cld,BVG,BoK,Beh,BeJ,BcM,Bfp,BoJ,CVy,[B,K,'3034']]],[[U,'ETRS89_LCC_Europe',CcG,BVD,BoK,Beh,BeJ,BcM,Bfp,BoJ,BUa]]],['30339',Alt+aO+q+a,[[U,AHE+' / UTM zone 39N',Coh,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'30339']]],[[U,'TC_1948_UTM_zone_39N',CiV,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['3033',AU+' +lat_1=-68.5 +lat_2=-74.5 +lat_0=-50 +lon_0=70'+AEF+eE+Akk,[[U,'WGS 84 /'+" "+BGT+PW,ClU,BVG,[A,W,OX],[A,Y,NQ],[A,C,sH],CHX,Bly,Bdb,CVy,BUj,BUm,[B,K,'3033']]],[[U,'WGS_84_Australian_Antarctic_Lambert',Cbp,BVD,[A,W,OX],[A,Y,NQ],[A,C,sH],CHX,Bly,Bdb,BUa]]],['3032',AlU+' +lat_ts=-71 +lon_0=70 +k=1'+AEF+eE+Akk,[[U,'WGS 84 /'+" "+BGT+' Polar'+RQ,ClU,BcF,[A,C,AIr],CHX,BUf,Bly,Bdb,CVy,BUj,BUm,[B,K,'3032']]],[[U,'WGS_84_Australian_Antarctic_Polar_Stereographic',Cbp,Bhc,[A,W,AIr],CHX,Bly,Bdb,BUa]]],['3031',AlU+' +lat_ts=-71'+ci+' +k=1'+Aky,[[U,'WGS 84 /'+AcW+' Polar'+RQ,ClU,BcF,[A,C,AIr],BYA,BUf,BUy,BUT,CVy,BUj,BUm,[B,K,'3031']]],[[U,'WGS_84_Antarctic_Polar_Stereographic',Cbp,Bhc,[A,W,AIr],BYA,BUy,BUT,BUa]]],['3030',AjX+AaZ+' +k=1'+BRz,[[U,'RT38 5 gon O',Cmn,BUd,BUX,CHW,BUf,BWL,BUT,CVy,[B,K,'3030']]],[[U,'RT38_5_gon_O',Cel,BUd,BUX,CHW,BUf,BWL,BUT,BUa]]],['3029',AjX+Aaa+' +k=1'+BRz,[[U,'RT38 2.5 gon O',Cmn,BUd,BUX,CHV,BUf,BWL,BUT,CVy,[B,K,'3029']]],[[U,'RT38_2_5_gon_O',Cel,BUd,BUX,CHV,BUf,BWL,BUT,BUa]]],['3028',AjX+Aab+' +k=1'+BRz,[[U,'RT38 0 gon',Cmn,BUd,BUX,CHU,BUf,BWL,BUT,CVy,[B,K,'3028']]],[[U,'RT38_0_gon',Cel,BUd,BUX,CHU,BUf,BWL,BUT,BUa]]],['3027',AjX+Aac+' +k=1'+BRz,[[U,'RT38 2.5 gon V',Cmn,BUd,BUX,CHT,BUf,BWL,BUT,CVy,[B,K,'3027']]],[[U,'RT38_2_5_gon_V',Cel,BUd,BUX,CHT,BUf,BWL,BUT,BUa]]],['3026',AjX+Aad+' +k=1'+BRz,[[U,'RT38 5 gon V',Cmn,BUd,BUX,CHS,BUf,BWL,BUT,CVy,[B,K,'3026']]],[[U,'RT38_5_gon_V',Cel,BUd,BUX,CHS,BUf,BWL,BUT,BUa]]],['3025',AjX+Aae+' +k=1'+BRz,[[U,'RT38 7.5 gon V',Cmn,BUd,BUX,CHR,BUf,BWL,BUT,CVy,[B,K,'3025']]],[[U,'RT38_7_5_gon_V',Cel,BUd,BUX,CHR,BUf,BWL,BUT,BUa]]],['3024',AjX+AaZ+' +k=1'+BTU,[[U,'RT90 5 gon O',Cmm,BUd,BUX,CHW,BUf,BWL,BUT,CVy,[B,K,'3024']]],[[U,'RT90_5_gon_O',Cek,BUd,BUX,CHW,BUf,BWL,BUT,BUa]]],['3023',AjX+Aaa+' +k=1'+BTU,[[U,'RT90 2.5 gon O',Cmm,BUd,BUX,CHV,BUf,BWL,BUT,CVy,[B,K,'3023']]],[[U,'RT90_2_5_gon_O',Cek,BUd,BUX,CHV,BUf,BWL,BUT,BUa]]],['3022',AjX+Aab+' +k=1'+BTU,[[U,'RT90 0 gon',Cmm,BUd,BUX,CHU,BUf,BWL,BUT,CVy,[B,K,'3022']]],[[U,'RT90_0_gon',Cek,BUd,BUX,CHU,BUf,BWL,BUT,BUa]]],['3021',AjX+Aac+' +k=1'+BTU,[[U,'RT90 2.5 gon V',Cmm,BUd,BUX,CHT,BUf,BWL,BUT,CVy,[B,K,'3021']]],[[U,'RT90_2_5_gon_V',Cek,BUd,BUX,CHT,BUf,BWL,BUT,BUa]]],['30200',SE+Aaf+AWv+' +x_0=86501.46392051999 +y_0=65379.0134283'+Arw+iQ+Aag+a,[[U,AUk+' 1903 /'+" "+AUk+op,CoK,Bgy,CHQ,CHP,CHO,CHN,CaQ,BUj,BUm,[B,K,'30200']]],[[U,'Trinidad_1903_Trinidad_Grid',ChB,Bgx,CHQ,CHP,CHO,CHN,COB,Bal]]],['3020',AjX+Aad+' +k=1'+BTU,[[U,'RT90 5 gon V',Cmm,BUd,BUX,CHS,BUf,BWL,BUT,CVy,[B,K,'3020']]],[[U,'RT90_5_gon_V',Cek,BUd,BUX,CHS,BUf,BWL,BUT,BUa]]],['3019',AjX+Aae+' +k=1'+BTU,[[U,'RT90 7.5 gon V',Cmm,BUd,BUX,CHR,BUf,BWL,BUT,CVy,[B,K,'3019']]],[[U,'RT90_7_5_gon_V',Cek,BUd,BUX,CHR,BUf,BWL,BUT,BUa]]],['3018',AjX+' +lon_0=23.25 +k=1'+BTt,[[U,IO+' 23 15',Clu,BUd,BUX,COA,BUf,BXc,BUT,CVy,[B,K,'3018']]],[[U,'SWEREF99_23_15',Ccp,BUd,BUX,COA,BUf,BXc,BUT,BUa]]],['30179',BAd+' +lon_0=154'+BCD,[[U,QL+' / Japan Plane'+OV+' CS XIX',Clr,BUd,BYm,Bsp,BUt,BUy,BUT,CVy,[B,K,'30179']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_XIX',Ccl,BUd,BYm,Bsp,BUt,BUy,BUT,BUa]]],['30178',l+' +lat_0=20'+BHQ+BKe,[[U,QL+' / Japan Plane'+OV+' CS XVIII',Clr,BUd,BxD,BmD,BUt,BUy,BUT,CVy,[B,K,'30178']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_XVIII',Ccl,BUd,BxD,BmD,BUt,BUy,BUT,BUa]]],['30177',BAd+BHP+BKe,[[U,QL+' / Japan Plane'+OV+' CS XVII',Clr,BUd,BYm,Bdg,BUt,BUy,BUT,CVy,[B,K,'30177']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_XVII',Ccl,BUd,BYm,Bdg,BUt,BUy,BUT,BUa]]],['30176',BAd+' +lon_0=124'+BCD,[[U,QL+' / Japan Plane'+OV+' CS XVI',Clr,BUd,BYm,BxC,BUt,BUy,BUT,CVy,[B,K,'30176']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_XVI',Ccl,BUd,BYm,BxC,BUt,BUy,BUT,BUa]]],['30175',BAd+BFq+BGv+q+a,[[U,QL+' / Japan Plane'+OV+' CS XV',Clr,BUd,BYm,BmC,BUt,BUy,BUT,CVy,[B,K,'30175']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_XV',Ccl,BUd,BYm,BmC,BUt,BUy,BUT,BUa]]],['30174',BAd+' +lon_0=142'+BCD,[[U,QL+' / Japan Plane'+OV+' CS XIV',Clr,BUd,BYm,Buy,BUt,BUy,BUT,CVy,[B,K,'30174']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_XIV',Ccl,BUd,BYm,Buy,BUt,BUy,BUT,BUa]]],['30173',l+gP+' +lon_0=144.25'+BCD,[[U,QL+' / Japan Plane'+OV+' CS XIII',Clr,BUd,BZL,BxB,BUt,BUy,BUT,CVy,[B,K,'30173']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_XIII',Ccl,BUd,BZL,BxB,BUt,BUy,BUT,BUa]]],['30172',l+gP+' +lon_0=142.25'+BCD,[[U,QL+' / Japan Plane'+OV+' CS XII',Clr,BUd,BZL,BxA,BUt,BUy,BUT,CVy,[B,K,'30172']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_XII',Ccl,BUd,BZL,BxA,BUt,BUy,BUT,BUa]]],['30171',l+gP+' +lon_0=140.25'+BCD,[[U,QL+' / Japan Plane'+OV+' CS XI',Clr,BUd,BZL,Bwz,BUt,BUy,BUT,CVy,[B,K,'30171']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_XI',Ccl,BUd,BZL,Bwz,BUt,BUy,BUT,BUa]]],['30170',AqP+AAe+BCD,[[U,QL+' / Japan Plane'+OV+' CS X',Clr,BUd,BXM,Bwy,BUt,BUy,BUT,CVy,[B,K,'30170']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_X',Ccl,BUd,BXM,Bwy,BUt,BUy,BUT,BUa]]],['3017',AjX+' +lon_0=21.75 +k=1'+BTt,[[U,IO+' 21 45',Clu,BUd,BUX,CNz,BUf,BXc,BUT,CVy,[B,K,'3017']]],[[U,'SWEREF99_21_45',Ccp,BUd,BUX,CNz,BUf,BXc,BUT,BUa]]],['30169',AsB+AAf+BCD,[[U,QL+' / Japan Plane'+OV+' CS IX',Clr,BUd,BXT,Bwx,BUt,BUy,BUT,CVy,[B,K,'30169']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_IX',Ccl,BUd,BXT,Bwx,BUt,BUy,BUT,BUa]]],['30168',AsB+' +lon_0=138.5'+BCD,[[U,QL+' / Japan Plane'+OV+' CS VIII',Clr,BUd,BXT,Bux,BUt,BUy,BUT,CVy,[B,K,'30168']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_VIII',Ccl,BUd,BXT,Bux,BUt,BUy,BUT,BUa]]],['30167',AsB+AAg+BCD,[[U,QL+' / Japan Plane'+OV+' CS VII',Clr,BUd,BXT,Bww,BUt,BUy,BUT,CVy,[B,K,'30167']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_VII',Ccl,BUd,BXT,Bww,BUt,BUy,BUT,BUa]]],['30166',AsB+BHQ+BKe,[[U,QL+' / Japan Plane'+OV+' CS VI',Clr,BUd,BXT,BmD,BUt,BUy,BUT,CVy,[B,K,'30166']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_VI',Ccl,BUd,BXT,BmD,BUt,BUy,BUT,BUa]]],['30165',AsB+AAh+BCD,[[U,QL+' / Japan Plane'+OV+' CS V',Clr,BUd,BXT,Bwv,BUt,BUy,BUT,CVy,[B,K,'30165']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_V',Ccl,BUd,BXT,Bwv,BUt,BUy,BUT,BUa]]],['30164',Avc+BFp+BGv+q+a,[[U,QL+' / Japan Plane'+OV+' CS IV',Clr,BUd,Bdf,Bso,BUt,BUy,BUT,CVy,[B,K,'30164']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_IV',Ccl,BUd,Bdf,Bso,BUt,BUy,BUT,BUa]]],['30163',AsB+AAi+BCD,[[U,QL+' / Japan Plane'+OV+' CS III',Clr,BUd,BXT,Bwu,BUt,BUy,BUT,CVy,[B,K,'30163']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_III',Ccl,BUd,BXT,Bwu,BUt,BUy,BUT,BUa]]],['30162',Avc+BHP+BKe,[[U,QL+' / Japan Plane'+OV+' CS II',Clr,BUd,Bdf,Bdg,BUt,BUy,BUT,CVy,[B,K,'30162']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_II',Ccl,BUd,Bdf,Bdg,BUt,BUy,BUT,BUa]]],['30161',Avc+' +lon_0=129.5'+BCD,[[U,QL+' / Japan Plane'+OV+' CS I',Clr,BUd,Bdf,Buw,BUt,BUy,BUT,CVy,[B,K,'30161']]],[[U,'Tokyo_Japan_Plane_Rectangular_CS_I',Ccl,BUd,Bdf,Buw,BUt,BUy,BUT,BUa]]],['3016',AjX+' +lon_0=20.25 +k=1'+BTt,[[U,IO+' 20 15',Clu,BUd,BUX,CNy,BUf,BXc,BUT,CVy,[B,K,'3016']]],[[U,'SWEREF99_20_15',Ccp,BUd,BUX,CNy,BUf,BXc,BUT,BUa]]],['3015',AjX+' +lon_0=18.75 +k=1'+BTt,[[U,IO+' 18 45',Clu,BUd,BUX,CNx,BUf,BXc,BUT,CVy,[B,K,'3015']]],[[U,'SWEREF99_18_45',Ccp,BUd,BUX,CNx,BUf,BXc,BUT,BUa]]],['3014',AjX+' +lon_0=17.25 +k=1'+BTt,[[U,IO+' 17 15',Clu,BUd,BUX,CNw,BUf,BXc,BUT,CVy,[B,K,'3014']]],[[U,'SWEREF99_17_15',Ccp,BUd,BUX,CNw,BUf,BXc,BUT,BUa]]],['3013',AjX+' +lon_0=15.75 +k=1'+BTt,[[U,IO+' 15 45',Clu,BUd,BUX,CNv,BUf,BXc,BUT,CVy,[B,K,'3013']]],[[U,'SWEREF99_15_45',Ccp,BUd,BUX,CNv,BUf,BXc,BUT,BUa]]],['3012',AjX+' +lon_0=14.25 +k=1'+BTt,[[U,IO+' 14 15',Clu,BUd,BUX,CNu,BUf,BXc,BUT,CVy,[B,K,'3012']]],[[U,'SWEREF99_14_15',Ccp,BUd,BUX,CNu,BUf,BXc,BUT,BUa]]],['3011',BEs+' +k=1'+BTt,[[U,IO+' 18 00',Clu,BUd,BUX,Bef,BUf,BXc,BUT,CVy,[B,K,'3011']]],[[U,'SWEREF99_18_00',Ccp,BUd,BUX,Bef,BUf,BXc,BUT,BUa]]],['3010',AjX+Age+' +k=1'+BTt,[[U,IO+' 16 30',Clu,BUd,BUX,Brd,BUf,BXc,BUT,CVy,[B,K,'3010']]],[[U,'SWEREF99_16_30',Ccp,BUd,BUX,Brd,BUf,BXc,BUT,BUa]]],['3009',ApP+' +k=1'+BTt,[[U,IO+' 15 00',Clu,BUd,BUX,BWH,BUf,BXc,BUT,CVy,[B,K,'3009']]],[[U,'SWEREF99_15_00',Ccp,BUd,BUX,BWH,BUf,BXc,BUT,BUa]]],['3008',AjX+' +lon_0=13.5 +k=1'+BTt,[[U,IO+' 13 30',Clu,BUd,BUX,CIU,BUf,BXc,BUT,CVy,[B,K,'3008']]],[[U,'SWEREF99_13_30',Ccp,BUd,BUX,CIU,BUf,BXc,BUT,BUa]]],['3007',AqA+' +k=1'+BTt,[[U,IO+' 12 00',Clu,BUd,BUX,BYZ,BUf,BXc,BUT,CVy,[B,K,'3007']]],[[U,'SWEREF99_12_00',Ccp,BUd,BUX,BYZ,BUf,BXc,BUT,BUa]]],['3006',AmO+j+c+q+a,[[U,IO+' TM',Clu,BUd,BUX,BWH,BUg,BUc,BUT,CVy,[B,K,'3006']]],[[U,'SWEREF99_TM',Ccp,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['3005',TR+' +lat_1=50 +lat_2=58.5'+fq+' +lon_0=-126'+BUE,[[U,Bx+' / BC'+" "+Pk,ClV,BeL,BoC,Byw,CQA,[A,BV,AVS],BWa,BUT,CVy,BUj,BUm,[B,K,'3005']]],[[U,'NAD83_BC_Albers',Cbn,BeK,BoC,Byw,BZE,[A,E,AVS],BWa,BUT,BUa]]],['3004',ApP+HH+' +x_0=2520000'+AkR+QO+q+a,[[U,'Monte Mario / Italy zone 2',CnO,BUd,BUX,BWH,BUg,CGK,BUT,CVy,BUl,BUk,[B,K,'3004']]],[[U,'Monte_Mario_Italy_zone_2',CfW,BUd,BUX,BWH,BUg,CGK,BUT,BUa]]],['3003',BSQ+Ald+BP+QO+q+a,[[U,'Monte Mario / Italy zone 1',CnO,BUd,BUX,BWO,BUg,BWL,BUT,CVy,BUl,BUk,[B,K,'3003']]],[[U,'Monte_Mario_Italy_zone_1',CfW,BUd,BUX,BWO,BUg,BWL,BUT,BUa]]],['3002',hB+' +lon_0=110 +k=0.997'+BNb+dA+q+a,[[U,tE+' / NEIEZ',Csg,Bxi,BwW,Bum,Bls,Blr,CVy,BUl,BUk,[B,K,'3002']]],[[U,'Makassar_NEIEZ',[S,'GCS_Makassar',CZd,BUU,BUW],Bxp,BwW,Bls,Blr,BUa,Brg]]],['3001',hB+' +lon_0=110 +k=0.997'+AqW+BAu+q+a,[[U,eD+' / NEIEZ',CnG,Bxi,BwW,Bum,Bls,Blr,CVy,BUl,BUk,[B,K,'3001']]],[[U,'Batavia_NEIEZ',CfS,Bxp,BwW,Bls,Blr,BUa,Brg]]],['3000',hB+' +lon_0=110 +k=0.997'+BNb+dz+q+a,[[U,AUi+' / NEIEZ',Coi,Bxi,BwW,Bum,Bls,Blr,CVy,BUl,BUk,[B,K,'3000']]],[[U,'Segara_NEIEZ',Cjl,Bxp,BwW,Bls,Blr,BUa,Brg]]],['2999',BKH+AJj+q+a,[[U,'Grand Comoros / UTM zone 38S',Cqj,BUd,BUX,BWe,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2999']]],[[U,'Grand_Comoros_UTM_zone_38S',[S,'GCS_Grand Comoros',[V,Adf,BUs],BUU,BUW],BUd,BUX,BWe,BUg,BUc,BUo,BUa]]],['2998',BEk+cX+q+a,[[U,'NEA74'+AcC+' / UTM zone 58S',CnT,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2998']]],[[U,'NEA74_Noumea_UTM_zone_58S',Cfl,BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['2997',BEk+oX+q+a,[[U,'ST71 Belep / UTM zone 58S',CrI,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2997']]],[[U,'ST71_Belep_UTM_zone_58S',[S,'GCS_ST71 Belep',CaN,BUU,BUW],BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['2996',BEk+AKC+q+a,[[U,'ST84 Ile des Pins / UTM zone 58S',Cpi,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2996']]],[[U,'ST84_Ile_des_Pins_UTM_zone_58S',[S,'GCS_ST84 Ile des Pins',[V,AUQ,BUs],BUU,BUW],BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['2995',BEk+ju+q+a,[[U,'IGN53 Mare / UTM zone 58S',CoE,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2995']]],[[U,'IGN53_Mare_UTM_zone_58S',CiC,BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['2994',BSY+AoT,[[U,Aj+' / Oregon'+PW+rv,ClX,BVG,BZg,BaF,BZf,BWB,Boi,BUT,CWY,BUl,BUk,[B,K,'2994']]],[[U,'NAD83_HARN_Oregon_Lambert_ft',Cbs,BVD,BZg,BaF,BZf,BWB,Boi,BUT,BXN]]],['2993',BKs+j+c+q+a,[[U,Aj+' / Oregon'+PW,ClX,BVG,BZg,BaF,BZf,BWB,BVh,BUT,CVy,BUl,BUk,[B,K,'2993']]],[[U,'NAD83_HARN_Oregon_Lambert',Cbs,BVD,BZg,BaF,BZf,BWB,BVh,BUT,BUa]]],['2992',BSY+AoT,[[U,Bx+' / Oregon'+PW+rv,ClV,BVG,BZg,BaF,BZf,BWB,Boi,BUT,CWY,BUl,BUk,[B,K,'2992']]],[[U,'NAD83_Oregon_Lambert_ft',Cbn,BVD,BZg,BaF,BZf,BWB,Boi,BUT,BXN]]],['2991',BKs+j+c+q+a,[[U,Bx+' / Oregon'+PW,ClV,BVG,BZg,BaF,BZf,BWB,BVh,BUT,CVy,BUl,BUk,[B,K,'2991']]],[[U,'NAD83_Oregon_Lambert',Cbn,BVD,BZg,BaF,BZf,BWB,BVh,BUT,BUa]]],['29903',l+Afy+' +lon_0=-8 +k=1.000035'+Dp+nL+yt+Nl+q+a,[[U,'TM75 / Irish'+op,CsI,BUd,BuL,Bpl,BxX,BVP,Bch,CVy,BUj,BUm,[B,K,'29903']]],[[U,'TM75_Irish_Grid',[S,'GCS_TM75',Cbd,BUU,BUW],BUd,BuL,Bpl,BxX,BVP,Bch,BUa]]],['29901',l+Afy+' +lon_0=-8 +k=1'+Dp+nL+ADx+Nl+q+a,[[U,'OSNI 1952 / Irish'+AoN,CrP,BUd,BuL,Bpl,BUf,BVP,Bch,CVy,BUj,BUm,[B,K,'29901']]],[[U,'OSNI_1952_Irish_National_Grid',[S,'GCS_OSNI 1952',CaS,BUU,BUW],BUd,BuL,Bpl,BUf,BVP,Bch,BUa]]],['2988',AV+' +zone=1'+Aka+AJk+q+a,[[U,'MOP78 / UTM zone 1S',Crx,BUd,BUX,BYF,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2988']]],[[U,'MOP78_UTM_zone_1S',[S,'GCS_MOP78',CbW,BUU,BUW],BUd,BUX,BYF,BUg,BUc,BUo,BUa]]],['29873',AqD+' +lonc=115'+AAm+AEw+' +x_0=590476.87 +y_0=442857.65'+gm+BEI+q+a,[[U,tr+' 1948 / RSO Borneo (m)',Cmq,BlU,BeI,BmX,Bui,Bxb,BhZ,Byq,Byp,CVy,BUj,BUm,[B,K,'29873']]],[[U,'Timbalai_1948_RSO_Borneo_m',CeU,BlU,BeI,BmX,Bui,BhZ,Byq,Byp,BUa]]],['29872',AqD+' +lonc=115'+AAm+AEw+' +x_0=590476.8727431979 +y_0=442857.6545573985'+gm+BEI+' +to_meter=0.3047994715386762'+a,[[U,tr+' 1948 / RSO Borneo'+rv,Cmq,BlU,BeI,BmX,Bui,Bxb,BhZ,[A,I,AjB],[A,G,AjC],[Q,ASj+" "+bN+' (Sears 1922)',AKv,[B,K,'9041']],BUj,BUm,[B,K,'29872']]],[[U,'Timbalai_1948_RSO_Borneo_ft',CeU,BlU,BeI,BmX,Bui,BhZ,[A,I,AjB],[A,G,AjC],[Q,ASj+" "+bN+' (Sears 1922)',AKv]]]],['29871',AqD+' +lonc=115'+AAm+AEw+' +x_0=590476.8714630401 +y_0=442857.653094361'+gm+BEI+' +to_meter=20.11676512155263'+a,[[U,tr+' 1948 / RSO Borneo (ch)',Cmq,BlU,BeI,BmX,Bui,Bxb,BhZ,[A,I,AjD],[A,G,AjE],[Q,ASj+' chain (Sears 1922)',AQM,[B,K,'9042']],BUj,BUm,[B,K,'29871']]],[[U,'Timbalai_1948_RSO_Borneo_ch',CeU,BlU,BeI,BmX,Bui,BhZ,[A,I,AjD],[A,G,AjE],[Q,ASj+' chain (Sears 1922)',AQM]]]],['2987',AlI+Dr+ASb+q+a,[[U,'Saint Pierre et Miquelon 1950 / UTM zone 21N',CoX,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2987']]],[[U,'Saint_Pierre_et_Miquelon_1950_UTM_zone_21N',[S,'GCS_Saint Pierre et Miquelon 1950',[V,ACh,BUx],BUU,BUW],BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['29850',AnS+BEI+q+a,[[U,tr+' 1948 / UTM zone 50N',Cmq,BUd,BUX,BWS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'29850']]],[[U,'Timbalai_1948_UTM_zone_50N',CeU,BUd,BUX,BWS,BUg,BUc,BUT,BUa]]],['29849',AnE+BEI+q+a,[[U,tr+' 1948 / UTM zone 49N',Cmq,BUd,BUX,BWX,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'29849']]],[[U,'Timbalai_1948_UTM_zone_49N',CeU,BUd,BUX,BWX,BUg,BUc,BUT,BUa]]],['2981',BEk+ACi+q+a,[[U,'IGN56 Lifou / UTM zone 58S',CrD,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2981']]],[[U,'IGN56_Lifou_UTM_zone_58S',[S,'GCS_IGN56 Lifou',CaC,BUU,BUW],BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['2980',BKH+AJl+q+a,[[U,'Combani 1950 / UTM zone 38S',Cqy,BUd,BUX,BWe,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2980']]],[[U,'Combani_1950_UTM_zone_38S',[S,'GCS_Combani 1950',[V,Agu,BUs],BUU,BUW],BUd,BUX,BWe,BUg,BUc,BUo,BUa]]],['2978',AV+' +zone=7'+Aka+AUR+q+a,[[U,'IGN72 Nuku Hiva / UTM zone 7S',CqW,BUd,BUX,BZn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2978']]],[[U,'IGN72_Nuku_Hiva_UTM_zone_7S',[S,'GCS_IGN72 Nuku Hiva',[V,AYT,BUs],BUU,BUW],BUd,BUX,BZn,BUg,BUc,BUo,BUa]]],['2977',AV+' +zone=5'+Aka+qx+q+a,[[U,'Tahaa 54 / UTM zone 5S',Crg,BUd,BUX,BZK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2977']]],[[U,'Tahaa_54_UTM_zone_5S',[S,'GCS_Tahaa 54',CaM,BUU,BUW],BUd,BUX,BZK,BUg,BUc,BUo,BUa]]],['2976',AV+' +zone=6'+Aka+ANj+q+a,[[U,'Tahiti 52 / UTM zone 6S',CrW,BUd,BUX,BYy,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2976']]],[[U,'Tahiti_52_UTM_zone_6S',[S,'GCS_Tahiti 52',CaB,BUU,BUW],BUd,BUX,BYy,BUg,BUc,BUo,BUa]]],['2975',AnK+BEd,[[U,'RGR92 / UTM zone 40S',CoW,BUd,BUX,BXz,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2975']]],[[U,'RGR92_UTM_zone_40S',CjG,BUd,BUX,BXz,BUg,BUc,BUo,BUa]]],['29739',Alt+Aka+bb+q+a,[[U,gZ+' / UTM zone 39S',CpQ,BUd,BUX,BWt,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29739']]],[[U,'Tananarive_UTM_zone_39S',Cjk,BUd,BUX,BWt,BUg,BUc,BUo,BUa]]],['29738',BKH+bb+q+a,[[U,gZ+' / UTM zone 38S',CpQ,BUd,BUX,BWe,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29738']]],[[U,'Tananarive_UTM_zone_38S',Cjk,BUd,BUX,BWe,BUg,BUc,BUo,BUa]]],['2973',BIT+ANk+q+a,[[U,AbD+' 1938 / UTM zone 20N',CrV,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2973']]],[[U,'Martinique_1938_UTM_zone_20N',[S,'GCS_Martinique 1938',CaA,BUU,BUW],BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2972',BUN,[[U,Afo+' / UTM zone 22N',Coj,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2972']]],[[U,'RGFG95_UTM_zone_22N',Cis,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['2971',Alb+BP+te+q+a,[[U,'CSG67 / UTM zone 22N',CoV,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2971']]],[[U,'CSG67_UTM_zone_22N',CjC,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['29702',Qw+' +lat_0=-18.9 +lonc=44.10000000000001 +alpha=18.9'+Aqy+QS+' +gamma=18.9'+BP+bb+rC+q+a,[[U,BEM+' / Laborde'+op+' approximation',Com,BlU,Byo,Byn,Bym,[A,Eu,HI],BcJ,BVh,BWw,CVy,[B,K,'29702']]],[[U,'Tananarive_Paris_Laborde_Grid_approximation',ChA,BlU,Byo,Byn,Bym,BcJ,BVh,BWw,BUa]]],['29701','',[[U,BEM+' / Laborde'+op,Com,[L,AIP],Byo,Byn,Bym,[A,Eu,AdC],BcJ,BVh,BWw,CVy,[B,K,'29701']]],[[U,'Tananarive_Paris_Laborde_Grid',ChA,[L,AIP],Byo,Byn,Bym,[A,Eu,AdC],BcJ,BVh,BWw,BUa]]],['2970',BIT+AJn+q+a,[[U,AbE+' 1948 / UTM zone 20N',CrU,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2970']]],[[U,'Guadeloupe_1948_UTM_zone_20N',[S,'GCS_Guadeloupe 1948',CZz,BUU,BUW],BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2969',BIT+AKD+q+a,[[U,'Fort Marigot / UTM zone 20N',Cqw,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2969']]],[[U,'Fort_Marigot_UTM_zone_20N',[S,'GCS_Fort Marigot',[V,Agw,BUs],BUU,BUW],BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2968',BIF+BTV,[[U,Aj+' / Indiana West'+DE,ClX,BUd,BXf,Bfc,BWN,Bht,Blj,CVz,BUl,BUk,[B,K,'2968']]],[[U,'NAD83_HARN_Indiana_West_ftUS',Cbs,BUd,BXf,Bfc,BWN,Bht,Blj,BUr]]],['2967',BST+BTV,[[U,Aj+' / Indiana East'+DE,ClX,BUd,BXf,Bfb,BWN,Brz,Blj,CVz,BUl,BUk,[B,K,'2967']]],[[U,'NAD83_HARN_Indiana_East_ftUS',Cbs,BUd,BXf,Bfb,BWN,Brz,Blj,BUr]]],['2966',BIF+BTV,[[U,Bx+' / Indiana West'+DE,ClV,BUd,BXf,Bfc,BWN,Bht,Blj,CVz,BUl,BUk,[B,K,'2966']]],[[U,'NAD83_Indiana_West_ftUS',Cbn,BUd,BXf,Bfc,BWN,Bht,Blj,BUr]]],['2965',BST+BTV,[[U,Bx+' / Indiana East'+DE,ClV,BUd,BXf,Bfb,BWN,Brz,Blj,CVz,BUl,BUk,[B,K,'2965']]],[[U,'NAD83_Indiana_East_ftUS',Cbn,BUd,BXf,Bfb,BWN,Brz,Blj,BUr]]],['2964',TR+' +lat_1=55'+AIa+' +lat_0=50'+BNj+Alk,[[U,Dg+' / Alaska'+" "+Pk,ClZ,BeL,BnM,Beh,CBD,CBC,BUy,BUT,CVz,BUl,BUk,[B,K,'2964']]],[[U,'NAD27_Alaska_Albers',Cbw,BeK,BnM,Beh,Bws,Bka,BUy,BUT,BUr]]],['2962',BUD,[[U,Cc+' / UTM zone 21N',Cli,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2962']]],[[U,'NAD83_CSRS_UTM_zone_21N',CcM,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['2961',BUA,[[U,Cc+' / UTM zone 20N',Cli,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2961']]],[[U,'NAD83_CSRS_UTM_zone_20N',CcM,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2960',BTz,[[U,Cc+' / UTM zone 19N',Cli,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2960']]],[[U,'NAD83_CSRS_UTM_zone_19N',CcM,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['2959',BTy,[[U,Cc+' / UTM zone 18N',Cli,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2959']]],[[U,'NAD83_CSRS_UTM_zone_18N',CcM,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['2958',BUM,[[U,Cc+' / UTM zone 17N',Cli,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2958']]],[[U,'NAD83_CSRS_UTM_zone_17N',CcM,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['2957',BUH,[[U,Cc+' / UTM zone 13N',Cli,BUd,BUX,BZS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2957']]],[[U,'NAD83_CSRS_UTM_zone_13N',CcM,BUd,BUX,BZS,BUg,BUc,BUT,BUa]]],['2956',BUG,[[U,Cc+' / UTM zone 12N',Cli,BUd,BUX,BXs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2956']]],[[U,'NAD83_CSRS_UTM_zone_12N',CcM,BUd,BUX,BXs,BUg,BUc,BUT,BUa]]],['2955',BUF,[[U,Cc+' / UTM zone 11N',Cli,BUd,BUX,BXx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2955']]],[[U,'NAD83_CSRS_UTM_zone_11N',CcM,BUd,BUX,BXx,BUg,BUc,BUT,BUa]]],['2954',ZQ+' +lat_0=47.25'+AIg+ATc+BTm,[[U,Cc+' / Prince Edward Isl.'+RQ+' (NAD83)',Cli,Bpn,Byl,BWY,BoG,BVh,BWw,CVy,BcL,BcK,[B,K,'2954']]],[[U,'NAD83_CSRS_Prince_Edward_Isl_Stereographic_NAD83',CcM,Bpm,Byl,BWY,BoG,BVh,BWw,BUa]]],['2953',ZQ+hf+' +lon_0=-66.5'+ATc+Rw+' +y_0=7500000'+j+c+q+a,[[U,Cc+' / New Brunswick'+RQ,Cli,Bpn,BbU,Buo,BoG,BXy,Bwp,CVy,[B,K,'2953']]],[[U,'NAD83_CSRS_New_Brunswick_Stereographic',CcM,Bpm,BbU,Buo,BoG,BXy,Bwp,BUa]]],['2952',BNU+BTo,[[U,Cc+' / MTM zone 10',Cli,BUd,BUX,BZs,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'2952']]],[[U,'NAD83_CSRS_MTM_zone_10',CcM,BUd,BUX,BZs,BUt,BVt,BUT,BUa]]],['2951',BJY+BTu,[[U,Cc+' / MTM zone 9',Cli,BUd,BUX,BrV,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'2951']]],[[U,'NAD83_CSRS_MTM_zone_9',CcM,BUd,BUX,BrV,BUt,BVt,BUT,BUa]]],['2950',BJW+BTu,[[U,Cc+' / MTM zone 8',Cli,BUd,BUX,BrU,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'2950']]],[[U,'NAD83_CSRS_MTM_zone_8',CcM,BUd,BUX,BrU,BUt,BVt,BUT,BUa]]],['2949',AjX+fS+BTo,[[U,Cc+' / MTM zone 7',Cli,BUd,BUX,BbL,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'2949']]],[[U,'NAD83_CSRS_MTM_zone_7',CcM,BUd,BUX,BbL,BUt,BVt,BUT,BUa]]],['2948',BJU+BTu,[[U,Cc+' / MTM zone 6',Cli,BUd,BUX,BrT,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'2948']]],[[U,'NAD83_CSRS_MTM_zone_6',CcM,BUd,BUX,BrT,BUt,BVt,BUT,BUa]]],['2947',BHq+BTu,[[U,Cc+' / MTM zone 5',Cli,BUd,BUX,Bnv,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'2947']]],[[U,'NAD83_CSRS_MTM_zone_5',CcM,BUd,BUX,Bnv,BUt,BVt,BUT,BUa]]],['2946',BHp+BTu,[[U,Cc+' / MTM zone 4',Cli,BUd,BUX,Bnu,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'2946']]],[[U,'NAD83_CSRS_MTM_zone_4',CcM,BUd,BUX,Bnu,BUt,BVt,BUT,BUa]]],['2945',BJQ+BTu,[[U,Cc+' / MTM zone 3',Cli,BUd,BUX,BrS,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'2945']]],[[U,'NAD83_CSRS_MTM_zone_3',CcM,BUd,BUX,BrS,BUt,BVt,BUT,BUa]]],['2943',BJL+AKE+q+a,[[U,'Selvagem Grande / UTM zone 28N',CqV,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2943']]],[[U,'Selvagem_Grande_UTM_zone_28N',[S,'GCS_Selvagem Grande',[V,AYU,BUs],BUU,BUW],BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['2942',BJL+AJo+q+a,[[U,'Porto Santo / UTM zone 28N',CrC,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2942']]],[[U,'Porto_Santo_UTM_zone_28N',[S,'GCS_Porto Santo',[V,AVb,BUs],BUU,BUW],BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['2941',l+AAH+' +lon_0=56.76666666666667 +k=1 +x_0=4300000'+BBO,[[U,Aje+' / CS63 zone K4',ClY,BUd,BwV,[A,E,AQN],BUf,BxW,BUT,CVy,[B,K,'2941']]],[[U,'Pulkovo_1942_CS63_zone_K4',Cbv,BUd,BwV,[A,E,AQN],BUf,BxW,BUT,BUa]]],['2940',l+AAH+' +lon_0=53.76666666666667 +k=1 +x_0=3300000'+BBO,[[U,Aje+' / CS63 zone K3',ClY,BUd,BwV,[A,E,AQO],BUf,BxV,BUT,CVy,[B,K,'2940']]],[[U,'Pulkovo_1942_CS63_zone_K3',Cbv,BUd,BwV,[A,E,AQO],BUf,BxV,BUT,BUa]]],['2939',l+AAH+' +lon_0=50.76666666666667 +k=1 +x_0=2300000'+BBO,[[U,Aje+' / CS63 zone K2',ClY,BUd,BwV,[A,E,AQP],BUf,BxU,BUT,CVy,[B,K,'2939']]],[[U,'Pulkovo_1942_CS63_zone_K2',Cbv,BUd,BwV,[A,E,AQP],BUf,BxU,BUT,BUa]]],['29385',AwO+ASC+' +k=1'+BFE,[[U,Od+' / Lo22/25',Cmc,BZk,BhU,BhW,BUf,BUy,BUT,CWr,BYp,BYq,[B,K,'29385']]],[[U,'Schwarzeck_Lo22_25',Cdy,BZk,BhU,BhW,BUf,BUy,BUT,BaN]]],['29383',AwO+AXL+' +k=1'+BFE,[[U,Od+' / Lo22/23',Cmc,BZk,BhU,BkN,BUf,BUy,BUT,CWr,BYp,BYq,[B,K,'29383']]],[[U,'Schwarzeck_Lo22_23',Cdy,BZk,BhU,BkN,BUf,BUy,BUT,BaN]]],['29381',AwO+aK+' +k=1'+BFE,[[U,Od+' / Lo22/21',Cmc,BZk,BhU,BWR,BUf,BUy,BUT,CWr,BYp,BYq,[B,K,'29381']]],[[U,'Schwarzeck_Lo22_21',Cdy,BZk,BhU,BWR,BUf,BUy,BUT,BaN]]],['2938',l+oE+' +lon_0=50.53333333333333 +k=1 +x_0=4300000'+BBO,[[U,Aje+' / CS63 zone A4',ClY,BUd,BrO,[A,E,AQQ],BUf,BxW,BUT,CVy,[B,K,'2938']]],[[U,'Pulkovo_1942_CS63_zone_A4',Cbv,BUd,BrO,[A,E,AQQ],BUf,BxW,BUT,BUa]]],['29379',AwO+ASD+' +k=1'+BFE,[[U,Od+' / Lo22/19',Cmc,BZk,BhU,BhV,BUf,BUy,BUT,CWr,BYp,BYq,[B,K,'29379']]],[[U,'Schwarzeck_Lo22_19',Cdy,BZk,BhU,BhV,BUf,BUy,BUT,BaN]]],['29377',AwO+Afw+' +k=1'+BFE,[[U,Od+' / Lo22/17',Cmc,BZk,BhU,Blf,BUf,BUy,BUT,CWr,BYp,BYq,[B,K,'29377']]],[[U,'Schwarzeck_Lo22_17',Cdy,BZk,BhU,Blf,BUf,BUy,BUT,BaN]]],['29375',AwO+aL+' +k=1'+BFE,[[U,Od+' / Lo22/15',Cmc,BZk,BhU,BWH,BUf,BUy,BUT,CWr,BYp,BYq,[B,K,'29375']]],[[U,'Schwarzeck_Lo22_15',Cdy,BZk,BhU,BWH,BUf,BUy,BUT,BaN]]],['29373',AwO+' +lon_0=13 +k=1'+BFE,[[U,Od+' / Lo22/13',Cmc,BZk,BhU,BpS,BUf,BUy,BUT,CWr,BYp,BYq,[B,K,'29373']]],[[U,'Schwarzeck_Lo22_13',Cdy,BZk,BhU,BpS,BUf,BUy,BUT,BaN]]],['29371',AwO+' +lon_0=11 +k=1'+BFE,[[U,Od+' / Lo22/11',Cmc,BZk,BhU,BrQ,BUf,BUy,BUT,CWr,BYp,BYq,[B,K,'29371']]],[[U,'Schwarzeck_Lo22_11',Cdy,BZk,BhU,BrQ,BUf,BUy,BUT,BaN]]],['2937',l+oE+' +lon_0=47.53333333333333 +k=1 +x_0=3300000'+BBO,[[U,Aje+' / CS63 zone A3',ClY,BUd,BrO,[A,E,AQR],BUf,BxV,BUT,CVy,[B,K,'2937']]],[[U,'Pulkovo_1942_CS63_zone_A3',Cbv,BUd,BrO,[A,E,AQR],BUf,BxV,BUT,BUa]]],['2936',l+oE+' +lon_0=44.53333333333333 +k=1 +x_0=2300000'+BBO,[[U,Aje+' / CS63 zone A2',ClY,BUd,BrO,[A,E,AQS],BUf,BxU,BUT,CVy,[B,K,'2936']]],[[U,'Pulkovo_1942_CS63_zone_A2',Cbv,BUd,BrO,[A,E,AQS],BUf,BxU,BUT,BUa]]],['2935',l+oE+' +lon_0=41.53333333333333 +k=1 +x_0=1300000'+BBO,[[U,Aje+' / CS63 zone A1',ClY,BUd,BrO,[A,E,AQT],BUf,CNX,BUT,CVy,[B,K,'2935']]],[[U,'Pulkovo_1942_CS63_zone_A1',Cbv,BUd,BrO,[A,E,AQT],BUf,CNX,BUT,BUa]]],['29333',AmO+HN+Ars+q+a,[[U,Od+' / UTM zone 33S',Cmc,BUd,BUX,BWH,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29333']]],[[U,'Schwarzeck_UTM_zone_33S',Cdy,BUd,BUX,BWH,BUg,BUc,BUo,BUa]]],['2933',AnS+HN+CJ+dz+q+a,[[U,AUi+' / UTM zone 50S',Coi,BUd,BUX,BWS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2933']]],[[U,'Segara_UTM_zone_50S',Cjl,BUd,BUX,BWS,BUg,BUc,BUo,BUa]]],['2932',l+' +lat_0=24.45'+Aah+jz+Dp+eM+BP+lp+q+a,[[U,'QND95 / Qatar'+AoN,Crw,BUd,Byk,CHM,Bav,BVP,BZw,CVy,BUj,BUm,[B,K,'2932']]],[[U,'QND95_Qatar_National_Grid',[S,'GCS_QND95',Cab,BUU,BUW],BUd,Byk,CHM,Bav,BVP,BZw,BUa]]],['2931',AjX+' +lon_0=13'+BIU+Akc+AKL+q+a,[[U,AGW+' / TM 13 NE',CsW,BUd,BUX,BpS,BUg,BUc,BUT,CVy,BUl,BUk,[B,K,'2931']]],[[U,'Beduaram_TM_13_NE',[S,'GCS_Beduaram',Caa,BUU,BUW],BUd,BUX,BpS,BUg,BUc,BUT,BUa]]],['2930',BGe+AkO,[[U,Aj+' /'+cp+' South'+DE,ClX,BVG,BjK,BjJ,Bde,BWb,BVj,BUT,CVz,BUl,BUk,[B,K,'2930']]],[[U,'NAD83_HARN_Wisconsin_South_ftUS',Cbs,BVD,BjK,BjJ,Bde,BWb,BVj,BUT,BUr]]],['2929',BGf+AkO,[[U,Aj+' /'+BBd+DE,ClX,BVG,Bdi,BjS,BYM,BWb,BVj,BUT,CVz,BUl,BUk,[B,K,'2929']]],[[U,'NAD83_HARN_Wisconsin_Central_ftUS',Cbs,BVD,Bdi,BjS,BYM,BWb,BVj,BUT,BUr]]],['2928',BGd+AkO,[[U,Aj+' /'+BBe+DE,ClX,BVG,BjI,BjH,Bgc,BWb,BVj,BUT,CVz,BUl,BUk,[B,K,'2928']]],[[U,'NAD83_HARN_Wisconsin_North_ftUS',Cbs,BVD,BjI,BjH,Bgc,BWb,BVj,BUT,BUr]]],['2927',BRV+AnX,[[U,Aj+' /'+kE+' South'+DE,ClX,BVG,BjC,BjB,BgZ,BWB,BXa,BUT,CVz,BUl,BUk,[B,K,'2927']]],[[U,'NAD83_HARN_Washington_South_ftUS',Cbs,BVD,BjC,BjB,BgZ,BWB,BXa,BUT,BUr]]],['2926',BRT+AnX,[[U,Aj+' /'+BBc+DE,ClX,BVG,BaE,BjA,BZA,BgY,BXa,BUT,CVz,BUl,BUk,[B,K,'2926']]],[[U,'NAD83_HARN_Washington_North_ftUS',Cbs,BVD,BaE,BjA,BZA,BgY,BXa,BUT,BUr]]],['2925',BRR+AkO,[[U,Aj+' /'+eI+' South'+DE,ClX,BVG,BZr,BgX,BXr,BZe,Biz,Bbv,CVz,BUl,BUk,[B,K,'2925']]],[[U,'NAD83_HARN_Virginia_South_ftUS',Cbs,BVD,BZr,BgX,BXr,BZe,Biz,Bbv,BUr]]],['2924',BRP+AnX,[[U,Aj+' /'+BIY,ClX,BVG,Biy,Bix,BXq,BZe,Biz,Biw,CVz,BUl,BUk,[B,K,'2924']]],[[U,'NAD83_HARN_Virginia_North_ftUS',Cbs,BVD,Biy,Bix,BXq,BZe,Biz,Biw,BUr]]],['2923',Ash+AsO+AGv+BGh,[[U,Aj+' / Utah South'+rv,ClX,BVG,Bcd,Bcc,BWJ,BWm,Bec,Bwj,CWY,BUl,BUk,[B,K,'2923']]],[[U,'NAD83_HARN_Utah_South_ft',Cbs,BVD,Bcd,Bcc,BWJ,BWm,Bec,Bwj,BXN]]],['29221',BJw+wi+q+a,[[U,'Sapper Hill 1943 / UTM zone 21S',Cnp,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29221']]],[[U,'Sapper_Hill_1943_UTM_zone_21S',Cgt,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['29220',Aku+Aka+wi+q+a,[[U,'Sapper Hill 1943 / UTM zone 20S',Cnp,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29220']]],[[U,'Sapper_Hill_1943_UTM_zone_20S',Cgt,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['2922',Asb+AsO+AGw+BGh,[[U,Aj+' / Utah'+AsN,ClX,BVG,Bca,BcZ,BYl,BWm,Bec,Bwg,CWY,BUl,BUk,[B,K,'2922']]],[[U,'NAD83_HARN_Utah_Central_ft',Cbs,BVD,Bca,BcZ,BYl,BWm,Bec,Bwg,BXN]]],['2921',Asc+AsO+ACe+BGh,[[U,Aj+' / Utah'+ApU,ClX,BVG,BZD,Bcb,Bby,BWm,Bec,Bwi,CWY,BUl,BUk,[B,K,'2921']]],[[U,'NAD83_HARN_Utah_North_ft',Cbs,BVD,BZD,Bcb,Bby,BWm,Bec,Bwi,BXN]]],['2920',BIe+Lf+vz+AnX,[[U,Aj+' / Texas South'+DE,ClX,BVG,BcY,BcX,Bdd,BXp,BZP,Bsa,CVz,BUl,BUk,[B,K,'2920']]],[[U,'NAD83_HARN_Texas_South_ftUS',Cbs,BVD,BcY,BcX,Bdd,BXp,BZP,Bsa,BUr]]],['29195',Any+BKd,[[U,hv+' / UTM zone 25S',Clz,BUd,BUX,BZx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29195']]],[[U,'SAD69_UTM_zone_25S',Ccw,BUd,BUX,BZx,BUg,BUc,BUo,BUa]]],['29194',AoC+BKd,[[U,hv+' / UTM zone 24S',Clz,BUd,BUX,BYx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29194']]],[[U,'SAD69_UTM_zone_24S',Ccw,BUd,BUX,BYx,BUg,BUc,BUo,BUa]]],['29193',Amp+BKd,[[U,hv+' / UTM zone 23S',Clz,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29193']]],[[U,'SAD69_UTM_zone_23S',Ccw,BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['29192',Alb+BKd,[[U,hv+' / UTM zone 22S',Clz,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29192']]],[[U,'SAD69_UTM_zone_22S',Ccw,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['29191',AlI+BKd,[[U,hv+' / UTM zone 21S',Clz,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29191']]],[[U,'SAD69_UTM_zone_21S',Ccw,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['29190',Aku+BKd,[[U,hv+' / UTM zone 20S',Clz,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29190']]],[[U,'SAD69_UTM_zone_20S',Ccw,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['2919',BRL+AnX,[[U,Aj+' / Texas South'+Akp,ClX,BVG,Biv,Biu,BgU,BXU,BVj,Bsb,CVz,BUl,BUk,[B,K,'2919']]],[[U,'NAD83_HARN_Texas_South_Central_ftUS',Cbs,BVD,Biv,Biu,BgU,BXU,BVj,Bsb,BUr]]],['29189',AlG+BKd,[[U,hv+' / UTM zone 19S',Clz,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29189']]],[[U,'SAD69_UTM_zone_19S',Ccw,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['29188',AlJ+BKd,[[U,hv+' / UTM zone 18S',Clz,BUd,BUX,BWo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29188']]],[[U,'SAD69_UTM_zone_18S',Ccw,BUd,BUX,BWo,BUg,BUc,BUo,BUa]]],['29187',AlW+BKd,[[U,hv+' / UTM zone 17S',Clz,BUd,BUX,BVm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'29187']]],[[U,'SAD69_UTM_zone_17S',Ccw,BUd,BUX,BVm,BUg,BUc,BUo,BUa]]],['2918',BTQ+AkO,[[U,Aj+' / Texas'+Akp,ClX,BVG,Bin,Bim,Bda,BZd,Bbu,Blk,CVz,BUl,BUk,[B,K,'2918']]],[[U,'NAD83_HARN_Texas_Central_ftUS',Cbs,BVD,Bin,Bim,Bda,BZd,Bbu,Blk,BUr]]],['29172',Alb+BLv,[[U,hv+' / UTM zone 22N',Clz,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'29172']]],[[U,'SAD69_UTM_zone_22N',Ccw,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['29171',AlI+BLv,[[U,hv+' / UTM zone 21N',Clz,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'29171']]],[[U,'SAD69_UTM_zone_21N',Ccw,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['29170',Aku+BLv,[[U,hv+' / UTM zone 20N',Clz,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'29170']]],[[U,'SAD69_UTM_zone_20N',Ccw,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2917',BRJ+AnX,[[U,Aj+' / Texas'+BBb+DE,ClX,BVG,Bit,Bis,BgS,BXp,BVj,Biw,CVz,BUl,BUk,[B,K,'2917']]],[[U,'NAD83_HARN_Texas_North_Central_ftUS',Cbs,BVD,Bit,Bis,BgS,BXp,BVj,Biw,BUr]]],['29169',AlG+BLv,[[U,hv+' / UTM zone 19N',Clz,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'29169']]],[[U,'SAD69_UTM_zone_19N',Ccw,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['29168',AlJ+BLv,[[U,hv+' / UTM zone 18N',Clz,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'29168']]],[[U,'SAD69_UTM_zone_18N',Ccw,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['2916',BTS+AkO,[[U,Aj+' / Texas'+Akg,ClX,BVG,Bir,Biq,BgR,BgQ,BXZ,Bbv,CVz,BUl,BUk,[B,K,'2916']]],[[U,'NAD83_HARN_Texas_North_ftUS',Cbs,BVD,Bir,Biq,BgR,BgQ,BXZ,Bbv,BUr]]],['2915',BGa+AkO,[[U,Aj+' /'+AGm+DE,ClX,BVG,Bil,Bik,BZq,Bcg,BVj,BUT,CVz,BUl,BUk,[B,K,'2915']]],[[U,'NAD83_HARN_Tennessee_ftUS',Cbs,BVD,Bil,Bik,BZq,Bcg,BVj,BUT,BUr]]],['2914',BSc+AoT,[[U,Aj+' / Oregon South'+rv,ClX,BVG,Bdm,Bdl,BWi,BWB,Bok,BUT,CWY,BUl,BUk,[B,K,'2914']]],[[U,'NAD83_HARN_Oregon_South_ft',Cbs,BVD,Bdm,Bdl,BWi,BWB,Bok,BUT,BXN]]],['2913',BSa+AoT,[[U,Aj+' / Oregon'+ApU,ClX,BVG,Bdk,Bdj,BYN,BWB,Boj,BUT,CWY,BUl,BUk,[B,K,'2913']]],[[U,'NAD83_HARN_Oregon_North_ft',Cbs,BVD,Bdk,Bdj,BYN,BWB,Boj,BUT,BXN]]],['2912',BFc+AkO,[[U,Aj+' /'+AGg+' South'+DE,ClX,BVG,Bia,BiZ,BgJ,BXh,BVj,BUT,CVz,BUl,BUk,[B,K,'2912']]],[[U,'NAD83_HARN_Oklahoma_South_ftUS',Cbs,BVD,Bia,BiZ,BgJ,BXh,BVj,BUT,BUr]]],['2911',BFM+AkO,[[U,Aj+' /'+ArE+DE,ClX,BVG,BgI,BiY,BgH,BXh,BVj,BUT,CVz,BUl,BUk,[B,K,'2911']]],[[U,'NAD83_HARN_Oklahoma_North_ftUS',Cbs,BVD,BgI,BiY,BgH,BXh,BVj,BUT,BUr]]],['29101',AbH+At+vs+pl+JB+BLv,[[U,hv+' / Brazil'+" "+hX,Clz,Bxq,BUX,BdM,Bei,BUo,CVy,BUl,BUk,[B,K,'29101']]],[[U,'SAD69_Brazil_Polyconic',Ccw,Bxq,BUX,BdM,Bei,BUo,BUa]]],['2910',BRE+AoT,[[U,Aj+' /'+QM+' Dakota South'+rv,ClX,BVG,BiT,BiS,BbM,BZa,Bbt,BUT,CWY,BUl,BUk,[B,K,'2910']]],[[U,'NAD83_HARN_North_Dakota_South_ft',Cbs,BVD,BiT,BiS,BbM,BZa,Bbt,BUT,BXN]]],['2909',BRC+AoT,[[U,Aj+' /'+QM+' Dakota'+ApU,ClX,BVG,BaE,BiR,BZA,BZa,Bbt,BUT,CWY,BUl,BUk,[B,K,'2909']]],[[U,'NAD83_HARN_North_Dakota_North_ft',Cbs,BVD,BaE,BiR,BZA,BZa,Bbt,BUT,BXN]]],['2908',BAa+yX+BBM,[[U,Aj+' / New York Long'+AsM,ClX,BVG,BgE,BgD,BZp,BgC,BZP,BUT,CVz,BUl,BUk,[B,K,'2908']]],[[U,'NAD83_HARN_New_York_Long_Island_ftUS',Cbs,BVD,BgE,BgD,BZp,BgC,BZP,BUT,BUr]]],['2907',BQy+AkO,[[U,Aj+' / New York West'+DE,ClX,BUd,BXM,BgF,BWF,BsX,BUT,CVz,BUl,BUk,[B,K,'2907']]],[[U,'NAD83_HARN_New_York_West_ftUS',Cbs,BUd,BXM,BgF,BWF,BsX,BUT,BUr]]],['2906',BQw+AkO,[[U,Aj+' / New York'+Akp,ClX,BUd,BXM,BgB,BWF,Bwf,BUT,CVz,BUl,BUk,[B,K,'2906']]],[[U,'NAD83_HARN_New_York_Central_ftUS',Cbs,BUd,BXM,BgB,BWF,Bwf,BUT,BUr]]],['2905',BSC,[[U,Aj+' / New York East'+DE,ClX,BUd,BZo,BaD,BUt,BiO,BUT,CVz,BUl,BUk,[B,K,'2905']]],[[U,'NAD83_HARN_New_York_East_ftUS',Cbs,BUd,BZo,BaD,BUt,BiO,BUT,BUr]]],['2904',BQu+AkO,[[U,Aj+' / New Mexico West'+DE,ClX,BUd,BWA,BgA,Bfz,BsW,BUT,CVz,BUl,BUk,[B,K,'2904']]],[[U,'NAD83_HARN_New_Mexico_West_ftUS',Cbs,BUd,BWA,BgA,Bfz,BsW,BUT,BUr]]],['2903',Awm+BJP,[[U,Aj+' / New Mexico'+Akp,ClX,BUd,BWA,Bfx,BUt,BXa,BUT,CVz,BUl,BUk,[B,K,'2903']]],[[U,'NAD83_HARN_New_Mexico_Central_ftUS',Cbs,BUd,BWA,Bfx,BUt,BXa,BUT,BUr]]],['2902',BGn+AkO,[[U,Aj+' / New Mexico East'+DE,ClX,BUd,BWA,Bfy,BcW,BsU,BUT,CVz,BUl,BUk,[B,K,'2902']]],[[U,'NAD83_HARN_New_Mexico_East_ftUS',Cbs,BUd,BWA,Bfy,BcW,BsU,BUT,BUr]]],['2901',BQm+BGh,[[U,Aj+' / Montana'+rv,ClX,BVG,BaG,BiN,BiM,BcV,Bbt,BUT,CWY,BUl,BUk,[B,K,'2901']]],[[U,'NAD83_HARN_Montana_ft',Cbs,BVD,BaG,BiN,BiM,BcV,Bbt,BUT,BXN]]],['2900',BAV+BJN,[[U,Aj+' /'+cu+' West'+DE,ClX,BUd,BaC,BcU,BWh,Bbu,BUT,CVz,BUl,BUk,[B,K,'2900']]],[[U,'NAD83_HARN_Mississippi_West_ftUS',Cbs,BUd,BaC,BcU,BWh,Bbu,BUT,BUr]]],['28991',ZQ+AYa+Aba+' +k=0.9999079'+Ajh+CJ+YW+q+a,[[U,kR+' / RD Old',CpP,Bpn,CNb,CNa,CDC,BUy,BUT,CVy,BUl,BUk,[B,K,'28991']]],[[U,'Amersfoort_RD_Old',Cjq,Bpm,CNb,CNa,CDC,BUy,BUT,BUa]]],['2899',BAT+BBM,[[U,Aj+' /'+cu+' East'+DE,ClX,BUd,BaC,Bfs,BWh,BZP,BUT,CVz,BUl,BUk,[B,K,'2899']]],[[U,'NAD83_HARN_Mississippi_East_ftUS',Cbs,BUd,BaC,Bfs,BWh,BZP,BUT,BUr]]],['2898',BTN+AoT,[[U,Aj+' /'+iV+' South'+rv,ClX,BVG,Bdh,BiF,BYb,BaB,BsL,BUT,CWY,BUl,BUk,[B,K,'2898']]],[[U,'NAD83_HARN_Michigan_South_ft',Cbs,BVD,Bdh,BiF,BYb,BaB,BsL,BUT,BXN]]],['2897',BTK+AoT,[[U,Aj+' /'+BDF+rv,ClX,BVG,BiB,BiA,Bhz,BaB,BsG,BUT,CWY,BUl,BUk,[B,K,'2897']]],[[U,'NAD83_HARN_Michigan_Central_ft',Cbs,BVD,BiB,BiA,Bhz,BaB,BsG,BUT,BXN]]],['2896',BTL+AoT,[[U,Aj+' /'+BDG+rv,ClX,BVG,BiE,BiD,BiC,BXS,BsI,BUT,CWY,BUl,BUk,[B,K,'2896']]],[[U,'NAD83_HARN_Michigan_North_ft',Cbs,BVD,BiE,BiD,BiC,BXS,BsI,BUT,BXN]]],['2895',BQW+AnX,[[U,Aj+' /'+BBW+DE,ClX,BVG,Bhx,Bhw,BZM,BbL,BXa,BUT,CVz,BUl,BUk,[B,K,'2895']]],[[U,'NAD83_HARN_Massachusetts_Island_ftUS',Cbs,BVD,Bhx,Bhw,BZM,BbL,BXa,BUT,BUr]]],['2894',BUR+AnX,[[U,Aj+' /'+ArD+DE,ClX,BVG,Bhy,Bfo,BZM,BZc,BXZ,BsF,CVz,BUl,BUk,[B,K,'2894']]],[[U,'NAD83_HARN_Massachusetts_Mainland_ftUS',Cbs,BVD,Bhy,Bfo,BZM,BZc,BXZ,BsF,BUr]]],['2893',BTJ+AkO,[[U,Aj+' /'+ASw+DE,ClX,BVG,Bhv,Bhu,BXq,Bbs,BsE,BUT,CVz,BUl,BUk,[B,K,'2893']]],[[U,'NAD83_HARN_Maryland_ftUS',Cbs,BVD,Bhv,Bhu,BXq,Bbs,BsE,BUT,BUr]]],['2892',BTI+AkO,[[U,Aj+' /'+or+' South'+DE,ClX,BVG,Bhn,Bhm,BXr,BZZ,BXa,BXY,CVz,BUl,BUk,[B,K,'2892']]],[[U,'NAD83_HARN_Kentucky_South_ftUS',Cbs,BVD,Bhn,Bhm,BXr,BZZ,BXa,BXY,BUr]]],['2891',BQJ+AnX,[[U,Aj+' /'+BBT+DE,ClX,BVG,BZr,Bfl,BXf,Bfk,BXa,BUT,CVz,BUl,BUk,[B,K,'2891']]],[[U,'NAD83_HARN_Kentucky_North_ftUS',Cbs,BVD,BZr,Bfl,BXf,Bfk,BXa,BUT,BUr]]],['2888',BPc+AkO,[[U,Aj+' / Idaho West'+DE,ClX,BUd,BWi,BfY,BWx,Brx,BUT,CVz,BUl,BUk,[B,K,'2888']]],[[U,'NAD83_HARN_Idaho_West_ftUS',Cbs,BUd,BWi,BfY,BWx,Brx,BUT,BUr]]],['2887',Avr+BJP,[[U,Aj+' / Idaho'+Akp,ClX,BUd,BWi,Bbq,BZX,BXa,BUT,CVz,BUl,BUk,[B,K,'2887']]],[[U,'NAD83_HARN_Idaho_Central_ftUS',Cbs,BUd,BWi,Bbq,BZX,BXa,BUT,BUr]]],['2886',Avs+BBI,[[U,Aj+' / Idaho East'+DE,ClX,BUd,BWi,BfX,BZX,BXZ,BUT,CVz,BUl,BUk,[B,K,'2886']]],[[U,'NAD83_HARN_Idaho_East_ftUS',Cbs,BUd,BWi,BfX,BZX,BXZ,BUT,BUr]]],['2885',Avp+BJN,[[U,Aj+' /'+Abp+' West'+DE,ClX,BUd,BXX,BfW,BUt,Bbu,BUT,CVz,BUl,BUk,[B,K,'2885']]],[[U,'NAD83_HARN_Georgia_West_ftUS',Cbs,BUd,BXX,BfW,BUt,Bbu,BUT,BUr]]],['2884',Avo+BBI,[[U,Aj+' /'+Abp+' East'+DE,ClX,BUd,BXX,BfV,BUt,BXZ,BUT,CVz,BUl,BUk,[B,K,'2884']]],[[U,'NAD83_HARN_Georgia_East_ftUS',Cbs,BUd,BXX,BfV,BUt,BXZ,BUT,BUr]]],['2883',BFH+AkO,[[U,Aj+' /'+BBS+DE,ClX,BVG,BfT,BfS,BfR,BfQ,BVj,BUT,CVz,BUl,BUk,[B,K,'2883']]],[[U,'NAD83_HARN_Florida_North_ftUS',Cbs,BVD,BfT,BfS,BfR,BfQ,BVj,BUT,BUr]]],['2882',Avn+BBI,[[U,Aj+' /'+tm+' West'+DE,ClX,BUd,BZW,BfU,BWj,BXZ,BUT,CVz,BUl,BUk,[B,K,'2882']]],[[U,'NAD83_HARN_Florida_West_ftUS',Cbs,BUd,BZW,BfU,BWj,BXZ,BUT,BUr]]],['2881',Avk+BBI,[[U,Aj+' /'+tm+' East'+DE,ClX,BUd,BZW,BVm,BWj,BXZ,BUT,CVz,BUl,BUk,[B,K,'2881']]],[[U,'NAD83_HARN_Florida_East_ftUS',Cbs,BUd,BZW,BVm,BWj,BXZ,BUT,BUr]]],['2880',Avf+BBI,[[U,Aj+' /'+ASx+DE,ClX,BUd,BWT,BfP,BfO,BXZ,BUT,CVz,BUl,BUk,[B,K,'2880']]],[[U,'NAD83_HARN_Delaware_ftUS',Cbs,BUd,BWT,BfP,BfO,BXZ,BUT,BUr]]],['2879',BUP+AnX,[[U,Aj+' /'+wI+DE,ClX,BVG,BfN,BfM,BfL,BfK,BWa,BWE,CVz,BUl,BUk,[B,K,'2879']]],[[U,'NAD83_HARN_Connecticut_ftUS',Cbs,BVD,BfN,BfM,BfL,BfK,BWa,BWE,BUr]]],['2878',BOu+AkO,[[U,Aj+' /'+nG+' South'+DE,ClX,BVG,BZV,BfJ,BWJ,BXR,BYY,BVg,CVz,BUl,BUk,[B,K,'2878']]],[[U,'NAD83_HARN_Colorado_South_ftUS',Cbs,BVD,BZV,BfJ,BWJ,BXR,BYY,BVg,BUr]]],['2877',BOb+AkO,[[U,Aj+' /'+BBQ+DE,ClX,BVG,BfI,BfH,BdT,BXR,BYY,BVg,CVz,BUl,BUk,[B,K,'2877']]],[[U,'NAD83_HARN_Colorado_Central_ftUS',Cbs,BVD,BfI,BfH,BdT,BXR,BYY,BVg,BUr]]],['2876',BOr+AkO,[[U,Aj+' /'+BBR+DE,ClX,BVG,Bhg,Bhf,BXi,BXR,BYY,BVg,CVz,BUl,BUk,[B,K,'2876']]],[[U,'NAD83_HARN_Colorado_North_ftUS',Cbs,BVD,Bhg,Bhf,BXi,BXR,BYY,BVg,BUr]]],['2875',BOS+AnX,[[U,Aj+' /'+OB+' zone 6'+DE,ClX,BVG,BfG,BfF,BfE,BfD,BYG,BXY,CVz,BUl,BUk,[B,K,'2875']]],[[U,'NAD83_HARN_California_zone_6_ftUS',Cbs,BVD,BfG,BfF,BfE,BfD,BYG,BXY,BUr]]],['2874',BOD+AnX,[[U,Aj+' /'+OB+' zone 5'+DE,ClX,BVG,BfC,BfB,BfA,BbN,BYG,BXY,CVz,BUl,BUk,[B,K,'2874']]],[[U,'NAD83_HARN_California_zone_5_ftUS',Cbs,BVD,BfC,BfB,BfA,BbN,BYG,BXY,BUr]]],['2873',BOA+AnX,[[U,Aj+' /'+OB+' zone 4'+DE,ClX,BVG,Bez,Bey,Bex,Bew,BYG,BXY,CVz,BUl,BUk,[B,K,'2873']]],[[U,'NAD83_HARN_California_zone_4_ftUS',Cbs,BVD,Bez,Bey,Bex,Bew,BYG,BXY,BUr]]],['2872',BNf+AnX,[[U,Aj+' /'+OB+' zone 3'+DE,ClX,BVG,BZV,Bev,Beu,BWB,BYG,BXY,CVz,BUl,BUk,[B,K,'2872']]],[[U,'NAD83_HARN_California_zone_3_ftUS',Cbs,BVD,BZV,Bev,Beu,BWB,BYG,BXY,BUr]]],['2871',BND+AkO,[[U,Aj+' /'+OB+' zone 2'+DE,ClX,BVG,Bet,Bes,BXq,BZU,BYG,BXY,CVz,BUl,BUk,[B,K,'2871']]],[[U,'NAD83_HARN_California_zone_2_ftUS',Cbs,BVD,Bet,Bes,BXq,BZU,BYG,BXY,BUr]]],['2870',BMx+AkO,[[U,Aj+' /'+OB+' zone 1'+DE,ClX,BVG,Ber,BZu,BXi,BZU,BYG,BXY,CVz,BUl,BUk,[B,K,'2870']]],[[U,'NAD83_HARN_California_zone_1_ftUS',Cbs,BVD,Ber,BZu,BXi,BZU,BYG,BXY,BUr]]],['2869',BGk+AoT,[[U,Aj+' /'+yH+' West'+rv,ClX,BUd,BWA,Bel,BWx,BWl,BUT,CWY,BUl,BUk,[B,K,'2869']]],[[U,'NAD83_HARN_Arizona_West_ft',Cbs,BUd,BWA,Bel,BWx,BWl,BUT,BXN]]],['2868',BGi+AoT,[[U,Aj+' /'+BBP+rv,ClX,BUd,BWA,Bej,BUt,BWl,BUT,CWY,BUl,BUk,[B,K,'2868']]],[[U,'NAD83_HARN_Arizona_Central_ft',Cbs,BUd,BWA,Bej,BUt,BWl,BUT,BXN]]],['2867',BGj+AoT,[[U,Aj+' /'+yH+' East'+rv,ClX,BUd,BWA,Bek,BUt,BWl,BUT,CWY,BUl,BUk,[B,K,'2867']]],[[U,'NAD83_HARN_Arizona_East_ft',Cbs,BUd,BWA,Bek,BUt,BWl,BUT,BXN]]],['2866',BKq+j+c+q+a,[[U,Aj+' / Puerto Rico and Virgin Is.',ClX,BVG,Bke,Bkd,Bkc,Bkb,BVP,Bae,CVy,BUl,BUk,[B,K,'2866']]],[[U,'NAD83_HARN_Puerto_Rico_and_Virgin_Is',Cbs,BVD,Bke,Bkd,Bkc,Bkb,BVP,Bae,BUa]]],['2865',BRb+c+q+a,[[U,Aj+' /'+pz+' West',ClX,BUd,BWy,Bgf,BWF,BXP,BXV,CVy,BUl,BUk,[B,K,'2865']]],[[U,'NAD83_HARN_Wyoming_West',Cbs,BUd,BWy,Bgf,BWF,BXP,BXV,BUa]]],['2864',BGo+c+q+a,[[U,Aj+' /'+pz+' West'+Gh,ClX,BUd,BWy,Bgg,BWF,BVY,BUT,CVy,BUl,BUk,[B,K,'2864']]],[[U,'NAD83_HARN_Wyoming_West_Central',Cbs,BUd,BWy,Bgg,BWF,BVY,BUT,BUa]]],['2863',BRZ+c+q+a,[[U,Aj+' /'+pz+' East'+Gh,ClX,BUd,BWy,Bge,BWF,BVh,BXV,CVy,BUl,BUk,[B,K,'2863']]],[[U,'NAD83_HARN_Wyoming_East_Central',Cbs,BUd,BWy,Bge,BWF,BVh,BXV,BUa]]],['2862',BRX+c+q+a,[[U,Aj+' /'+pz+' East',ClX,BUd,BWy,Bgd,BWF,BVP,BUT,CVy,BUl,BUk,[B,K,'2862']]],[[U,'NAD83_HARN_Wyoming_East',Cbs,BUd,BWy,Bgd,BWF,BVP,BUT,BUa]]],['2861',BGe+c+q+a,[[U,Aj+' /'+cp+' South',ClX,BVG,BjK,BjJ,Bde,BWb,BVY,BUT,CVy,BUl,BUk,[B,K,'2861']]],[[U,'NAD83_HARN_Wisconsin_South',Cbs,BVD,BjK,BjJ,Bde,BWb,BVY,BUT,BUa]]],['28600',l+' +lat_0=24.45'+Aah+jz+Dp+eM+BP+ACk+q+a,[[U,'Qatar 1974 / Qatar'+AoN,CrG,BUd,Byk,CHM,Bav,BVP,BZw,CVy,BUj,BUm,[B,K,'28600']]],[[U,'Qatar_1974_Qatar_National_Grid',[S,'GCS_Qatar 1974',CbV,BUU,BUW],BUd,Byk,CHM,Bav,BVP,BZw,BUa]]],['2860',BGf+c+q+a,[[U,Aj+' /'+BBd,ClX,BVG,Bdi,BjS,BYM,BWb,BVY,BUT,CVy,BUl,BUk,[B,K,'2860']]],[[U,'NAD83_HARN_Wisconsin_Central',Cbs,BVD,Bdi,BjS,BYM,BWb,BVY,BUT,BUa]]],['2859',BGd+c+q+a,[[U,Aj+' /'+BBe,ClX,BVG,BjI,BjH,Bgc,BWb,BVY,BUT,CVy,BUl,BUk,[B,K,'2859']]],[[U,'NAD83_HARN_Wisconsin_North',Cbs,BVD,BjI,BjH,Bgc,BWb,BVY,BUT,BUa]]],['2858',BGc+c+q+a,[[U,Aj+' / West'+eI+' South',ClX,BVG,BjG,BjF,Bgb,BVm,BVY,BUT,CVy,BUl,BUk,[B,K,'2858']]],[[U,'NAD83_HARN_West_Virginia_South',Cbs,BVD,BjG,BjF,Bgb,BVm,BVY,BUT,BUa]]],['2857',BGb+c+q+a,[[U,Aj+' / West'+Aoh,ClX,BVG,BjE,BjD,Bga,BZs,BVY,BUT,CVy,BUl,BUk,[B,K,'2857']]],[[U,'NAD83_HARN_West_Virginia_North',Cbs,BVD,BjE,BjD,Bga,BZs,BVY,BUT,BUa]]],['2856',BRU+j+c+q+a,[[U,Aj+' /'+kE+' South',ClX,BVG,BjC,BjB,BgZ,BWB,BUc,BUT,CVy,BUl,BUk,[B,K,'2856']]],[[U,'NAD83_HARN_Washington_South',Cbs,BVD,BjC,BjB,BgZ,BWB,BUc,BUT,BUa]]],['2855',BRS+j+c+q+a,[[U,Aj+' /'+BBc,ClX,BVG,BaE,BjA,BZA,BgY,BUc,BUT,CVy,BUl,BUk,[B,K,'2855']]],[[U,'NAD83_HARN_Washington_North',Cbs,BVD,BaE,BjA,BZA,BgY,BUc,BUT,BUa]]],['2854',BRQ+c+q+a,[[U,Aj+' /'+eI+' South',ClX,BVG,BZr,BgX,BXr,BZe,BXO,BVg,CVy,BUl,BUk,[B,K,'2854']]],[[U,'NAD83_HARN_Virginia_South',Cbs,BVD,BZr,BgX,BXr,BZe,BXO,BVg,BUa]]],['2853',BRO+c+q+a,[[U,Aj+' /'+Aoh,ClX,BVG,Biy,Bix,BXq,BZe,BXO,BYH,CVy,BUl,BUk,[B,K,'2853']]],[[U,'NAD83_HARN_Virginia_North',Cbs,BVD,Biy,Bix,BXq,BZe,BXO,BYH,BUa]]],['2852',BRM+c+q+a,[[U,Aj+' / Vermont',ClX,BUd,BYX,BgW,BgV,BUc,BUT,CVy,BUl,BUk,[B,K,'2852']]],[[U,'NAD83_HARN_Vermont',Cbs,BUd,BYX,BgW,BgV,BUc,BUT,BUa]]],['2851',BRe+c+q+a,[[U,Aj+' / Utah South',ClX,BVG,Bcd,Bcc,BWJ,BWm,BUc,Bbw,CVy,BUl,BUk,[B,K,'2851']]],[[U,'NAD83_HARN_Utah_South',Cbs,BVD,Bcd,Bcc,BWJ,BWm,BUc,Bbw,BUa]]],['2850',BRc+c+q+a,[[U,Aj+' / Utah'+Gh,ClX,BVG,Bca,BcZ,BYl,BWm,BUc,BYH,CVy,BUl,BUk,[B,K,'2850']]],[[U,'NAD83_HARN_Utah_Central',Cbs,BVD,Bca,BcZ,BYl,BWm,BUc,BYH,BUa]]],['2849',BRd+c+q+a,[[U,Aj+' / Utah'+QM,ClX,BVG,BZD,Bcb,Bby,BWm,BUc,BVg,CVy,BUl,BUk,[B,K,'2849']]],[[U,'NAD83_HARN_Utah_North',Cbs,BVD,BZD,Bcb,Bby,BWm,BUc,BVg,BUa]]],['2848',BTT+c+q+a,[[U,Aj+' / Texas South',ClX,BVG,BcY,BcX,Bdd,BXp,BVl,Bdc,CVy,BUl,BUk,[B,K,'2848']]],[[U,'NAD83_HARN_Texas_South',Cbs,BVD,BcY,BcX,Bdd,BXp,BVl,Bdc,BUa]]],['2847',BRK+j+c+q+a,[[U,Aj+' / Texas South'+Gh,ClX,BVG,Biv,Biu,BgU,BXU,BVY,BgT,CVy,BUl,BUk,[B,K,'2847']]],[[U,'NAD83_HARN_Texas_South_Central',Cbs,BVD,Biv,Biu,BgU,BXU,BVY,BgT,BUa]]],['2846',BTP+c+q+a,[[U,Aj+' / Texas'+Gh,ClX,BVG,Bin,Bim,Bda,BZd,BWl,Bbw,CVy,BUl,BUk,[B,K,'2846']]],[[U,'NAD83_HARN_Texas_Central',Cbs,BVD,Bin,Bim,Bda,BZd,BWl,Bbw,BUa]]],['2845',BRI+c+q+a,[[U,Aj+' / Texas'+BBb,ClX,BVG,Bit,Bis,BgS,BXp,BVY,BYH,CVy,BUl,BUk,[B,K,'2845']]],[[U,'NAD83_HARN_Texas_North_Central',Cbs,BVD,Bit,Bis,BgS,BXp,BVY,BYH,BUa]]],['2844',BTR+c+q+a,[[U,Aj+' / Texas'+QM,ClX,BVG,Bir,Biq,BgR,BgQ,BVP,BVg,CVy,BUl,BUk,[B,K,'2844']]],[[U,'NAD83_HARN_Texas_North',Cbs,BVD,Bir,Biq,BgR,BgQ,BVP,BVg,BUa]]],['28432',BEV+' +k=1'+ArV+AoH,[[U,Aje+' /'+AW+' zone 32',ClY,BUd,BUX,BYV,BUf,BcO,BUT,CVy,[B,K,'28432']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_32',Cbv,BUd,BUX,BYV,BUf,BcO,BUT,BUa]]],['28431',AxL+' +k=1'+AqY+AoH,[[U,Aje+' /'+AW+' zone 31',ClY,BUd,BUX,BYF,BUf,BaY,BUT,CVy,[B,K,'28431']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_31',Cbv,BUd,BUX,BYF,BUf,BaY,BUT,BUa]]],['28430',BEU+' +k=1'+AsZ+AoH,[[U,Aje+' /'+AW+' zone 30',ClY,BUd,BUX,BXo,BUf,BcN,BUT,CVy,[B,K,'28430']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_30',Cbv,BUd,BUX,BXo,BUf,BcN,BUT,BUa]]],['2843',BGa+c+q+a,[[U,Aj+' /'+AGm,ClX,BVG,Bil,Bik,BZq,Bcg,BVY,BUT,CVy,BUl,BUk,[B,K,'2843']]],[[U,'NAD83_HARN_Tennessee',Cbs,BVD,Bil,Bik,BZq,Bcg,BVY,BUT,BUa]]],['28429',AxI+' +k=1'+AsY+AoH,[[U,Aje+' /'+AW+' zone 29',ClY,BUd,BUX,BXj,BUf,Baq,BUT,CVy,[B,K,'28429']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_29',Cbv,BUd,BUX,BXj,BUf,Baq,BUT,BUa]]],['28428',BGM+' +k=1'+AsX+AoH,[[U,Aje+' /'+AW+' zone 28',ClY,BUd,BUX,BXW,BUf,Bbm,BUT,CVy,[B,K,'28428']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_28',Cbv,BUd,BUX,BXW,BUf,Bbm,BUT,BUa]]],['28427',Axm+' +k=1'+AsW+AoH,[[U,Aje+' /'+AW+' zone 27',ClY,BUd,BUX,BZl,BUf,Bbl,BUT,CVy,[B,K,'28427']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_27',Cbv,BUd,BUX,BZl,BUf,Bbl,BUT,BUa]]],['28426',BGK+' +k=1'+AsV+AoH,[[U,Aje+' /'+AW+' zone 26',ClY,BUd,BUX,BYu,BUf,Bbj,BUT,CVy,[B,K,'28426']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_26',Cbv,BUd,BUX,BYu,BUf,Bbj,BUT,BUa]]],['28425',BGH+' +k=1'+AsU+AoH,[[U,Aje+' /'+AW+' zone 25',ClY,BUd,BUX,BYW,BUf,Bbk,BUT,CVy,[B,K,'28425']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_25',Cbv,BUd,BUX,BYW,BUf,Bbk,BUT,BUa]]],['28424',Axl+' +k=1'+BNR+AqX,[[U,Aje+' /'+AW+' zone 24',ClY,BUd,BUX,BYK,BUf,Bgj,BUT,CVy,[B,K,'28424']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_24',Cbv,BUd,BUX,BYK,BUf,Bgj,BUT,BUa]]],['28423',Ape+' +k=1'+AsT+AoH,[[U,Aje+' /'+AW+' zone 23',ClY,BUd,BUX,BWd,BUf,BbT,BUT,CVy,[B,K,'28423']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_23',Cbv,BUd,BUX,BWd,BUf,BbT,BUT,BUa]]],['28422',Apd+' +k=1'+AsS+AoH,[[U,Aje+' /'+AW+' zone 22',ClY,BUd,BUX,BWQ,BUf,Baz,BUT,CVy,[B,K,'28422']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_22',Cbv,BUd,BUX,BWQ,BUf,Baz,BUT,BUa]]],['28421',ApF+' +k=1'+AsR+AoH,[[U,Aje+' /'+AW+' zone 21',ClY,BUd,BUX,BWU,BUf,BbS,BUT,CVy,[B,K,'28421']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_21',Cbv,BUd,BUX,BWU,BUf,BbS,BUT,BUa]]],['28420',ApE+' +k=1'+AsQ+AoH,[[U,Aje+' /'+AW+' zone 20',ClY,BUd,BUX,BWS,BUf,Bay,BUT,CVy,[B,K,'28420']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_20',Cbv,BUd,BUX,BWS,BUf,Bay,BUT,BUa]]],['2842',BGZ+c+q+a,[[U,Aj+' / South Dakota South',ClX,BVG,Bij,Bii,BgO,BZd,BVY,BUT,CVy,BUl,BUk,[B,K,'2842']]],[[U,'NAD83_HARN_South_Dakota_South',Cbs,BVD,Bij,Bii,BgO,BZd,BVY,BUT,BUa]]],['28419',ApX+' +k=1'+ArM+AoH,[[U,Aje+' /'+AW+' zone 19',ClY,BUd,BUX,BWX,BUf,BbR,BUT,CVy,[B,K,'28419']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_19',Cbv,BUd,BUX,BWX,BUf,BbR,BUT,BUa]]],['28418',ApW+' +k=1'+AsP+AoH,[[U,Aje+' /'+AW+' zone 18',ClY,BUd,BUX,BWK,BUf,BbQ,BUT,CVy,[B,K,'28418']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_18',Cbv,BUd,BUX,BWK,BUf,BbQ,BUT,BUa]]],['28417',Apc+' +k=1'+AwT+AoH,[[U,Aje+' /'+AW+' zone 17',ClY,BUd,BUX,BWf,BUf,Bcf,BUT,CVy,[B,K,'28417']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_17',Cbv,BUd,BUX,BWf,BUf,Bcf,BUT,BUa]]],['28416',Apb+' +k=1'+AwS+AoH,[[U,Aje+' /'+AW+' zone 16',ClY,BUd,BUX,BWk,BUf,BbP,BUT,CVy,[B,K,'28416']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_16',Cbv,BUd,BUX,BWk,BUf,BbP,BUT,BUa]]],['28415',Apa+' +k=1'+ArP+AoH,[[U,Aje+' /'+AW+' zone 15',ClY,BUd,BUX,BXK,BUf,BbO,BUT,CVy,[B,K,'28415']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_15',Cbv,BUd,BUX,BXK,BUf,BbO,BUT,BUa]]],['28414',ApZ+' +k=1'+ArO+AoH,[[U,Aje+' /'+AW+' zone 14',ClY,BUd,BUX,BWz,BUf,Bad,BUT,CVy,[B,K,'28414']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_14',Cbv,BUd,BUX,BWz,BUf,Bad,BUT,BUa]]],['28413',ApY+' +k=1'+ArN+AoH,[[U,Aje+' /'+AW+' zone 13',ClY,BUd,BUX,BWs,BUf,Bax,BUT,CVy,[B,K,'28413']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_13',Cbv,BUd,BUX,BWs,BUf,Bax,BUT,BUa]]],['28412',Axi+' +k=1'+BDX+AoH,[[U,Aje+' /'+AW+' zone 12',ClY,BUd,BUX,BZh,BUf,Bgi,BUT,CVy,[B,K,'28412']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_12',Cbv,BUd,BUX,BZh,BUf,Bgi,BUT,BUa]]],['28411',Axf+' +k=1'+BDW+AoH,[[U,Aje+' /'+AW+' zone 11',ClY,BUd,BUX,BZN,BUf,Bdn,BUT,CVy,[B,K,'28411']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_11',Cbv,BUd,BUX,BZN,BUf,Bdn,BUT,BUa]]],['28410',Axc+' +k=1'+BBh+AoH,[[U,Aje+' /'+AW+' zone 10',ClY,BUd,BUX,BXz,BUf,Bhd,BUT,CVy,[B,K,'28410']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_10',Cbv,BUd,BUX,BXz,BUf,Bhd,BUT,BUa]]],['2841',BGY+c+q+a,[[U,Aj+' / South Dakota'+QM,ClX,BVG,Bih,Big,BYM,BXb,BVY,BUT,CVy,BUl,BUk,[B,K,'2841']]],[[U,'NAD83_HARN_South_Dakota_North',Cbs,BVD,Bih,Big,BYM,BXb,BVY,BUT,BUa]]],['28409',AuF+' +k=1'+AwU+AoH,[[U,Aje+' /'+AW+' zone 9',ClY,BUd,BUX,BWt,BUf,Bha,BUT,CVy,[B,K,'28409']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_9',Cbv,BUd,BUX,BWt,BUf,Bha,BUT,BUa]]],['28408',AtF+' +k=1'+AwR+AoH,[[U,Aje+' /'+AW+' zone 8',ClY,BUd,BUX,BWe,BUf,BhY,BUT,CVy,[B,K,'28408']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_8',Cbv,BUd,BUX,BWe,BUf,BhY,BUT,BUa]]],['28407',AsG+' +k=1'+ApC+AoH,[[U,Aje+' /'+AW+' zone 7',ClY,BUd,BUX,BWn,BUf,BbK,BUT,CVy,[B,K,'28407']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_7',Cbv,BUd,BUX,BWn,BUf,BbK,BUT,BUa]]],['28406',Aqn+' +k=1'+ArU+AoH,[[U,Aje+' /'+AW+' zone 6',ClY,BUd,BUX,BWg,BUf,BdL,BUT,CVy,[B,K,'28406']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_6',Cbv,BUd,BUX,BWg,BUf,BdL,BUT,BUa]]],['28405',Apz+' +k=1'+AmY+AoH,[[U,Aje+' /'+AW+' zone 5',ClY,BUd,BUX,BWP,BUf,BYv,BUT,CVy,[B,K,'28405']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_5',Cbv,BUd,BUX,BWP,BUf,BYv,BUT,BUa]]],['28404',ApT+' +k=1'+Alz+AoH,[[U,Aje+' /'+AW+' zone 4',ClY,BUd,BUX,BWR,BUf,BYJ,BUT,CVy,[B,K,'28404']]],[[U,'Pulkovo_1942_Gauss_Kruger_zone_4',Cbv,BUd,BUX,BWR,BUf,BYJ,BUT,BUa]]],['2840',BRF+j+c+q+a,[[U,Aj+' / Rhode'+fA,ClX,BUd,BgM,BZc,Bid,BWV,BUT,CVy,BUl,BUk,[B,K,'2840']]],[[U,'NAD83_HARN_Rhode_Island',Cbs,BUd,BgM,BZc,Bid,BWV,BUT,BUa]]],['2839',BKu+j+c+q+a,[[U,Aj+' / Oregon South',ClX,BVG,Bdm,Bdl,BWi,BWB,BWL,BUT,CVy,BUl,BUk,[B,K,'2839']]],[[U,'NAD83_HARN_Oregon_South',Cbs,BVD,Bdm,Bdl,BWi,BWB,BWL,BUT,BUa]]],['2838',BKt+j+c+q+a,[[U,Aj+' / Oregon'+QM,ClX,BVG,Bdk,Bdj,BYN,BWB,BXy,BUT,CVy,BUl,BUk,[B,K,'2838']]],[[U,'NAD83_HARN_Oregon_North',Cbs,BVD,Bdk,Bdj,BYN,BWB,BXy,BUT,BUa]]],['2837',BFc+c+q+a,[[U,Aj+' /'+AGg+' South',ClX,BVG,Bia,BiZ,BgJ,BXh,BVY,BUT,CVy,BUl,BUk,[B,K,'2837']]],[[U,'NAD83_HARN_Oklahoma_South',Cbs,BVD,Bia,BiZ,BgJ,BXh,BVY,BUT,BUa]]],['2836',BFM+c+q+a,[[U,Aj+' /'+ArE,ClX,BVG,BgI,BiY,BgH,BXh,BVY,BUT,CVy,BUl,BUk,[B,K,'2836']]],[[U,'NAD83_HARN_Oklahoma_North',Cbs,BVD,BgI,BiY,BgH,BXh,BVY,BUT,BUa]]],['28358',Aml+BEd,[[U,gs+' / MGA zone 58',Clx,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28358']]],[[U,'GDA94_MGA_zone_58',Ccs,BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['28357',Aos+BEd,[[U,gs+' / MGA zone 57',Clx,BUd,BUX,BZl,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28357']]],[[U,'GDA94_MGA_zone_57',Ccs,BUd,BUX,BZl,BUg,BUc,BUo,BUa]]],['28356',AoS+BEd,[[U,gs+' / MGA zone 56',Clx,BUd,BUX,BYu,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28356']]],[[U,'GDA94_MGA_zone_56',Ccs,BUd,BUX,BYu,BUg,BUc,BUo,BUa]]],['28355',Amg+BEd,[[U,gs+' / MGA zone 55',Clx,BUd,BUX,BYW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28355']]],[[U,'GDA94_MGA_zone_55',Ccs,BUd,BUX,BYW,BUg,BUc,BUo,BUa]]],['28354',AoI+BEd,[[U,gs+' / MGA zone 54',Clx,BUd,BUX,BYK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28354']]],[[U,'GDA94_MGA_zone_54',Ccs,BUd,BUX,BYK,BUg,BUc,BUo,BUa]]],['28353',AmT+BEd,[[U,gs+' / MGA zone 53',Clx,BUd,BUX,BWd,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28353']]],[[U,'GDA94_MGA_zone_53',Ccs,BUd,BUX,BWd,BUg,BUc,BUo,BUa]]],['28352',Ank+BEd,[[U,gs+' / MGA zone 52',Clx,BUd,BUX,BWQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28352']]],[[U,'GDA94_MGA_zone_52',Ccs,BUd,BUX,BWQ,BUg,BUc,BUo,BUa]]],['28351',AnJ+BEd,[[U,gs+' / MGA zone 51',Clx,BUd,BUX,BWU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28351']]],[[U,'GDA94_MGA_zone_51',Ccs,BUd,BUX,BWU,BUg,BUc,BUo,BUa]]],['28350',AnS+BEd,[[U,gs+' / MGA zone 50',Clx,BUd,BUX,BWS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28350']]],[[U,'GDA94_MGA_zone_50',Ccs,BUd,BUX,BWS,BUg,BUc,BUo,BUa]]],['2835',BFL+c+q+a,[[U,Aj+' / Ohio South',ClX,BVG,BiX,BiW,BWT,BYk,BVY,BUT,CVy,BUl,BUk,[B,K,'2835']]],[[U,'NAD83_HARN_Ohio_South',Cbs,BVD,BiX,BiW,BWT,BYk,BVY,BUT,BUa]]],['28349',AnE+BEd,[[U,gs+' / MGA zone 49',Clx,BUd,BUX,BWX,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28349']]],[[U,'GDA94_MGA_zone_49',Ccs,BUd,BUX,BWX,BUg,BUc,BUo,BUa]]],['28348',AnD+BEd,[[U,gs+' / MGA zone 48 (deprecated)',Clx,BUd,BUX,BWK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28348']]],[[U,'GDA94_MGA_zone_48_deprecated',Ccs,BUd,BUX,BWK,BUg,BUc,BUo,BUa]]],['2834',BFI+c+q+a,[[U,Aj+' / Ohio'+QM,ClX,BVG,BiV,BiU,Bat,BYk,BVY,BUT,CVy,BUl,BUk,[B,K,'2834']]],[[U,'NAD83_HARN_Ohio_North',Cbs,BVD,BiV,BiU,Bat,BYk,BVY,BUT,BUa]]],['2833',BRD+c+q+a,[[U,Aj+' /'+QM+' Dakota South',ClX,BVG,BiT,BiS,BbM,BZa,BVY,BUT,CVy,BUl,BUk,[B,K,'2833']]],[[U,'NAD83_HARN_North_Dakota_South',Cbs,BVD,BiT,BiS,BbM,BZa,BVY,BUT,BUa]]],['2832',BRB+c+q+a,[[U,Aj+' /'+QM+' Dakota'+QM,ClX,BVG,BaE,BiR,BZA,BZa,BVY,BUT,CVy,BUl,BUk,[B,K,'2832']]],[[U,'NAD83_HARN_North_Dakota_North',Cbs,BVD,BaE,BiR,BZA,BZa,BVY,BUT,BUa]]],['2831',BKp+j+c+q+a,[[U,Aj+' / New York Long'+fA,ClX,BVG,BgE,BgD,BZp,BgC,BVl,BUT,CVy,BUl,BUk,[B,K,'2831']]],[[U,'NAD83_HARN_New_York_Long_Island',Cbs,BVD,BgE,BgD,BZp,BgC,BVl,BUT,BUa]]],['2830',BQx+j+c+q+a,[[U,Aj+' / New York West',ClX,BUd,BXM,BgF,BWF,Blz,BUT,CVy,BUl,BUk,[B,K,'2830']]],[[U,'NAD83_HARN_New_York_West',Cbs,BUd,BXM,BgF,BWF,Blz,BUT,BUa]]],['2829',BQv+c+q+a,[[U,Aj+' / New York'+Gh,ClX,BUd,BXM,BgB,BWF,BWp,BUT,CVy,BUl,BUk,[B,K,'2829']]],[[U,'NAD83_HARN_New_York_Central',Cbs,BUd,BXM,BgB,BWF,BWp,BUT,BUa]]],['2828',BUS,[[U,Aj+' / New York East',ClX,BUd,BZo,BaD,BUt,BXc,BUT,CVy,BUl,BUk,[B,K,'2828']]],[[U,'NAD83_HARN_New_York_East',Cbs,BUd,BZo,BaD,BUt,BXc,BUT,BUa]]],['2827',BQt+j+c+q+a,[[U,Aj+' / New Mexico West',ClX,BUd,BWA,BgA,Bfz,BsV,BUT,CVy,BUl,BUk,[B,K,'2827']]],[[U,'NAD83_HARN_New_Mexico_West',Cbs,BUd,BWA,BgA,Bfz,BsV,BUT,BUa]]],['2826',BQs+c+q+a,[[U,Aj+' / New Mexico'+Gh,ClX,BUd,BWA,Bfx,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'2826']]],[[U,'NAD83_HARN_New_Mexico_Central',Cbs,BUd,BWA,Bfx,BUt,BUc,BUT,BUa]]],['2825',BGn+c+q+a,[[U,Aj+' / New Mexico East',ClX,BUd,BWA,Bfy,BcW,BsT,BUT,CVy,BUl,BUk,[B,K,'2825']]],[[U,'NAD83_HARN_New_Mexico_East',Cbs,BUd,BWA,Bfy,BcW,BsT,BUT,BUa]]],['2824',BUS,[[U,Aj+' / New Jersey',ClX,BUd,BZo,BaD,BUt,BXc,BUT,CVy,BUl,BUk,[B,K,'2824']]],[[U,'NAD83_HARN_New_Jersey',Cbs,BUd,BZo,BaD,BUt,BXc,BUT,BUa]]],['28232',Alu+HN+Akc+AKI+q+a,[[U,'Pointe Noire / UTM zone 32S',Cqs,BUd,BUX,BWO,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'28232']]],[[U,'Pointe_Noire_UTM_zone_32S',[S,'GCS_Pointe Noire',[V,AhB,BWG],BUU,BUW],BUd,BUX,BWO,BUg,BUc,BUo,BUa]]],['2823',BQr+c+q+a,[[U,Aj+' / New'+AGn,ClX,BUd,BYX,Bfw,BWN,BVl,BUT,CVy,BUl,BUk,[B,K,'2823']]],[[U,'NAD83_HARN_New_Hampshire',Cbs,BUd,BYX,Bfw,BWN,BVl,BUT,BUa]]],['2822',BTi+j+c+q+a,[[U,Aj+' / Nevada West',ClX,BUd,BXg,Bfv,BUt,BXP,BgT,CVy,BUl,BUk,[B,K,'2822']]],[[U,'NAD83_HARN_Nevada_West',Cbs,BUd,BXg,Bfv,BUt,BXP,BgT,BUa]]],['2821',BQo+c+q+a,[[U,Aj+' / Nevada'+Gh,ClX,BUd,BXg,Bft,BUt,BUc,Bdb,CVy,BUl,BUk,[B,K,'2821']]],[[U,'NAD83_HARN_Nevada_Central',Cbs,BUd,BXg,Bft,BUt,BUc,Bdb,BUa]]],['2820',BQq+j+c+q+a,[[U,Aj+' / Nevada East',ClX,BUd,BXg,Bfu,BUt,BVP,BsQ,CVy,BUl,BUk,[B,K,'2820']]],[[U,'NAD83_HARN_Nevada_East',Cbs,BUd,BXg,Bfu,BUt,BVP,BsQ,BUa]]],['28193',SE+ov+ow+AGa+' +y_0=1126867.909'+BPw+q+a,[[U,wp+' 1923 / Israeli CS'+op,Cna,Bgy,Btf,Bte,Btd,CHL,CVy,BUj,BUm,[B,K,'28193']]],[[U,'Palestine_1923_Israeli_CS_Grid',Cfv,Bgx,Btf,Bte,Btd,CHL,BUa,Bal]]],['28192',l+ov+ow+' +k=1'+AGa+' +y_0=1126867.909'+BPw+q+a,[[U,wp+' 1923 /'+" "+wp+' Belt',Cna,BUd,Btf,Bte,BUf,Btd,CHL,CVy,BUj,BUm,[B,K,'28192']]],[[U,'Palestine_1923_Palestine_Belt',Cfv,BUd,Btf,Bte,BUf,Btd,CHL,BUa]]],['28191',SE+ov+ow+AGa+' +y_0=126867.909'+BPw+q+a,[[U,wp+' 1923 /'+" "+wp+op,Cna,Bgy,Btf,Bte,Btd,CBh,CVy,BUj,BUm,[B,K,'28191']]],[[U,'Palestine_1923_Palestine_Grid',Cfv,Bgx,Btf,Bte,Btd,CBh,BUa,Bal]]],['2819',BQn+j+c+q+a,[[U,Aj+' /'+ASu,ClX,BVG,BZg,BZu,BjT,BXb,BUc,BUT,CVy,BUl,BUk,[B,K,'2819']]],[[U,'NAD83_HARN_Nebraska',Cbs,BVD,BZg,BZu,BjT,BXb,BUc,BUT,BUa]]],['2818',BQl+j+c+q+a,[[U,Aj+' / Montana',ClX,BVG,BaG,BiN,BiM,BcV,BVY,BUT,CVy,BUl,BUk,[B,K,'2818']]],[[U,'NAD83_HARN_Montana',Cbs,BVD,BaG,BiN,BiM,BcV,BVY,BUT,BUa]]],['2817',l+BLc+BRq,[[U,Aj+' /'+AMH+' West',ClX,BUd,Bof,Boe,BWj,BsO,BUT,CVy,BUl,BUk,[B,K,'2817']]],[[U,'NAD83_HARN_Missouri_West',Cbs,BUd,Bof,Boe,BWj,BsO,BUT,BUa]]],['2816',BQj+j+c+q+a,[[U,Aj+' /'+BEl,ClX,BUd,BdY,Bas,BWx,BUc,BUT,CVy,BUl,BUk,[B,K,'2816']]],[[U,'NAD83_HARN_Missouri_Central',Cbs,BUd,BdY,Bas,BWx,BUc,BUT,BUa]]],['2815',BQk+c+q+a,[[U,Aj+' /'+AMH+' East',ClX,BUd,BdY,Bod,BWx,BWp,BUT,CVy,BUl,BUk,[B,K,'2815']]],[[U,'NAD83_HARN_Missouri_East',Cbs,BUd,BdY,Bod,BWx,BWp,BUT,BUa]]],['2814',BQi+c+q+a,[[U,Aj+' /'+cu+' West',ClX,BUd,BaC,BcU,BWh,BWl,BUT,CVy,BUl,BUk,[B,K,'2814']]],[[U,'NAD83_HARN_Mississippi_West',Cbs,BUd,BaC,BcU,BWh,BWl,BUT,BUa]]],['2813',BQg+c+q+a,[[U,Aj+' /'+cu+' East',ClX,BUd,BaC,Bfs,BWh,BVl,BUT,CVy,BUl,BUk,[B,K,'2813']]],[[U,'NAD83_HARN_Mississippi_East',Cbs,BUd,BaC,Bfs,BWh,BVl,BUT,BUa]]],['2812',BQe+j+c+q+a,[[U,Aj+' /'+fs+' South',ClX,BVG,BiL,BiK,BcA,BdW,BXP,BXV,CVy,BUl,BUk,[B,K,'2812']]],[[U,'NAD83_HARN_Minnesota_South',Cbs,BVD,BiL,BiK,BcA,BdW,BXP,BXV,BUa]]],['2811',BQa+j+c+q+a,[[U,Aj+' /'+BBX,ClX,BVG,BiH,BiG,BZE,Bfq,BXP,BXV,CVy,BUl,BUk,[B,K,'2811']]],[[U,'NAD83_HARN_Minnesota_Central',Cbs,BVD,BiH,BiG,BZE,Bfq,BXP,BXV,BUa]]],['2810',BQc+j+c+q+a,[[U,Aj+' /'+BBY,ClX,BVG,BiJ,BiI,BbU,Bfr,BXP,BXV,CVy,BUl,BUk,[B,K,'2810']]],[[U,'NAD83_HARN_Minnesota_North',Cbs,BVD,BiJ,BiI,BbU,Bfr,BXP,BXV,BUa]]],['2809',BTM+c+q+a,[[U,Aj+' /'+iV+' South',ClX,BVG,Bdh,BiF,BYb,BaB,Bfp,BUT,CVy,BUl,BUk,[B,K,'2809']]],[[U,'NAD83_HARN_Michigan_South',Cbs,BVD,Bdh,BiF,BYb,BaB,Bfp,BUT,BUa]]],['2808',BQX+c+q+a,[[U,Aj+' /'+BDF,ClX,BVG,BiB,BiA,Bhz,BaB,Bly,BUT,CVy,BUl,BUk,[B,K,'2808']]],[[U,'NAD83_HARN_Michigan_Central',Cbs,BVD,BiB,BiA,Bhz,BaB,Bly,BUT,BUa]]],['2807',BQY+c+q+a,[[U,Aj+' /'+BDG,ClX,BVG,BiE,BiD,BiC,BXS,BsH,BUT,CVy,BUl,BUk,[B,K,'2807']]],[[U,'NAD83_HARN_Michigan_North',Cbs,BVD,BiE,BiD,BiC,BXS,BsH,BUT,BUa]]],['2806',BQV+j+c+q+a,[[U,Aj+' /'+BBW,ClX,BVG,Bhx,Bhw,BZM,BbL,BUc,BUT,CVy,BUl,BUk,[B,K,'2806']]],[[U,'NAD83_HARN_Massachusetts_Island',Cbs,BVD,Bhx,Bhw,BZM,BbL,BUc,BUT,BUa]]],['2805',BUQ+j+c+q+a,[[U,Aj+' /'+ArD,ClX,BVG,Bhy,Bfo,BZM,BZc,BVP,Boc,CVy,BUl,BUk,[B,K,'2805']]],[[U,'NAD83_HARN_Massachusetts_Mainland',Cbs,BVD,Bhy,Bfo,BZM,BZc,BVP,Boc,BUa]]],['2804',BQU+j+c+q+a,[[U,Aj+' /'+ASw,ClX,BVG,Bhv,Bhu,BXq,Bbs,BVh,BUT,CVy,BUl,BUk,[B,K,'2804']]],[[U,'NAD83_HARN_Maryland',Cbs,BVD,Bhv,Bhu,BXq,Bbs,BVh,BUT,BUa]]],['2803',BGm+c+q+a,[[U,Aj+' / Maine West',ClX,BUd,BZt,Bfn,BWN,BdV,BUT,CVy,BUl,BUk,[B,K,'2803']]],[[U,'NAD83_HARN_Maine_West',Cbs,BUd,BZt,Bfn,BWN,BdV,BUT,BUa]]],['2802',BKn+c+q+a,[[U,Aj+' / Maine East',ClX,BUd,BYN,Bau,BUt,BVl,BUT,CVy,BUl,BUk,[B,K,'2802']]],[[U,'NAD83_HARN_Maine_East',Cbs,BUd,BYN,Bau,BUt,BVl,BUT,BUa]]],['2801',BQP+j+c+q+a,[[U,Aj+' /'+kJ+' South',ClX,BVG,Bhs,Bhr,Bhq,Bbr,BWa,BUT,CVy,BUl,BUk,[B,K,'2801']]],[[U,'NAD83_HARN_Louisiana_South',Cbs,BVD,Bhs,Bhr,Bhq,Bbr,BWa,BUT,BUa]]],['2800',BQN+j+c+q+a,[[U,Aj+' /'+BBU,ClX,BVG,Bhp,Bho,Bar,Bas,BWa,BUT,CVy,BUl,BUk,[B,K,'2800']]],[[U,'NAD83_HARN_Louisiana_North',Cbs,BVD,Bhp,Bho,Bar,Bas,BWa,BUT,BUa]]],['2799',BQM+j+c+q+a,[[U,Aj+' /'+or+' South',ClX,BVG,Bhn,Bhm,BXr,BZZ,BUc,BWE,CVy,BUl,BUk,[B,K,'2799']]],[[U,'NAD83_HARN_Kentucky_South',Cbs,BVD,Bhn,Bhm,BXr,BZZ,BUc,BWE,BUa]]],['2798',BQI+j+c+q+a,[[U,Aj+' /'+BBT,ClX,BVG,BZr,Bfl,BXf,Bfk,BUc,BUT,CVy,BUl,BUk,[B,K,'2798']]],[[U,'NAD83_HARN_Kentucky_North',Cbs,BVD,BZr,Bfl,BXf,Bfk,BUc,BUT,BUa]]],['2797',BQG+j+c+q+a,[[U,Aj+' / Kansas South',ClX,BVG,Bfj,Bfi,BWJ,BXp,BVh,Baa,CVy,BUl,BUk,[B,K,'2797']]],[[U,'NAD83_HARN_Kansas_South',Cbs,BVD,Bfj,Bfi,BWJ,BXp,BVh,Baa,BUa]]],['2796',BQE+j+c+q+a,[[U,Aj+' / Kansas'+QM,ClX,BVG,Bfh,Bfg,BYl,BXh,BVh,BUT,CVy,BUl,BUk,[B,K,'2796']]],[[U,'NAD83_HARN_Kansas_North',Cbs,BVD,Bfh,Bfg,BYl,BXh,BVh,BUT,BUa]]],['2795',BQC+j+c+q+a,[[U,Aj+' / Iowa South',ClX,BVG,BZD,Bff,BXM,BZY,BUc,BUT,CVy,BUl,BUk,[B,K,'2795']]],[[U,'NAD83_HARN_Iowa_South',Cbs,BVD,BZD,Bff,BXM,BZY,BUc,BUT,BUa]]],['2794',BQA+c+q+a,[[U,Aj+' / Iowa'+QM,ClX,BVG,Bfe,Bfd,BYb,BZY,BWL,BVg,CVy,BUl,BUk,[B,K,'2794']]],[[U,'NAD83_HARN_Iowa_North',Cbs,BVD,Bfe,Bfd,BYb,BZY,BWL,BVg,BUa]]],['2793',BTe+j+c+q+a,[[U,Aj+' / Indiana West',ClX,BUd,BXf,Bfc,BWN,BdV,Bch,CVy,BUl,BUk,[B,K,'2793']]],[[U,'NAD83_HARN_Indiana_West',Cbs,BUd,BXf,Bfc,BWN,BdV,Bch,BUa]]],['2792',BTd+j+c+q+a,[[U,Aj+' / Indiana East',ClX,BUd,BXf,Bfb,BWN,BWV,Bch,CVy,BUl,BUk,[B,K,'2792']]],[[U,'NAD83_HARN_Indiana_East',Cbs,BUd,BXf,Bfb,BWN,BWV,Bch,BUa]]],['2791',BPh+c+q+a,[[U,Aj+' /'+AGh+' West',ClX,BUd,BWJ,Bfa,BWj,BWl,BUT,CVy,BUl,BUk,[B,K,'2791']]],[[U,'NAD83_HARN_Illinois_West',Cbs,BUd,BWJ,Bfa,BWj,BWl,BUT,BUa]]],['2790',BPe+c+q+a,[[U,Aj+' /'+AGh+' East',ClX,BUd,BWJ,BfZ,BdU,BVl,BUT,CVy,BUl,BUk,[B,K,'2790']]],[[U,'NAD83_HARN_Illinois_East',Cbs,BUd,BWJ,BfZ,BdU,BVl,BUT,BUa]]],['2789',BPa+c+q+a,[[U,Aj+' / Idaho West',ClX,BUd,BWi,BfY,BWx,BXP,BUT,CVy,BUl,BUk,[B,K,'2789']]],[[U,'NAD83_HARN_Idaho_West',Cbs,BUd,BWi,BfY,BWx,BXP,BUT,BUa]]],['2788',BPR+c+q+a,[[U,Aj+' / Idaho'+Gh,ClX,BUd,BWi,Bbq,BZX,BUc,BUT,CVy,BUl,BUk,[B,K,'2788']]],[[U,'NAD83_HARN_Idaho_Central',Cbs,BUd,BWi,Bbq,BZX,BUc,BUT,BUa]]],['2787',BPY+c+q+a,[[U,Aj+' / Idaho East',ClX,BUd,BWi,BfX,BZX,BVP,BUT,CVy,BUl,BUk,[B,K,'2787']]],[[U,'NAD83_HARN_Idaho_East',Cbs,BUd,BWi,BfX,BZX,BVP,BUT,BUa]]],['2786',l+pG+oC+' +k=1'+BSv,[[U,Aj+' / Hawaii zone 5',ClX,BUd,Bsn,Bsm,BUf,BUc,BUT,CVy,BUl,BUk,[B,K,'2786']]],[[U,'NAD83_HARN_Hawaii_zone_5',Cbs,BUd,Bsn,Bsm,BUf,BUc,BUT,BUa]]],['2785',l+BFo+BHO+c+q+a,[[U,Aj+' / Hawaii zone 4',ClX,BUd,Bsl,Bsk,Bav,BUc,BUT,CVy,BUl,BUk,[B,K,'2785']]],[[U,'NAD83_HARN_Hawaii_zone_4',Cbs,BUd,Bsl,Bsk,Bav,BUc,BUT,BUa]]],['2784',BMV+BHO+c+q+a,[[U,Aj+' / Hawaii zone 3',ClX,BUd,Bkf,Bce,Bav,BUc,BUT,CVy,BUl,BUk,[B,K,'2784']]],[[U,'NAD83_HARN_Hawaii_zone_3',Cbs,BUd,Bkf,Bce,Bav,BUc,BUT,BUa]]],['2783',l+pI+oD+BHN+c+q+a,[[U,Aj+' / Hawaii zone 2',ClX,BUd,Bsj,Bsi,BWN,BUc,BUT,CVy,BUl,BUk,[B,K,'2783']]],[[U,'NAD83_HARN_Hawaii_zone_2',Cbs,BUd,Bsj,Bsi,BWN,BUc,BUT,BUa]]],['2782',l+BFm+BHN+c+q+a,[[U,Aj+' / Hawaii zone 1',ClX,BUd,Bsh,Bsg,BWN,BUc,BUT,CVy,BUl,BUk,[B,K,'2782']]],[[U,'NAD83_HARN_Hawaii_zone_1',Cbs,BUd,Bsh,Bsg,BWN,BUc,BUT,BUa]]],['2781',BPI+c+q+a,[[U,Aj+' /'+Abp+' West',ClX,BUd,BXX,BfW,BUt,BWl,BUT,CVy,BUl,BUk,[B,K,'2781']]],[[U,'NAD83_HARN_Georgia_West',Cbs,BUd,BXX,BfW,BUt,BWl,BUT,BUa]]],['2780',BPE+c+q+a,[[U,Aj+' /'+Abp+' East',ClX,BUd,BXX,BfV,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'2780']]],[[U,'NAD83_HARN_Georgia_East',Cbs,BUd,BXX,BfV,BUt,BVP,BUT,BUa]]],['2779',BFH+c+q+a,[[U,Aj+' /'+BBS,ClX,BVG,BfT,BfS,BfR,BfQ,BVY,BUT,CVy,BUl,BUk,[B,K,'2779']]],[[U,'NAD83_HARN_Florida_North',Cbs,BVD,BfT,BfS,BfR,BfQ,BVY,BUT,BUa]]],['2778',BPC+c+q+a,[[U,Aj+' /'+tm+' West',ClX,BUd,BZW,BfU,BWj,BVP,BUT,CVy,BUl,BUk,[B,K,'2778']]],[[U,'NAD83_HARN_Florida_West',Cbs,BUd,BZW,BfU,BWj,BVP,BUT,BUa]]],['2777',BPA+c+q+a,[[U,Aj+' /'+tm+' East',ClX,BUd,BZW,BVm,BWj,BVP,BUT,CVy,BUl,BUk,[B,K,'2777']]],[[U,'NAD83_HARN_Florida_East',Cbs,BUd,BZW,BVm,BWj,BVP,BUT,BUa]]],['2776',BOy+c+q+a,[[U,Aj+' /'+ASx,ClX,BUd,BWT,BfP,BfO,BVP,BUT,CVy,BUl,BUk,[B,K,'2776']]],[[U,'NAD83_HARN_Delaware',Cbs,BUd,BWT,BfP,BfO,BVP,BUT,BUa]]],['2775',BOv+j+c+q+a,[[U,Aj+' /'+wI,ClX,BVG,BfN,BfM,BfL,BfK,Bru,Brt,CVy,BUl,BUk,[B,K,'2775']]],[[U,'NAD83_HARN_Connecticut',Cbs,BVD,BfN,BfM,BfL,BfK,Bru,Brt,BUa]]],['2774',BOt+c+q+a,[[U,Aj+' /'+nG+' South',ClX,BVG,BZV,BfJ,BWJ,BXR,Bbp,Bbo,CVy,BUl,BUk,[B,K,'2774']]],[[U,'NAD83_HARN_Colorado_South',Cbs,BVD,BZV,BfJ,BWJ,BXR,Bbp,Bbo,BUa]]],['2773',BOU+c+q+a,[[U,Aj+' /'+BBQ,ClX,BVG,BfI,BfH,BdT,BXR,Bbp,Bbo,CVy,BUl,BUk,[B,K,'2773']]],[[U,'NAD83_HARN_Colorado_Central',Cbs,BVD,BfI,BfH,BdT,BXR,Bbp,Bbo,BUa]]],['2772',BOd+c+q+a,[[U,Aj+' /'+BBR,ClX,BVG,Bhg,Bhf,BXi,BXR,Bbp,Bbo,CVy,BUl,BUk,[B,K,'2772']]],[[U,'NAD83_HARN_Colorado_North',Cbs,BVD,Bhg,Bhf,BXi,BXR,Bbp,Bbo,BUa]]],['2771',BOE+j+c+q+a,[[U,Aj+' /'+OB+' zone 6',ClX,BVG,BfG,BfF,BfE,BfD,BVW,BWE,CVy,BUl,BUk,[B,K,'2771']]],[[U,'NAD83_HARN_California_zone_6',Cbs,BVD,BfG,BfF,BfE,BfD,BVW,BWE,BUa]]],['2770',BOC+j+c+q+a,[[U,Aj+' /'+OB+' zone 5',ClX,BVG,BfC,BfB,BfA,BbN,BVW,BWE,CVy,BUl,BUk,[B,K,'2770']]],[[U,'NAD83_HARN_California_zone_5',Cbs,BVD,BfC,BfB,BfA,BbN,BVW,BWE,BUa]]],['2769',BNg+j+c+q+a,[[U,Aj+' /'+OB+' zone 4',ClX,BVG,Bez,Bey,Bex,Bew,BVW,BWE,CVy,BUl,BUk,[B,K,'2769']]],[[U,'NAD83_HARN_California_zone_4',Cbs,BVD,Bez,Bey,Bex,Bew,BVW,BWE,BUa]]],['2768',BNT+j+c+q+a,[[U,Aj+' /'+OB+' zone 3',ClX,BVG,BZV,Bev,Beu,BWB,BVW,BWE,CVy,BUl,BUk,[B,K,'2768']]],[[U,'NAD83_HARN_California_zone_3',Cbs,BVD,BZV,Bev,Beu,BWB,BVW,BWE,BUa]]],['2767',BMz+c+q+a,[[U,Aj+' /'+OB+' zone 2',ClX,BVG,Bet,Bes,BXq,BZU,BVW,BWE,CVy,BUl,BUk,[B,K,'2767']]],[[U,'NAD83_HARN_California_zone_2',Cbs,BVD,Bet,Bes,BXq,BZU,BVW,BWE,BUa]]],['2766',BMn+c+q+a,[[U,Aj+' /'+OB+' zone 1',ClX,BVG,Ber,BZu,BXi,BZU,BVW,BWE,CVy,BUl,BUk,[B,K,'2766']]],[[U,'NAD83_HARN_California_zone_1',Cbs,BVD,Ber,BZu,BXi,BZU,BVW,BWE,BUa]]],['2765',BMb+j+c+q+a,[[U,Aj+' /'+AGi+' South',ClX,BVG,Beq,Bep,Beo,BZT,BVh,Baa,CVy,BUl,BUk,[B,K,'2765']]],[[U,'NAD83_HARN_Arkansas_South',Cbs,BVD,Beq,Bep,Beo,BZT,BVh,Baa,BUa]]],['2764',BMU+c+q+a,[[U,Aj+' /'+ArC,ClX,BVG,Ben,Bem,BZq,BZT,BVh,BUT,CVy,BUl,BUk,[B,K,'2764']]],[[U,'NAD83_HARN_Arkansas_North',Cbs,BVD,Ben,Bem,BZq,BZT,BVh,BUT,BUa]]],['2763',BGk+c+q+a,[[U,Aj+' /'+yH+' West',ClX,BUd,BWA,Bel,BWx,Bbn,BUT,CVy,BUl,BUk,[B,K,'2763']]],[[U,'NAD83_HARN_Arizona_West',Cbs,BUd,BWA,Bel,BWx,Bbn,BUT,BUa]]],['2762',BGi+c+q+a,[[U,Aj+' /'+BBP,ClX,BUd,BWA,Bej,BUt,Bbn,BUT,CVy,BUl,BUk,[B,K,'2762']]],[[U,'NAD83_HARN_Arizona_Central',Cbs,BUd,BWA,Bej,BUt,Bbn,BUT,BUa]]],['2761',BGj+c+q+a,[[U,Aj+' /'+yH+' East',ClX,BUd,BWA,Bek,BUt,Bbn,BUT,CVy,BUl,BUk,[B,K,'2761']]],[[U,'NAD83_HARN_Arizona_East',Cbs,BUd,BWA,Bek,BUt,Bbn,BUT,BUa]]],['2760',BMF+j+c+q+a,[[U,Aj+' / Alabama West',ClX,BUd,BXX,Bkh,BWx,BVY,BUT,CVy,BUl,BUk,[B,K,'2760']]],[[U,'NAD83_HARN_Alabama_West',Cbs,BUd,BXX,Bkh,BWx,BVY,BUT,BUa]]],['2759',l+BMD+c+q+a,[[U,Aj+' / Alabama East',ClX,BUd,Bar,BoX,Bhe,BVP,BUT,CVy,BUl,BUk,[B,K,'2759']]],[[U,'NAD83_HARN_Alabama_East',Cbs,BUd,Bar,BoX,Bhe,BVP,BUT,BUa]]],['2758',BJK+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 168W',Cla,BUd,BUX,Bnx,BUf,BUc,BUT,CVy,[B,K,'2758']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_168W',Cby,BUd,BUX,Bnx,BUf,BUc,BUT,BUa]]],['27574',AU+Aai+Aaj+ci+' +k_0=0.99994471 +x_0=234.358 +y_0=4185861.369'+BSk,[[U,'NTF'+WJ+' /'+PW+' zone IV',CmV,BWW,Byj,BYA,Byi,Byh,[A,G,AfO],CVy,BUl,BUk,[B,K,'27574']]],[[U,'NTF_Paris_Lambert_zone_IV',CeK,BVD,Byj,BYA,Byi,Byh,[A,G,AfO],BUa,[A,W,ABM]]]],['27573',AU+Aak+Aal+ci+' +k_0=0.999877499'+Cj+' +y_0=3200000'+BSk,[[U,'NTF'+WJ+' /'+PW+' zone III',CmV,BWW,BmW,BYA,CHK,BVY,CAb,CVy,BUl,BUk,[B,K,'27573']]],[[U,'NTF_Paris_Lambert_zone_III',CeK,BVD,BmW,BYA,CHK,BVY,CAb,BUa,BaG]]],['27572',AU+' +lat_1=46.8 +lat_0=46.8'+ci+' +k_0=0.99987742'+Cj+' +y_0=2200000'+BSk,[[U,'NTF'+WJ+' /'+PW+' zone II',CmV,BWW,BeJ,BYA,Byg,BVY,CAa,CVy,BUl,BUk,[B,K,'27572']]],[[U,'NTF_Paris_Lambert_zone_II',CeK,BVD,BeJ,BYA,Byg,BVY,CAa,BUa,[A,W,YA]]]],['27571',AU+AAn+AAo+ci+' +k_0=0.999877341'+Cj+AXQ+BSk,[[U,'NTF'+WJ+' /'+PW+' zone I',CmV,BWW,BwU,BYA,CHJ,BVY,BuK,CVy,BUl,BUk,[B,K,'27571']]],[[U,'NTF_Paris_Lambert_zone_I',CeK,BVD,BwU,BYA,CHJ,BVY,BuK,BUa,BnM]]],['2757',BEV+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 171W',Cla,BUd,BUX,BYV,BUf,BUc,BUT,CVy,[B,K,'2757']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_171W',Cby,BUd,BUX,BYV,BUf,BUc,BUT,BUa]]],['27564',AU+Aai+Aaj+ci+' +k_0=0.99994471 +x_0=234.358 +y_0=185861.369'+BSk,[[U,'NTF'+WJ+' /'+PW+' Corse',CmV,BWW,Byj,BYA,Byi,Byh,[A,G,AjF],CVy,BUl,BUk,[B,K,'27564']]],[[U,'NTF_Paris_Lambert_Corse',CeK,BVD,Byj,BYA,Byi,Byh,[A,G,AjF],BUa,[A,W,ABM]]]],['27563',AU+Aak+Aal+ci+' +k_0=0.999877499'+Cj+fR+BSk,[[U,'NTF'+WJ+' /'+PW+' Sud France',CmV,BWW,BmW,BYA,CHK,BVY,Bae,CVy,BUl,BUk,[B,K,'27563']]],[[U,'NTF_Paris_Lambert_Sud_France',CeK,BVD,BmW,BYA,CHK,BVY,Bae,BUa,BaG]]],['27562',AU+' +lat_1=46.8 +lat_0=46.8'+ci+' +k_0=0.99987742'+Cj+fR+BSk,[[U,'NTF'+WJ+' /'+PW+' Centre France',CmV,BWW,BeJ,BYA,Byg,BVY,Bae,CVy,BUl,BUk,[B,K,'27562']]],[[U,'NTF_Paris_Lambert_Centre_France',CeK,BVD,BeJ,BYA,Byg,BVY,Bae,BUa,[A,W,YA]]]],['27561',AU+AAn+AAo+ci+' +k_0=0.999877341'+Cj+fR+BSk,[[U,'NTF'+WJ+' /'+PW+' Nord France',CmV,BWW,BwU,BYA,CHJ,BVY,Bae,CVy,BUl,BUk,[B,K,'27561']]],[[U,'NTF_Paris_Lambert_Nord_France',CeK,BVD,BwU,BYA,CHJ,BVY,Bae,BUa,BnM]]],['2756',BJJ+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 174W',Cla,BUd,BUX,Bnt,BUf,BUc,BUT,CVy,[B,K,'2756']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_174W',Cby,BUd,BUX,Bnt,BUf,BUc,BUT,BUa]]],['2755',AxL+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 177W',Cla,BUd,BUX,BYF,BUf,BUc,BUT,CVy,[B,K,'2755']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_177W',Cby,BUd,BUX,BYF,BUf,BUc,BUT,BUa]]],['2754',BJb+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 180E',Cla,BUd,BUX,BnL,BUf,BUc,BUT,CVy,[B,K,'2754']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_180E',Cby,BUd,BUX,BnL,BUf,BUc,BUT,BUa]]],['2753',BEU+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 177E',Cla,BUd,BUX,BXo,BUf,BUc,BUT,CVy,[B,K,'2753']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_177E',Cby,BUd,BUX,BXo,BUf,BUc,BUT,BUa]]],['2752',BJI+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 174E',Cla,BUd,BUX,Bnw,BUf,BUc,BUT,CVy,[B,K,'2752']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_174E',Cby,BUd,BUX,Bnw,BUf,BUc,BUT,BUa]]],['2751',AxI+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 171E',Cla,BUd,BUX,BXj,BUf,BUc,BUT,CVy,[B,K,'2751']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_171E',Cby,BUd,BUX,BXj,BUf,BUc,BUT,BUa]]],['27500',AU+AAn+AAo+' +lon_0=5.399999999999999 +k_0=0.99950908'+AsH+' +a=6376523'+AFz+Agj+q+a,[[U,'ATF'+WJ+' / Nord de Guerre',Crq,BWW,BwU,[A,E,AQU],[A,N,AjG],BUc,BZw,CVy,BUl,BUk,[B,K,'27500']]],[[U,'ATF_Paris_Nord_de_Guerre',[S,'GCS_ATF'+WJ,Cbg,CPq,Bcs],BVD,BwU,[A,E,AQU],[A,N,AjG],BUc,BZw,BUa,BnM]]],['2750',BJH+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 168E',Cla,BUd,BUX,BoA,BUf,BUc,BUT,CVy,[B,K,'2750']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_168E',Cby,BUd,BUX,BoA,BUf,BUc,BUT,BUa]]],['27493',l+Na+AWr+' +k=1 +x_0=180.598 +y_0=-86.98999999999999'+BP+iR+q+a,[[U,'Datum 73 /'+MF+' Portuguese'+op,CoO,BUd,Bat,CIT,BUf,CGJ,CHI,CVy,BUl,BUk,[B,K,'27493']]],[[U,'Datum_73_Modified_Portuguese_Grid',CiU,BUd,Bat,CIT,BUf,CGJ,CHI,BUa]]],['2749',BGM+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 165E',Cla,BUd,BUX,BXW,BUf,BUc,BUT,CVy,[B,K,'2749']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_165E',Cby,BUd,BUX,BXW,BUf,BUc,BUT,BUa]]],['2748',BJG+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 162E',Cla,BUd,BUX,BkM,BUf,BUc,BUT,CVy,[B,K,'2748']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_162E',Cby,BUd,BUX,BkM,BUf,BUc,BUT,BUa]]],['2747',Axm+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 159E',Cla,BUd,BUX,BZl,BUf,BUc,BUT,CVy,[B,K,'2747']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_159E',Cby,BUd,BUX,BZl,BUf,BUc,BUT,BUa]]],['2746',AjX+' +lon_0=156 +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 156E',Cla,BUd,BUX,BpR,BUf,BUc,BUT,CVy,[B,K,'2746']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_156E',Cby,BUd,BUX,BpR,BUf,BUc,BUT,BUa]]],['2745',BGK+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 153E',Cla,BUd,BUX,BYu,BUf,BUc,BUT,CVy,[B,K,'2745']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_153E',Cby,BUd,BUX,BYu,BUf,BUc,BUT,BUa]]],['2744',BNQ+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 150E',Cla,BUd,BUX,Beg,BUf,BUc,BUT,CVy,[B,K,'2744']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_150E',Cby,BUd,BUX,Beg,BUf,BUc,BUT,BUa]]],['2743',BGH+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 147E',Cla,BUd,BUX,BYW,BUf,BUc,BUT,CVy,[B,K,'2743']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_147E',Cby,BUd,BUX,BYW,BUf,BUc,BUT,BUa]]],['27429',AmJ+BP+iR+q+a,[[U,'Datum 73 / UTM zone 29N',CoO,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'27429']]],[[U,'Datum_73_UTM_zone_29N',CiU,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['2742',BJF+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 144E',Cla,BUd,BUX,Bnz,BUf,BUc,BUT,CVy,[B,K,'2742']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_144E',Cby,BUd,BUX,Bnz,BUf,BUc,BUT,BUa]]],['2741',Axl+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 141E',Cla,BUd,BUX,BYK,BUf,BUc,BUT,CVy,[B,K,'2741']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_141E',Cby,BUd,BUX,BYK,BUf,BUc,BUT,BUa]]],['2740',BJE+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 138E',Cla,BUd,BUX,Blh,BUf,BUc,BUT,CVy,[B,K,'2740']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_138E',Cby,BUd,BUX,Blh,BUf,BUc,BUT,BUa]]],['27398',Amx+' +lon_0=18.33333333333333 +k=1'+BSj,[[U,'NGO 1948'+lr+' / NGO zone VIII',CmL,BUd,BWq,[A,E,AQV],BUf,BUy,BUT,CVy,[B,K,'27398']]],[[U,'NGO_1948_Oslo_NGO_zone_VIII',CdO,BUd,BWq,[A,E,AQV],BUf,BUy,BUT,BUa]]],['27397',Amx+' +lon_0=14.16666666666667 +k=1'+BSj,[[U,'NGO 1948'+lr+' / NGO zone VII',CmL,BUd,BWq,[A,E,AQW],BUf,BUy,BUT,CVy,[B,K,'27397']]],[[U,'NGO_1948_Oslo_NGO_zone_VII',CdO,BUd,BWq,[A,E,AQW],BUf,BUy,BUT,BUa]]],['27396',Amx+' +lon_0=10.16666666666667 +k=1'+BSj,[[U,'NGO 1948'+lr+' / NGO zone VI',CmL,BUd,BWq,[A,E,NJ],BUf,BUy,BUT,CVy,[B,K,'27396']]],[[U,'NGO_1948_Oslo_NGO_zone_VI',CdO,BUd,BWq,[A,E,NJ],BUf,BUy,BUT,BUa]]],['27395',Amx+Aam+' +k=1'+BSj,[[U,'NGO 1948'+lr+' / NGO zone V',CmL,BUd,BWq,CHH,BUf,BUy,BUT,CVy,[B,K,'27395']]],[[U,'NGO_1948_Oslo_NGO_zone_V',CdO,BUd,BWq,CHH,BUf,BUy,BUT,BUa]]],['27394',Amx+' +lon_0=2.5 +k=1'+BSj,[[U,'NGO 1948'+lr+' / NGO zone IV',CmL,BUd,BWq,CPw,BUf,BUy,BUT,CVy,[B,K,'27394']]],[[U,'NGO_1948_Oslo_NGO_zone_IV',CdO,BUd,BWq,CPw,BUf,BUy,BUT,BUa]]],['27393',Amx+ci+' +k=1'+BSj,[[U,'NGO 1948'+lr+' / NGO zone III',CmL,BUd,BWq,BYA,BUf,BUy,BUT,CVy,[B,K,'27393']]],[[U,'NGO_1948_Oslo_NGO_zone_III',CdO,BUd,BWq,BYA,BUf,BUy,BUT,BUa]]],['27392',Amx+' +lon_0=-2.333333333333333 +k=1'+BSj,[[U,'NGO 1948'+lr+' / NGO zone II',CmL,BUd,BWq,[A,E,AKw],BUf,BUy,BUT,CVy,[B,K,'27392']]],[[U,'NGO_1948_Oslo_NGO_zone_II',CdO,BUd,BWq,[A,E,AKw],BUf,BUy,BUT,BUa]]],['27391',Amx+' +lon_0=-4.666666666666667 +k=1'+BSj,[[U,'NGO 1948'+lr+' / NGO zone I',CmL,BUd,BWq,[A,E,AKx],BUf,BUy,BUT,CVy,[B,K,'27391']]],[[U,'NGO_1948_Oslo_NGO_zone_I',CdO,BUd,BWq,[A,E,AKx],BUf,BUy,BUT,BUa]]],['2739',Ape+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 135E',Cla,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'2739']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_135E',Cby,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['2738',Asl+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 132E',Cla,BUd,BUX,BaU,BUf,BUc,BUT,CVy,[B,K,'2738']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_132E',Cby,BUd,BUX,BaU,BUf,BUc,BUT,BUa]]],['2737',AmP+HN+Dr+be+q+a,[[U,'Tete / UTM zone 37S',CoZ,BUd,BUX,BWn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2737']]],[[U,'Tete_UTM_zone_37S',CjV,BUd,BUX,BWn,BUg,BUc,BUo,BUa]]],['2736',AnF+HN+Dr+be+q+a,[[U,'Tete / UTM zone 36S',CoZ,BUd,BUX,BWg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2736']]],[[U,'Tete_UTM_zone_36S',CjV,BUd,BUX,BWg,BUg,BUc,BUo,BUa]]],['2735',Apd+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 129E',Cla,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'2735']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_129E',Cby,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['2734',Aty+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 126E',Cla,BUd,BUX,Bao,BUf,BUc,BUT,CVy,[B,K,'2734']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_126E',Cby,BUd,BUX,Bao,BUf,BUc,BUT,BUa]]],['2733',ApF+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 123E',Cla,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'2733']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_123E',Cby,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['2732',Atw+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 120E',Cla,BUd,BUX,BbG,BUf,BUc,BUT,CVy,[B,K,'2732']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_120E',Cby,BUd,BUX,BbG,BUf,BUc,BUT,BUa]]],['2731',ApE+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 117E',Cla,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'2731']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_117E',Cby,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['2730',Atu+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 114E',Cla,BUd,BUX,BZy,BUf,BUc,BUT,CVy,[B,K,'2730']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_114E',Cby,BUd,BUX,BZy,BUf,BUc,BUT,BUa]]],['27292',l+' +lat_0=-44 +lon_0=171.5 +k=1 +x_0=457199.2073080143 +y_0=457199.2073080143'+Akv+AQX+a,[[U,PF+' / South'+fA+op,Cll,BUd,BpU,CNt,BUf,BUc,BWE,CYm,BUj,BUm,[B,K,'27292']]],[[U,'NZGD49_South_Island_Grid',CcV,BUd,BpU,CNt,BUf,BUc,BWE,BvG]]],['27291',l+' +lat_0=-39 +lon_0=175.5 +k=1 +x_0=274319.5243848086 +y_0=365759.3658464114'+Akv+AQX+a,[[U,PF+' /'+QM+fA+op,Cll,BUd,[A,C,PC],CNs,BUf,BVl,Baa,CYm,BUj,BUm,[B,K,'27291']]],[[U,'NZGD49_North_Island_Grid',CcV,BUd,[A,C,PC],CNs,BUf,BVl,Baa,BvG]]],['2729',ApX+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 111E',Cla,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'2729']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_111E',Cby,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['2728',Ats+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 108E',Cla,BUd,BUX,Bbi,BUf,BUc,BUT,CVy,[B,K,'2728']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_108E',Cby,BUd,BUX,Bbi,BUf,BUc,BUT,BUa]]],['2727',ApW+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 105E',Cla,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'2727']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_105E',Cby,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['27260',Ame+Aka+AnP+a,[[U,PF+' / UTM zone 60S',Cll,BUd,BUX,BXo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'27260']]],[[U,'NZGD_1949_UTM_Zone_60S',CcV,BUd,BUX,BXo,BUg,BUc,BUo,BUa]]],['2726',Atq+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 102E',Cla,BUd,BUX,Ban,BUf,BUc,BUT,CVy,[B,K,'2726']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_102E',Cby,BUd,BUX,Ban,BUf,BUc,BUT,BUa]]],['27259',AoK+Aka+AnP+a,[[U,PF+' / UTM zone 59S',Cll,BUd,BUX,BXj,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'27259']]],[[U,'NZGD_1949_UTM_Zone_59S',CcV,BUd,BUX,BXj,BUg,BUc,BUo,BUa]]],['27258',BEk+AnP+a,[[U,PF+' / UTM zone 58S',Cll,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'27258']]],[[U,'NZGD_1949_UTM_Zone_58S',CcV,BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['2725',Apc+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 99E',Cla,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'2725']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_99E',Cby,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['2724',Ato+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 96E',Cla,BUd,BUX,BbF,BUf,BUc,BUT,CVy,[B,K,'2724']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_96E',Cby,BUd,BUX,BbF,BUf,BUc,BUT,BUa]]],['27232',l+' +lat_0=-46.60000961111111 +lon_0=168.342872 +k=1 +x_0=300002.66 +y_0=699999.58'+Aqu+a,[[U,PF+' / Bluff'+Zc,Cll,BUd,[A,C,AKy],[A,E,AjH],BUf,Byf,Bye,CVy,[B,K,'27232']]],[[U,'NZGD49_Bluff_Circuit',CcV,BUd,[A,C,AKy],[A,E,AjH],BUf,Byf,Bye,BUa]]],['27231',l+' +lat_0=-45.86151336111111 +lon_0=170.2825891111111'+AEu+BJS,[[U,PF+' /'+QM+' Taieri'+Zc,Cll,BUd,[A,C,AKz],[A,E,AQY],Bhe,BVl,BXe,CVy,[B,K,'27231']]],[[U,'NZGD49_North_Taieri_Circuit',CcV,BUd,[A,C,AKz],[A,E,AQY],Bhe,BVl,BXe,BUa]]],['27230',l+' +lat_0=-45.81619661111111 +lon_0=170.6285951666667 +k=1'+BJS,[[U,PF+' / Observation Point'+Zc,Cll,BUd,[A,C,ALA],[A,E,AQZ],BUf,BVl,BXe,CVy,[B,K,'27230']]],[[U,'NZGD49_Observation_Point_Circuit',CcV,BUd,[A,C,ALA],[A,E,AQZ],BUf,BVl,BXe,BUa]]],['2723',Apb+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 93E',Cla,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'2723']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_93E',Cby,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['27229',l+' +lat_0=-45.56372616666666 +lon_0=167.7388617777778 +k=1'+BJS,[[U,PF+' / Mount York'+Zc,Cll,BUd,[A,C,ALB],[A,E,AQa],BUf,BVl,BXe,CVy,[B,K,'27229']]],[[U,'NZGD49_Mount_York_Circuit',CcV,BUd,[A,C,ALB],[A,E,AQa],BUf,BVl,BXe,BUa]]],['27228',l+' +lat_0=-45.13290258333333 +lon_0=168.3986411944444 +k=1'+BJS,[[U,PF+' / Mount Nicholas'+Zc,Cll,BUd,[A,C,ALC],[A,E,AQb],BUf,BVl,BXe,CVy,[B,K,'27228']]],[[U,'NZGD49_Mount_Nicholas_Circuit',CcV,BUd,[A,C,ALC],[A,E,AQb],BUf,BVl,BXe,BUa]]],['27227',l+' +lat_0=-44.73526797222222 +lon_0=169.4677550833333 +k=1'+BJS,[[U,PF+' / Lindis Peak'+Zc,Cll,BUd,[A,C,ALD],[A,E,AQc],BUf,BVl,BXe,CVy,[B,K,'27227']]],[[U,'NZGD49_Lindis_Peak_Circuit',CcV,BUd,[A,C,ALD],[A,E,AQc],BUf,BVl,BXe,BUa]]],['27226',l+' +lat_0=-44.40222036111111 +lon_0=171.0572508333333 +k=1'+BJS,[[U,PF+' / Timaru'+Zc,Cll,BUd,[A,C,ALE],[A,E,AQd],BUf,BVl,BXe,CVy,[B,K,'27226']]],[[U,'NZGD49_Timaru_Circuit',CcV,BUd,[A,C,ALE],[A,E,AQd],BUf,BVl,BXe,BUa]]],['27225',l+' +lat_0=-43.74871155555556 +lon_0=171.3607484722222 +k=1'+BJS,[[U,PF+' / Gawler'+Zc,Cll,BUd,[A,C,ALF],[A,E,AQe],BUf,BVl,BXe,CVy,[B,K,'27225']]],[[U,'NZGD49_Gawler_Circuit',CcV,BUd,[A,C,ALF],[A,E,AQe],BUf,BVl,BXe,BUa]]],['27224',l+' +lat_0=-43.59063758333333 +lon_0=172.7271935833333 +k=1'+BJS,[[U,PF+' / Mount Pleasant'+Zc,Cll,BUd,[A,C,ALG],[A,E,AQf],BUf,BVl,BXe,CVy,[B,K,'27224']]],[[U,'NZGD49_Mount_Pleasant_Circuit',CcV,BUd,[A,C,ALG],[A,E,AQf],BUf,BVl,BXe,BUa]]],['27223',l+' +lat_0=-43.97780288888889 +lon_0=168.606267 +k=1'+BJS,[[U,PF+' / Jacksons Bay'+Zc,Cll,BUd,[A,C,ALH],[A,E,AjI],BUf,BVl,BXe,CVy,[B,K,'27223']]],[[U,'NZGD49_Jacksons_Bay_Circuit',CcV,BUd,[A,C,ALH],[A,E,AjI],BUf,BVl,BXe,BUa]]],['27222',l+' +lat_0=-43.11012813888889 +lon_0=170.2609258333333 +k=1'+BJS,[[U,PF+' / Okarito'+Zc,Cll,BUd,[A,C,ALI],[A,E,AQg],BUf,BVl,BXe,CVy,[B,K,'27222']]],[[U,'NZGD49_Okarito_Circuit',CcV,BUd,[A,C,ALI],[A,E,AQg],BUf,BVl,BXe,BUa]]],['27221',l+' +lat_0=-42.88632236111111 +lon_0=170.9799935 +k=1'+BJS,[[U,PF+' / Hokitika'+Zc,Cll,BUd,[A,C,ALJ],[A,E,AfP],BUf,BVl,BXe,CVy,[B,K,'27221']]],[[U,'NZGD49_Hokitika_Circuit',CcV,BUd,[A,C,ALJ],[A,E,AfP],BUf,BVl,BXe,BUa]]],['27220',l+' +lat_0=-41.54448666666666 +lon_0=173.8020741111111 +k=1'+BJS,[[U,PF+' / Marlborough'+Zc,Cll,BUd,[A,C,ALK],[A,E,AQh],BUf,BVl,BXe,CVy,[B,K,'27220']]],[[U,'NZGD49_Marlborough_Circuit',CcV,BUd,[A,C,ALK],[A,E,AQh],BUf,BVl,BXe,BUa]]],['2722',Asm+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 90E',Cla,BUd,BUX,BYP,BUf,BUc,BUT,CVy,[B,K,'2722']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_90E',Cby,BUd,BUX,BYP,BUf,BUc,BUT,BUa]]],['27219',l+' +lat_0=-42.68911658333333 +lon_0=173.0101333888889 +k=1'+BJS,[[U,PF+' / Amuri'+Zc,Cll,BUd,[A,C,ALL],[A,E,AQi],BUf,BVl,BXe,CVy,[B,K,'27219']]],[[U,'NZGD49_Amuri_Circuit',CcV,BUd,[A,C,ALL],[A,E,AQi],BUf,BVl,BXe,BUa]]],['27218',l+' +lat_0=-42.33369427777778 +lon_0=171.5497713055556 +k=1'+BJS,[[U,PF+' / Grey'+Zc,Cll,BUd,[A,C,ALM],[A,E,AQj],BUf,BVl,BXe,CVy,[B,K,'27218']]],[[U,'NZGD49_Grey_Circuit',CcV,BUd,[A,C,ALM],[A,E,AQj],BUf,BVl,BXe,BUa]]],['27217',l+' +lat_0=-41.81080286111111 +lon_0=171.5812600555556 +k=1'+BJS,[[U,PF+' / Buller'+Zc,Cll,BUd,[A,C,ALN],[A,E,AQk],BUf,BVl,BXe,CVy,[B,K,'27217']]],[[U,'NZGD49_Buller_Circuit',CcV,BUd,[A,C,ALN],[A,E,AQk],BUf,BVl,BXe,BUa]]],['27216',l+' +lat_0=-41.28991152777778 +lon_0=172.1090281944444 +k=1'+BJS,[[U,PF+' / Karamea'+Zc,Cll,BUd,[A,C,ALO],[A,E,AQl],BUf,BVl,BXe,CVy,[B,K,'27216']]],[[U,'NZGD49_Karamea_Circuit',CcV,BUd,[A,C,ALO],[A,E,AQl],BUf,BVl,BXe,BUa]]],['27215',l+' +lat_0=-41.27454472222222 +lon_0=173.2993168055555 +k=1'+BJS,[[U,PF+' / Nelson'+Zc,Cll,BUd,[A,C,ALP],[A,E,AQm],BUf,BVl,BXe,CVy,[B,K,'27215']]],[[U,'NZGD49_Nelson_Circuit',CcV,BUd,[A,C,ALP],[A,E,AQm],BUf,BVl,BXe,BUa]]],['27214',l+' +lat_0=-40.71475905555556 +lon_0=172.6720465 +k=1'+BJS,[[U,PF+' / Collingwood'+Zc,Cll,BUd,[A,C,ALQ],[A,E,AfQ],BUf,BVl,BXe,CVy,[B,K,'27214']]],[[U,'NZGD49_Collingwood_Circuit',CcV,BUd,[A,C,ALQ],[A,E,AfQ],BUf,BVl,BXe,BUa]]],['27213',l+' +lat_0=-41.30131963888888 +lon_0=174.7766231111111 +k=1'+BJS,[[U,PF+' / Wellington'+Zc,Cll,BUd,[A,C,ALR],[A,E,AQn],BUf,BVl,BXe,CVy,[B,K,'27213']]],[[U,'NZGD49_Wellington_Circuit',CcV,BUd,[A,C,ALR],[A,E,AQn],BUf,BVl,BXe,BUa]]],['27212',l+' +lat_0=-40.92553263888889 +lon_0=175.6473496666667 +k=1'+BJS,[[U,PF+' / Wairarapa'+Zc,Cll,BUd,[A,C,ALS],[A,E,AQo],BUf,BVl,BXe,CVy,[B,K,'27212']]],[[U,'NZGD49_Wairarapa_Circuit',CcV,BUd,[A,C,ALS],[A,E,AQo],BUf,BVl,BXe,BUa]]],['27211',l+' +lat_0=-40.24194713888889 +lon_0=175.4880996111111 +k=1'+BJS,[[U,PF+' / Wanganui'+Zc,Cll,BUd,[A,C,ALT],[A,E,AQp],BUf,BVl,BXe,CVy,[B,K,'27211']]],[[U,'NZGD49_Wanganui_Circuit',CcV,BUd,[A,C,ALT],[A,E,AQp],BUf,BVl,BXe,BUa]]],['27210',l+' +lat_0=-39.51247038888889 +lon_0=175.6400368055556 +k=1'+BJS,[[U,PF+' / Tuhirangi'+Zc,Cll,BUd,[A,C,ALU],[A,E,AQq],BUf,BVl,BXe,CVy,[B,K,'27210']]],[[U,'NZGD49_Tuhirangi_Circuit',CcV,BUd,[A,C,ALU],[A,E,AQq],BUf,BVl,BXe,BUa]]],['2721',Apa+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 87E',Cla,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'2721']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_87E',Cby,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['27209',l+' +lat_0=-39.13575830555556 +lon_0=174.22801175 +k=1'+BJS,[[U,PF+' / Taranaki'+Zc,Cll,BUd,[A,C,ALV],[A,E,Abl],BUf,BVl,BXe,CVy,[B,K,'27209']]],[[U,'NZGD49_Taranaki_Circuit',CcV,BUd,[A,C,ALV],[A,E,Abl],BUf,BVl,BXe,BUa]]],['27208',l+' +lat_0=-39.65092930555556 +lon_0=176.6736805277778 +k=1'+BJS,[[U,PF+' / Hawkes Bay'+Zc,Cll,BUd,[A,C,ALW],[A,E,AQr],BUf,BVl,BXe,CVy,[B,K,'27208']]],[[U,'NZGD49_Hawkes_Bay_Circuit',CcV,BUd,[A,C,ALW],[A,E,AQr],BUf,BVl,BXe,BUa]]],['27207',l+' +lat_0=-38.62470277777778 +lon_0=177.8856362777778 +k=1'+BJS,[[U,PF+' / Poverty Bay'+Zc,Cll,BUd,[A,C,ALX],[A,E,AQs],BUf,BVl,BXe,CVy,[B,K,'27207']]],[[U,'NZGD49_Poverty_Bay_Circuit',CcV,BUd,[A,C,ALX],[A,E,AQs],BUf,BVl,BXe,BUa]]],['27206',l+' +lat_0=-37.76124980555556 +lon_0=176.46619725 +k=1'+BJS,[[U,PF+' / Bay of Plenty'+Zc,Cll,BUd,[A,C,ALY],[A,E,Abm],BUf,BVl,BXe,CVy,[B,K,'27206']]],[[U,'NZGD49_Bay_of_Plenty_Circuit',CcV,BUd,[A,C,ALY],[A,E,Abm],BUf,BVl,BXe,BUa]]],['27205',l+' +lat_0=-36.87986527777778 +lon_0=174.7643393611111'+BDg+AlP+AnP+a,[[U,PF+' / Mount Eden'+Zc,Cll,BUd,[A,C,ALZ],[A,E,AQt],BUt,BVl,BXe,CVy,[B,K,'27205']]],[[U,'NZGD49_Mount_Eden_Circuit',CcV,BUd,[A,C,ALZ],[A,E,AQt],BUt,BVl,BXe,BUa]]],['2720',Atm+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 84E',Cla,BUd,BUX,Bbh,BUf,BUc,BUT,CVy,[B,K,'2720']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_84E',Cby,BUd,BUX,Bbh,BUf,BUc,BUT,BUa]]],['2719',ApZ+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 81E',Cla,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'2719']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_81E',Cby,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['2718',Atk+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 78E',Cla,BUd,BUX,Bam,BUf,BUc,BUT,CVy,[B,K,'2718']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_78E',Cby,BUd,BUX,Bam,BUf,BUc,BUT,BUa]]],['2717',ApY+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 75E',Cla,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'2717']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_75E',Cby,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['2716',AjX+' +lon_0=72 +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 72E',Cla,BUd,BUX,Bny,BUf,BUc,BUT,CVy,[B,K,'2716']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_72E',Cby,BUd,BUX,Bny,BUf,BUc,BUT,BUa]]],['2715',Axi+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 69E',Cla,BUd,BUX,BZh,BUf,BUc,BUT,CVy,[B,K,'2715']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_69E',Cby,BUd,BUX,BZh,BUf,BUc,BUT,BUa]]],['2714',BJD+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 66E',Cla,BUd,BUX,Blg,BUf,BUc,BUT,CVy,[B,K,'2714']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_66E',Cby,BUd,BUX,Blg,BUf,BUc,BUT,BUa]]],['2713',Axf+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 63E',Cla,BUd,BUX,BZN,BUf,BUc,BUT,CVy,[B,K,'2713']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_63E',Cby,BUd,BUX,BZN,BUf,BUc,BUT,BUa]]],['27120',BIT+ANp+q+a,[[U,AJu+' 1972 / UTM zone 20N',CrQ,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'27120']]],[[U,'Naparima_1972_UTM_zone_20N',[S,'GCS_Naparima 1972',[V,Adr,BUs],BUU,BUW],BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2712',AjX+' +lon_0=60 +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 60E',Cla,BUd,BUX,BrN,BUf,BUc,BUT,CVy,[B,K,'2712']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_60E',Cby,BUd,BUX,BrN,BUf,BUc,BUT,BUa]]],['2711',Axc+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 57E',Cla,BUd,BUX,BXz,BUf,BUc,BUT,CVy,[B,K,'2711']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_57E',Cby,BUd,BUX,BXz,BUf,BUc,BUT,BUa]]],['2710',BJC+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 54E',Cla,BUd,BUX,BkW,BUf,BUc,BUT,CVy,[B,K,'2710']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_54E',Cby,BUd,BUX,BkW,BUf,BUc,BUT,BUa]]],['2709',AuF+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 51E',Cla,BUd,BUX,BWt,BUf,BUc,BUT,CVy,[B,K,'2709']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_51E',Cby,BUd,BUX,BWt,BUf,BUc,BUT,BUa]]],['2708',BHm+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 48E',Cla,BUd,BUX,BkL,BUf,BUc,BUT,CVy,[B,K,'2708']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_48E',Cby,BUd,BUX,BkL,BUf,BUc,BUT,BUa]]],['2707',AtF+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 45E',Cla,BUd,BUX,BWe,BUf,BUc,BUT,CVy,[B,K,'2707']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_45E',Cby,BUd,BUX,BWe,BUf,BUc,BUT,BUa]]],['2706',AyC+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 42E',Cla,BUd,BUX,BdJ,BUf,BUc,BUT,CVy,[B,K,'2706']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_42E',Cby,BUd,BUX,BdJ,BUf,BUc,BUT,BUa]]],['2705',AsG+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 39E',Cla,BUd,BUX,BWn,BUf,BUc,BUT,CVy,[B,K,'2705']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_39E',Cby,BUd,BUX,BWn,BUf,BUc,BUT,BUa]]],['27040',AnK+Cw+TB+q+a,[[U,ASs+' 1967 / UTM zone 40N',CoJ,BUd,BUX,BXz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'27040']]],[[U,'Nahrwan_1967_UTM_zone_40N',Chh,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['2704',AtL+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 36E',Cla,BUd,BUX,BdS,BUf,BUc,BUT,CVy,[B,K,'2704']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_36E',Cby,BUd,BUX,BdS,BUf,BUc,BUT,BUa]]],['27039',BNW+TB+q+a,[[U,ASs+' 1967 / UTM zone 39N',CoJ,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'27039']]],[[U,'Nahrwan_1967_UTM_zone_39N',Chh,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['2703',Aqn+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 33E',Cla,BUd,BUX,BWg,BUf,BUc,BUT,CVy,[B,K,'2703']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_33E',Cby,BUd,BUX,BWg,BUf,BUc,BUT,BUa]]],['2702',ArX+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 30E',Cla,BUd,BUX,BYz,BUf,BUc,BUT,CVy,[B,K,'2702']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_30E',Cby,BUd,BUX,BYz,BUf,BUc,BUT,BUa]]],['2701',Apz+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 27E',Cla,BUd,BUX,BWP,BUf,BUc,BUT,CVy,[B,K,'2701']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_27E',Cby,BUd,BUX,BWP,BUf,BUc,BUT,BUa]]],['2700',ArK+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 24E',Cla,BUd,BUX,BYU,BUf,BUc,BUT,CVy,[B,K,'2700']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_24E',Cby,BUd,BUX,BYU,BUf,BUc,BUT,BUa]]],['26998',l+BLc+BRq,[[U,Bx+' /'+AMH+' West',ClV,BUd,Bof,Boe,BWj,BsO,BUT,CVy,BUl,BUk,[B,K,'26998']]],[[U,'NAD83_Missouri_West',Cbn,BUd,Bof,Boe,BWj,BsO,BUT,BUa]]],['26997',BQj+j+c+q+a,[[U,Bx+' /'+BEl,ClV,BUd,BdY,Bas,BWx,BUc,BUT,CVy,BUl,BUk,[B,K,'26997']]],[[U,'NAD83_Missouri_Central',Cbn,BUd,BdY,Bas,BWx,BUc,BUT,BUa]]],['26996',BQk+c+q+a,[[U,Bx+' /'+AMH+' East',ClV,BUd,BdY,Bod,BWx,BWp,BUT,CVy,BUl,BUk,[B,K,'26996']]],[[U,'NAD83_Missouri_East',Cbn,BUd,BdY,Bod,BWx,BWp,BUT,BUa]]],['26995',BQi+c+q+a,[[U,Bx+' /'+cu+' West',ClV,BUd,BaC,BcU,BWh,BWl,BUT,CVy,BUl,BUk,[B,K,'26995']]],[[U,'NAD83_Mississippi_West',Cbn,BUd,BaC,BcU,BWh,BWl,BUT,BUa]]],['26994',BQg+c+q+a,[[U,Bx+' /'+cu+' East',ClV,BUd,BaC,Bfs,BWh,BVl,BUT,CVy,BUl,BUk,[B,K,'26994']]],[[U,'NAD83_Mississippi_East',Cbn,BUd,BaC,Bfs,BWh,BVl,BUT,BUa]]],['26993',BQe+j+c+q+a,[[U,Bx+' /'+fs+' South',ClV,BVG,BiL,BiK,BcA,BdW,BXP,BXV,CVy,BUl,BUk,[B,K,'26993']]],[[U,'NAD83_Minnesota_South',Cbn,BVD,BiL,BiK,BcA,BdW,BXP,BXV,BUa]]],['26992',BQa+j+c+q+a,[[U,Bx+' /'+BBX,ClV,BVG,BiH,BiG,BZE,Bfq,BXP,BXV,CVy,BUl,BUk,[B,K,'26992']]],[[U,'NAD83_Minnesota_Central',Cbn,BVD,BiH,BiG,BZE,Bfq,BXP,BXV,BUa]]],['26991',BQc+j+c+q+a,[[U,Bx+' /'+BBY,ClV,BVG,BiJ,BiI,BbU,Bfr,BXP,BXV,CVy,BUl,BUk,[B,K,'26991']]],[[U,'NAD83_Minnesota_North',Cbn,BVD,BiJ,BiI,BbU,Bfr,BXP,BXV,BUa]]],['26990',BTM+c+q+a,[[U,Bx+' /'+iV+' South',ClV,BVG,Bdh,BiF,BYb,BaB,Bfp,BUT,CVy,BUl,BUk,[B,K,'26990']]],[[U,'NAD83_Michigan_South',Cbn,BVD,Bdh,BiF,BYb,BaB,Bfp,BUT,BUa]]],['2699',ApT+' +k=1'+BEY,[[U,Ajf+' /'+Ajc+' CM 21E',Cla,BUd,BUX,BWR,BUf,BUc,BUT,CVy,[B,K,'2699']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_CM_21E',Cby,BUd,BUX,BWR,BUf,BUc,BUT,BUa]]],['26989',BQX+c+q+a,[[U,Bx+' /'+BDF,ClV,BVG,BiB,BiA,Bhz,BaB,Bly,BUT,CVy,BUl,BUk,[B,K,'26989']]],[[U,'NAD83_Michigan_Central',Cbn,BVD,BiB,BiA,Bhz,BaB,Bly,BUT,BUa]]],['26988',BQY+c+q+a,[[U,Bx+' /'+BDG,ClV,BVG,BiE,BiD,BiC,BXS,BsH,BUT,CVy,BUl,BUk,[B,K,'26988']]],[[U,'NAD83_Michigan_North',Cbn,BVD,BiE,BiD,BiC,BXS,BsH,BUT,BUa]]],['26987',BQV+j+c+q+a,[[U,Bx+' /'+BBW,ClV,BVG,Bhx,Bhw,BZM,BbL,BUc,BUT,CVy,BUl,BUk,[B,K,'26987']]],[[U,'NAD83_Massachusetts_Island',Cbn,BVD,Bhx,Bhw,BZM,BbL,BUc,BUT,BUa]]],['26986',BUQ+j+c+q+a,[[U,Bx+' /'+ArD,ClV,BVG,Bhy,Bfo,BZM,BZc,BVP,Boc,CVy,BUl,BUk,[B,K,'26986']]],[[U,'NAD83_Massachusetts_Mainland',Cbn,BVD,Bhy,Bfo,BZM,BZc,BVP,Boc,BUa]]],['26985',BQU+j+c+q+a,[[U,Bx+' /'+ASw,ClV,BVG,Bhv,Bhu,BXq,Bbs,BVh,BUT,CVy,BUl,BUk,[B,K,'26985']]],[[U,'NAD83_Maryland',Cbn,BVD,Bhv,Bhu,BXq,Bbs,BVh,BUT,BUa]]],['26984',BGm+c+q+a,[[U,Bx+' / Maine West',ClV,BUd,BZt,Bfn,BWN,BdV,BUT,CVy,BUl,BUk,[B,K,'26984']]],[[U,'NAD83_Maine_West',Cbn,BUd,BZt,Bfn,BWN,BdV,BUT,BUa]]],['26983',BKn+c+q+a,[[U,Bx+' / Maine East',ClV,BUd,BYN,Bau,BUt,BVl,BUT,CVy,BUl,BUk,[B,K,'26983']]],[[U,'NAD83_Maine_East',Cbn,BUd,BYN,Bau,BUt,BVl,BUT,BUa]]],['26982',BQP+j+c+q+a,[[U,Bx+' /'+kJ+' South',ClV,BVG,Bhs,Bhr,Bhq,Bbr,BWa,BUT,CVy,BUl,BUk,[B,K,'26982']]],[[U,'NAD83_Louisiana_South',Cbn,BVD,Bhs,Bhr,Bhq,Bbr,BWa,BUT,BUa]]],['26981',BQN+j+c+q+a,[[U,Bx+' /'+BBU,ClV,BVG,Bhp,Bho,Bar,Bas,BWa,BUT,CVy,BUl,BUk,[B,K,'26981']]],[[U,'NAD83_Louisiana_North',Cbn,BVD,Bhp,Bho,Bar,Bas,BWa,BUT,BUa]]],['26980',BQM+j+c+q+a,[[U,Bx+' /'+or+' South',ClV,BVG,Bhn,Bhm,BXr,BZZ,BUc,BWE,CVy,BUl,BUk,[B,K,'26980']]],[[U,'NAD83_Kentucky_South',Cbn,BVD,Bhn,Bhm,BXr,BZZ,BUc,BWE,BUa]]],['2698',BJK+' +k=1 +x_0=64500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 64',Cla,BUd,BUX,Bnx,BUf,Byd,BUT,CVy,[B,K,'2698']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_64',Cby,BUd,BUX,Bnx,BUf,Byd,BUT,BUa]]],['26978',BQG+j+c+q+a,[[U,Bx+' / Kansas South',ClV,BVG,Bfj,Bfi,BWJ,BXp,BVh,Baa,CVy,BUl,BUk,[B,K,'26978']]],[[U,'NAD83_Kansas_South',Cbn,BVD,Bfj,Bfi,BWJ,BXp,BVh,Baa,BUa]]],['26977',BQE+j+c+q+a,[[U,Bx+' / Kansas'+QM,ClV,BVG,Bfh,Bfg,BYl,BXh,BVh,BUT,CVy,BUl,BUk,[B,K,'26977']]],[[U,'NAD83_Kansas_North',Cbn,BVD,Bfh,Bfg,BYl,BXh,BVh,BUT,BUa]]],['26976',BQC+j+c+q+a,[[U,Bx+' / Iowa South',ClV,BVG,BZD,Bff,BXM,BZY,BUc,BUT,CVy,BUl,BUk,[B,K,'26976']]],[[U,'NAD83_Iowa_South',Cbn,BVD,BZD,Bff,BXM,BZY,BUc,BUT,BUa]]],['26975',BQA+c+q+a,[[U,Bx+' / Iowa'+QM,ClV,BVG,Bfe,Bfd,BYb,BZY,BWL,BVg,CVy,BUl,BUk,[B,K,'26975']]],[[U,'NAD83_Iowa_North',Cbn,BVD,Bfe,Bfd,BYb,BZY,BWL,BVg,BUa]]],['26974',BTe+j+c+q+a,[[U,Bx+' / Indiana West',ClV,BUd,BXf,Bfc,BWN,BdV,Bch,CVy,BUl,BUk,[B,K,'26974']]],[[U,'NAD83_Indiana_West',Cbn,BUd,BXf,Bfc,BWN,BdV,Bch,BUa]]],['26973',BTd+j+c+q+a,[[U,Bx+' / Indiana East',ClV,BUd,BXf,Bfb,BWN,BWV,Bch,CVy,BUl,BUk,[B,K,'26973']]],[[U,'NAD83_Indiana_East',Cbn,BUd,BXf,Bfb,BWN,BWV,Bch,BUa]]],['26972',BPh+c+q+a,[[U,Bx+' /'+AGh+' West',ClV,BUd,BWJ,Bfa,BWj,BWl,BUT,CVy,BUl,BUk,[B,K,'26972']]],[[U,'NAD83_Illinois_West',Cbn,BUd,BWJ,Bfa,BWj,BWl,BUT,BUa]]],['26971',BPe+c+q+a,[[U,Bx+' /'+AGh+' East',ClV,BUd,BWJ,BfZ,BdU,BVl,BUT,CVy,BUl,BUk,[B,K,'26971']]],[[U,'NAD83_Illinois_East',Cbn,BUd,BWJ,BfZ,BdU,BVl,BUT,BUa]]],['26970',BPa+c+q+a,[[U,Bx+' / Idaho West',ClV,BUd,BWi,BfY,BWx,BXP,BUT,CVy,BUl,BUk,[B,K,'26970']]],[[U,'NAD83_Idaho_West',Cbn,BUd,BWi,BfY,BWx,BXP,BUT,BUa]]],['2697',BEV+' +k=1 +x_0=63500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 63',Cla,BUd,BUX,BYV,BUf,Byc,BUT,CVy,[B,K,'2697']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_63',Cby,BUd,BUX,BYV,BUf,Byc,BUT,BUa]]],['26969',BPR+c+q+a,[[U,Bx+' / Idaho'+Gh,ClV,BUd,BWi,Bbq,BZX,BUc,BUT,CVy,BUl,BUk,[B,K,'26969']]],[[U,'NAD83_Idaho_Central',Cbn,BUd,BWi,Bbq,BZX,BUc,BUT,BUa]]],['26968',BPY+c+q+a,[[U,Bx+' / Idaho East',ClV,BUd,BWi,BfX,BZX,BVP,BUT,CVy,BUl,BUk,[B,K,'26968']]],[[U,'NAD83_Idaho_East',Cbn,BUd,BWi,BfX,BZX,BVP,BUT,BUa]]],['26967',BPI+c+q+a,[[U,Bx+' /'+Abp+' West',ClV,BUd,BXX,BfW,BUt,BWl,BUT,CVy,BUl,BUk,[B,K,'26967']]],[[U,'NAD83_Georgia_West',Cbn,BUd,BXX,BfW,BUt,BWl,BUT,BUa]]],['26966',BPE+c+q+a,[[U,Bx+' /'+Abp+' East',ClV,BUd,BXX,BfV,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'26966']]],[[U,'NAD83_Georgia_East',Cbn,BUd,BXX,BfV,BUt,BVP,BUT,BUa]]],['26965',l+pG+oC+' +k=1'+BSv,[[U,Bx+' / Hawaii zone 5',ClV,BUd,Bsn,Bsm,BUf,BUc,BUT,CVy,BUl,BUk,[B,K,'26965']]],[[U,'NAD83_Hawaii_zone_5',Cbn,BUd,Bsn,Bsm,BUf,BUc,BUT,BUa]]],['26964',l+BFo+BHO+c+q+a,[[U,Bx+' / Hawaii zone 4',ClV,BUd,Bsl,Bsk,Bav,BUc,BUT,CVy,BUl,BUk,[B,K,'26964']]],[[U,'NAD83_Hawaii_zone_4',Cbn,BUd,Bsl,Bsk,Bav,BUc,BUT,BUa]]],['26963',BMV+BHO+c+q+a,[[U,Bx+' / Hawaii zone 3',ClV,BUd,Bkf,Bce,Bav,BUc,BUT,CVy,BUl,BUk,[B,K,'26963']]],[[U,'NAD83_Hawaii_zone_3',Cbn,BUd,Bkf,Bce,Bav,BUc,BUT,BUa]]],['26962',l+pI+oD+BHN+c+q+a,[[U,Bx+' / Hawaii zone 2',ClV,BUd,Bsj,Bsi,BWN,BUc,BUT,CVy,BUl,BUk,[B,K,'26962']]],[[U,'NAD83_Hawaii_zone_2',Cbn,BUd,Bsj,Bsi,BWN,BUc,BUT,BUa]]],['26961',l+BFm+BHN+c+q+a,[[U,Bx+' / Hawaii zone 1',ClV,BUd,Bsh,Bsg,BWN,BUc,BUT,CVy,BUl,BUk,[B,K,'26961']]],[[U,'NAD83_Hawaii_zone_1',Cbn,BUd,Bsh,Bsg,BWN,BUc,BUT,BUa]]],['26960',BFH+c+q+a,[[U,Bx+' /'+BBS,ClV,BVG,BfT,BfS,BfR,BfQ,BVY,BUT,CVy,BUl,BUk,[B,K,'26960']]],[[U,'NAD83_Florida_North',Cbn,BVD,BfT,BfS,BfR,BfQ,BVY,BUT,BUa]]],['2696',BJJ+' +k=1 +x_0=62500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 62',Cla,BUd,BUX,Bnt,BUf,Byb,BUT,CVy,[B,K,'2696']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_62',Cby,BUd,BUX,Bnt,BUf,Byb,BUT,BUa]]],['26959',BPC+c+q+a,[[U,Bx+' /'+tm+' West',ClV,BUd,BZW,BfU,BWj,BVP,BUT,CVy,BUl,BUk,[B,K,'26959']]],[[U,'NAD83_Florida_West',Cbn,BUd,BZW,BfU,BWj,BVP,BUT,BUa]]],['26958',BPA+c+q+a,[[U,Bx+' /'+tm+' East',ClV,BUd,BZW,BVm,BWj,BVP,BUT,CVy,BUl,BUk,[B,K,'26958']]],[[U,'NAD83_Florida_East',Cbn,BUd,BZW,BVm,BWj,BVP,BUT,BUa]]],['26957',BOy+c+q+a,[[U,Bx+' /'+ASx,ClV,BUd,BWT,BfP,BfO,BVP,BUT,CVy,BUl,BUk,[B,K,'26957']]],[[U,'NAD83_Delaware',Cbn,BUd,BWT,BfP,BfO,BVP,BUT,BUa]]],['26956',BOv+j+c+q+a,[[U,Bx+' /'+wI,ClV,BVG,BfN,BfM,BfL,BfK,Bru,Brt,CVy,BUl,BUk,[B,K,'26956']]],[[U,'NAD83_Connecticut',Cbn,BVD,BfN,BfM,BfL,BfK,Bru,Brt,BUa]]],['26955',BOt+c+q+a,[[U,Bx+' /'+nG+' South',ClV,BVG,BZV,BfJ,BWJ,BXR,Bbp,Bbo,CVy,BUl,BUk,[B,K,'26955']]],[[U,'NAD83_Colorado_South',Cbn,BVD,BZV,BfJ,BWJ,BXR,Bbp,Bbo,BUa]]],['26954',BOU+c+q+a,[[U,Bx+' /'+BBQ,ClV,BVG,BfI,BfH,BdT,BXR,Bbp,Bbo,CVy,BUl,BUk,[B,K,'26954']]],[[U,'NAD83_Colorado_Central',Cbn,BVD,BfI,BfH,BdT,BXR,Bbp,Bbo,BUa]]],['26953',BOd+c+q+a,[[U,Bx+' /'+BBR,ClV,BVG,Bhg,Bhf,BXi,BXR,Bbp,Bbo,CVy,BUl,BUk,[B,K,'26953']]],[[U,'NAD83_Colorado_North',Cbn,BVD,Bhg,Bhf,BXi,BXR,Bbp,Bbo,BUa]]],['26952',BMb+j+c+q+a,[[U,Bx+' /'+AGi+' South',ClV,BVG,Beq,Bep,Beo,BZT,BVh,Baa,CVy,BUl,BUk,[B,K,'26952']]],[[U,'NAD83_Arkansas_South',Cbn,BVD,Beq,Bep,Beo,BZT,BVh,Baa,BUa]]],['26951',BMU+c+q+a,[[U,Bx+' /'+ArC,ClV,BVG,Ben,Bem,BZq,BZT,BVh,BUT,CVy,BUl,BUk,[B,K,'26951']]],[[U,'NAD83_Arkansas_North',Cbn,BVD,Ben,Bem,BZq,BZT,BVh,BUT,BUa]]],['26950',BGk+c+q+a,[[U,Bx+' /'+yH+' West',ClV,BUd,BWA,Bel,BWx,Bbn,BUT,CVy,BUl,BUk,[B,K,'26950']]],[[U,'NAD83_Arizona_West',Cbn,BUd,BWA,Bel,BWx,Bbn,BUT,BUa]]],['2695',AxL+' +k=1 +x_0=61500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 61',Cla,BUd,BUX,BYF,BUf,Bya,BUT,CVy,[B,K,'2695']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_61',Cby,BUd,BUX,BYF,BUf,Bya,BUT,BUa]]],['26949',BGi+c+q+a,[[U,Bx+' /'+BBP,ClV,BUd,BWA,Bej,BUt,Bbn,BUT,CVy,BUl,BUk,[B,K,'26949']]],[[U,'NAD83_Arizona_Central',Cbn,BUd,BWA,Bej,BUt,Bbn,BUT,BUa]]],['26948',BGj+c+q+a,[[U,Bx+' /'+yH+' East',ClV,BUd,BWA,Bek,BUt,Bbn,BUT,CVy,BUl,BUk,[B,K,'26948']]],[[U,'NAD83_Arizona_East',Cbn,BUd,BWA,Bek,BUt,Bbn,BUT,BUa]]],['26946',BOE+j+c+q+a,[[U,Bx+' /'+OB+' zone 6',ClV,BVG,BfG,BfF,BfE,BfD,BVW,BWE,CVy,BUl,BUk,[B,K,'26946']]],[[U,'NAD83_California_zone_6',Cbn,BVD,BfG,BfF,BfE,BfD,BVW,BWE,BUa]]],['26945',BOC+j+c+q+a,[[U,Bx+' /'+OB+' zone 5',ClV,BVG,BfC,BfB,BfA,BbN,BVW,BWE,CVy,BUl,BUk,[B,K,'26945']]],[[U,'NAD83_California_zone_5',Cbn,BVD,BfC,BfB,BfA,BbN,BVW,BWE,BUa]]],['26944',BNg+j+c+q+a,[[U,Bx+' /'+OB+' zone 4',ClV,BVG,Bez,Bey,Bex,Bew,BVW,BWE,CVy,BUl,BUk,[B,K,'26944']]],[[U,'NAD83_California_zone_4',Cbn,BVD,Bez,Bey,Bex,Bew,BVW,BWE,BUa]]],['26943',BNT+j+c+q+a,[[U,Bx+' /'+OB+' zone 3',ClV,BVG,BZV,Bev,Beu,BWB,BVW,BWE,CVy,BUl,BUk,[B,K,'26943']]],[[U,'NAD83_California_zone_3',Cbn,BVD,BZV,Bev,Beu,BWB,BVW,BWE,BUa]]],['26942',BMz+c+q+a,[[U,Bx+' /'+OB+' zone 2',ClV,BVG,Bet,Bes,BXq,BZU,BVW,BWE,CVy,BUl,BUk,[B,K,'26942']]],[[U,'NAD83_California_zone_2',Cbn,BVD,Bet,Bes,BXq,BZU,BVW,BWE,BUa]]],['26941',BMn+c+q+a,[[U,Bx+' /'+OB+' zone 1',ClV,BVG,Ber,BZu,BXi,BZU,BVW,BWE,CVy,BUl,BUk,[B,K,'26941']]],[[U,'NAD83_California_zone_1',Cbn,BVD,Ber,BZu,BXi,BZU,BVW,BWE,BUa]]],['26940',BTH+BUE,[[U,Bx+' / Alaska zone 10',ClV,BVG,Brs,Brr,Blx,Brq,BWa,BUT,CVy,BUl,BUk,[B,K,'26940']]],[[U,'NAD83_Alaska_zone_10',Cbn,BVD,Brs,Brr,Blx,Brq,BWa,BUT,BUa]]],['26939',BKV+BSv,[[U,Bx+' / Alaska zone 9',ClV,BUd,BXL,BoY,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'26939']]],[[U,'NAD83_Alaska_zone_9',Cbn,BUd,BXL,BoY,BUt,BUc,BUT,BUa]]],['26938',BKU+BSv,[[U,Bx+' / Alaska zone 8',ClV,BUd,BXL,Brp,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'26938']]],[[U,'NAD83_Alaska_zone_8',Cbn,BUd,BXL,Brp,BUt,BUc,BUT,BUa]]],['26937',BKT+BSv,[[U,Bx+' / Alaska zone 7',ClV,BUd,BXL,Bro,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'26937']]],[[U,'NAD83_Alaska_zone_7',Cbn,BUd,BXL,Bro,BUt,BUc,BUT,BUa]]],['26936',BNm+BUC,[[U,Bx+' / Alaska zone 6',ClV,BUd,BXL,Bce,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'26936']]],[[U,'NAD83_Alaska_zone_6',Cbn,BUd,BXL,Bce,BUt,BUc,BUT,BUa]]],['26935',BNl+BUC,[[U,Bx+' / Alaska zone 5',ClV,BUd,BXL,Bka,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'26935']]],[[U,'NAD83_Alaska_zone_5',Cbn,BUd,BXL,Bka,BUt,BUc,BUT,BUa]]],['26934',BNk+BUC,[[U,Bx+' / Alaska zone 4',ClV,BUd,BXL,BkA,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'26934']]],[[U,'NAD83_Alaska_zone_4',Cbn,BUd,BXL,BkA,BUt,BUc,BUT,BUa]]],['26933',BKS+BSv,[[U,Bx+' / Alaska zone 3',ClV,BUd,BXL,Brn,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'26933']]],[[U,'NAD83_Alaska_zone_3',Cbn,BUd,BXL,Brn,BUt,BUc,BUT,BUa]]],['26932',BKR+BSv,[[U,Bx+' / Alaska zone 2',ClV,BUd,BXL,Brm,BUt,BUc,BUT,CVy,BUl,BUk,[B,K,'26932']]],[[U,'NAD83_Alaska_zone_2',Cbn,BUd,BXL,Brm,BUt,BUc,BUT,BUa]]],['26931',Qw+' +lat_0=57'+pN+pO+CB+pl+UZ+BBw+j+c+q+a,[[U,Bx+' / Alaska zone 1',ClV,BlD,Bpa,BpZ,BpY,BqI,BUt,Bei,BZJ,CVy,BUl,BUk,[B,K,'26931']]],[[U,'NAD83_Alaska_zone_1',Cbn,BlC,Bpa,BpZ,BpY,BUt,Bei,BZJ,BUa]]],['26930',BMF+j+c+q+a,[[U,Bx+' / Alabama West',ClV,BUd,BXX,Bkh,BWx,BVY,BUT,CVy,BUl,BUk,[B,K,'26930']]],[[U,'NAD83_Alabama_West',Cbn,BUd,BXX,Bkh,BWx,BVY,BUT,BUa]]],['2693',BEU+' +k=1 +x_0=59500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 59',Cla,BUd,BUX,BXo,BUf,ByZ,BUT,CVy,[B,K,'2693']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_59',Cby,BUd,BUX,BXo,BUf,ByZ,BUT,BUa]]],['26929',l+BMD+c+q+a,[[U,Bx+' / Alabama East',ClV,BUd,Bar,BoX,Bhe,BVP,BUT,CVy,BUl,BUk,[B,K,'26929']]],[[U,'NAD83_Alabama_East',Cbn,BUd,Bar,BoX,Bhe,BVP,BUT,BUa]]],['26923',Amp+j+c+q+a,[[U,Bx+' / UTM zone 23N',ClV,BUd,BUX,BYg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26923']]],[[U,'NAD_1983_UTM_Zone_23N',Cbn,BUd,BUX,BYg,BUg,BUc,BUT,BUa]]],['26922',BUN,[[U,Bx+' / UTM zone 22N',ClV,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26922']]],[[U,'NAD_1983_UTM_Zone_22N',Cbn,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['26921',BUD,[[U,Bx+' / UTM zone 21N',ClV,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26921']]],[[U,'NAD_1983_UTM_Zone_21N',Cbn,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['26920',BUA,[[U,Bx+' / UTM zone 20N',ClV,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26920']]],[[U,'NAD_1983_UTM_Zone_20N',Cbn,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2692',BJI+' +k=1 +x_0=58500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 58',Cla,BUd,BUX,Bnw,BUf,ByY,BUT,CVy,[B,K,'2692']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_58',Cby,BUd,BUX,Bnw,BUf,ByY,BUT,BUa]]],['26919',BTz,[[U,Bx+' / UTM zone 19N',ClV,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26919']]],[[U,'NAD_1983_UTM_Zone_19N',Cbn,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['26918',BTy,[[U,Bx+' / UTM zone 18N',ClV,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26918']]],[[U,'NAD_1983_UTM_Zone_18N',Cbn,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['26917',BUM,[[U,Bx+' / UTM zone 17N',ClV,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26917']]],[[U,'NAD_1983_UTM_Zone_17N',Cbn,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['26916',BUK,[[U,Bx+' / UTM zone 16N',ClV,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26916']]],[[U,'NAD_1983_UTM_Zone_16N',Cbn,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['26915',BUJ,[[U,Bx+' / UTM zone 15N',ClV,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26915']]],[[U,'NAD_1983_UTM_Zone_15N',Cbn,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['26914',BUI,[[U,Bx+' / UTM zone 14N',ClV,BUd,BUX,BXU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26914']]],[[U,'NAD_1983_UTM_Zone_14N',Cbn,BUd,BUX,BXU,BUg,BUc,BUT,BUa]]],['26913',BUH,[[U,Bx+' / UTM zone 13N',ClV,BUd,BUX,BZS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26913']]],[[U,'NAD_1983_UTM_Zone_13N',Cbn,BUd,BUX,BZS,BUg,BUc,BUT,BUa]]],['26912',BUG,[[U,Bx+' / UTM zone 12N',ClV,BUd,BUX,BXs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26912']]],[[U,'NAD_1983_UTM_Zone_12N',Cbn,BUd,BUX,BXs,BUg,BUc,BUT,BUa]]],['26911',BUF,[[U,Bx+' / UTM zone 11N',ClV,BUd,BUX,BXx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26911']]],[[U,'NAD_1983_UTM_Zone_11N',Cbn,BUd,BUX,BXx,BUg,BUc,BUT,BUa]]],['26910',Amy+j+c+q+a,[[U,Bx+' / UTM zone 10N',ClV,BUd,BUX,Bap,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26910']]],[[U,'NAD_1983_UTM_Zone_10N',Cbn,BUd,BUX,Bap,BUg,BUc,BUT,BUa]]],['2691',AxI+' +k=1 +x_0=57500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 57',Cla,BUd,BUX,BXj,BUf,ByX,BUT,CVy,[B,K,'2691']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_57',Cby,BUd,BUX,BXj,BUf,ByX,BUT,BUa]]],['26909',AV+' +zone=9'+j+c+q+a,[[U,Bx+' / UTM zone 9N',ClV,BUd,BUX,BaA,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26909']]],[[U,'NAD_1983_UTM_Zone_9N',Cbn,BUd,BUX,BaA,BUg,BUc,BUT,BUa]]],['26908',AV+' +zone=8'+j+c+q+a,[[U,Bx+' / UTM zone 8N',ClV,BUd,BUX,BZz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26908']]],[[U,'NAD_1983_UTM_Zone_8N',Cbn,BUd,BUX,BZz,BUg,BUc,BUT,BUa]]],['26907',AV+' +zone=7'+j+c+q+a,[[U,Bx+' / UTM zone 7N',ClV,BUd,BUX,BZn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26907']]],[[U,'NAD_1983_UTM_Zone_7N',Cbn,BUd,BUX,BZn,BUg,BUc,BUT,BUa]]],['26906',AV+' +zone=6'+j+c+q+a,[[U,Bx+' / UTM zone 6N',ClV,BUd,BUX,BYy,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26906']]],[[U,'NAD_1983_UTM_Zone_6N',Cbn,BUd,BUX,BYy,BUg,BUc,BUT,BUa]]],['26905',AV+' +zone=5'+j+c+q+a,[[U,Bx+' / UTM zone 5N',ClV,BUd,BUX,BZK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26905']]],[[U,'NAD_1983_UTM_Zone_5N',Cbn,BUd,BUX,BZK,BUg,BUc,BUT,BUa]]],['26904',AV+' +zone=4'+j+c+q+a,[[U,Bx+' / UTM zone 4N',ClV,BUd,BUX,Bac,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26904']]],[[U,'NAD_1983_UTM_Zone_4N',Cbn,BUd,BUX,Bac,BUg,BUc,BUT,BUa]]],['26903',AV+' +zone=3'+j+c+q+a,[[U,Bx+' / UTM zone 3N',ClV,BUd,BUX,BaZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26903']]],[[U,'NAD_1983_UTM_Zone_3N',Cbn,BUd,BUX,BaZ,BUg,BUc,BUT,BUa]]],['26902',AV+' +zone=2'+j+c+q+a,[[U,Bx+' / UTM zone 2N',ClV,BUd,BUX,BYV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26902']]],[[U,'NAD_1983_UTM_Zone_2N',Cbn,BUd,BUX,BYV,BUg,BUc,BUT,BUa]]],['26901',AV+' +zone=1'+j+c+q+a,[[U,Bx+' / UTM zone 1N',ClV,BUd,BUX,BYF,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26901']]],[[U,'NAD_1983_UTM_Zone_1N',Cbn,BUd,BUX,BYF,BUg,BUc,BUT,BUa]]],['2690',BJH+' +k=1 +x_0=56500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 56',Cla,BUd,BUX,BoA,BUf,ByW,BUT,CVy,[B,K,'2690']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_56',Cby,BUd,BUX,BoA,BUf,ByW,BUT,BUa]]],['26899',AjX+' +lon_0=-56'+BTo,[[U,Cc+' / MTM zone 2',Cli,BUd,BUX,BpV,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'26899']]],[[U,'NAD83_CSRS_MTM_zone_2',CcM,BUd,BUX,BpV,BUt,BVt,BUT,BUa]]],['26898',AjX+' +lon_0=-53'+BTo,[[U,Cc+' / MTM zone 1',Cli,BUd,BUX,Buj,BUt,BVt,BUT,CVy,BcL,BcK,[B,K,'26898']]],[[U,'NAD83_CSRS_MTM_zone_1',CcM,BUd,BUX,Buj,BUt,BVt,BUT,BUa]]],['26897',AjX+yZ+BTo,[[U,Cc+' / MTM zone 17',Cli,BUd,BUX,BlA,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'26897']]],[[U,'NAD83_CSRS_MTM_zone_17',CcM,BUd,BUX,BlA,BUt,BVt,BUT,BUa]]],['26896',BHA+BTo,[[U,Cc+' / MTM zone 16',Cli,BUd,BUX,BYT,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'26896']]],[[U,'NAD83_CSRS_MTM_zone_16',CcM,BUd,BUX,BYT,BUt,BVt,BUT,BUa]]],['26895',BGq+BTo,[[U,Cc+' / MTM zone 15',Cli,BUd,BUX,BWb,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'26895']]],[[U,'NAD83_CSRS_MTM_zone_15',CcM,BUd,BUX,BWb,BUt,BVt,BUT,BUa]]],['26894',BIV+BTo,[[U,Cc+' / MTM zone 14',Cli,BUd,BUX,BXS,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'26894']]],[[U,'NAD83_CSRS_MTM_zone_14',CcM,BUd,BUX,BXS,BUt,BVt,BUT,BUa]]],['26893',BNe+BTo,[[U,Cc+' / MTM zone 13',Cli,BUd,BUX,Bhh,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'26893']]],[[U,'NAD83_CSRS_MTM_zone_13',CcM,BUd,BUX,Bhh,BUt,BVt,BUT,BUa]]],['26892',BIW+BTo,[[U,Cc+' / MTM zone 12',Cli,BUd,BUX,BVm,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'26892']]],[[U,'NAD83_CSRS_MTM_zone_12',CcM,BUd,BUX,BVm,BUt,BVt,BUT,BUa]]],['26891',AjX+VA+BTo,[[U,Cc+' / MTM zone 11',Cli,BUd,BUX,BYk,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'26891']]],[[U,'NAD83_CSRS_MTM_zone_11',CcM,BUd,BUX,BYk,BUt,BVt,BUT,BUa]]],['2689',BGM+' +k=1 +x_0=55500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 55',Cla,BUd,BUX,BXW,BUf,ByV,BUT,CVy,[B,K,'2689']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_55',Cby,BUd,BUX,BXW,BUf,ByV,BUT,BUa]]],['2688',BJG+' +k=1 +x_0=54500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 54',Cla,BUd,BUX,BkM,BUf,ByU,BUT,CVy,[B,K,'2688']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_54',Cby,BUd,BUX,BkM,BUf,ByU,BUT,BUa]]],['26870',BGc+AkO,[[U,AL+' / West'+eI+' South'+DE,ClW,BVG,BjG,BjF,Bgb,BVm,BVj,BUT,CVz,BUl,BUk,[B,K,'26870']]],[[U,'NAD83_NSRS2007_West_Virginia_South_ftUS',Cbq,BVD,BjG,BjF,Bgb,BVm,BVj,BUT,BUr]]],['2687',Axm+' +k=1 +x_0=53500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 53',Cla,BUd,BUX,BZl,BUf,ByT,BUT,CVy,[B,K,'2687']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_53',Cby,BUd,BUX,BZl,BUf,ByT,BUT,BUa]]],['26869',BGb+AkO,[[U,AL+' / West'+BIY,ClW,BVG,BjE,BjD,Bga,BZs,BVj,BUT,CVz,BUl,BUk,[B,K,'26869']]],[[U,'NAD83_NSRS2007_West_Virginia_North_ftUS',Cbq,BVD,BjE,BjD,Bga,BZs,BVj,BUT,BUr]]],['26868',BRn+AnX,[[U,AL+' /'+ASu+DE,ClW,BVG,BZg,BZu,BjT,BXb,BXQ,BUT,CVz,BUl,BUk,[B,K,'26868']]],[[U,'NAD83_NSRS2007_Nebraska_ftUS',Cbq,BVD,BZg,BZu,BjT,BXb,BXQ,BUT,BUr]]],['26867',BQf+AnX,[[U,AL+' /'+fs+' South'+DE,ClW,BVG,BiL,BiK,BcA,BdW,BZC,BZB,CVz,BUl,BUk,[B,K,'26867']]],[[U,'NAD83_NSRS2007_Minnesota_South_ftUS',Cbq,BVD,BiL,BiK,BcA,BdW,BZC,BZB,BUr]]],['26866',BQb+AnX,[[U,AL+' /'+BBX+DE,ClW,BVG,BiH,BiG,BZE,Bfq,BZC,BZB,CVz,BUl,BUk,[B,K,'26866']]],[[U,'NAD83_NSRS2007_Minnesota_Central_ftUS',Cbq,BVD,BiH,BiG,BZE,Bfq,BZC,BZB,BUr]]],['26865',BQd+AnX,[[U,AL+' /'+BBY+DE,ClW,BVG,BiJ,BiI,BbU,Bfr,BZC,BZB,CVz,BUl,BUk,[B,K,'26865']]],[[U,'NAD83_NSRS2007_Minnesota_North_ftUS',Cbq,BVD,BiJ,BiI,BbU,Bfr,BZC,BZB,BUr]]],['26864',BGm+AkO,[[U,AL+' / Maine West'+DE,ClW,BUd,BZt,Bfn,BWN,Bht,BUT,CVz,BUl,BUk,[B,K,'26864']]],[[U,'NAD83_NSRS2007_Maine_West_ftUS',Cbq,BUd,BZt,Bfn,BWN,Bht,BUT,BUr]]],['26863',BIr+CB+BBM,[[U,AL+' / Maine East'+DE,ClW,BUd,BYN,Bau,BUt,BZP,BUT,CVz,BUl,BUk,[B,K,'26863']]],[[U,'NAD83_NSRS2007_Maine_East_ftUS',Cbq,BUd,BYN,Bau,BUt,BZP,BUT,BUr]]],['26862',BGc+AkO,[[U,Aj+' / West'+eI+' South'+DE,ClX,BVG,BjG,BjF,Bgb,BVm,BVj,BUT,CVz,BUl,BUk,[B,K,'26862']]],[[U,'NAD83_HARN_West_Virginia_South_ftUS',Cbs,BVD,BjG,BjF,Bgb,BVm,BVj,BUT,BUr]]],['26861',BGb+AkO,[[U,Aj+' / West'+BIY,ClX,BVG,BjE,BjD,Bga,BZs,BVj,BUT,CVz,BUl,BUk,[B,K,'26861']]],[[U,'NAD83_HARN_West_Virginia_North_ftUS',Cbs,BVD,BjE,BjD,Bga,BZs,BVj,BUT,BUr]]],['26860',BRn+AnX,[[U,Aj+' /'+ASu+DE,ClX,BVG,BZg,BZu,BjT,BXb,BXQ,BUT,CVz,BUl,BUk,[B,K,'26860']]],[[U,'NAD83_HARN_Nebraska_ftUS',Cbs,BVD,BZg,BZu,BjT,BXb,BXQ,BUT,BUr]]],['2686',AjX+' +lon_0=156 +k=1 +x_0=52500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 52',Cla,BUd,BUX,BpR,BUf,ByS,BUT,CVy,[B,K,'2686']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_52',Cby,BUd,BUX,BpR,BUf,ByS,BUT,BUa]]],['26859',BQf+AnX,[[U,Aj+' /'+fs+' South'+DE,ClX,BVG,BiL,BiK,BcA,BdW,BZC,BZB,CVz,BUl,BUk,[B,K,'26859']]],[[U,'NAD83_HARN_Minnesota_South_ftUS',Cbs,BVD,BiL,BiK,BcA,BdW,BZC,BZB,BUr]]],['26858',BQb+AnX,[[U,Aj+' /'+BBX+DE,ClX,BVG,BiH,BiG,BZE,Bfq,BZC,BZB,CVz,BUl,BUk,[B,K,'26858']]],[[U,'NAD83_HARN_Minnesota_Central_ftUS',Cbs,BVD,BiH,BiG,BZE,Bfq,BZC,BZB,BUr]]],['26857',BQd+AnX,[[U,Aj+' /'+BBY+DE,ClX,BVG,BiJ,BiI,BbU,Bfr,BZC,BZB,CVz,BUl,BUk,[B,K,'26857']]],[[U,'NAD83_HARN_Minnesota_North_ftUS',Cbs,BVD,BiJ,BiI,BbU,Bfr,BZC,BZB,BUr]]],['26856',BGm+AkO,[[U,Aj+' / Maine West'+DE,ClX,BUd,BZt,Bfn,BWN,Bht,BUT,CVz,BUl,BUk,[B,K,'26856']]],[[U,'NAD83_HARN_Maine_West_ftUS',Cbs,BUd,BZt,Bfn,BWN,Bht,BUT,BUr]]],['26855',BIr+CB+BBM,[[U,Aj+' / Maine East'+DE,ClX,BUd,BYN,Bau,BUt,BZP,BUT,CVz,BUl,BUk,[B,K,'26855']]],[[U,'NAD83_HARN_Maine_East_ftUS',Cbs,BUd,BYN,Bau,BUt,BZP,BUT,BUr]]],['26854',BGc+AkO,[[U,Bx+' / West'+eI+' South'+DE,ClV,BVG,BjG,BjF,Bgb,BVm,BVj,BUT,CVz,BUl,BUk,[B,K,'26854']]],[[U,'NAD83_West_Virginia_South_ftUS',Cbn,BVD,BjG,BjF,Bgb,BVm,BVj,BUT,BUr]]],['26853',BGb+AkO,[[U,Bx+' / West'+BIY,ClV,BVG,BjE,BjD,Bga,BZs,BVj,BUT,CVz,BUl,BUk,[B,K,'26853']]],[[U,'NAD83_West_Virginia_North_ftUS',Cbn,BVD,BjE,BjD,Bga,BZs,BVj,BUT,BUr]]],['26852',BRn+AnX,[[U,Bx+' /'+ASu+DE,ClV,BVG,BZg,BZu,BjT,BXb,BXQ,BUT,CVz,BUl,BUk,[B,K,'26852']]],[[U,'NAD83_Nebraska_ftUS',Cbn,BVD,BZg,BZu,BjT,BXb,BXQ,BUT,BUr]]],['26851',BQf+AnX,[[U,Bx+' /'+fs+' South'+DE,ClV,BVG,BiL,BiK,BcA,BdW,BZC,BZB,CVz,BUl,BUk,[B,K,'26851']]],[[U,'NAD83_Minnesota_South_ftUS',Cbn,BVD,BiL,BiK,BcA,BdW,BZC,BZB,BUr]]],['26850',BQb+AnX,[[U,Bx+' /'+BBX+DE,ClV,BVG,BiH,BiG,BZE,Bfq,BZC,BZB,CVz,BUl,BUk,[B,K,'26850']]],[[U,'NAD83_Minnesota_Central_ftUS',Cbn,BVD,BiH,BiG,BZE,Bfq,BZC,BZB,BUr]]],['2685',BGK+' +k=1 +x_0=51500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 51',Cla,BUd,BUX,BYu,BUf,ByR,BUT,CVy,[B,K,'2685']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_51',Cby,BUd,BUX,BYu,BUf,ByR,BUT,BUa]]],['26849',BQd+AnX,[[U,Bx+' /'+BBY+DE,ClV,BVG,BiJ,BiI,BbU,Bfr,BZC,BZB,CVz,BUl,BUk,[B,K,'26849']]],[[U,'NAD83_Minnesota_North_ftUS',Cbn,BVD,BiJ,BiI,BbU,Bfr,BZC,BZB,BUr]]],['26848',BGm+AkO,[[U,Bx+' / Maine West'+DE,ClV,BUd,BZt,Bfn,BWN,Bht,BUT,CVz,BUl,BUk,[B,K,'26848']]],[[U,'NAD83_Maine_West_ftUS',Cbn,BUd,BZt,Bfn,BWN,Bht,BUT,BUr]]],['26847',BIr+CB+BBM,[[U,Bx+' / Maine East'+DE,ClV,BUd,BYN,Bau,BUt,BZP,BUT,CVz,BUl,BUk,[B,K,'26847']]],[[U,'NAD83_Maine_East_ftUS',Cbn,BUd,BYN,Bau,BUt,BZP,BUT,BUr]]],['2684',BNQ+' +k=1 +x_0=50500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 50',Cla,BUd,BUX,Beg,BUf,ByQ,BUT,CVy,[B,K,'2684']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_50',Cby,BUd,BUX,Beg,BUf,ByQ,BUT,BUa]]],['2683',BGH+' +k=1 +x_0=49500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 49',Cla,BUd,BUX,BYW,BUf,ByP,BUT,CVy,[B,K,'2683']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_49',Cby,BUd,BUX,BYW,BUf,ByP,BUT,BUa]]],['2682',BJF+' +k=1 +x_0=48500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 48',Cla,BUd,BUX,Bnz,BUf,ByO,BUT,CVy,[B,K,'2682']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_48',Cby,BUd,BUX,Bnz,BUf,ByO,BUT,BUa]]],['2681',Axl+' +k=1 +x_0=47500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 47',Cla,BUd,BUX,BYK,BUf,Bwr,BUT,CVy,[B,K,'2681']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_47',Cby,BUd,BUX,BYK,BUf,Bwr,BUT,BUa]]],['2680',BJE+' +k=1 +x_0=46500000'+BEF,[[U,Ajf+' /'+Ajc+' zone 46',Cla,BUd,BUX,Blh,BUf,ByN,BUT,CVy,[B,K,'2680']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_46',Cby,BUd,BUX,Blh,BUf,ByN,BUT,BUa]]],['26799',AU+' +lat_1=34.41666666666666 +lat_2=33.86666666666667 +lat_0=34.13333333333333'+gD+' +x_0=1276106.450596901 +y_0=1268253.006858014'+Alk,[[U,Dg+' /'+OB+' zone VII',ClZ,BVG,[A,W,AQu],[A,Y,AQv],[A,C,AQw],Boh,[A,I,AjJ],[A,G,AjK],CVz,BUl,BUk,[B,K,'26799']]],[[U,'NAD27_California_zone_VII',Cbw,BVD,[A,W,AQu],[A,Y,AQv],[A,C,AQw],Boh,[A,I,AjJ],[A,G,AjK],BUr]]],['26798',l+BCH+BIz,[[U,Dg+' /'+AMH+' West',ClZ,BUd,Bof,Boe,BWj,BUc,BUT,CVz,BUl,BUk,[B,K,'26798']]],[[U,'NAD27_Missouri_West',Cbw,BUd,Bof,Boe,BWj,BUc,BUT,BUr]]],['26797',BLZ+Lq+AyJ,[[U,Dg+' /'+BEl,ClZ,BUd,BdY,Bas,BWx,BUc,BUT,CVz,BUl,BUk,[B,K,'26797']]],[[U,'NAD27_Missouri_Central',Cbw,BUd,BdY,Bas,BWx,BUc,BUT,BUr]]],['26796',BIJ+AyJ,[[U,Dg+' /'+AMH+' East',ClZ,BUd,BdY,Bod,BWx,BUc,BUT,CVz,BUl,BUk,[B,K,'26796']]],[[U,'NAD27_Missouri_East',Cbw,BUd,BdY,Bod,BWx,BUc,BUT,BUr]]],['26795',l+gN+PY+BIz,[[U,Dg+' /'+cu+' West',ClZ,BUd,Bar,BcU,BWj,BUc,BUT,CVz,BUl,BUk,[B,K,'26795']]],[[U,'NAD27_Mississippi_West',Cbw,BUd,Bar,BcU,BWj,BUc,BUT,BUr]]],['26794',l+Rj+SY+AEu+AyJ,[[U,Dg+' /'+cu+' East',ClZ,BUd,Bda,Bfs,Bhe,BUc,BUT,CVz,BUl,BUk,[B,K,'26794']]],[[U,'NAD27_Mississippi_East',Cbw,BUd,Bda,Bfs,Bhe,BUc,BUT,BUr]]],['26793',AU+' +lat_1=43.78333333333333 +lat_2=45.21666666666667'+Auc+Asy,[[U,Dg+' /'+fs+' South',ClZ,BVG,[A,W,Jt],[A,Y,Js],BcA,BdW,BVW,BUT,CVz,BUl,BUk,[B,K,'26793']]],[[U,'NAD27_Minnesota_South',Cbw,BVD,[A,W,Jt],[A,Y,Js],BcA,BdW,BVW,BUT,BUr]]],['26792',AU+' +lat_1=45.61666666666667 +lat_2=47.05'+Aua+Asy,[[U,Dg+' /'+BBX,ClZ,BVG,[A,W,Jw],[A,Y,YP],BZE,Bfq,BVW,BUT,CVz,BUl,BUk,[B,K,'26792']]],[[U,'NAD27_Minnesota_Central',Cbw,BVD,[A,W,Jw],[A,Y,YP],BZE,Bfq,BVW,BUT,BUr]]],['26791',AU+' +lat_1=47.03333333333333 +lat_2=48.63333333333333'+Aub+Asy,[[U,Dg+' /'+BBY,ClZ,BVG,[A,W,Jv],[A,Y,Ju],BbU,Bfr,BVW,BUT,CVz,BUl,BUk,[B,K,'26791']]],[[U,'NAD27_Minnesota_North',Cbw,BVD,[A,W,Jv],[A,Y,Ju],BbU,Bfr,BVW,BUT,BUr]]],['2679',Ape+' +k=1'+BDU+AqC,[[U,Ajf+' /'+Ajc+' zone 45',Cla,BUd,BUX,BWd,BUf,BkR,BUT,CVy,[B,K,'2679']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_45',Cby,BUd,BUX,BWd,BUf,BkR,BUT,BUa]]],['26787',AU+' +lat_1=41.28333333333333 +lat_2=41.48333333333333'+AuY+' +x_0=60960.12192024384'+Alm,[[U,Dg+' /'+BBW,ClZ,BVG,[A,W,Jz],[A,Y,Jy],BZM,BbL,BVP,BUT,CVz,BUl,BUk,[B,K,'26787']]],[[U,'NAD27_Massachusetts_Island',Cbw,BVD,[A,W,Jz],[A,Y,Jy],BZM,BbL,BVP,BUT,BUr]]],['26786',AU+' +lat_1=41.71666666666667 +lat_2=42.68333333333333'+AuZ+ACf+Alm,[[U,Dg+' /'+ArD,ClZ,BVG,[A,W,Hq],[A,Y,Jx],BZM,BZc,BVY,BUT,CVz,BUl,BUk,[B,K,'26786']]],[[U,'NAD27_Massachusetts_Mainland',Cbw,BVD,[A,W,Hq],[A,Y,Jx],BZM,BZc,BVY,BUT,BUr]]],['26785',AU+' +lat_1=38.3 +lat_2=39.45'+Rl+pu+' +x_0=243840.4876809754'+Alm,[[U,Dg+' /'+ASw,ClZ,BVG,[A,W,aZ],[A,Y,UK],BdT,Bbs,[A,I,AQx],BUT,CVz,BUl,BUk,[B,K,'26785']]],[[U,'NAD27_Maryland',Cbw,BVD,[A,W,aZ],[A,Y,UK],BdT,Bbs,[A,I,AQx],BUT,BUr]]],['26784',AwY+AyJ,[[U,Dg+' / Maine West',ClZ,BUd,BZt,Bfn,BWN,BUc,BUT,CVz,BUl,BUk,[B,K,'26784']]],[[U,'NAD27_Maine_West',Cbw,BUd,BZt,Bfn,BWN,BUc,BUT,BUr]]],['26783',l+Gg+AuU+AyJ,[[U,Dg+' / Maine East',ClZ,BUd,BYM,Bau,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26783']]],[[U,'NAD27_Maine_East',Cbw,BUd,BYM,Bau,BUt,BUc,BUT,BUr]]],['26782',AU+' +lat_1=29.3 +lat_2=30.7 +lat_0=28.66666666666667'+Oc+Asy,[[U,Dg+' /'+kJ+' South',ClZ,BVG,[A,W,ab],[A,Y,aa],[A,C,AQy],Bbr,BVW,BUT,CVz,BUl,BUk,[B,K,'26782']]],[[U,'NAD27_Louisiana_South',Cbw,BVD,[A,W,ab],[A,Y,aa],[A,C,AQy],Bbr,BVW,BUT,BUr]]],['26781',AU+' +lat_1=31.16666666666667 +lat_2=32.66666666666666 +lat_0=30.66666666666667'+eF+Asy,[[U,Dg+' /'+BBU,ClZ,BVG,[A,W,Gu],[A,Y,EJ],[A,C,AQz],Bas,BVW,BUT,CVz,BUl,BUk,[B,K,'26781']]],[[U,'NAD27_Louisiana_North',Cbw,BVD,[A,W,Gu],[A,Y,EJ],[A,C,AQz],Bas,BVW,BUT,BUr]]],['26780',AU+' +lat_1=36.73333333333333 +lat_2=37.93333333333333'+AnH+Asy,[[U,Dg+' /'+or+' South',ClZ,BVG,[A,W,KB],[A,Y,KA],BXr,BZZ,BVW,BUT,CVz,BUl,BUk,[B,K,'26780']]],[[U,'NAD27_Kentucky_South',Cbw,BVD,[A,W,KB],[A,Y,KA],BXr,BZZ,BVW,BUT,BUr]]],['2678',Asl+' +k=1'+BDT+AqC,[[U,Ajf+' /'+Ajc+' zone 44',Cla,BUd,BUX,BaU,BUf,Blo,BUT,CVy,[B,K,'2678']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_44',Cby,BUd,BUX,BaU,BUf,Blo,BUT,BUa]]],['26779',AwQ+kU+Asy,[[U,Dg+' /'+BBT,ClZ,BVG,BZr,Bfl,BXf,Bfk,BVW,BUT,CVz,BUl,BUk,[B,K,'26779']]],[[U,'NAD27_Kentucky_North',Cbw,BVD,BZr,Bfl,BXf,Bfk,BVW,BUT,BUr]]],['26778',AwP+RB+Asy,[[U,Dg+' / Kansas South',ClZ,BVG,Bfj,Bfi,BWJ,BXp,BVW,BUT,CVz,BUl,BUk,[B,K,'26778']]],[[U,'NAD27_Kansas_South',Cbw,BVD,Bfj,Bfi,BWJ,BXp,BVW,BUT,BUr]]],['26777',AwL+Xh+Asy,[[U,Dg+' / Kansas'+QM,ClZ,BVG,Bfh,Bfg,BYl,BXh,BVW,BUT,CVz,BUl,BUk,[B,K,'26777']]],[[U,'NAD27_Kansas_North',Cbw,BVD,Bfh,Bfg,BYl,BXh,BVW,BUT,BUr]]],['26776',AwK+Yw+Asy,[[U,Dg+' / Iowa South',ClZ,BVG,BZD,Bff,BXM,BZY,BVW,BUT,CVz,BUl,BUk,[B,K,'26776']]],[[U,'NAD27_Iowa_South',Cbw,BVD,BZD,Bff,BXM,BZY,BVW,BUT,BUr]]],['26775',AwJ+Yw+Asy,[[U,Dg+' / Iowa'+QM,ClZ,BVG,Bfe,Bfd,BYb,BZY,BVW,BUT,CVz,BUl,BUk,[B,K,'26775']]],[[U,'NAD27_Iowa_North',Cbw,BVD,Bfe,Bfd,BYb,BZY,BVW,BUT,BUr]]],['26774',AwI+AyJ,[[U,Dg+' / Indiana West',ClZ,BUd,BXf,Bfc,BWN,BUc,BUT,CVz,BUl,BUk,[B,K,'26774']]],[[U,'NAD27_Indiana_West',Cbw,BUd,BXf,Bfc,BWN,BUc,BUT,BUr]]],['26773',AwH+AyJ,[[U,Dg+' / Indiana East',ClZ,BUd,BXf,Bfb,BWN,BUc,BUT,CVz,BUl,BUk,[B,K,'26773']]],[[U,'NAD27_Indiana_East',Cbw,BUd,BXf,Bfb,BWN,BUc,BUT,BUr]]],['26772',Avw+AyJ,[[U,Dg+' /'+AGh+' West',ClZ,BUd,BWJ,Bfa,BWj,BUc,BUT,CVz,BUl,BUk,[B,K,'26772']]],[[U,'NAD27_Illinois_West',Cbw,BUd,BWJ,Bfa,BWj,BUc,BUT,BUr]]],['26771',Avu+AyJ,[[U,Dg+' /'+AGh+' East',ClZ,BUd,BWJ,BfZ,BdU,BUc,BUT,CVz,BUl,BUk,[B,K,'26771']]],[[U,'NAD27_Illinois_East',Cbw,BUd,BWJ,BfZ,BdU,BUc,BUT,BUr]]],['26770',Avt+AyJ,[[U,Dg+' / Idaho West',ClZ,BUd,BWi,BfY,BWx,BUc,BUT,CVz,BUl,BUk,[B,K,'26770']]],[[U,'NAD27_Idaho_West',Cbw,BUd,BWi,BfY,BWx,BUc,BUT,BUr]]],['2677',Apd+' +k=1'+BDS+AqC,[[U,Ajf+' /'+Ajc+' zone 43',Cla,BUd,BUX,BWQ,BUf,BkQ,BUT,CVy,[B,K,'2677']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_43',Cby,BUd,BUX,BWQ,BUf,BkQ,BUT,BUa]]],['26769',Avr+AyJ,[[U,Dg+' / Idaho'+Gh,ClZ,BUd,BWi,Bbq,BZX,BUc,BUT,CVz,BUl,BUk,[B,K,'26769']]],[[U,'NAD27_Idaho_Central',Cbw,BUd,BWi,Bbq,BZX,BUc,BUT,BUr]]],['26768',Avs+AyJ,[[U,Dg+' / Idaho East',ClZ,BUd,BWi,BfX,BZX,BUc,BUT,CVz,BUl,BUk,[B,K,'26768']]],[[U,'NAD27_Idaho_East',Cbw,BUd,BWi,BfX,BZX,BUc,BUT,BUr]]],['26767',Avp+AyJ,[[U,Dg+' /'+Abp+' West',ClZ,BUd,BXX,BfW,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26767']]],[[U,'NAD27_Georgia_West',Cbw,BUd,BXX,BfW,BUt,BUc,BUT,BUr]]],['26766',Avo+AyJ,[[U,Dg+' /'+Abp+' East',ClZ,BUd,BXX,BfV,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26766']]],[[U,'NAD27_Georgia_East',Cbw,BUd,BXX,BfV,BUt,BUc,BUT,BUr]]],['26760',Avm+ph+Asy,[[U,Dg+' /'+BBS,ClZ,BVG,BfT,BfS,BfR,BfQ,BVW,BUT,CVz,BUl,BUk,[B,K,'26760']]],[[U,'NAD27_Florida_North',Cbw,BVD,BfT,BfS,BfR,BfQ,BVW,BUT,BUr]]],['2676',Aty+' +k=1'+BDR+AqC,[[U,Ajf+' /'+Ajc+' zone 42',Cla,BUd,BUX,Bao,BUf,Bln,BUT,CVy,[B,K,'2676']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_42',Cby,BUd,BUX,Bao,BUf,Bln,BUT,BUa]]],['26759',Avn+AyJ,[[U,Dg+' /'+tm+' West',ClZ,BUd,BZW,BfU,BWj,BUc,BUT,CVz,BUl,BUk,[B,K,'26759']]],[[U,'NAD27_Florida_West',Cbw,BUd,BZW,BfU,BWj,BUc,BUT,BUr]]],['26758',Avk+AyJ,[[U,Dg+' /'+tm+' East',ClZ,BUd,BZW,BVm,BWj,BUc,BUT,CVz,BUl,BUk,[B,K,'26758']]],[[U,'NAD27_Florida_East',Cbw,BUd,BZW,BVm,BWj,BUc,BUT,BUr]]],['26757',Avf+AyJ,[[U,Dg+' /'+ASx,ClZ,BUd,BWT,BfP,BfO,BUc,BUT,CVz,BUl,BUk,[B,K,'26757']]],[[U,'NAD27_Delaware',Cbw,BUd,BWT,BfP,BfO,BUc,BUT,BUr]]],['26756',BOw+ACf+Alm,[[U,Dg+' /'+wI,ClZ,BVG,BfN,BfM,BfL,BfK,BVY,BUT,CVz,BUl,BUk,[B,K,'26756']]],[[U,'NAD27_Connecticut',Cbw,BVD,BfN,BfM,BfL,BfK,BVY,BUT,BUr]]],['26755',AvI+Nk+Asy,[[U,Dg+' /'+nG+' South',ClZ,BVG,BZV,BfJ,BWJ,BXR,BVW,BUT,CVz,BUl,BUk,[B,K,'26755']]],[[U,'NAD27_Colorado_South',Cbw,BVD,BZV,BfJ,BWJ,BXR,BVW,BUT,BUr]]],['26754',AvG+Nk+Asy,[[U,Dg+' /'+BBQ,ClZ,BVG,BfI,BfH,BdT,BXR,BVW,BUT,CVz,BUl,BUk,[B,K,'26754']]],[[U,'NAD27_Colorado_Central',Cbw,BVD,BfI,BfH,BdT,BXR,BVW,BUT,BUr]]],['26753',AU+' +lat_1=39.71666666666667 +lat_2=40.78333333333333'+AtT+Asy,[[U,Dg+' /'+BBR,ClZ,BVG,[A,W,KO],[A,Y,KN],BXi,BXR,BVW,BUT,CVz,BUl,BUk,[B,K,'26753']]],[[U,'NAD27_Colorado_North',Cbw,BVD,[A,W,KO],[A,Y,KN],BXi,BXR,BVW,BUT,BUr]]],['26752',Auk+fC+Asy,[[U,Dg+' /'+AGi+' South',ClZ,BVG,Beq,Bep,Beo,BZT,BVW,BUT,CVz,BUl,BUk,[B,K,'26752']]],[[U,'NAD27_Arkansas_South',Cbw,BVD,Beq,Bep,Beo,BZT,BVW,BUT,BUr]]],['26751',Aui+fC+Asy,[[U,Dg+' /'+ArC,ClZ,BVG,Ben,Bem,BZq,BZT,BVW,BUT,CVz,BUl,BUk,[B,K,'26751']]],[[U,'NAD27_Arkansas_North',Cbw,BVD,Ben,Bem,BZq,BZT,BVW,BUT,BUr]]],['26750',Aug+AyJ,[[U,Dg+' /'+yH+' West',ClZ,BUd,BWA,Bel,BWx,BUc,BUT,CVz,BUl,BUk,[B,K,'26750']]],[[U,'NAD27_Arizona_West',Cbw,BUd,BWA,Bel,BWx,BUc,BUT,BUr]]],['2675',ApF+' +k=1'+BDQ+AqC,[[U,Ajf+' /'+Ajc+' zone 41',Cla,BUd,BUX,BWU,BUf,BkP,BUT,CVy,[B,K,'2675']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_41',Cby,BUd,BUX,BWU,BUf,BkP,BUT,BUa]]],['26749',AuX+AyJ,[[U,Dg+' /'+BBP,ClZ,BUd,BWA,Bej,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26749']]],[[U,'NAD27_Arizona_Central',Cbw,BUd,BWA,Bej,BUt,BUc,BUT,BUr]]],['26748',Aue+AyJ,[[U,Dg+' /'+yH+' East',ClZ,BUd,BWA,Bek,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26748']]],[[U,'NAD27_Arizona_East',Cbw,BUd,BWA,Bek,BUt,BUc,BUT,BUr]]],['26746',Aux+hp+Asy,[[U,Dg+' /'+OB+' zone VI',ClZ,BVG,BfG,BfF,BfE,BfD,BVW,BUT,CVz,BUl,BUk,[B,K,'26746']]],[[U,'NAD27_California_zone_VI',Cbw,BVD,BfG,BfF,BfE,BfD,BVW,BUT,BUr]]],['26745',Auu+hg+Asy,[[U,Dg+' /'+OB+' zone V',ClZ,BVG,BfC,BfB,BfA,BbN,BVW,BUT,CVz,BUl,BUk,[B,K,'26745']]],[[U,'NAD27_California_zone_V',Cbw,BVD,BfC,BfB,BfA,BbN,BVW,BUT,BUr]]],['26744',Aus+tL+Asy,[[U,Dg+' /'+OB+' zone IV',ClZ,BVG,Bez,Bey,Bex,Bew,BVW,BUT,CVz,BUl,BUk,[B,K,'26744']]],[[U,'NAD27_California_zone_IV',Cbw,BVD,Bez,Bey,Bex,Bew,BVW,BUT,BUr]]],['26743',Auq+GZ+Asy,[[U,Dg+' /'+OB+' zone III',ClZ,BVG,BZV,Bev,Beu,BWB,BVW,BUT,CVz,BUl,BUk,[B,K,'26743']]],[[U,'NAD27_California_zone_III',Cbw,BVD,BZV,Bev,Beu,BWB,BVW,BUT,BUr]]],['26742',Auo+bP+Asy,[[U,Dg+' /'+OB+' zone II',ClZ,BVG,Bet,Bes,BXq,BZU,BVW,BUT,CVz,BUl,BUk,[B,K,'26742']]],[[U,'NAD27_California_zone_II',Cbw,BVD,Bet,Bes,BXq,BZU,BVW,BUT,BUr]]],['26741',Aum+bP+Asy,[[U,Dg+' /'+OB+' zone I',ClZ,BVG,Ber,BZu,BXi,BZU,BVW,BUT,CVz,BUl,BUk,[B,K,'26741']]],[[U,'NAD27_California_zone_I',Cbw,BVD,Ber,BZu,BXi,BZU,BVW,BUT,BUr]]],['26740',BTH+PT+Alm,[[U,Dg+' / Alaska zone 10',ClZ,BVG,Brs,Brr,Blx,Brq,BYY,BUT,CVz,BUl,BUk,[B,K,'26740']]],[[U,'NAD27_Alaska_zone_10',Cbw,BVD,Brs,Brr,Blx,Brq,BYY,BUT,BUr]]],['2674',Atw+' +k=1'+BDP+AqC,[[U,Ajf+' /'+Ajc+' zone 40',Cla,BUd,BUX,BbG,BUf,BkV,BUT,CVy,[B,K,'2674']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_40',Cby,BUd,BUX,BbG,BUf,BkV,BUT,BUa]]],['26739',BKV+ACf+Alm,[[U,Dg+' / Alaska zone 9',ClZ,BUd,BXL,BoY,BUt,BVY,BUT,CVz,BUl,BUk,[B,K,'26739']]],[[U,'NAD27_Alaska_zone_9',Cbw,BUd,BXL,BoY,BUt,BVY,BUT,BUr]]],['26738',BKU+AyJ,[[U,Dg+' / Alaska zone 8',ClZ,BUd,BXL,Brp,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26738']]],[[U,'NAD27_Alaska_zone_8',Cbw,BUd,BXL,Brp,BUt,BUc,BUT,BUr]]],['26737',BKT+' +x_0=213360.4267208534'+Alm,[[U,Dg+' / Alaska zone 7',ClZ,BUd,BXL,Bro,BUt,BWl,BUT,CVz,BUl,BUk,[B,K,'26737']]],[[U,'NAD27_Alaska_zone_7',Cbw,BUd,BXL,Bro,BUt,BWl,BUT,BUr]]],['26736',BNm+Ans+Alm,[[U,Dg+' / Alaska zone 6',ClZ,BUd,BXL,Bce,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26736']]],[[U,'NAD27_Alaska_zone_6',Cbw,BUd,BXL,Bce,BUt,BUc,BUT,BUr]]],['26735',BNl+Ans+Alm,[[U,Dg+' / Alaska zone 5',ClZ,BUd,BXL,Bka,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26735']]],[[U,'NAD27_Alaska_zone_5',Cbw,BUd,BXL,Bka,BUt,BUc,BUT,BUr]]],['26734',BNk+Ans+Alm,[[U,Dg+' / Alaska zone 4',ClZ,BUd,BXL,BkA,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26734']]],[[U,'NAD27_Alaska_zone_4',Cbw,BUd,BXL,BkA,BUt,BUc,BUT,BUr]]],['26733',BKS+AyJ,[[U,Dg+' / Alaska zone 3',ClZ,BUd,BXL,Brn,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26733']]],[[U,'NAD27_Alaska_zone_3',Cbw,BUd,BXL,Brn,BUt,BUc,BUT,BUr]]],['26732',BKR+AyJ,[[U,Dg+' / Alaska zone 2',ClZ,BUd,BXL,Brm,BUt,BUc,BUT,CVz,BUl,BUk,[B,K,'26732']]],[[U,'NAD27_Alaska_zone_2',Cbw,BUd,BXL,Brm,BUt,BUc,BUT,BUr]]],['26731',Qw+' +lat_0=57'+pN+pO+CB+' +x_0=5000000.001016002 +y_0=-5000000.001016002'+BBw+Alk,[[U,Dg+' / Alaska zone 1',ClZ,BlD,Bpa,BpZ,BpY,BqI,BUt,[A,I,AfR],[A,G,Abn],CVz,BUl,BUk,[B,K,'26731']]],[[U,'NAD27_Alaska_zone_1',Cbw,BlC,Bpa,BpZ,BpY,BUt,[A,I,AfR],[A,G,Abn],BUr]]],['26730',BKP+Lq+AyJ,[[U,Dg+' / Alabama West',ClZ,BUd,BXX,Bkh,BWx,BUc,BUT,CVz,BUl,BUk,[B,K,'26730']]],[[U,'NAD27_Alabama_West',Cbw,BUd,BXX,Bkh,BWx,BUc,BUT,BUr]]],['2673',ApE+' +k=1'+BDO+AqC,[[U,Ajf+' /'+Ajc+' zone 39',Cla,BUd,BUX,BWS,BUf,BkZ,BUT,CVy,[B,K,'2673']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_39',Cby,BUd,BUX,BWS,BUf,BkZ,BUT,BUa]]],['26729',l+BKO+AyJ,[[U,Dg+' / Alabama East',ClZ,BUd,Bar,BoX,Bhe,BUc,BUT,CVz,BUl,BUk,[B,K,'26729']]],[[U,'NAD27_Alabama_East',Cbw,BUd,Bar,BoX,Bhe,BUc,BUT,BUr]]],['26722',Alb+Apt,[[U,Dg+' / UTM zone 22N',ClZ,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26722']]],[[U,'NAD_1927_UTM_Zone_22N',Cbw,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['26721',AlI+Apt,[[U,Dg+' / UTM zone 21N',ClZ,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26721']]],[[U,'NAD_1927_UTM_Zone_21N',Cbw,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['26720',Aku+Apt,[[U,Dg+' / UTM zone 20N',ClZ,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26720']]],[[U,'NAD_1927_UTM_Zone_20N',Cbw,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2672',Atu+' +k=1'+BDN+AqC,[[U,Ajf+' /'+Ajc+' zone 38',Cla,BUd,BUX,BZy,BUf,BkU,BUT,CVy,[B,K,'2672']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_38',Cby,BUd,BUX,BZy,BUf,BkU,BUT,BUa]]],['26719',AlG+Apt,[[U,Dg+' / UTM zone 19N',ClZ,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26719']]],[[U,'NAD_1927_UTM_Zone_19N',Cbw,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['26718',AlJ+Apt,[[U,Dg+' / UTM zone 18N',ClZ,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26718']]],[[U,'NAD_1927_UTM_Zone_18N',Cbw,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['26717',AlW+Apt,[[U,Dg+' / UTM zone 17N',ClZ,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26717']]],[[U,'NAD_1927_UTM_Zone_17N',Cbw,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['26716',AnW+Apt,[[U,Dg+' / UTM zone 16N',ClZ,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26716']]],[[U,'NAD_1927_UTM_Zone_16N',Cbw,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['26715',AnV+Apt,[[U,Dg+' / UTM zone 15N',ClZ,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26715']]],[[U,'NAD_1927_UTM_Zone_15N',Cbw,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['26714',AoG+Apt,[[U,Dg+' / UTM zone 14N',ClZ,BUd,BUX,BXU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26714']]],[[U,'NAD_1927_UTM_Zone_14N',Cbw,BUd,BUX,BXU,BUg,BUc,BUT,BUa]]],['26713',AoF+Apt,[[U,Dg+' / UTM zone 13N',ClZ,BUd,BUX,BZS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26713']]],[[U,'NAD_1927_UTM_Zone_13N',Cbw,BUd,BUX,BZS,BUg,BUc,BUT,BUa]]],['26712',AoE+Apt,[[U,Dg+' / UTM zone 12N',ClZ,BUd,BUX,BXs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26712']]],[[U,'NAD_1927_UTM_Zone_12N',Cbw,BUd,BUX,BXs,BUg,BUc,BUT,BUa]]],['26711',AoD+Apt,[[U,Dg+' / UTM zone 11N',ClZ,BUd,BUX,BXx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26711']]],[[U,'NAD_1927_UTM_Zone_11N',Cbw,BUd,BUX,BXx,BUg,BUc,BUT,BUa]]],['26710',Amy+Apt,[[U,Dg+' / UTM zone 10N',ClZ,BUd,BUX,Bap,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26710']]],[[U,'NAD_1927_UTM_Zone_10N',Cbw,BUd,BUX,Bap,BUg,BUc,BUT,BUa]]],['2671',ApX+' +k=1'+BDM+AqC,[[U,Ajf+' /'+Ajc+' zone 37',Cla,BUd,BUX,BWX,BUf,BkY,BUT,CVy,[B,K,'2671']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_37',Cby,BUd,BUX,BWX,BUf,BkY,BUT,BUa]]],['26709',AV+' +zone=9'+Apt,[[U,Dg+' / UTM zone 9N',ClZ,BUd,BUX,BaA,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26709']]],[[U,'NAD_1927_UTM_Zone_9N',Cbw,BUd,BUX,BaA,BUg,BUc,BUT,BUa]]],['26708',AV+' +zone=8'+Apt,[[U,Dg+' / UTM zone 8N',ClZ,BUd,BUX,BZz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26708']]],[[U,'NAD_1927_UTM_Zone_8N',Cbw,BUd,BUX,BZz,BUg,BUc,BUT,BUa]]],['26707',AV+' +zone=7'+Apt,[[U,Dg+' / UTM zone 7N',ClZ,BUd,BUX,BZn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26707']]],[[U,'NAD_1927_UTM_Zone_7N',Cbw,BUd,BUX,BZn,BUg,BUc,BUT,BUa]]],['26706',AV+' +zone=6'+Apt,[[U,Dg+' / UTM zone 6N',ClZ,BUd,BUX,BYy,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26706']]],[[U,'NAD_1927_UTM_Zone_6N',Cbw,BUd,BUX,BYy,BUg,BUc,BUT,BUa]]],['26705',AV+' +zone=5'+Apt,[[U,Dg+' / UTM zone 5N',ClZ,BUd,BUX,BZK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26705']]],[[U,'NAD_1927_UTM_Zone_5N',Cbw,BUd,BUX,BZK,BUg,BUc,BUT,BUa]]],['26704',AV+' +zone=4'+Apt,[[U,Dg+' / UTM zone 4N',ClZ,BUd,BUX,Bac,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26704']]],[[U,'NAD_1927_UTM_Zone_4N',Cbw,BUd,BUX,Bac,BUg,BUc,BUT,BUa]]],['26703',AV+' +zone=3'+Apt,[[U,Dg+' / UTM zone 3N',ClZ,BUd,BUX,BaZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26703']]],[[U,'NAD_1927_UTM_Zone_3N',Cbw,BUd,BUX,BaZ,BUg,BUc,BUT,BUa]]],['26702',AV+' +zone=2'+Apt,[[U,Dg+' / UTM zone 2N',ClZ,BUd,BUX,BYV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26702']]],[[U,'NAD_1927_UTM_Zone_2N',Cbw,BUd,BUX,BYV,BUg,BUc,BUT,BUa]]],['26701',AV+' +zone=1'+Apt,[[U,Dg+' / UTM zone 1N',ClZ,BUd,BUX,BYF,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26701']]],[[U,'NAD_1927_UTM_Zone_1N',Cbw,BUd,BUX,BYF,BUg,BUc,BUT,BUa]]],['2670',Ats+' +k=1'+BDL+AqC,[[U,Ajf+' /'+Ajc+' zone 36',Cla,BUd,BUX,Bbi,BUf,BkT,BUT,CVy,[B,K,'2670']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_36',Cby,BUd,BUX,Bbi,BUf,BkT,BUT,BUa]]],['26692',Alu+HN+Akc+va+q+a,[[U,yl+' / UTM zone 32S',CpO,BUd,BUX,BWO,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'26692']]],[[U,'M_poraloko_UTM_zone_32S',Cjj,BUd,BUX,BWO,BUg,BUc,BUo,BUa]]],['2669',ApW+' +k=1'+BDK+AqC,[[U,Ajf+' /'+Ajc+' zone 35',Cla,BUd,BUX,BWK,BUf,BkX,BUT,CVy,[B,K,'2669']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_35',Cby,BUd,BUX,BWK,BUf,BkX,BUT,BUa]]],['2668',Atq+' +k=1'+BDJ+AqC,[[U,Ajf+' /'+Ajc+' zone 34',Cla,BUd,BUX,Ban,BUf,BkS,BUT,CVy,[B,K,'2668']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_34',Cby,BUd,BUX,Ban,BUf,BkS,BUT,BUa]]],['2667',Apc+' +k=1'+AwV+AqC,[[U,Ajf+' /'+Ajc+' zone 33',Cla,BUd,BUX,BWf,BUf,BdO,BUT,CVy,[B,K,'2667']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_33',Cby,BUd,BUX,BWf,BUf,BdO,BUT,BUa]]],['2666',Ato+' +k=1'+ArV+AqC,[[U,Ajf+' /'+Ajc+' zone 32',Cla,BUd,BUX,BbF,BUf,BcO,BUT,CVy,[B,K,'2666']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_32',Cby,BUd,BUX,BbF,BUf,BcO,BUT,BUa]]],['2665',Apb+' +k=1'+AqY+AqC,[[U,Ajf+' /'+Ajc+' zone 31',Cla,BUd,BUX,BWk,BUf,BaY,BUT,CVy,[B,K,'2665']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_31',Cby,BUd,BUX,BWk,BUf,BaY,BUT,BUa]]],['2664',Asm+' +k=1'+AsZ+AqC,[[U,Ajf+' /'+Ajc+' zone 30',Cla,BUd,BUX,BYP,BUf,BcN,BUT,CVy,[B,K,'2664']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_30',Cby,BUd,BUX,BYP,BUf,BcN,BUT,BUa]]],['26632',Alu+Akc+va+q+a,[[U,yl+' / UTM zone 32N',CpO,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26632']]],[[U,'M_poraloko_UTM_zone_32N',Cjj,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['2663',Apa+' +k=1'+AsY+AqC,[[U,Ajf+' /'+Ajc+' zone 29',Cla,BUd,BUX,BXK,BUf,Baq,BUT,CVy,[B,K,'2663']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_29',Cby,BUd,BUX,BXK,BUf,Baq,BUT,BUa]]],['2662',Atm+' +k=1'+AsX+AqC,[[U,Ajf+' /'+Ajc+' zone 28',Cla,BUd,BUX,Bbh,BUf,Bbm,BUT,CVy,[B,K,'2662']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_28',Cby,BUd,BUX,Bbh,BUf,Bbm,BUT,BUa]]],['2661',ApZ+' +k=1'+AsW+AqC,[[U,Ajf+' /'+Ajc+' zone 27',Cla,BUd,BUX,BWz,BUf,Bbl,BUT,CVy,[B,K,'2661']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_27',Cby,BUd,BUX,BWz,BUf,Bbl,BUT,BUa]]],['2660',Atk+' +k=1'+AsV+AqC,[[U,Ajf+' /'+Ajc+' zone 26',Cla,BUd,BUX,Bam,BUf,Bbj,BUT,CVy,[B,K,'2660']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_26',Cby,BUd,BUX,Bam,BUf,Bbj,BUT,BUa]]],['2659',ApY+' +k=1'+AsU+AqC,[[U,Ajf+' /'+Ajc+' zone 25',Cla,BUd,BUX,BWs,BUf,Bbk,BUT,CVy,[B,K,'2659']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_25',Cby,BUd,BUX,BWs,BUf,Bbk,BUT,BUa]]],['2658',AjX+' +lon_0=72 +k=1'+BNR+AsK,[[U,Ajf+' /'+Ajc+' zone 24',Cla,BUd,BUX,Bny,BUf,Bgj,BUT,CVy,[B,K,'2658']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_24',Cby,BUd,BUX,Bny,BUf,Bgj,BUT,BUa]]],['2657',Axi+' +k=1'+AsT+AqC,[[U,Ajf+' /'+Ajc+' zone 23',Cla,BUd,BUX,BZh,BUf,BbT,BUT,CVy,[B,K,'2657']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_23',Cby,BUd,BUX,BZh,BUf,BbT,BUT,BUa]]],['2656',BJD+' +k=1'+AsS+AqC,[[U,Ajf+' /'+Ajc+' zone 22',Cla,BUd,BUX,Blg,BUf,Baz,BUT,CVy,[B,K,'2656']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_22',Cby,BUd,BUX,Blg,BUf,Baz,BUT,BUa]]],['2655',Axf+' +k=1'+AsR+AqC,[[U,Ajf+' /'+Ajc+' zone 21',Cla,BUd,BUX,BZN,BUf,BbS,BUT,CVy,[B,K,'2655']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_21',Cby,BUd,BUX,BZN,BUf,BbS,BUT,BUa]]],['2654',AjX+' +lon_0=60 +k=1'+AsQ+AqC,[[U,Ajf+' /'+Ajc+' zone 20',Cla,BUd,BUX,BrN,BUf,Bay,BUT,CVy,[B,K,'2654']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_20',Cby,BUd,BUX,BrN,BUf,Bay,BUT,BUa]]],['2653',Axc+' +k=1'+ArM+AqC,[[U,Ajf+' /'+Ajc+' zone 19',Cla,BUd,BUX,BXz,BUf,BbR,BUT,CVy,[B,K,'2653']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_19',Cby,BUd,BUX,BXz,BUf,BbR,BUT,BUa]]],['2652',BJC+' +k=1'+AsP+AqC,[[U,Ajf+' /'+Ajc+' zone 18',Cla,BUd,BUX,BkW,BUf,BbQ,BUT,CVy,[B,K,'2652']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_18',Cby,BUd,BUX,BkW,BUf,BbQ,BUT,BUa]]],['2651',AuF+' +k=1'+AwT+AqC,[[U,Ajf+' /'+Ajc+' zone 17',Cla,BUd,BUX,BWt,BUf,Bcf,BUT,CVy,[B,K,'2651']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_17',Cby,BUd,BUX,BWt,BUf,Bcf,BUT,BUa]]],['2650',BHm+' +k=1'+AwS+AqC,[[U,Ajf+' /'+Ajc+' zone 16',Cla,BUd,BUX,BkL,BUf,BbP,BUT,CVy,[B,K,'2650']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_16',Cby,BUd,BUX,BkL,BUf,BbP,BUT,BUa]]],['2649',AtF+' +k=1'+ArP+AqC,[[U,Ajf+' /'+Ajc+' zone 15',Cla,BUd,BUX,BWe,BUf,BbO,BUT,CVy,[B,K,'2649']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_15',Cby,BUd,BUX,BWe,BUf,BbO,BUT,BUa]]],['2648',AyC+' +k=1'+ArO+AqC,[[U,Ajf+' /'+Ajc+' zone 14',Cla,BUd,BUX,BdJ,BUf,Bad,BUT,CVy,[B,K,'2648']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_14',Cby,BUd,BUX,BdJ,BUf,Bad,BUT,BUa]]],['2647',AsG+' +k=1'+ArN+AqC,[[U,Ajf+' /'+Ajc+' zone 13',Cla,BUd,BUX,BWn,BUf,Bax,BUT,CVy,[B,K,'2647']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_13',Cby,BUd,BUX,BWn,BUf,Bax,BUT,BUa]]],['2646',AtL+' +k=1'+BDX+AqC,[[U,Ajf+' /'+Ajc+' zone 12',Cla,BUd,BUX,BdS,BUf,Bgi,BUT,CVy,[B,K,'2646']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_12',Cby,BUd,BUX,BdS,BUf,Bgi,BUT,BUa]]],['2645',Aqn+' +k=1'+BDW+AqC,[[U,Ajf+' /'+Ajc+' zone 11',Cla,BUd,BUX,BWg,BUf,Bdn,BUT,CVy,[B,K,'2645']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_11',Cby,BUd,BUX,BWg,BUf,Bdn,BUT,BUa]]],['2644',ArX+' +k=1'+BBh+AqC,[[U,Ajf+' /'+Ajc+' zone 10',Cla,BUd,BUX,BYz,BUf,Bhd,BUT,CVy,[B,K,'2644']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_10',Cby,BUd,BUX,BYz,BUf,Bhd,BUT,BUa]]],['2643',Apz+' +k=1'+AwU+AqC,[[U,Ajf+' /'+Ajc+' zone 9',Cla,BUd,BUX,BWP,BUf,Bha,BUT,CVy,[B,K,'2643']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_9',Cby,BUd,BUX,BWP,BUf,Bha,BUT,BUa]]],['2642',ArK+' +k=1'+AwR+AqC,[[U,Ajf+' /'+Ajc+' zone 8',Cla,BUd,BUX,BYU,BUf,BhY,BUT,CVy,[B,K,'2642']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_8',Cby,BUd,BUX,BYU,BUf,BhY,BUT,BUa]]],['2641',ApT+' +k=1'+ApC+AqC,[[U,Ajf+' /'+Ajc+' zone 7',Cla,BUd,BUX,BWR,BUf,BbK,BUT,CVy,[B,K,'2641']]],[[U,'Pulkovo_1995_3_degree_Gauss_Kruger_zone_7',Cby,BUd,BUX,BWR,BUf,BbK,BUT,BUa]]],['2640',BJK+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 168W',ClY,BUd,BUX,Bnx,BUf,BUc,BUT,CVy,[B,K,'2640']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_168W',Cbv,BUd,BUX,Bnx,BUf,BUc,BUT,BUa]]],['26393',l+ASr+' +lon_0=12.5'+ATG+' +x_0=1110369.7'+Anq+ZL+q+a,[[U,vh+' / Nigeria East Belt',CnH,BUd,BwT,CAh,Bll,ByM,BUT,CVy,BUj,BUm,[B,K,'26393']]],[[U,'Minna_Nigeria_East_Belt',CfI,BUd,BwT,CAh,Bll,ByM,BUT,BUa]]],['26392',l+ASr+' +lon_0=8.5'+ATG+' +x_0=670553.98'+Anq+ZL+q+a,[[U,vh+' / Nigeria Mid Belt',CnH,BUd,BwT,CAf,Bll,ByL,BUT,CVy,BUj,BUm,[B,K,'26392']]],[[U,'Minna_Nigeria_Mid_Belt',CfI,BUd,BwT,CAf,Bll,ByL,BUT,BUa]]],['26391',l+ASr+' +lon_0=4.5'+ATG+' +x_0=230738.26'+Anq+ZL+q+a,[[U,vh+' / Nigeria West Belt',CnH,BUd,BwT,[A,E,Ef],Bll,ByK,BUT,CVy,BUj,BUm,[B,K,'26391']]],[[U,'Minna_Nigeria_West_Belt',CfI,BUd,BwT,[A,E,Ef],Bll,ByK,BUT,BUa]]],['2639',BEV+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 171W',ClY,BUd,BUX,BYV,BUf,BUc,BUT,CVy,[B,K,'2639']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_171W',Cbv,BUd,BUX,BYV,BUf,BUc,BUT,BUa]]],['2638',BJJ+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 174W',ClY,BUd,BUX,Bnt,BUf,BUc,BUT,CVy,[B,K,'2638']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_174W',Cbv,BUd,BUX,Bnt,BUf,BUc,BUT,BUa]]],['2637',AxL+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 177W',ClY,BUd,BUX,BYF,BUf,BUc,BUT,CVy,[B,K,'2637']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_177W',Cbv,BUd,BUX,BYF,BUf,BUc,BUT,BUa]]],['2636',BJb+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 180E',ClY,BUd,BUX,BnL,BUf,BUc,BUT,CVy,[B,K,'2636']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_180E',Cbv,BUd,BUX,BnL,BUf,BUc,BUT,BUa]]],['2635',BEU+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 177E',ClY,BUd,BUX,BXo,BUf,BUc,BUT,CVy,[B,K,'2635']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_177E',Cbv,BUd,BUX,BXo,BUf,BUc,BUT,BUa]]],['2634',BJI+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 174E',ClY,BUd,BUX,Bnw,BUf,BUc,BUT,CVy,[B,K,'2634']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_174E',Cbv,BUd,BUX,Bnw,BUf,BUc,BUT,BUa]]],['26332',Alu+BEG+q+a,[[U,vh+' / UTM zone 32N',CnH,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26332']]],[[U,'Minna_UTM_zone_32N',CfI,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['26331',Amw+BEG+q+a,[[U,vh+' / UTM zone 31N',CnH,BUd,BUX,BXt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26331']]],[[U,'Minna_UTM_zone_31N',CfI,BUd,BUX,BXt,BUg,BUc,BUT,BUa]]],['2633',AxI+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 171E',ClY,BUd,BUX,BXj,BUf,BUc,BUT,CVy,[B,K,'2633']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_171E',Cbv,BUd,BUX,BXj,BUf,BUc,BUT,BUa]]],['2632',BJH+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 168E',ClY,BUd,BUX,BoA,BUf,BUc,BUT,CVy,[B,K,'2632']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_168E',Cbv,BUd,BUX,BoA,BUf,BUc,BUT,BUa]]],['2631',BGM+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 165E',ClY,BUd,BUX,BXW,BUf,BUc,BUT,CVy,[B,K,'2631']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_165E',Cbv,BUd,BUX,BXW,BUf,BUc,BUT,BUa]]],['2630',BJG+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 162E',ClY,BUd,BUX,BkM,BUf,BUc,BUT,CVy,[B,K,'2630']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_162E',Cbv,BUd,BUX,BkM,BUf,BUc,BUT,BUa]]],['2629',Axm+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 159E',ClY,BUd,BUX,BZl,BUf,BUc,BUT,CVy,[B,K,'2629']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_159E',Cbv,BUd,BUX,BZl,BUf,BUc,BUT,BUa]]],['2628',AjX+' +lon_0=156 +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 156E',ClY,BUd,BUX,BpR,BUf,BUc,BUT,CVy,[B,K,'2628']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_156E',Cbv,BUd,BUX,BpR,BUf,BUc,BUT,BUa]]],['2627',BGK+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 153E',ClY,BUd,BUX,BYu,BUf,BUc,BUT,CVy,[B,K,'2627']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_153E',Cbv,BUd,BUX,BYu,BUf,BUc,BUT,BUa]]],['2626',BNQ+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 150E',ClY,BUd,BUX,Beg,BUf,BUc,BUT,CVy,[B,K,'2626']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_150E',Cbv,BUd,BUX,Beg,BUf,BUc,BUT,BUa]]],['2625',BGH+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 147E',ClY,BUd,BUX,BYW,BUf,BUc,BUT,CVy,[B,K,'2625']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_147E',Cbv,BUd,BUX,BYW,BUf,BUc,BUT,BUa]]],['2624',BJF+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 144E',ClY,BUd,BUX,Bnz,BUf,BUc,BUT,CVy,[B,K,'2624']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_144E',Cbv,BUd,BUX,Bnz,BUf,BUc,BUT,BUa]]],['26237',AmP+CJ+ASd+q+a,[[U,AMM+' / UTM zone 37N',CsZ,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'26237']]],[[U,'Massawa_UTM_zone_37N',[S,'GCS_Massawa',Cat,BUU,BUW],BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['2623',Axl+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 141E',ClY,BUd,BUX,BYK,BUf,BUc,BUT,CVy,[B,K,'2623']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_141E',Cbv,BUd,BUX,BYK,BUf,BUc,BUT,BUa]]],['2622',BJE+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 138E',ClY,BUd,BUX,Blh,BUf,BUc,BUT,CVy,[B,K,'2622']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_138E',Cbv,BUd,BUX,Blh,BUf,BUc,BUT,BUa]]],['2621',Ape+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 135E',ClY,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'2621']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_135E',Cbv,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['2620',Asl+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 132E',ClY,BUd,BUX,BaU,BUf,BUc,BUT,CVy,[B,K,'2620']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_132E',Cbv,BUd,BUX,BaU,BUf,BUc,BUT,BUa]]],['26195',AU+' +lat_1=22.5 +lat_0=22.5'+Agh+' +k_0=0.999616437'+HV+hh+BNP+q+a,[[U,fv+' / Sahara Sud',Cnk,BWW,[A,C,AJO],BrM,[A,N,AfS],BWL,Baa,CVy,BUl,BUk,[B,K,'26195']]],[[U,'Merchich_Sahara_Sud',Cfu,BVD,[A,C,AJO],BrM,[A,N,AfS],BWL,Baa,BUa,[A,W,AJO]]]],['26194',AU+' +lat_1=26.1 +lat_0=26.1'+Agh+' +k_0=0.999616304 +x_0=1200000'+hh+BNP+q+a,[[U,fv+' / Sahara Nord',Cnk,BWW,CPM,BrM,[A,N,AfT],[A,I,fE],Baa,CVy,BUl,BUk,[B,K,'26194']]],[[U,'Merchich_Sahara_Nord',Cfu,BVD,CPM,BrM,[A,N,AfT],[A,I,fE],Baa,BUa,[A,W,'raw:26.1']]]],['26192',AU+' +lat_1=29.7 +lat_0=29.7'+Agh+' +k_0=0.9996155960000001'+Axs+fa+q+a,[[U,fv+' / Sud Maroc',Cnk,BWW,CPL,BrM,[A,N,AfU],BUc,BZw,CVy,BUl,BUk,[B,K,'26192']]],[[U,'Merchich_Sud_Maroc',Cfu,BVD,CPL,BrM,[A,N,AfU],BUc,BZw,BUa,[A,W,'raw:29.7']]]],['26191',BHl+Agh+BNS+BNP+q+a,[[U,fv+' / Nord Maroc',Cnk,BWW,Bnr,BrM,Bnq,BUc,BZw,CVy,BUl,BUk,[B,K,'26191']]],[[U,'Merchich_Nord_Maroc',Cfu,BVD,Bnr,BrM,Bnq,BUc,BZw,BUa,Bxr]]],['2619',Apd+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 129E',ClY,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'2619']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_129E',Cbv,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['2618',Aty+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 126E',ClY,BUd,BUX,Bao,BUf,BUc,BUT,CVy,[B,K,'2618']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_126E',Cbv,BUd,BUX,Bao,BUf,BUc,BUT,BUa]]],['2617',ApF+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 123E',ClY,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'2617']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_123E',Cbv,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['2616',Atw+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 120E',ClY,BUd,BUX,BbG,BUf,BUc,BUT,CVy,[B,K,'2616']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_120E',Cbv,BUd,BUX,BbG,BUf,BUc,BUT,BUa]]],['2615',ApE+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 117E',ClY,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'2615']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_117E',Cbv,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['2614',Atu+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 114E',ClY,BUd,BUX,BZy,BUf,BUc,BUT,CVy,[B,K,'2614']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_114E',Cbv,BUd,BUX,BZy,BUf,BUc,BUT,BUa]]],['2613',ApX+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 111E',ClY,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'2613']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_111E',Cbv,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['2612',Ats+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 108E',ClY,BUd,BUX,Bbi,BUf,BUc,BUT,CVy,[B,K,'2612']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_108E',Cbv,BUd,BUX,Bbi,BUf,BUc,BUT,BUa]]],['2611',ApW+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 105E',ClY,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'2611']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_105E',Cbv,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['2610',Atq+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 102E',ClY,BUd,BUX,Ban,BUf,BUc,BUT,CVy,[B,K,'2610']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_102E',Cbv,BUd,BUX,Ban,BUf,BUc,BUT,BUa]]],['2609',Apc+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 99E',ClY,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'2609']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_99E',Cbv,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['2608',Ato+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 96E',ClY,BUd,BUX,BbF,BUf,BUc,BUT,CVy,[B,K,'2608']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_96E',Cbv,BUd,BUX,BbF,BUf,BUc,BUT,BUa]]],['2607',Apb+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 93E',ClY,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'2607']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_93E',Cbv,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['2606',Asm+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 90E',ClY,BUd,BUX,BYP,BUf,BUc,BUT,CVy,[B,K,'2606']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_90E',Cbv,BUd,BUX,BYP,BUf,BUc,BUT,BUa]]],['2605',Apa+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 87E',ClY,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'2605']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_87E',Cbv,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['2604',Atm+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 84E',ClY,BUd,BUX,Bbh,BUf,BUc,BUT,CVy,[B,K,'2604']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_84E',Cbv,BUd,BUX,Bbh,BUf,BUc,BUT,BUa]]],['2603',ApZ+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 81E',ClY,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'2603']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_81E',Cbv,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['2602',Atk+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 78E',ClY,BUd,BUX,Bam,BUf,BUc,BUT,CVy,[B,K,'2602']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_78E',Cbv,BUd,BUX,Bam,BUf,BUc,BUT,BUa]]],['2601',ApY+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 75E',ClY,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'2601']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_75E',Cbv,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['2599',AjX+' +lon_0=72 +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 72E',ClY,BUd,BUX,Bny,BUf,BUc,BUT,CVy,[B,K,'2599']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_72E',Cbv,BUd,BUX,Bny,BUf,BUc,BUT,BUa]]],['2598',Axi+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 69E',ClY,BUd,BUX,BZh,BUf,BUc,BUT,CVy,[B,K,'2598']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_69E',Cbv,BUd,BUX,BZh,BUf,BUc,BUT,BUa]]],['2597',BJD+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 66E',ClY,BUd,BUX,Blg,BUf,BUc,BUT,CVy,[B,K,'2597']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_66E',Cbv,BUd,BUX,Blg,BUf,BUc,BUT,BUa]]],['2596',Axf+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 63E',ClY,BUd,BUX,BZN,BUf,BUc,BUT,CVy,[B,K,'2596']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_63E',Cbv,BUd,BUX,BZN,BUf,BUc,BUT,BUa]]],['2595',AjX+' +lon_0=60 +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 60E',ClY,BUd,BUX,BrN,BUf,BUc,BUT,CVy,[B,K,'2595']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_60E',Cbv,BUd,BUX,BrN,BUf,BUc,BUT,BUa]]],['2594',Axc+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 57E',ClY,BUd,BUX,BXz,BUf,BUc,BUT,CVy,[B,K,'2594']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_57E',Cbv,BUd,BUX,BXz,BUf,BUc,BUT,BUa]]],['25932',Alu+Aka+ADq+q+a,[[U,'Malongo 1987 / UTM zone 32S',Cqr,BUd,BUX,BWO,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'25932']]],[[U,'Malongo_1987_UTM_zone_32S',[S,'GCS_Malongo 1987',[V,AhC,BUs],BUU,BUW],BUd,BUX,BWO,BUg,BUc,BUo,BUa]]],['2593',BJC+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 54E',ClY,BUd,BUX,BkW,BUf,BUc,BUT,CVy,[B,K,'2593']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_54E',Cbv,BUd,BUX,BkW,BUf,BUc,BUT,BUa]]],['2592',AuF+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 51E',ClY,BUd,BUX,BWt,BUf,BUc,BUT,CVy,[B,K,'2592']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_51E',Cbv,BUd,BUX,BWt,BUf,BUc,BUT,BUa]]],['2591',BHm+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 48E',ClY,BUd,BUX,BkL,BUf,BUc,BUT,CVy,[B,K,'2591']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_48E',Cbv,BUd,BUX,BkL,BUf,BUc,BUT,BUa]]],['2590',AtF+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 45E',ClY,BUd,BUX,BWe,BUf,BUc,BUT,CVy,[B,K,'2590']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_45E',Cbv,BUd,BUX,BWe,BUf,BUc,BUT,BUa]]],['2589',AyC+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 42E',ClY,BUd,BUX,BdJ,BUf,BUc,BUT,CVy,[B,K,'2589']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_42E',Cbv,BUd,BUX,BdJ,BUf,BUc,BUT,BUa]]],['25884',ArK+AlL+BRq,[[U,ED+' / TM Baltic93',Cld,BUd,BUX,BYU,BUg,BUc,BUT,CVy,[B,K,'25884']]],[[U,'ETRS89_TM_Baltic93',CcG,BUd,BUX,BYU,BUg,BUc,BUT,BUa]]],['2588',AsG+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 39E',ClY,BUd,BUX,BWn,BUf,BUc,BUT,CVy,[B,K,'2588']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_39E',Cbv,BUd,BUX,BWn,BUf,BUc,BUT,BUa]]],['2587',AtL+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 36E',ClY,BUd,BUX,BdS,BUf,BUc,BUT,CVy,[B,K,'2587']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_36E',Cbv,BUd,BUX,BdS,BUf,BUc,BUT,BUa]]],['2586',Aqn+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 33E',ClY,BUd,BUX,BWg,BUf,BUc,BUT,CVy,[B,K,'2586']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_33E',Cbv,BUd,BUX,BWg,BUf,BUc,BUT,BUa]]],['2585',ArX+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 30E',ClY,BUd,BUX,BYz,BUf,BUc,BUT,CVy,[B,K,'2585']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_30E',Cbv,BUd,BUX,BYz,BUf,BUc,BUT,BUa]]],['2584',Apz+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 27E',ClY,BUd,BUX,BWP,BUf,BUc,BUT,CVy,[B,K,'2584']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_27E',Cbv,BUd,BUX,BWP,BUf,BUc,BUT,BUa]]],['25837',AmP+j+c+q+a,[[U,ED+' / UTM zone 37N',Cld,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25837']]],[[U,'ETRS89_UTM_zone_37N',CcG,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['25836',AnF+j+c+q+a,[[U,ED+' / UTM zone 36N',Cld,BUd,BUX,BWg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25836']]],[[U,'ETRS89_UTM_zone_36N',CcG,BUd,BUX,BWg,BUg,BUc,BUT,BUa]]],['25835',Amc+j+c+q+a,[[U,ED+' / UTM zone 35N',Cld,BUd,BUX,BWP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25835']]],[[U,'ETRS89_UTM_zone_35N',CcG,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['25834',Anl+j+c+q+a,[[U,ED+' / UTM zone 34N',Cld,BUd,BUX,BWR,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25834']]],[[U,'ETRS89_UTM_zone_34N',CcG,BUd,BUX,BWR,BUg,BUc,BUT,BUa]]],['25833',AmO+j+c+q+a,[[U,ED+' / UTM zone 33N',Cld,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25833']]],[[U,'ETRS89_UTM_zone_33N',CcG,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['25832',Alu+j+c+q+a,[[U,ED+' / UTM zone 32N',Cld,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25832']]],[[U,'ETRS89_UTM_zone_32N',CcG,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['25831',Amw+j+c+q+a,[[U,ED+' / UTM zone 31N',Cld,BUd,BUX,BXt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25831']]],[[U,'ETRS89_UTM_zone_31N',CcG,BUd,BUX,BXt,BUg,BUc,BUT,BUa]]],['25830',AmR+j+c+q+a,[[U,ED+' / UTM zone 30N',Cld,BUd,BUX,Bak,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25830']]],[[U,'ETRS89_UTM_zone_30N',CcG,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['2583',ArK+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 24E',ClY,BUd,BUX,BYU,BUf,BUc,BUT,CVy,[B,K,'2583']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_24E',Cbv,BUd,BUX,BYU,BUf,BUc,BUT,BUa]]],['25829',AmJ+j+c+q+a,[[U,ED+' / UTM zone 29N',Cld,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25829']]],[[U,'ETRS89_UTM_zone_29N',CcG,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['25828',BUO,[[U,ED+' / UTM zone 28N',Cld,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25828']]],[[U,'ETRS89_UTM_zone_28N',CcG,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['2582',ApT+' +k=1'+BCN,[[U,Aje+' /'+Ajc+' CM 21E',ClY,BUd,BUX,BWR,BUf,BUc,BUT,CVy,[B,K,'2582']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_CM_21E',Cbv,BUd,BUX,BWR,BUf,BUc,BUT,BUa]]],['2581',BJK+' +k=1 +x_0=64500000'+BBO,[[U,Aje+' /'+Ajc+' zone 64',ClY,BUd,BUX,Bnx,BUf,Byd,BUT,CVy,[B,K,'2581']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_64',Cbv,BUd,BUX,Bnx,BUf,Byd,BUT,BUa]]],['2580',BEV+' +k=1 +x_0=63500000'+BBO,[[U,Aje+' /'+Ajc+' zone 63',ClY,BUd,BUX,BYV,BUf,Byc,BUT,CVy,[B,K,'2580']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_63',Cbv,BUd,BUX,BYV,BUf,Byc,BUT,BUa]]],['2579',BJJ+' +k=1 +x_0=62500000'+BBO,[[U,Aje+' /'+Ajc+' zone 62',ClY,BUd,BUX,Bnt,BUf,Byb,BUT,CVy,[B,K,'2579']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_62',Cbv,BUd,BUX,Bnt,BUf,Byb,BUT,BUa]]],['2578',AxL+' +k=1 +x_0=61500000'+BBO,[[U,Aje+' /'+Ajc+' zone 61',ClY,BUd,BUX,BYF,BUf,Bya,BUT,CVy,[B,K,'2578']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_61',Cbv,BUd,BUX,BYF,BUf,Bya,BUT,BUa]]],['2576',BEU+' +k=1 +x_0=59500000'+BBO,[[U,Aje+' /'+Ajc+' zone 59',ClY,BUd,BUX,BXo,BUf,ByZ,BUT,CVy,[B,K,'2576']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_59',Cbv,BUd,BUX,BXo,BUf,ByZ,BUT,BUa]]],['2575',BJI+' +k=1 +x_0=58500000'+BBO,[[U,Aje+' /'+Ajc+' zone 58',ClY,BUd,BUX,Bnw,BUf,ByY,BUT,CVy,[B,K,'2575']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_58',Cbv,BUd,BUX,Bnw,BUf,ByY,BUT,BUa]]],['2574',AxI+' +k=1 +x_0=57500000'+BBO,[[U,Aje+' /'+Ajc+' zone 57',ClY,BUd,BUX,BXj,BUf,ByX,BUT,CVy,[B,K,'2574']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_57',Cbv,BUd,BUX,BXj,BUf,ByX,BUT,BUa]]],['2573',BJH+' +k=1 +x_0=56500000'+BBO,[[U,Aje+' /'+Ajc+' zone 56',ClY,BUd,BUX,BoA,BUf,ByW,BUT,CVy,[B,K,'2573']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_56',Cbv,BUd,BUX,BoA,BUf,ByW,BUT,BUa]]],['2572',BGM+' +k=1 +x_0=55500000'+BBO,[[U,Aje+' /'+Ajc+' zone 55',ClY,BUd,BUX,BXW,BUf,ByV,BUT,CVy,[B,K,'2572']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_55',Cbv,BUd,BUX,BXW,BUf,ByV,BUT,BUa]]],['2571',BJG+' +k=1 +x_0=54500000'+BBO,[[U,Aje+' /'+Ajc+' zone 54',ClY,BUd,BUX,BkM,BUf,ByU,BUT,CVy,[B,K,'2571']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_54',Cbv,BUd,BUX,BkM,BUf,ByU,BUT,BUa]]],['2570',Axm+' +k=1 +x_0=53500000'+BBO,[[U,Aje+' /'+Ajc+' zone 53',ClY,BUd,BUX,BZl,BUf,ByT,BUT,CVy,[B,K,'2570']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_53',Cbv,BUd,BUX,BZl,BUf,ByT,BUT,BUa]]],['2569',AjX+' +lon_0=156 +k=1 +x_0=52500000'+BBO,[[U,Aje+' /'+Ajc+' zone 52',ClY,BUd,BUX,BpR,BUf,ByS,BUT,CVy,[B,K,'2569']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_52',Cbv,BUd,BUX,BpR,BUf,ByS,BUT,BUa]]],['2568',BGK+' +k=1 +x_0=51500000'+BBO,[[U,Aje+' /'+Ajc+' zone 51',ClY,BUd,BUX,BYu,BUf,ByR,BUT,CVy,[B,K,'2568']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_51',Cbv,BUd,BUX,BYu,BUf,ByR,BUT,BUa]]],['2567',BNQ+' +k=1 +x_0=50500000'+BBO,[[U,Aje+' /'+Ajc+' zone 50',ClY,BUd,BUX,Beg,BUf,ByQ,BUT,CVy,[B,K,'2567']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_50',Cbv,BUd,BUX,Beg,BUf,ByQ,BUT,BUa]]],['2566',BGH+' +k=1 +x_0=49500000'+BBO,[[U,Aje+' /'+Ajc+' zone 49',ClY,BUd,BUX,BYW,BUf,ByP,BUT,CVy,[B,K,'2566']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_49',Cbv,BUd,BUX,BYW,BUf,ByP,BUT,BUa]]],['2565',BJF+' +k=1 +x_0=48500000'+BBO,[[U,Aje+' /'+Ajc+' zone 48',ClY,BUd,BUX,Bnz,BUf,ByO,BUT,CVy,[B,K,'2565']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_48',Cbv,BUd,BUX,Bnz,BUf,ByO,BUT,BUa]]],['2564',Axl+' +k=1 +x_0=47500000'+BBO,[[U,Aje+' /'+Ajc+' zone 47',ClY,BUd,BUX,BYK,BUf,Bwr,BUT,CVy,[B,K,'2564']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_47',Cbv,BUd,BUX,BYK,BUf,Bwr,BUT,BUa]]],['2563',BJE+' +k=1 +x_0=46500000'+BBO,[[U,Aje+' /'+Ajc+' zone 46',ClY,BUd,BUX,Blh,BUf,ByN,BUT,CVy,[B,K,'2563']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_46',Cbv,BUd,BUX,Blh,BUf,ByN,BUT,BUa]]],['2562',Ape+' +k=1'+BDU+AoH,[[U,Aje+' /'+Ajc+' zone 45',ClY,BUd,BUX,BWd,BUf,BkR,BUT,CVy,[B,K,'2562']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_45',Cbv,BUd,BUX,BWd,BUf,BkR,BUT,BUa]]],['2561',Asl+' +k=1'+BDT+AoH,[[U,Aje+' /'+Ajc+' zone 44',ClY,BUd,BUX,BaU,BUf,Blo,BUT,CVy,[B,K,'2561']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_44',Cbv,BUd,BUX,BaU,BUf,Blo,BUT,BUa]]],['2560',Apd+' +k=1'+BDS+AoH,[[U,Aje+' /'+Ajc+' zone 43',ClY,BUd,BUX,BWQ,BUf,BkQ,BUT,CVy,[B,K,'2560']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_43',Cbv,BUd,BUX,BWQ,BUf,BkQ,BUT,BUa]]],['2559',Aty+' +k=1'+BDR+AoH,[[U,Aje+' /'+Ajc+' zone 42',ClY,BUd,BUX,Bao,BUf,Bln,BUT,CVy,[B,K,'2559']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_42',Cbv,BUd,BUX,Bao,BUf,Bln,BUT,BUa]]],['2558',ApF+' +k=1'+BDQ+AoH,[[U,Aje+' /'+Ajc+' zone 41',ClY,BUd,BUX,BWU,BUf,BkP,BUT,CVy,[B,K,'2558']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_41',Cbv,BUd,BUX,BWU,BUf,BkP,BUT,BUa]]],['2557',Atw+' +k=1'+BDP+AoH,[[U,Aje+' /'+Ajc+' zone 40',ClY,BUd,BUX,BbG,BUf,BkV,BUT,CVy,[B,K,'2557']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_40',Cbv,BUd,BUX,BbG,BUf,BkV,BUT,BUa]]],['2556',ApE+' +k=1'+BDO+AoH,[[U,Aje+' /'+Ajc+' zone 39',ClY,BUd,BUX,BWS,BUf,BkZ,BUT,CVy,[B,K,'2556']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_39',Cbv,BUd,BUX,BWS,BUf,BkZ,BUT,BUa]]],['2555',Atu+' +k=1'+BDN+AoH,[[U,Aje+' /'+Ajc+' zone 38',ClY,BUd,BUX,BZy,BUf,BkU,BUT,CVy,[B,K,'2555']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_38',Cbv,BUd,BUX,BZy,BUf,BkU,BUT,BUa]]],['2554',ApX+' +k=1'+BDM+AoH,[[U,Aje+' /'+Ajc+' zone 37',ClY,BUd,BUX,BWX,BUf,BkY,BUT,CVy,[B,K,'2554']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_37',Cbv,BUd,BUX,BWX,BUf,BkY,BUT,BUa]]],['2553',Ats+' +k=1'+BDL+AoH,[[U,Aje+' /'+Ajc+' zone 36',ClY,BUd,BUX,Bbi,BUf,BkT,BUT,CVy,[B,K,'2553']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_36',Cbv,BUd,BUX,Bbi,BUf,BkT,BUT,BUa]]],['2552',ApW+' +k=1'+BDK+AoH,[[U,Aje+' /'+Ajc+' zone 35',ClY,BUd,BUX,BWK,BUf,BkX,BUT,CVy,[B,K,'2552']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_35',Cbv,BUd,BUX,BWK,BUf,BkX,BUT,BUa]]],['2551',Atq+' +k=1'+BDJ+AoH,[[U,Aje+' /'+Ajc+' zone 34',ClY,BUd,BUX,Ban,BUf,BkS,BUT,CVy,[B,K,'2551']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_34',Cbv,BUd,BUX,Ban,BUf,BkS,BUT,BUa]]],['2549',Apc+' +k=1'+AwV+AoH,[[U,Aje+' /'+Ajc+' zone 33',ClY,BUd,BUX,BWf,BUf,BdO,BUT,CVy,[B,K,'2549']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_33',Cbv,BUd,BUX,BWf,BUf,BdO,BUT,BUa]]],['2548',Ato+' +k=1'+ArV+AoH,[[U,Aje+' /'+Ajc+' zone 32',ClY,BUd,BUX,BbF,BUf,BcO,BUT,CVy,[B,K,'2548']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_32',Cbv,BUd,BUX,BbF,BUf,BcO,BUT,BUa]]],['2547',Apb+' +k=1'+AqY+AoH,[[U,Aje+' /'+Ajc+' zone 31',ClY,BUd,BUX,BWk,BUf,BaY,BUT,CVy,[B,K,'2547']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_31',Cbv,BUd,BUX,BWk,BUf,BaY,BUT,BUa]]],['2546',Asm+' +k=1'+AsZ+AoH,[[U,Aje+' /'+Ajc+' zone 30',ClY,BUd,BUX,BYP,BUf,BcN,BUT,CVy,[B,K,'2546']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_30',Cbv,BUd,BUX,BYP,BUf,BcN,BUT,BUa]]],['2545',Apa+' +k=1'+AsY+AoH,[[U,Aje+' /'+Ajc+' zone 29',ClY,BUd,BUX,BXK,BUf,Baq,BUT,CVy,[B,K,'2545']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_29',Cbv,BUd,BUX,BXK,BUf,Baq,BUT,BUa]]],['2544',Atm+' +k=1'+AsX+AoH,[[U,Aje+' /'+Ajc+' zone 28',ClY,BUd,BUX,Bbh,BUf,Bbm,BUT,CVy,[B,K,'2544']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_28',Cbv,BUd,BUX,Bbh,BUf,Bbm,BUT,BUa]]],['2543',ApZ+' +k=1'+AsW+AoH,[[U,Aje+' /'+Ajc+' zone 27',ClY,BUd,BUX,BWz,BUf,Bbl,BUT,CVy,[B,K,'2543']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_27',Cbv,BUd,BUX,BWz,BUf,Bbl,BUT,BUa]]],['2542',Atk+' +k=1'+AsV+AoH,[[U,Aje+' /'+Ajc+' zone 26',ClY,BUd,BUX,Bam,BUf,Bbj,BUT,CVy,[B,K,'2542']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_26',Cbv,BUd,BUX,Bam,BUf,Bbj,BUT,BUa]]],['2541',ApY+' +k=1'+AsU+AoH,[[U,Aje+' /'+Ajc+' zone 25',ClY,BUd,BUX,BWs,BUf,Bbk,BUT,CVy,[B,K,'2541']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_25',Cbv,BUd,BUX,BWs,BUf,Bbk,BUT,BUa]]],['2540',AjX+' +lon_0=72 +k=1'+BNR+AqX,[[U,Aje+' /'+Ajc+' zone 24',ClY,BUd,BUX,Bny,BUf,Bgj,BUT,CVy,[B,K,'2540']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_24',Cbv,BUd,BUX,Bny,BUf,Bgj,BUT,BUa]]],['25395',AjX+ATF+BLf+q+a,[[U,'Luzon 1911 /'+qP+' zone V',Cml,BUd,BUX,Blp,BWh,BUc,BUT,CVy,BUl,BUk,[B,K,'25395']]],[[U,'Luzon_1911_Philippines_zone_V',CeT,BUd,BUX,Blp,BWh,BUc,BUT,BUa]]],['25394',ApF+BLf+q+a,[[U,'Luzon 1911 /'+qP+' zone IV',Cml,BUd,BUX,BWU,BWh,BUc,BUT,CVy,BUl,BUk,[B,K,'25394']]],[[U,'Luzon_1911_Philippines_zone_IV',CeT,BUd,BUX,BWU,BWh,BUc,BUT,BUa]]],['25393',AjX+' +lon_0=121'+BLf+q+a,[[U,'Luzon 1911 /'+qP+' zone III',Cml,BUd,BUX,BpT,BWh,BUc,BUT,CVy,BUl,BUk,[B,K,'25393']]],[[U,'Luzon_1911_Philippines_zone_III',CeT,BUd,BUX,BpT,BWh,BUc,BUT,BUa]]],['25392',AjX+' +lon_0=119'+BLf+q+a,[[U,'Luzon 1911 /'+qP+' zone II',Cml,BUd,BUX,Bra,BWh,BUc,BUT,CVy,BUl,BUk,[B,K,'25392']]],[[U,'Luzon_1911_Philippines_zone_II',CeT,BUd,BUX,Bra,BWh,BUc,BUT,BUa]]],['25391',ApE+BLf+q+a,[[U,'Luzon 1911 /'+qP+' zone I',Cml,BUd,BUX,BWS,BWh,BUc,BUT,CVy,BUl,BUk,[B,K,'25391']]],[[U,'Luzon_1911_Philippines_zone_I',CeT,BUd,BUX,BWS,BWh,BUc,BUT,BUa]]],['2539',Axi+' +k=1'+AsT+AoH,[[U,Aje+' /'+Ajc+' zone 23',ClY,BUd,BUX,BZh,BUf,BbT,BUT,CVy,[B,K,'2539']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_23',Cbv,BUd,BUX,BZh,BUf,BbT,BUT,BUa]]],['2538',BJD+' +k=1'+AsS+AoH,[[U,Aje+' /'+Ajc+' zone 22',ClY,BUd,BUX,Blg,BUf,Baz,BUT,CVy,[B,K,'2538']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_22',Cbv,BUd,BUX,Blg,BUf,Baz,BUT,BUa]]],['2537',Axf+' +k=1'+AsR+AoH,[[U,Aje+' /'+Ajc+' zone 21',ClY,BUd,BUX,BZN,BUf,BbS,BUT,CVy,[B,K,'2537']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_21',Cbv,BUd,BUX,BZN,BUf,BbS,BUT,BUa]]],['2536',AjX+' +lon_0=60 +k=1'+AsQ+AoH,[[U,Aje+' /'+Ajc+' zone 20',ClY,BUd,BUX,BrN,BUf,Bay,BUT,CVy,[B,K,'2536']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_20',Cbv,BUd,BUX,BrN,BUf,Bay,BUT,BUa]]],['2535',Axc+' +k=1'+ArM+AoH,[[U,Aje+' /'+Ajc+' zone 19',ClY,BUd,BUX,BXz,BUf,BbR,BUT,CVy,[B,K,'2535']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_19',Cbv,BUd,BUX,BXz,BUf,BbR,BUT,BUa]]],['2534',BJC+' +k=1'+AsP+AoH,[[U,Aje+' /'+Ajc+' zone 18',ClY,BUd,BUX,BkW,BUf,BbQ,BUT,CVy,[B,K,'2534']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_18',Cbv,BUd,BUX,BkW,BUf,BbQ,BUT,BUa]]],['2533',AuF+' +k=1'+AwT+AoH,[[U,Aje+' /'+Ajc+' zone 17',ClY,BUd,BUX,BWt,BUf,Bcf,BUT,CVy,[B,K,'2533']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_17',Cbv,BUd,BUX,BWt,BUf,Bcf,BUT,BUa]]],['2532',BHm+' +k=1'+AwS+AoH,[[U,Aje+' /'+Ajc+' zone 16',ClY,BUd,BUX,BkL,BUf,BbP,BUT,CVy,[B,K,'2532']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_16',Cbv,BUd,BUX,BkL,BUf,BbP,BUT,BUa]]],['2531',AtF+' +k=1'+ArP+AoH,[[U,Aje+' /'+Ajc+' zone 15',ClY,BUd,BUX,BWe,BUf,BbO,BUT,CVy,[B,K,'2531']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_15',Cbv,BUd,BUX,BWe,BUf,BbO,BUT,BUa]]],['2530',AyC+' +k=1'+ArO+AoH,[[U,Aje+' /'+Ajc+' zone 14',ClY,BUd,BUX,BdJ,BUf,Bad,BUT,CVy,[B,K,'2530']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_14',Cbv,BUd,BUX,BdJ,BUf,Bad,BUT,BUa]]],['2529',AsG+' +k=1'+ArN+AoH,[[U,Aje+' /'+Ajc+' zone 13',ClY,BUd,BUX,BWn,BUf,Bax,BUT,CVy,[B,K,'2529']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_13',Cbv,BUd,BUX,BWn,BUf,Bax,BUT,BUa]]],['2528',AtL+' +k=1'+BDX+AoH,[[U,Aje+' /'+Ajc+' zone 12',ClY,BUd,BUX,BdS,BUf,Bgi,BUT,CVy,[B,K,'2528']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_12',Cbv,BUd,BUX,BdS,BUf,Bgi,BUT,BUa]]],['2527',Aqn+' +k=1'+BDW+AoH,[[U,Aje+' /'+Ajc+' zone 11',ClY,BUd,BUX,BWg,BUf,Bdn,BUT,CVy,[B,K,'2527']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_11',Cbv,BUd,BUX,BWg,BUf,Bdn,BUT,BUa]]],['2526',ArX+' +k=1'+BBh+AoH,[[U,Aje+' /'+Ajc+' zone 10',ClY,BUd,BUX,BYz,BUf,Bhd,BUT,CVy,[B,K,'2526']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_10',Cbv,BUd,BUX,BYz,BUf,Bhd,BUT,BUa]]],['2525',Apz+' +k=1'+AwU+AoH,[[U,Aje+' /'+Ajc+' zone 9',ClY,BUd,BUX,BWP,BUf,Bha,BUT,CVy,[B,K,'2525']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_9',Cbv,BUd,BUX,BWP,BUf,Bha,BUT,BUa]]],['2524',ArK+' +k=1'+AwR+AoH,[[U,Aje+' /'+Ajc+' zone 8',ClY,BUd,BUX,BYU,BUf,BhY,BUT,CVy,[B,K,'2524']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_8',Cbv,BUd,BUX,BYU,BUf,BhY,BUT,BUa]]],['25231',Amw+Akc+q+a,[[U,'Lome / UTM zone 31N',CsG,BUd,BUX,BXt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'25231']]],[[U,'Lome_UTM_zone_31N',[S,'GCS_Lome',Cbb,BUU,BUW],BUd,BUX,BXt,BUg,BUc,BUT,BUa]]],['2523',ApT+' +k=1'+ApC+AoH,[[U,Aje+' /'+Ajc+' zone 7',ClY,BUd,BUX,BWR,BUf,BbK,BUT,CVy,[B,K,'2523']]],[[U,'Pulkovo_1942_3_degree_Gauss_Kruger_zone_7',Cbv,BUd,BUX,BWR,BUf,BbK,BUT,BUa]]],['2522',BEV+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 171W',ClY,BUd,BUX,BYV,BUf,BUc,BUT,CVy,[B,K,'2522']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_171W',Cbv,BUd,BUX,BYV,BUf,BUc,BUT,BUa]]],['2521',AxL+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 177W',ClY,BUd,BUX,BYF,BUf,BUc,BUT,CVy,[B,K,'2521']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_177W',Cbv,BUd,BUX,BYF,BUf,BUc,BUT,BUa]]],['2520',BEU+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 177E',ClY,BUd,BUX,BXo,BUf,BUc,BUT,CVy,[B,K,'2520']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_177E',Cbv,BUd,BUX,BXo,BUf,BUc,BUT,BUa]]],['2519',AxI+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 171E',ClY,BUd,BUX,BXj,BUf,BUc,BUT,CVy,[B,K,'2519']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_171E',Cbv,BUd,BUX,BXj,BUf,BUc,BUT,BUa]]],['2518',BGM+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 165E',ClY,BUd,BUX,BXW,BUf,BUc,BUT,CVy,[B,K,'2518']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_165E',Cbv,BUd,BUX,BXW,BUf,BUc,BUT,BUa]]],['2517',Axm+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 159E',ClY,BUd,BUX,BZl,BUf,BUc,BUT,CVy,[B,K,'2517']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_159E',Cbv,BUd,BUX,BZl,BUf,BUc,BUT,BUa]]],['2516',BGK+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 153E',ClY,BUd,BUX,BYu,BUf,BUc,BUT,CVy,[B,K,'2516']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_153E',Cbv,BUd,BUX,BYu,BUf,BUc,BUT,BUa]]],['2515',BGH+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 147E',ClY,BUd,BUX,BYW,BUf,BUc,BUT,CVy,[B,K,'2515']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_147E',Cbv,BUd,BUX,BYW,BUf,BUc,BUT,BUa]]],['2514',Axl+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 141E',ClY,BUd,BUX,BYK,BUf,BUc,BUT,CVy,[B,K,'2514']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_141E',Cbv,BUd,BUX,BYK,BUf,BUc,BUT,BUa]]],['2513',Ape+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 135E',ClY,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'2513']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_135E',Cbv,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['2512',Apd+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 129E',ClY,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'2512']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_129E',Cbv,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['2511',ApF+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 123E',ClY,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'2511']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_123E',Cbv,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['2510',ApE+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 117E',ClY,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'2510']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_117E',Cbv,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['2509',ApX+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 111E',ClY,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'2509']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_111E',Cbv,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['2508',ApW+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 105E',ClY,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'2508']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_105E',Cbv,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['2507',Apc+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 99E',ClY,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'2507']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_99E',Cbv,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['2506',Apb+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 93E',ClY,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'2506']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_93E',Cbv,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['2505',Apa+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 87E',ClY,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'2505']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_87E',Cbv,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['2504',ApZ+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 81E',ClY,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'2504']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_81E',Cbv,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['2503',ApY+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 75E',ClY,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'2503']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_75E',Cbv,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['2502',Axi+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 69E',ClY,BUd,BUX,BZh,BUf,BUc,BUT,CVy,[B,K,'2502']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_69E',Cbv,BUd,BUX,BZh,BUf,BUc,BUT,BUa]]],['2501',Axf+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 63E',ClY,BUd,BUX,BZN,BUf,BUc,BUT,CVy,[B,K,'2501']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_63E',Cbv,BUd,BUX,BZN,BUf,BUc,BUT,BUa]]],['25000',l+Aan+' +lon_0=-1'+ATG+' +x_0=274319.51'+Anq+ANq+q+a,[[U,Aax+' / Ghana Metre'+op,CsY,BUd,CHG,Buh,Bll,ByJ,BUT,CVy,BUj,BUm,[B,K,'25000']]],[[U,'Leigon_Ghana_Metre_Grid',[S,'GCS_Leigon',CbT,BUU,BUW],BUd,CHG,Buh,Bll,ByJ,BUT,BUa]]],['2500',Axc+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 57E',ClY,BUd,BUX,BXz,BUf,BUc,BUT,CVy,[B,K,'2500']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_57E',Cbv,BUd,BUX,BXz,BUf,BUc,BUT,BUa]]],['2499',AuF+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 51E',ClY,BUd,BUX,BWt,BUf,BUc,BUT,CVy,[B,K,'2499']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_51E',Cbv,BUd,BUX,BWt,BUf,BUc,BUT,BUa]]],['2498',AtF+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 45E',ClY,BUd,BUX,BWe,BUf,BUc,BUT,CVy,[B,K,'2498']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_45E',Cbv,BUd,BUX,BWe,BUf,BUc,BUT,BUa]]],['2497',AsG+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 39E',ClY,BUd,BUX,BWn,BUf,BUc,BUT,CVy,[B,K,'2497']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_39E',Cbv,BUd,BUX,BWn,BUf,BUc,BUT,BUa]]],['2496',Aqn+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 33E',ClY,BUd,BUX,BWg,BUf,BUc,BUT,CVy,[B,K,'2496']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_33E',Cbv,BUd,BUX,BWg,BUf,BUc,BUT,BUa]]],['2495',Apz+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 27E',ClY,BUd,BUX,BWP,BUf,BUc,BUT,CVy,[B,K,'2495']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_27E',Cbv,BUd,BUX,BWP,BUf,BUc,BUT,BUa]]],['2494',ApT+' +k=1'+BCN,[[U,Aje+' /'+AW+' CM 21E',ClY,BUd,BUX,BWR,BUf,BUc,BUT,CVy,[B,K,'2494']]],[[U,'Pulkovo_1942_Gauss_Kruger_CM_21E',Cbv,BUd,BUX,BWR,BUf,BUc,BUT,BUa]]],['2491',BEV+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 171W',Cla,BUd,BUX,BYV,BUf,BUc,BUT,CVy,[B,K,'2491']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_171W',Cby,BUd,BUX,BYV,BUf,BUc,BUT,BUa]]],['2490',AxL+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 177W',Cla,BUd,BUX,BYF,BUf,BUc,BUT,CVy,[B,K,'2490']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_177W',Cby,BUd,BUX,BYF,BUf,BUc,BUT,BUa]]],['24893',l+' +lat_0=-9.5'+fS+' +k=0.99952992 +x_0=1324000 +y_0=1040084.558'+BKc,[[U,ca+' / Peru east zone',CmD,BUd,ByI,BbL,[A,N,AjM],CGI,[A,G,AfV],CVy,BUl,BUk,[B,K,'24893']]],[[U,'PSAD56_Peru_east_zone',CdD,BUd,ByI,BbL,[A,N,AjM],CGI,[A,G,AfV],BUa]]],['24892',l+' +lat_0=-9.5 +lon_0=-76 +k=0.99932994 +x_0=720000 +y_0=1039979.159'+BKc,[[U,ca+' / Peru central zone',CmD,BUd,ByI,[A,E,ATT],[A,N,AjN],CHF,[A,G,AfW],CVy,BUl,BUk,[B,K,'24892']]],[[U,'PSAD56_Peru_central_zone',CdD,BUd,ByI,[A,E,ATT],[A,N,AjN],CHF,[A,G,AfW],BUa]]],['24891',l+' +lat_0=-6 +lon_0=-80.5 +k=0.99983008 +x_0=222000 +y_0=1426834.743'+BKc,[[U,ca+' / Peru west zone',CmD,BUd,[A,C,ir],CNr,[A,N,AjO],CHE,[A,G,AfX],CVy,BUl,BUk,[B,K,'24891']]],[[U,'PSAD56_Peru_west_zone',CdD,BUd,[A,C,ir],CNr,[A,N,AjO],CHE,[A,G,AfX],BUa]]],['2489',BEU+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 177E',Cla,BUd,BUX,BXo,BUf,BUc,BUT,CVy,[B,K,'2489']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_177E',Cby,BUd,BUX,BXo,BUf,BUc,BUT,BUa]]],['24882',BJx+BMy,[[U,ca+' / UTM zone 22S',CmD,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'24882']]],[[U,'PSAD56_UTM_zone_22S',CdD,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['24881',BJw+BMy,[[U,ca+' / UTM zone 21S',CmD,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'24881']]],[[U,'PSAD56_UTM_zone_21S',CdD,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['24880',Aku+BGu+a,[[U,ca+' / UTM zone 20S',CmD,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'24880']]],[[U,'PSAD56_UTM_zone_20S',CdD,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['2488',AxI+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 171E',Cla,BUd,BUX,BXj,BUf,BUc,BUT,CVy,[B,K,'2488']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_171E',Cby,BUd,BUX,BXj,BUf,BUc,BUT,BUa]]],['24879',AlG+BGu+a,[[U,ca+' / UTM zone 19S',CmD,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'24879']]],[[U,'PSAD56_UTM_zone_19S',CdD,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['24878',AlJ+BGu+a,[[U,ca+' / UTM zone 18S',CmD,BUd,BUX,BWo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'24878']]],[[U,'PSAD56_UTM_zone_18S',CdD,BUd,BUX,BWo,BUg,BUc,BUo,BUa]]],['24877',AlW+BGu+a,[[U,ca+' / UTM zone 17S',CmD,BUd,BUX,BVm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'24877']]],[[U,'PSAD56_UTM_zone_17S',CdD,BUd,BUX,BVm,BUg,BUc,BUo,BUa]]],['2487',BGM+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 165E',Cla,BUd,BUX,BXW,BUf,BUc,BUT,CVy,[B,K,'2487']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_165E',Cby,BUd,BUX,BXW,BUf,BUc,BUT,BUa]]],['2486',Axm+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 159E',Cla,BUd,BUX,BZl,BUf,BUc,BUT,CVy,[B,K,'2486']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_159E',Cby,BUd,BUX,BZl,BUf,BUc,BUT,BUa]]],['2485',BGK+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 153E',Cla,BUd,BUX,BYu,BUf,BUc,BUT,CVy,[B,K,'2485']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_153E',Cby,BUd,BUX,BYu,BUf,BUc,BUT,BUa]]],['2484',BGH+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 147E',Cla,BUd,BUX,BYW,BUf,BUc,BUT,CVy,[B,K,'2484']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_147E',Cby,BUd,BUX,BYW,BUf,BUc,BUT,BUa]]],['2483',Axl+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 141E',Cla,BUd,BUX,BYK,BUf,BUc,BUT,CVy,[B,K,'2483']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_141E',Cby,BUd,BUX,BYK,BUf,BUc,BUT,BUa]]],['24821',AlI+BKc,[[U,ca+' / UTM zone 21N',CmD,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24821']]],[[U,'PSAD56_UTM_zone_21N',CdD,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['24820',Aku+BKc,[[U,ca+' / UTM zone 20N',CmD,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24820']]],[[U,'PSAD56_UTM_zone_20N',CdD,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2482',Ape+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 135E',Cla,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'2482']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_135E',Cby,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['24819',AlG+BKc,[[U,ca+' / UTM zone 19N',CmD,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24819']]],[[U,'PSAD56_UTM_zone_19N',CdD,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['24818',AlJ+BKc,[[U,ca+' / UTM zone 18N',CmD,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24818']]],[[U,'PSAD56_UTM_zone_18N',CdD,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['24817',AlW+BKc,[[U,ca+' / UTM zone 17N',CmD,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24817']]],[[U,'PSAD56_UTM_zone_17N',CdD,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['2481',Apd+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 129E',Cla,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'2481']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_129E',Cby,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['2480',ApF+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 123E',Cla,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'2480']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_123E',Cby,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['2479',ApE+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 117E',Cla,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'2479']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_117E',Cby,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['2478',ApX+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 111E',Cla,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'2478']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_111E',Cby,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['2477',ApW+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 105E',Cla,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'2477']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_105E',Cby,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['2476',Apc+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 99E',Cla,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'2476']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_99E',Cby,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['2475',Apb+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 93E',Cla,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'2475']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_93E',Cby,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['2474',Apa+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 87E',Cla,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'2474']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_87E',Cby,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['2473',ApZ+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 81E',Cla,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'2473']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_81E',Cby,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['24720',BIT+dk+q+a,[[U,'La Canoa / UTM zone 20N',CnZ,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24720']]],[[U,'La_Canoa_UTM_zone_20N',Cfn,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2472',ApY+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 75E',Cla,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'2472']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_75E',Cby,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['24719',AlG+BP+dk+q+a,[[U,'La Canoa / UTM zone 19N',CnZ,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24719']]],[[U,'La_Canoa_UTM_zone_19N',Cfn,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['24718',AlJ+BP+dk+q+a,[[U,'La Canoa / UTM zone 18N',CnZ,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24718']]],[[U,'La_Canoa_UTM_zone_18N',Cfn,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['2471',Axi+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 69E',Cla,BUd,BUX,BZh,BUf,BUc,BUT,CVy,[B,K,'2471']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_69E',Cby,BUd,BUX,BZh,BUf,BUc,BUT,BUa]]],['2470',Axf+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 63E',Cla,BUd,BUX,BZN,BUf,BUc,BUT,CVy,[B,K,'2470']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_63E',Cby,BUd,BUX,BZN,BUf,BUc,BUT,BUa]]],['2469',Axc+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 57E',Cla,BUd,BUX,BXz,BUf,BUc,BUT,CVy,[B,K,'2469']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_57E',Cby,BUd,BUX,BXz,BUf,BUc,BUT,BUa]]],['2468',AuF+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 51E',Cla,BUd,BUX,BWt,BUf,BUc,BUT,CVy,[B,K,'2468']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_51E',Cby,BUd,BUX,BWt,BUf,BUc,BUT,BUa]]],['2467',AtF+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 45E',Cla,BUd,BUX,BWe,BUf,BUc,BUT,CVy,[B,K,'2467']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_45E',Cby,BUd,BUX,BWe,BUf,BUc,BUT,BUa]]],['2466',AsG+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 39E',Cla,BUd,BUX,BWn,BUf,BUc,BUT,CVy,[B,K,'2466']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_39E',Cby,BUd,BUX,BWn,BUf,BUc,BUT,BUa]]],['2465',Aqn+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 33E',Cla,BUd,BUX,BWg,BUf,BUc,BUT,CVy,[B,K,'2465']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_33E',Cby,BUd,BUX,BWg,BUf,BUc,BUT,BUa]]],['2464',Apz+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 27E',Cla,BUd,BUX,BWP,BUf,BUc,BUT,CVy,[B,K,'2464']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_27E',Cby,BUd,BUX,BWP,BUf,BUc,BUT,BUa]]],['2463',ApT+' +k=1'+BEY,[[U,Ajf+' /'+AW+' CM 21E',Cla,BUd,BUX,BWR,BUf,BUc,BUT,CVy,[B,K,'2463']]],[[U,'Pulkovo_1995_Gauss_Kruger_CM_21E',Cby,BUd,BUX,BWR,BUf,BUc,BUT,BUa]]],['2462',ApT+' +k=1'+Alz+AmH,[[U,'Albanian 1987 /'+AW+' zone 4',Cqf,BUd,BUX,BWR,BUf,BYJ,BUT,CVy,[B,K,'2462']]],[[U,'Albanian_1987_Gauss_Kruger_zone_4',[S,'GCS_Albanian 1987',[V,Ads,BUn],BUU,BUW],BUd,BUX,BWR,BUf,BYJ,BUT,BUa]]],['2461',BAd+' +lon_0=154'+BTp,[[U,PV+' / Japan Plane'+OV+' CS XIX',Cls,BUd,BYm,Bsp,BUt,BUy,BUT,CVy,[B,K,'2461']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_XIX',Ccm,BUd,BYm,Bsp,BUt,BUy,BUT,BUa]]],['24600',BIX+iq+ABj+HV+' +y_0=1166200'+Cw+AEV+q+a,[[U,'KOC'+PW,CsM,BWW,BdX,BWe,Bwe,BWL,Bwd,CVy,BUj,BUm,[B,K,'24600']]],[[U,'KOC_Lambert',[S,'GCS_KOC',[V,ASe,BVV],BUU,BUW],BVD,BdX,BWe,Bwe,BWL,Bwd,BUa,Bwc]]],['2460',l+' +lat_0=20'+BHQ+j+c+q+a,[[U,PV+' / Japan Plane'+OV+' CS XVIII',Cls,BUd,BxD,BmD,BUt,BUy,BUT,CVy,[B,K,'2460']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_XVIII',Ccm,BUd,BxD,BmD,BUt,BUy,BUT,BUa]]],['2459',BAd+BHP+j+c+q+a,[[U,PV+' / Japan Plane'+OV+' CS XVII',Cls,BUd,BYm,Bdg,BUt,BUy,BUT,CVy,[B,K,'2459']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_XVII',Ccm,BUd,BYm,Bdg,BUt,BUy,BUT,BUa]]],['2458',BAd+' +lon_0=124'+BTp,[[U,PV+' / Japan Plane'+OV+' CS XVI',Cls,BUd,BYm,BxC,BUt,BUy,BUT,CVy,[B,K,'2458']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_XVI',Ccm,BUd,BYm,BxC,BUt,BUy,BUT,BUa]]],['2457',BAd+BFq+BTr,[[U,PV+' / Japan Plane'+OV+' CS XV',Cls,BUd,BYm,BmC,BUt,BUy,BUT,CVy,[B,K,'2457']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_XV',Ccm,BUd,BYm,BmC,BUt,BUy,BUT,BUa]]],['2456',BAd+' +lon_0=142'+BTp,[[U,PV+' / Japan Plane'+OV+' CS XIV',Cls,BUd,BYm,Buy,BUt,BUy,BUT,CVy,[B,K,'2456']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_XIV',Ccm,BUd,BYm,Buy,BUt,BUy,BUT,BUa]]],['2455',l+gP+' +lon_0=144.25'+BTp,[[U,PV+' / Japan Plane'+OV+' CS XIII',Cls,BUd,BZL,BxB,BUt,BUy,BUT,CVy,[B,K,'2455']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_XIII',Ccm,BUd,BZL,BxB,BUt,BUy,BUT,BUa]]],['24548',AnD+BSJ,[[U,Afc+' 1968 / UTM zone 48N',CnS,BUd,BUX,BWK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24548']]],[[U,'Kertau_1968_UTM_zone_48N',Cft,BUd,BUX,BWK,BUg,BUc,BUT,BUa]]],['24547',AoJ+BSJ,[[U,Afc+' 1968 / UTM zone 47N',CnS,BUd,BUX,BWf,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24547']]],[[U,'Kertau_1968_UTM_zone_47N',Cft,BUd,BUX,BWf,BUg,BUc,BUT,BUa]]],['2454',l+gP+' +lon_0=142.25'+BTp,[[U,PV+' / Japan Plane'+OV+' CS XII',Cls,BUd,BZL,BxA,BUt,BUy,BUT,CVy,[B,K,'2454']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_XII',Ccm,BUd,BZL,BxA,BUt,BUy,BUT,BUa]]],['2453',l+gP+' +lon_0=140.25'+BTp,[[U,PV+' / Japan Plane'+OV+' CS XI',Cls,BUd,BZL,Bwz,BUt,BUy,BUT,CVy,[B,K,'2453']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_XI',Ccm,BUd,BZL,Bwz,BUt,BUy,BUT,BUa]]],['2452',AqP+AAe+BTp,[[U,PV+' / Japan Plane'+OV+' CS X',Cls,BUd,BXM,Bwy,BUt,BUy,BUT,CVy,[B,K,'2452']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_X',Ccm,BUd,BXM,Bwy,BUt,BUy,BUT,BUa]]],['2451',AsB+AAf+BTp,[[U,PV+' / Japan Plane'+OV+' CS IX',Cls,BUd,BXT,Bwx,BUt,BUy,BUT,CVy,[B,K,'2451']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_IX',Ccm,BUd,BXT,Bwx,BUt,BUy,BUT,BUa]]],['24500',SE+' +lat_0=1.287646666666667 +lon_0=103.8530022222222 +x_0=30000 +y_0=30000'+BSJ,[[U,Afc+' 1968 / Singapore'+op,CnS,Bgy,[A,C,ARA],[A,E,ARB],BtJ,BxE,CVy,BUj,BUm,[B,K,'24500']]],[[U,'Kertau_1968_Singapore_Grid',Cft,Bgx,[A,C,ARA],[A,E,ARB],BtJ,BxE,BUa,Bal]]],['2450',AsB+' +lon_0=138.5'+BTp,[[U,PV+' / Japan Plane'+OV+' CS VIII',Cls,BUd,BXT,Bux,BUt,BUy,BUT,CVy,[B,K,'2450']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_VIII',Ccm,BUd,BXT,Bux,BUt,BUy,BUT,BUa]]],['2449',AsB+AAg+BTp,[[U,PV+' / Japan Plane'+OV+' CS VII',Cls,BUd,BXT,Bww,BUt,BUy,BUT,CVy,[B,K,'2449']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_VII',Ccm,BUd,BXT,Bww,BUt,BUy,BUT,BUa]]],['2448',AsB+BHQ+j+c+q+a,[[U,PV+' / Japan Plane'+OV+' CS VI',Cls,BUd,BXT,BmD,BUt,BUy,BUT,CVy,[B,K,'2448']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_VI',Ccm,BUd,BXT,BmD,BUt,BUy,BUT,BUa]]],['2447',AsB+AAh+BTp,[[U,PV+' / Japan Plane'+OV+' CS V',Cls,BUd,BXT,Bwv,BUt,BUy,BUT,CVy,[B,K,'2447']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_V',Ccm,BUd,BXT,Bwv,BUt,BUy,BUT,BUa]]],['2446',Avc+BFp+BTr,[[U,PV+' / Japan Plane'+OV+' CS IV',Cls,BUd,Bdf,Bso,BUt,BUy,BUT,CVy,[B,K,'2446']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_IV',Ccm,BUd,Bdf,Bso,BUt,BUy,BUT,BUa]]],['2445',AsB+AAi+BTp,[[U,PV+' / Japan Plane'+OV+' CS III',Cls,BUd,BXT,Bwu,BUt,BUy,BUT,CVy,[B,K,'2445']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_III',Ccm,BUd,BXT,Bwu,BUt,BUy,BUT,BUa]]],['2444',Avc+BHP+j+c+q+a,[[U,PV+' / Japan Plane'+OV+' CS II',Cls,BUd,Bdf,Bdg,BUt,BUy,BUT,CVy,[B,K,'2444']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_II',Ccm,BUd,Bdf,Bdg,BUt,BUy,BUT,BUa]]],['2443',Avc+' +lon_0=129.5'+BTp,[[U,PV+' / Japan Plane'+OV+' CS I',Cls,BUd,Bdf,Buw,BUt,BUy,BUT,CVy,[B,K,'2443']]],[[U,'JGD2000_Japan_Plane_Rectangular_CS_I',Ccm,BUd,Bdf,Buw,BUt,BUy,BUT,BUa]]],['2442',Ape+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 135E',Clh,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'2442']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_135E',CcK,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['2441',Asl+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 132E',Clh,BUd,BUX,BaU,BUf,BUc,BUT,CVy,[B,K,'2441']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_132E',CcK,BUd,BUX,BaU,BUf,BUc,BUT,BUa]]],['2440',Apd+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 129E',Clh,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'2440']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_129E',CcK,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['2439',Aty+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 126E',Clh,BUd,BUX,Bao,BUf,BUc,BUT,CVy,[B,K,'2439']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_126E',CcK,BUd,BUX,Bao,BUf,BUc,BUT,BUa]]],['24383',AU+' +lat_1=12 +lat_0=12 +lon_0=80'+BKb+q+a,[[U,Alw+' / India zone IVa',CmP,BWW,Brl,BpQ,BbE,Bnp,Bno,CVy,BUj,BUm,[B,K,'24383']]],[[U,'Kalianpur_1975_India_zone_IVa',CdX,BVD,Brl,BpQ,BbE,Bnp,Bno,BUa,[A,W,OY]]]],['24382',BIS+eX+BUB+a,[[U,Lr+' 1880 / India zone IIb',Cmg,BWW,BYm,BYP,BbE,BYY,BVg,CXY,BUj,BUm,[B,K,'24382']]],[[U,'Kalianpur_1880_India_zone_IIb',CeG,BVD,BYm,BYP,BbE,BYY,BVg,Bjz,BwS]]],['24381',AU+' +lat_1=19 +lat_0=19 +lon_0=80'+BKb+q+a,[[U,Alw+' / India zone IIIa',CmP,BWW,CHD,BpQ,BbE,Bnp,Bno,CVy,BUj,BUm,[B,K,'24381']]],[[U,'Kalianpur_1975_India_zone_IIIa',CdX,BVD,CHD,BpQ,BbE,Bnp,Bno,BUa,[A,W,eZ]]]],['24380',BIS+eX+BKb+q+a,[[U,Alw+' / India zone IIb',CmP,BWW,BYm,BYP,BbE,Bnp,Bno,CVy,BUj,BUm,[B,K,'24380']]],[[U,'Kalianpur_1975_India_zone_IIb',CdX,BVD,BYm,BYP,BbE,Bnp,Bno,BUa,BwS]]],['2438',ApF+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 123E',Clh,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'2438']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_123E',CcK,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['24379',BIS+' +lon_0=74'+BKb+q+a,[[U,Alw+' / India zone IIa',CmP,BWW,BYm,BpX,BbE,Bnp,Bno,CVy,BUj,BUm,[B,K,'24379']]],[[U,'Kalianpur_1975_India_zone_IIa',CdX,BVD,BYm,BpX,BbE,Bnp,Bno,BUa,BwS]]],['24378',BIX+' +lon_0=68'+BKb+q+a,[[U,Alw+' / India zone I',CmP,BWW,BdX,BrL,BbE,Bnp,Bno,CVy,BUj,BUm,[B,K,'24378']]],[[U,'Kalianpur_1975_India_zone_I',CdX,BVD,BdX,BrL,BbE,Bnp,Bno,BUa,Bwc]]],['24377',BIS+' +lon_0=74'+Yl+' +x_0=2743196.4 +y_0=914398.8'+BIb+q+a,[[U,Lr+' 1962 / India zone IIa',Cmp,BWW,BYm,BpX,BbE,ByH,ByG,CVy,BUj,BUm,[B,K,'24377']]],[[U,'Kalianpur_1962_India_zone_IIa',CeZ,BVD,BYm,BpX,BbE,ByH,ByG,BUa,BwS]]],['24376',BIX+' +lon_0=68'+Yl+' +x_0=2743196.4 +y_0=914398.8'+BIb+q+a,[[U,Lr+' 1962 / India zone I',Cmp,BWW,BdX,BrL,BbE,ByH,ByG,CVy,BUj,BUm,[B,K,'24376']]],[[U,'Kalianpur_1962_India_zone_I',CeZ,BVD,BdX,BrL,BbE,ByH,ByG,BUa,Bwc]]],['24375',BIS+eX+Yl+' +x_0=2743185.69 +y_0=914395.23'+AmB+ie+q+a,[[U,Lr+' 1937 / India zone IIb',CnX,BWW,BYm,BYP,BbE,[A,I,AjP],ByF,CVy,BUj,BUm,[B,K,'24375']]],[[U,'Kalianpur_1937_India_zone_IIb',Cga,BVD,BYm,BYP,BbE,[A,I,AjP],ByF,BUa,BwS]]],['24374',AU+' +lat_1=12 +lat_0=12 +lon_0=80'+BUB+a,[[U,Lr+' 1880 / India zone IVa',Cmg,BWW,Brl,BpQ,BbE,BYY,BVg,CXY,BUj,BUm,[B,K,'24374']]],[[U,'Kalianpur_1880_India_zone_IVa',CeG,BVD,Brl,BpQ,BbE,BYY,BVg,Bjz,[A,W,OY]]]],['24373',AU+' +lat_1=19 +lat_0=19 +lon_0=80'+BUB+a,[[U,Lr+' 1880 / India zone IIIa',Cmg,BWW,CHD,BpQ,BbE,BYY,BVg,CXY,BUj,BUm,[B,K,'24373']]],[[U,'Kalianpur_1880_India_zone_IIIa',CeG,BVD,CHD,BpQ,BbE,BYY,BVg,Bjz,[A,W,eZ]]]],['24372',BIS+' +lon_0=74'+BUB+a,[[U,Lr+' 1880 / India zone IIa',Cmg,BWW,BYm,BpX,BbE,BYY,BVg,CXY,BUj,BUm,[B,K,'24372']]],[[U,'Kalianpur_1880_India_zone_IIa',CeG,BVD,BYm,BpX,BbE,BYY,BVg,Bjz,BwS]]],['24371',BIX+' +lon_0=68'+BUB+a,[[U,Lr+' 1880 / India zone I',Cmg,BWW,BdX,BrL,BbE,BYY,BVg,CXY,BUj,BUm,[B,K,'24371']]],[[U,'Kalianpur_1880_India_zone_I',CeG,BVD,BdX,BrL,BbE,BYY,BVg,Bjz,Bwc]]],['24370',BCX+' +lat_0=39.5 +lon_0=68 +k_0=0.99846154 +x_0=2153865.73916853 +y_0=2368292.194628102'+BIR+a,[[U,Lr+' 1880 / India zone 0',Cmg,BWW,[A,C,Zj],BrL,[A,N,AjQ],CGH,CGG,CXY,BUj,BUm,[B,K,'24370']]],[[U,'Kalianpur_1880_India_zone_0',CeG,BVD,[A,C,Zj],BrL,[A,N,AjQ],CGH,CGG,Bjz,Bpt]]],['2437',Atw+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 120E',Clh,BUd,BUX,BbG,BUf,BUc,BUT,CVy,[B,K,'2437']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_120E',CcK,BUd,BUX,BbG,BUf,BUc,BUT,BUa]]],['2436',ApE+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 117E',Clh,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'2436']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_117E',CcK,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['2435',Atu+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 114E',Clh,BUd,BUX,BZy,BUf,BUc,BUT,CVy,[B,K,'2435']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_114E',CcK,BUd,BUX,BZy,BUf,BUc,BUT,BUa]]],['24347',AoJ+BRx,[[U,Alw+' / UTM zone 47N',CmP,BUd,BUX,BWf,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24347']]],[[U,'Kalianpur_1975_UTM_zone_47N',CdX,BUd,BUX,BWf,BUg,BUc,BUT,BUa]]],['24346',AnA+BRx,[[U,Alw+' / UTM zone 46N',CmP,BUd,BUX,BWk,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24346']]],[[U,'Kalianpur_1975_UTM_zone_46N',CdX,BUd,BUX,BWk,BUg,BUc,BUT,BUa]]],['24345',AV+' +zone=45'+BRx,[[U,Alw+' / UTM zone 45N',CmP,BUd,BUX,BXK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24345']]],[[U,'Kalianpur_1975_UTM_zone_45N',CdX,BUd,BUX,BXK,BUg,BUc,BUT,BUa]]],['24344',AV+' +zone=44'+BRx,[[U,Alw+' / UTM zone 44N',CmP,BUd,BUX,BWz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24344']]],[[U,'Kalianpur_1975_UTM_zone_44N',CdX,BUd,BUX,BWz,BUg,BUc,BUT,BUa]]],['24343',ApL+BRx,[[U,Alw+' / UTM zone 43N',CmP,BUd,BUX,BWs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24343']]],[[U,'Kalianpur_1975_UTM_zone_43N',CdX,BUd,BUX,BWs,BUg,BUc,BUT,BUa]]],['24342',Aob+BRx,[[U,Alw+' / UTM zone 42N',CmP,BUd,BUX,BZh,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24342']]],[[U,'Kalianpur_1975_UTM_zone_42N',CdX,BUd,BUX,BZh,BUg,BUc,BUT,BUa]]],['2434',ApX+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 111E',Clh,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'2434']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_111E',CcK,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['2433',Ats+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 108E',Clh,BUd,BUX,Bbi,BUf,BUc,BUT,CVy,[B,K,'2433']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_108E',CcK,BUd,BUX,Bbi,BUf,BUc,BUT,BUa]]],['2432',ApW+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 105E',Clh,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'2432']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_105E',CcK,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['24313',ApL+BIb+q+a,[[U,Lr+' 1962 / UTM zone 43N',Cmp,BUd,BUX,BWs,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24313']]],[[U,'Kalianpur_1962_UTM_zone_43N',CeZ,BUd,BUX,BWs,BUg,BUc,BUT,BUa]]],['24312',Aob+BIb+q+a,[[U,Lr+' 1962 / UTM zone 42N',Cmp,BUd,BUX,BZh,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24312']]],[[U,'Kalianpur_1962_UTM_zone_42N',CeZ,BUd,BUX,BZh,BUg,BUc,BUT,BUa]]],['24311',Aoc+BIb+q+a,[[U,Lr+' 1962 / UTM zone 41N',Cmp,BUd,BUX,BZN,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24311']]],[[U,'Kalianpur_1962_UTM_zone_41N',CeZ,BUd,BUX,BZN,BUg,BUc,BUT,BUa]]],['2431',Atq+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 102E',Clh,BUd,BUX,Ban,BUf,BUc,BUT,CVy,[B,K,'2431']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_102E',CcK,BUd,BUX,Ban,BUf,BUc,BUT,BUa]]],['24306',AnA+AmB+ie+q+a,[[U,Lr+' 1937 / UTM zone 46N',CnX,BUd,BUX,BWk,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24306']]],[[U,'Kalianpur_1937_UTM_zone_46N',Cga,BUd,BUX,BWk,BUg,BUc,BUT,BUa]]],['24305',AV+' +zone=45'+AmB+ie+q+a,[[U,Lr+' 1937 / UTM zone 45N',CnX,BUd,BUX,BXK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24305']]],[[U,'Kalianpur_1937_UTM_zone_45N',Cga,BUd,BUX,BXK,BUg,BUc,BUT,BUa]]],['2430',Apc+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 99E',Clh,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'2430']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_99E',CcK,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['2429',Ato+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 96E',Clh,BUd,BUX,BbF,BUf,BUc,BUT,CVy,[B,K,'2429']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_96E',CcK,BUd,BUX,BbF,BUf,BUc,BUT,BUa]]],['2428',Apb+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 93E',Clh,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'2428']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_93E',CcK,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['2427',Asm+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 90E',Clh,BUd,BUX,BYP,BUf,BUc,BUT,CVy,[B,K,'2427']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_90E',CcK,BUd,BUX,BYP,BUf,BUc,BUT,BUa]]],['2426',Apa+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 87E',Clh,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'2426']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_87E',CcK,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['2425',Atm+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 84E',Clh,BUd,BUX,Bbh,BUf,BUc,BUT,CVy,[B,K,'2425']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_84E',CcK,BUd,BUX,Bbh,BUf,BUc,BUT,BUa]]],['2424',ApZ+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 81E',Clh,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'2424']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_81E',CcK,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['2423',Atk+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 78E',Clh,BUd,BUX,Bam,BUf,BUc,BUT,CVy,[B,K,'2423']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_78E',CcK,BUd,BUX,Bam,BUf,BUc,BUT,BUa]]],['2422',ApY+' +k=1'+BJB,[[U,Ajv+' /'+Ajc+' CM 75E',Clh,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'2422']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_CM_75E',CcK,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['2421',Ape+' +k=1'+BDU+Ayp,[[U,Ajv+' /'+Ajc+' zone 45',Clh,BUd,BUX,BWd,BUf,BkR,BUT,CVy,[B,K,'2421']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_45',CcK,BUd,BUX,BWd,BUf,BkR,BUT,BUa]]],['24200',AU+' +lat_1=18'+yN+pu+' +k_0=1'+PR+' +y_0=150000'+Dr+AKJ+q+a,[[U,'JAD69 / Jamaica'+AoN,Cru,BWW,BgP,Bbs,BUf,BWp,CJS,CVy,BUj,BUm,[B,K,'24200']]],[[U,'JAD69_Jamaica_National_Grid',[S,'GCS_JAD69',[V,AhD,BUx],BUU,BUW],BVD,BgP,Bbs,BUf,BWp,CJS,BUa,Bxs]]],['2420',Asl+' +k=1'+BDT+Ayp,[[U,Ajv+' /'+Ajc+' zone 44',Clh,BUd,BUX,BaU,BUf,Blo,BUT,CVy,[B,K,'2420']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_44',CcK,BUd,BUX,BaU,BUf,Blo,BUT,BUa]]],['2419',Apd+' +k=1'+BDS+Ayp,[[U,Ajv+' /'+Ajc+' zone 43',Clh,BUd,BUX,BWQ,BUf,BkQ,BUT,CVy,[B,K,'2419']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_43',CcK,BUd,BUX,BWQ,BUf,BkQ,BUT,BUa]]],['2418',Aty+' +k=1'+BDR+Ayp,[[U,Ajv+' /'+Ajc+' zone 42',Clh,BUd,BUX,Bao,BUf,Bln,BUT,CVy,[B,K,'2418']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_42',CcK,BUd,BUX,Bao,BUf,Bln,BUT,BUa]]],['2417',ApF+' +k=1'+BDQ+Ayp,[[U,Ajv+' /'+Ajc+' zone 41',Clh,BUd,BUX,BWU,BUf,BkP,BUT,CVy,[B,K,'2417']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_41',CcK,BUd,BUX,BWU,BUf,BkP,BUT,BUa]]],['2416',Atw+' +k=1'+BDP+Ayp,[[U,Ajv+' /'+Ajc+' zone 40',Clh,BUd,BUX,BbG,BUf,BkV,BUT,CVy,[B,K,'2416']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_40',CcK,BUd,BUX,BbG,BUf,BkV,BUT,BUa]]],['2415',ApE+' +k=1'+BDO+Ayp,[[U,Ajv+' /'+Ajc+' zone 39',Clh,BUd,BUX,BWS,BUf,BkZ,BUT,CVy,[B,K,'2415']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_39',CcK,BUd,BUX,BWS,BUf,BkZ,BUT,BUa]]],['2414',Atu+' +k=1'+BDN+Ayp,[[U,Ajv+' /'+Ajc+' zone 38',Clh,BUd,BUX,BZy,BUf,BkU,BUT,CVy,[B,K,'2414']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_38',CcK,BUd,BUX,BZy,BUf,BkU,BUT,BUa]]],['2413',ApX+' +k=1'+BDM+Ayp,[[U,Ajv+' /'+Ajc+' zone 37',Clh,BUd,BUX,BWX,BUf,BkY,BUT,CVy,[B,K,'2413']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_37',CcK,BUd,BUX,BWX,BUf,BkY,BUT,BUa]]],['2412',Ats+' +k=1'+BDL+Ayp,[[U,Ajv+' /'+Ajc+' zone 36',Clh,BUd,BUX,Bbi,BUf,BkT,BUT,CVy,[B,K,'2412']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_36',CcK,BUd,BUX,Bbi,BUf,BkT,BUT,BUa]]],['2411',ApW+' +k=1'+BDK+Ayp,[[U,Ajv+' /'+Ajc+' zone 35',Clh,BUd,BUX,BWK,BUf,BkX,BUT,CVy,[B,K,'2411']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_35',CcK,BUd,BUX,BWK,BUf,BkX,BUT,BUa]]],['24100',AU+' +lat_1=18'+yN+pu+' +k_0=1 +x_0=167638.49597 +y_0=121918.90616'+AGE+AGF+rt+a,[[U,'Jamaica 1875 / Jamaica (Old Grid)',Cqq,BWW,BgP,Bbs,BUf,CIL,Baa,CYB,BUj,BUm,[B,K,'24100']]],[[U,'Jamaica_1875_Jamaica_Old_Grid',[S,'GCS_Jamaica 1875',[V,AhE,Bxu],BUU,BUW],BVD,BgP,Bbs,BUf,CIL,Baa,BqE,Bxs]]],['2410',Atq+' +k=1'+BDJ+Ayp,[[U,Ajv+' /'+Ajc+' zone 34',Clh,BUd,BUX,Ban,BUf,BkS,BUT,CVy,[B,K,'2410']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_34',CcK,BUd,BUX,Ban,BUf,BkS,BUT,BUa]]],['2409',Apc+' +k=1'+AwV+Ayp,[[U,Ajv+' /'+Ajc+' zone 33',Clh,BUd,BUX,BWf,BUf,BdO,BUT,CVy,[B,K,'2409']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_33',CcK,BUd,BUX,BWf,BUf,BdO,BUT,BUa]]],['2408',Ato+' +k=1'+ArV+Ayp,[[U,Ajv+' /'+Ajc+' zone 32',Clh,BUd,BUX,BbF,BUf,BcO,BUT,CVy,[B,K,'2408']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_32',CcK,BUd,BUX,BbF,BUf,BcO,BUT,BUa]]],['2407',Apb+' +k=1'+AqY+Ayp,[[U,Ajv+' /'+Ajc+' zone 31',Clh,BUd,BUX,BWk,BUf,BaY,BUT,CVy,[B,K,'2407']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_31',CcK,BUd,BUX,BWk,BUf,BaY,BUT,BUa]]],['2406',Asm+' +k=1'+AsZ+Ayp,[[U,Ajv+' /'+Ajc+' zone 30',Clh,BUd,BUX,BYP,BUf,BcN,BUT,CVy,[B,K,'2406']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_30',CcK,BUd,BUX,BYP,BUf,BcN,BUT,BUa]]],['2405',Apa+' +k=1'+AsY+Ayp,[[U,Ajv+' /'+Ajc+' zone 29',Clh,BUd,BUX,BXK,BUf,Baq,BUT,CVy,[B,K,'2405']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_29',CcK,BUd,BUX,BXK,BUf,Baq,BUT,BUa]]],['24048',AnD+AmB+vb+q+a,[[U,BEE+' / UTM zone 48N',Cog,BUd,BUX,BWK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24048']]],[[U,'Indian_1975_UTM_zone_48N',Cji,BUd,BUX,BWK,BUg,BUc,BUT,BUa]]],['24047',AoJ+AmB+vb+q+a,[[U,BEE+' / UTM zone 47N',Cog,BUd,BUX,BWf,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'24047']]],[[U,'Indian_1975_UTM_zone_47N',Cji,BUd,BUX,BWf,BUg,BUc,BUT,BUa]]],['2404',Atm+' +k=1'+AsX+Ayp,[[U,Ajv+' /'+Ajc+' zone 28',Clh,BUd,BUX,Bbh,BUf,Bbm,BUT,CVy,[B,K,'2404']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_28',CcK,BUd,BUX,Bbh,BUf,Bbm,BUT,BUa]]],['2403',ApZ+' +k=1'+AsW+Ayp,[[U,Ajv+' /'+Ajc+' zone 27',Clh,BUd,BUX,BWz,BUf,Bbl,BUT,CVy,[B,K,'2403']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_27',CcK,BUd,BUX,BWz,BUf,Bbl,BUT,BUa]]],['2402',Atk+' +k=1'+AsV+Ayp,[[U,Ajv+' /'+Ajc+' zone 26',Clh,BUd,BUX,Bam,BUf,Bbj,BUT,CVy,[B,K,'2402']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_26',CcK,BUd,BUX,Bam,BUf,Bbj,BUT,BUa]]],['2401',ApY+' +k=1'+AsU+Ayp,[[U,Ajv+' /'+Ajc+' zone 25',Clh,BUd,BUX,BWs,BUf,Bbk,BUT,CVy,[B,K,'2401']]],[[U,'Beijing_1954_3_degree_Gauss_Kruger_zone_25',CcK,BUd,BUX,BWs,BUf,Bbk,BUT,BUa]]],['2399',ApP+' +k=1'+AmY+BKY,[[U,AlK+' /'+Ajc+' zone 5',CmE,BUd,BUX,BWH,BUf,BYv,BUT,CVy,[B,K,'2399']]],[[U,'Pulkovo_1942_83_3_degree_Gauss_Kruger_zone_5',CdH,BUd,BUX,BWH,BUf,BYv,BUT,BUa]]],['2398',AqA+' +k=1'+Alz+BKY,[[U,AlK+' /'+Ajc+' zone 4',CmE,BUd,BUX,BYZ,BUf,BYJ,BUT,CVy,[B,K,'2398']]],[[U,'Pulkovo_1942_83_3_degree_Gauss_Kruger_zone_4',CdH,BUd,BUX,BYZ,BUf,BYJ,BUT,BUa]]],['2397',Aqa+' +k=1'+BKF+q+a,[[U,AlK+' /'+Ajc+' zone 3',CmE,BUd,BUX,BWO,BUf,BXO,BUT,CVy,[B,K,'2397']]],[[U,'Pulkovo_1942_83_3_degree_Gauss_Kruger_zone_3',CdH,BUd,BUX,BWO,BUf,BXO,BUT,BUa]]],['2396',AuF+' +k=1'+AwU+Am+vf+q+a,[[U,'South Yemen /'+AW+' zone 9',Cnw,BUd,BUX,BWt,BUf,Bha,BUT,CVy,[B,K,'2396']]],[[U,'South_Yemen_Gauss_Kruger_zone_9',Chl,BUd,BUX,BWt,BUf,Bha,BUT,BUa]]],['2395',AtF+' +k=1'+AwR+Am+vf+q+a,[[U,'South Yemen /'+AW+' zone 8',Cnw,BUd,BUX,BWe,BUf,BhY,BUT,CVy,[B,K,'2395']]],[[U,'South_Yemen_Gauss_Kruger_zone_8',Chl,BUd,BUX,BWe,BUf,BhY,BUT,BUa]]],['23948',AnD+AmB+id+q+a,[[U,BAr+' / UTM zone 48N',Cnz,BUd,BUX,BWK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23948']]],[[U,'Indian_1954_UTM_zone_48N',Cgq,BUd,BUX,BWK,BUg,BUc,BUT,BUa]]],['23947',AoJ+AmB+id+q+a,[[U,BAr+' / UTM zone 47N',Cnz,BUd,BUX,BWf,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23947']]],[[U,'Indian_1954_UTM_zone_47N',Cgq,BUd,BUX,BWf,BUg,BUc,BUT,BUa]]],['23946',AnA+AmB+id+q+a,[[U,BAr+' / UTM zone 46N',Cnz,BUd,BUX,BWk,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23946']]],[[U,'Indian_1954_UTM_zone_46N',Cgq,BUd,BUX,BWk,BUg,BUc,BUT,BUa]]],['2394',ArX+' +k=1'+Alz+BSB,[[U,'KKJ / Finland zone 4',Cms,BUd,BUX,BYz,BUf,BYJ,BUT,CVy,[B,K,'2394']]],[[U,'KKJ_Finland_zone_4',Cem,BUd,BUX,BYz,BUf,BYJ,BUT,BUa]]],['2393',Apz+' +k=1'+Amo+BSB,[[U,'KKJ / Finland Uniform'+Ajt,Cms,BUd,BUX,BWP,BUf,BXO,BUT,CVy,[B,K,'2393']]],[[U,'KKJ_Finland_Uniform_Coordinate_System',Cem,BUd,BUX,BWP,BUf,BXO,BUT,BUa]]],['2392',ArK+' +k=1'+AmF+BSB,[[U,'KKJ / Finland zone 2',Cms,BUd,BUX,BYU,BUf,BXy,BUT,CVy,[B,K,'2392']]],[[U,'KKJ_Finland_zone_2',Cem,BUd,BUX,BYU,BUf,BXy,BUT,BUa]]],['2391',ApT+' +k=1'+Ald+BSB,[[U,'KKJ / Finland zone 1',Cms,BUd,BUX,BWR,BUf,BWL,BUT,CVy,[B,K,'2391']]],[[U,'KKJ_Finland_zone_1',Cem,BUd,BUX,BWR,BUf,BWL,BUT,BUa]]],['2390',Ape+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 135E',Clg,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'2390']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_135E',CcJ,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['23894',AoI+BSh,[[U,'ID74 / UTM zone 54S',Clw,BUd,BUX,BYK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23894']]],[[U,'ID74_UTM_zone_54S',CdC,BUd,BUX,BYK,BUg,BUc,BUo,BUa]]],['23893',AmT+BSh,[[U,'ID74 / UTM zone 53S',Clw,BUd,BUX,BWd,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23893']]],[[U,'ID74_UTM_zone_53S',CdC,BUd,BUX,BWd,BUg,BUc,BUo,BUa]]],['23892',Ank+BSh,[[U,'ID74 / UTM zone 52S',Clw,BUd,BUX,BWQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23892']]],[[U,'ID74_UTM_zone_52S',CdC,BUd,BUX,BWQ,BUg,BUc,BUo,BUa]]],['23891',AnJ+BSh,[[U,'ID74 / UTM zone 51S',Clw,BUd,BUX,BWU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23891']]],[[U,'ID74_UTM_zone_51S',CdC,BUd,BUX,BWU,BUg,BUc,BUo,BUa]]],['23890',AnS+BSh,[[U,'ID74 / UTM zone 50S',Clw,BUd,BUX,BWS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23890']]],[[U,'ID74_UTM_zone_50S',CdC,BUd,BUX,BWS,BUg,BUc,BUo,BUa]]],['2389',Asl+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 132E',Clg,BUd,BUX,BaU,BUf,BUc,BUT,CVy,[B,K,'2389']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_132E',CcJ,BUd,BUX,BaU,BUf,BUc,BUT,BUa]]],['23889',AnE+BSh,[[U,'ID74 / UTM zone 49S',Clw,BUd,BUX,BWX,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23889']]],[[U,'ID74_UTM_zone_49S',CdC,BUd,BUX,BWX,BUg,BUc,BUo,BUa]]],['23888',AnD+BSh,[[U,'ID74 / UTM zone 48S',Clw,BUd,BUX,BWK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23888']]],[[U,'ID74_UTM_zone_48S',CdC,BUd,BUX,BWK,BUg,BUc,BUo,BUa]]],['23887',AoJ+BSh,[[U,'ID74 / UTM zone 47S',Clw,BUd,BUX,BWf,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23887']]],[[U,'ID74_UTM_zone_47S',CdC,BUd,BUX,BWf,BUg,BUc,BUo,BUa]]],['23884',AoI+BSG,[[U,Xf+' / UTM zone 54S',Clo,BUd,BUX,BYK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23884']]],[[U,'DGN95_UTM_zone_54S',Cca,BUd,BUX,BYK,BUg,BUc,BUo,BUa]]],['23883',AmT+BSG,[[U,Xf+' / UTM zone 53S',Clo,BUd,BUX,BWd,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23883']]],[[U,'DGN95_UTM_zone_53S',Cca,BUd,BUX,BWd,BUg,BUc,BUo,BUa]]],['23882',Ank+BSG,[[U,Xf+' / UTM zone 52S',Clo,BUd,BUX,BWQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23882']]],[[U,'DGN95_UTM_zone_52S',Cca,BUd,BUX,BWQ,BUg,BUc,BUo,BUa]]],['23881',AnJ+BSG,[[U,Xf+' / UTM zone 51S',Clo,BUd,BUX,BWU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23881']]],[[U,'DGN95_UTM_zone_51S',Cca,BUd,BUX,BWU,BUg,BUc,BUo,BUa]]],['23880',AnS+BSG,[[U,Xf+' / UTM zone 50S',Clo,BUd,BUX,BWS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23880']]],[[U,'DGN95_UTM_zone_50S',Cca,BUd,BUX,BWS,BUg,BUc,BUo,BUa]]],['2388',Apd+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 129E',Clg,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'2388']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_129E',CcJ,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['23879',AnE+BSG,[[U,Xf+' / UTM zone 49S',Clo,BUd,BUX,BWX,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23879']]],[[U,'DGN95_UTM_zone_49S',Cca,BUd,BUX,BWX,BUg,BUc,BUo,BUa]]],['23878',AnD+BSG,[[U,Xf+' / UTM zone 48S',Clo,BUd,BUX,BWK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23878']]],[[U,'DGN95_UTM_zone_48S',Cca,BUd,BUX,BWK,BUg,BUc,BUo,BUa]]],['23877',AoJ+BSG,[[U,Xf+' / UTM zone 47S',Clo,BUd,BUX,BWf,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'23877']]],[[U,'DGN95_UTM_zone_47S',Cca,BUd,BUX,BWf,BUg,BUc,BUo,BUa]]],['23872',Ank+BAy,[[U,Xf+' / UTM zone 52N',Clo,BUd,BUX,BWQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23872']]],[[U,'DGN95_UTM_zone_52N',Cca,BUd,BUX,BWQ,BUg,BUc,BUT,BUa]]],['23871',AnJ+BAy,[[U,Xf+' / UTM zone 51N',Clo,BUd,BUX,BWU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23871']]],[[U,'DGN95_UTM_zone_51N',Cca,BUd,BUX,BWU,BUg,BUc,BUT,BUa]]],['23870',AnS+BAy,[[U,Xf+' / UTM zone 50N',Clo,BUd,BUX,BWS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23870']]],[[U,'DGN95_UTM_zone_50N',Cca,BUd,BUX,BWS,BUg,BUc,BUT,BUa]]],['2387',Aty+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 126E',Clg,BUd,BUX,Bao,BUf,BUc,BUT,CVy,[B,K,'2387']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_126E',CcJ,BUd,BUX,Bao,BUf,BUc,BUT,BUa]]],['23869',AnE+BAy,[[U,Xf+' / UTM zone 49N',Clo,BUd,BUX,BWX,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23869']]],[[U,'DGN95_UTM_zone_49N',Cca,BUd,BUX,BWX,BUg,BUc,BUT,BUa]]],['23868',AnD+BAy,[[U,Xf+' / UTM zone 48N',Clo,BUd,BUX,BWK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23868']]],[[U,'DGN95_UTM_zone_48N',Cca,BUd,BUX,BWK,BUg,BUc,BUT,BUa]]],['23867',AoJ+BAy,[[U,Xf+' / UTM zone 47N',Clo,BUd,BUX,BWf,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23867']]],[[U,'DGN95_UTM_zone_47N',Cca,BUd,BUX,BWf,BUg,BUc,BUT,BUa]]],['23866',AnA+BAy,[[U,Xf+' / UTM zone 46N',Clo,BUd,BUX,BWk,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23866']]],[[U,'DGN95_UTM_zone_46N',Cca,BUd,BUX,BWk,BUg,BUc,BUT,BUa]]],['2386',ApF+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 123E',Clg,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'2386']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_123E',CcJ,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['23852',Ank+BLb,[[U,'ID74 / UTM zone 52N',Clw,BUd,BUX,BWQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23852']]],[[U,'ID74_UTM_zone_52N',CdC,BUd,BUX,BWQ,BUg,BUc,BUT,BUa]]],['23851',AnJ+BLb,[[U,'ID74 / UTM zone 51N',Clw,BUd,BUX,BWU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23851']]],[[U,'ID74_UTM_zone_51N',CdC,BUd,BUX,BWU,BUg,BUc,BUT,BUa]]],['23850',AnS+BLb,[[U,'ID74 / UTM zone 50N',Clw,BUd,BUX,BWS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23850']]],[[U,'ID74_UTM_zone_50N',CdC,BUd,BUX,BWS,BUg,BUc,BUT,BUa]]],['2385',Atw+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 120E',Clg,BUd,BUX,BbG,BUf,BUc,BUT,CVy,[B,K,'2385']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_120E',CcJ,BUd,BUX,BbG,BUf,BUc,BUT,BUa]]],['23849',AnE+BLb,[[U,'ID74 / UTM zone 49N',Clw,BUd,BUX,BWX,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23849']]],[[U,'ID74_UTM_zone_49N',CdC,BUd,BUX,BWX,BUg,BUc,BUT,BUa]]],['23848',AnD+BLb,[[U,'ID74 / UTM zone 48N',Clw,BUd,BUX,BWK,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23848']]],[[U,'ID74_UTM_zone_48N',CdC,BUd,BUX,BWK,BUg,BUc,BUT,BUa]]],['23847',AoJ+BLb,[[U,'ID74 / UTM zone 47N',Clw,BUd,BUX,BWf,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23847']]],[[U,'ID74_UTM_zone_47N',CdC,BUd,BUX,BWf,BUg,BUc,BUT,BUa]]],['23846',AnA+BLb,[[U,'ID74 / UTM zone 46N',Clw,BUd,BUX,BWk,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23846']]],[[U,'ID74_UTM_zone_46N',CdC,BUd,BUX,BWk,BUg,BUc,BUT,BUa]]],['23845',AjX+' +lon_0=139.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 54.1',Clo,BUd,BUX,CNq,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23845']]],[[U,'DGN95_Indonesia_TM_3_zone_54_1',Cca,BUd,BUX,CNq,BUt,BVP,BYL,BUa]]],['23844',AjX+' +lon_0=136.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 53.2',Clo,BUd,BUX,CNp,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23844']]],[[U,'DGN95_Indonesia_TM_3_zone_53_2',Cca,BUd,BUX,CNp,BUt,BVP,BYL,BUa]]],['23843',AjX+BFp+AnR+BAy,[[U,Xf+' /'+nI+' TM-3 zone 53.1',Clo,BUd,BUX,Bso,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23843']]],[[U,'DGN95_Indonesia_TM_3_zone_53_1',Cca,BUd,BUX,Bso,BUt,BVP,BYL,BUa]]],['23842',AjX+' +lon_0=130.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 52.2',Clo,BUd,BUX,CNo,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23842']]],[[U,'DGN95_Indonesia_TM_3_zone_52_2',Cca,BUd,BUX,CNo,BUt,BVP,BYL,BUa]]],['23841',AjX+BFq+AnR+BAy,[[U,Xf+' /'+nI+' TM-3 zone 52.1',Clo,BUd,BUX,BmC,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23841']]],[[U,'DGN95_Indonesia_TM_3_zone_52_1',Cca,BUd,BUX,BmC,BUt,BVP,BYL,BUa]]],['23840',AjX+' +lon_0=124.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 51.2',Clo,BUd,BUX,[A,E,AdJ],BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23840']]],[[U,'DGN95_Indonesia_TM_3_zone_51_2',Cca,BUd,BUX,[A,E,AdJ],BUt,BVP,BYL,BUa]]],['2384',ApE+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 117E',Clg,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'2384']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_117E',CcJ,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['23839',AjX+' +lon_0=121.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 51.1',Clo,BUd,BUX,CNn,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23839']]],[[U,'DGN95_Indonesia_TM_3_zone_51_1',Cca,BUd,BUX,CNn,BUt,BVP,BYL,BUa]]],['23838',AjX+' +lon_0=118.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 50.2',Clo,BUd,BUX,CNm,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23838']]],[[U,'DGN95_Indonesia_TM_3_zone_50_2',Cca,BUd,BUX,CNm,BUt,BVP,BYL,BUa]]],['23837',AjX+' +lon_0=115.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 50.1',Clo,BUd,BUX,CNl,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23837']]],[[U,'DGN95_Indonesia_TM_3_zone_50_1',Cca,BUd,BUX,CNl,BUt,BVP,BYL,BUa]]],['23836',AjX+' +lon_0=112.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 49.2',Clo,BUd,BUX,CNk,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23836']]],[[U,'DGN95_Indonesia_TM_3_zone_49_2',Cca,BUd,BUX,CNk,BUt,BVP,BYL,BUa]]],['23835',AjX+' +lon_0=109.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 49.1',Clo,BUd,BUX,CNj,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23835']]],[[U,'DGN95_Indonesia_TM_3_zone_49_1',Cca,BUd,BUX,CNj,BUt,BVP,BYL,BUa]]],['23834',AjX+' +lon_0=106.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 48.2',Clo,BUd,BUX,CNi,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23834']]],[[U,'DGN95_Indonesia_TM_3_zone_48_2',Cca,BUd,BUX,CNi,BUt,BVP,BYL,BUa]]],['23833',AjX+' +lon_0=103.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 48.1',Clo,BUd,BUX,CNh,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23833']]],[[U,'DGN95_Indonesia_TM_3_zone_48_1',Cca,BUd,BUX,CNh,BUt,BVP,BYL,BUa]]],['23832',AjX+' +lon_0=100.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 47.2',Clo,BUd,BUX,CNg,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23832']]],[[U,'DGN95_Indonesia_TM_3_zone_47_2',Cca,BUd,BUX,CNg,BUt,BVP,BYL,BUa]]],['23831',AjX+' +lon_0=97.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 47.1',Clo,BUd,BUX,CPK,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23831']]],[[U,'DGN95_Indonesia_TM_3_zone_47_1',Cca,BUd,BUX,CPK,BUt,BVP,BYL,BUa]]],['23830',AjX+' +lon_0=94.5'+BTs,[[U,Xf+' /'+nI+' TM-3 zone 46.2',Clo,BUd,BUX,CPJ,BUt,BVP,BYL,CVy,BUl,BUk,[B,K,'23830']]],[[U,'DGN95_Indonesia_TM_3_zone_46_2',Cca,BUd,BUX,CPJ,BUt,BVP,BYL,BUa]]],['2383',Atu+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 114E',Clg,BUd,BUX,BZy,BUf,BUc,BUT,CVy,[B,K,'2383']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_114E',CcJ,BUd,BUX,BZy,BUf,BUc,BUT,BUa]]],['2382',ApX+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 111E',Clg,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'2382']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_111E',CcJ,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['2381',Ats+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 108E',Clg,BUd,BUX,Bbi,BUf,BUc,BUT,CVy,[B,K,'2381']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_108E',CcJ,BUd,BUX,Bbi,BUf,BUc,BUT,BUa]]],['2380',ApW+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 105E',Clg,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'2380']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_105E',CcJ,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['2379',Atq+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 102E',Clg,BUd,BUX,Ban,BUf,BUc,BUT,CVy,[B,K,'2379']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_102E',CcJ,BUd,BUX,Ban,BUf,BUc,BUT,BUa]]],['2378',Apc+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 99E',Clg,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'2378']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_99E',CcJ,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['2377',Ato+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 96E',Clg,BUd,BUX,BbF,BUf,BUc,BUT,CVy,[B,K,'2377']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_96E',CcJ,BUd,BUX,BbF,BUf,BUc,BUT,BUa]]],['2376',Apb+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 93E',Clg,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'2376']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_93E',CcJ,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['2375',Asm+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 90E',Clg,BUd,BUX,BYP,BUf,BUc,BUT,CVy,[B,K,'2375']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_90E',CcJ,BUd,BUX,BYP,BUf,BUc,BUT,BUa]]],['2374',Apa+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 87E',Clg,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'2374']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_87E',CcJ,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['2373',Atm+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 84E',Clg,BUd,BUX,Bbh,BUf,BUc,BUT,CVy,[B,K,'2373']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_84E',CcJ,BUd,BUX,Bbh,BUf,BUc,BUT,BUa]]],['2372',ApZ+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 81E',Clg,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'2372']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_81E',CcJ,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['2371',Atk+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 78E',Clg,BUd,BUX,Bam,BUf,BUc,BUT,CVy,[B,K,'2371']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_78E',CcJ,BUd,BUX,Bam,BUf,BUc,BUT,BUa]]],['23700',AEH+' +lat_0=47.14439372222222 +lon_0=19.04857177777778 +k_0=0.99993 +x_0=650000'+fR+' +ellps=GRS67'+AEo+q+a,[[U,'HD72 / EOV',CsF,BlU,[A,BW,ARC],[A,BV,ARD],BmY,Bxh,CGF,[A,I,nk],Bae,CVy,BvC,BvB,[B,K,'23700']]],[[U,'HD72_EOV',[S,'GCS_HD72',[V,AbW,BuM],BUU,BUW],BlU,[A,BW,ARC],[A,BV,ARD],BmY,CGF,[A,I,nk],Bae,BUa]]],['2370',ApY+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+Ajc+' CM 75E',Clg,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'2370']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_CM_75E',CcJ,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['2369',Ape+' +k=1'+BDU+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 45',Clg,BUd,BUX,BWd,BUf,BkR,BUT,CVy,[B,K,'2369']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_45',CcJ,BUd,BUX,BWd,BUf,BkR,BUT,BUa]]],['2368',Asl+' +k=1'+BDT+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 44',Clg,BUd,BUX,BaU,BUf,Blo,BUT,CVy,[B,K,'2368']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_44',CcJ,BUd,BUX,BaU,BUf,Blo,BUT,BUa]]],['2367',Apd+' +k=1'+BDS+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 43',Clg,BUd,BUX,BWQ,BUf,BkQ,BUT,CVy,[B,K,'2367']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_43',CcJ,BUd,BUX,BWQ,BUf,BkQ,BUT,BUa]]],['2366',Aty+' +k=1'+BDR+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 42',Clg,BUd,BUX,Bao,BUf,Bln,BUT,CVy,[B,K,'2366']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_42',CcJ,BUd,BUX,Bao,BUf,Bln,BUT,BUa]]],['2365',ApF+' +k=1'+BDQ+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 41',Clg,BUd,BUX,BWU,BUf,BkP,BUT,CVy,[B,K,'2365']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_41',CcJ,BUd,BUX,BWU,BUf,BkP,BUT,BUa]]],['2364',Atw+' +k=1'+BDP+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 40',Clg,BUd,BUX,BbG,BUf,BkV,BUT,CVy,[B,K,'2364']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_40',CcJ,BUd,BUX,BbG,BUf,BkV,BUT,BUa]]],['2363',ApE+' +k=1'+BDO+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 39',Clg,BUd,BUX,BWS,BUf,BkZ,BUT,CVy,[B,K,'2363']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_39',CcJ,BUd,BUX,BWS,BUf,BkZ,BUT,BUa]]],['2362',Atu+' +k=1'+BDN+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 38',Clg,BUd,BUX,BZy,BUf,BkU,BUT,CVy,[B,K,'2362']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_38',CcJ,BUd,BUX,BZy,BUf,BkU,BUT,BUa]]],['2361',ApX+' +k=1'+BDM+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 37',Clg,BUd,BUX,BWX,BUf,BkY,BUT,CVy,[B,K,'2361']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_37',CcJ,BUd,BUX,BWX,BUf,BkY,BUT,BUa]]],['2360',Ats+' +k=1'+BDL+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 36',Clg,BUd,BUX,Bbi,BUf,BkT,BUT,CVy,[B,K,'2360']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_36',CcJ,BUd,BUX,Bbi,BUf,BkT,BUT,BUa]]],['2359',ApW+' +k=1'+BDK+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 35',Clg,BUd,BUX,BWK,BUf,BkX,BUT,CVy,[B,K,'2359']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_35',CcJ,BUd,BUX,BWK,BUf,BkX,BUT,BUa]]],['2358',Atq+' +k=1'+BDJ+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 34',Clg,BUd,BUX,Ban,BUf,BkS,BUT,CVy,[B,K,'2358']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_34',CcJ,BUd,BUX,Ban,BUf,BkS,BUT,BUa]]],['2357',Apc+' +k=1'+AwV+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 33',Clg,BUd,BUX,BWf,BUf,BdO,BUT,CVy,[B,K,'2357']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_33',CcJ,BUd,BUX,BWf,BUf,BdO,BUT,BUa]]],['2356',Ato+' +k=1'+ArV+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 32',Clg,BUd,BUX,BbF,BUf,BcO,BUT,CVy,[B,K,'2356']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_32',CcJ,BUd,BUX,BbF,BUf,BcO,BUT,BUa]]],['2355',Apb+' +k=1'+AqY+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 31',Clg,BUd,BUX,BWk,BUf,BaY,BUT,CVy,[B,K,'2355']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_31',CcJ,BUd,BUX,BWk,BUf,BaY,BUT,BUa]]],['2354',Asm+' +k=1'+AsZ+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 30',Clg,BUd,BUX,BYP,BUf,BcN,BUT,CVy,[B,K,'2354']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_30',CcJ,BUd,BUX,BYP,BUf,BcN,BUT,BUa]]],['2353',Apa+' +k=1'+AsY+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 29',Clg,BUd,BUX,BXK,BUf,Baq,BUT,CVy,[B,K,'2353']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_29',CcJ,BUd,BUX,BXK,BUf,Baq,BUT,BUa]]],['2352',Atm+' +k=1'+AsX+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 28',Clg,BUd,BUX,Bbh,BUf,Bbm,BUT,CVy,[B,K,'2352']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_28',CcJ,BUd,BUX,Bbh,BUf,Bbm,BUT,BUa]]],['2351',ApZ+' +k=1'+AsW+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 27',Clg,BUd,BUX,BWz,BUf,Bbl,BUT,CVy,[B,K,'2351']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_27',CcJ,BUd,BUX,BWz,BUf,Bbl,BUT,BUa]]],['2350',Atk+' +k=1'+AsV+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 26',Clg,BUd,BUX,Bam,BUf,Bbj,BUT,CVy,[B,K,'2350']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_26',CcJ,BUd,BUX,Bam,BUf,Bbj,BUT,BUa]]],['2349',ApY+' +k=1'+AsU+Aya,[[U,'Xian'+Bp+' /'+Ajc+' zone 25',Clg,BUd,BUX,BWs,BUf,Bbk,BUT,CVy,[B,K,'2349']]],[[U,'Xian_1980_3_degree_Gauss_Kruger_zone_25',CcJ,BUd,BUX,BWs,BUf,Bbk,BUT,BUa]]],['2348',Ape+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 135E',Clg,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'2348']]],[[U,'Xian_1980_Gauss_Kruger_CM_135E',CcJ,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['2347',Apd+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 129E',Clg,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'2347']]],[[U,'Xian_1980_Gauss_Kruger_CM_129E',CcJ,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['2346',ApF+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 123E',Clg,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'2346']]],[[U,'Xian_1980_Gauss_Kruger_CM_123E',CcJ,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['2345',ApE+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 117E',Clg,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'2345']]],[[U,'Xian_1980_Gauss_Kruger_CM_117E',CcJ,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['2344',ApX+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 111E',Clg,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'2344']]],[[U,'Xian_1980_Gauss_Kruger_CM_111E',CcJ,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['2343',ApW+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 105E',Clg,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'2343']]],[[U,'Xian_1980_Gauss_Kruger_CM_105E',CcJ,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['2342',Apc+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 99E',Clg,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'2342']]],[[U,'Xian_1980_Gauss_Kruger_CM_99E',CcJ,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['2341',Apb+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 93E',Clg,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'2341']]],[[U,'Xian_1980_Gauss_Kruger_CM_93E',CcJ,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['2340',Apa+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 87E',Clg,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'2340']]],[[U,'Xian_1980_Gauss_Kruger_CM_87E',CcJ,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['2339',ApZ+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 81E',Clg,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'2339']]],[[U,'Xian_1980_Gauss_Kruger_CM_81E',CcJ,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['2338',ApY+' +k=1'+BHh,[[U,'Xian'+Bp+' /'+AW+' CM 75E',Clg,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'2338']]],[[U,'Xian_1980_Gauss_Kruger_CM_75E',CcJ,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['2337',Ape+' +k=1'+AsT+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 23',Clg,BUd,BUX,BWd,BUf,BbT,BUT,CVy,[B,K,'2337']]],[[U,'Xian_1980_Gauss_Kruger_zone_23',CcJ,BUd,BUX,BWd,BUf,BbT,BUT,BUa]]],['2336',Apd+' +k=1'+AsS+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 22',Clg,BUd,BUX,BWQ,BUf,Baz,BUT,CVy,[B,K,'2336']]],[[U,'Xian_1980_Gauss_Kruger_zone_22',CcJ,BUd,BUX,BWQ,BUf,Baz,BUT,BUa]]],['2335',ApF+' +k=1'+AsR+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 21',Clg,BUd,BUX,BWU,BUf,BbS,BUT,CVy,[B,K,'2335']]],[[U,'Xian_1980_Gauss_Kruger_zone_21',CcJ,BUd,BUX,BWU,BUf,BbS,BUT,BUa]]],['2334',ApE+' +k=1'+AsQ+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 20',Clg,BUd,BUX,BWS,BUf,Bay,BUT,CVy,[B,K,'2334']]],[[U,'Xian_1980_Gauss_Kruger_zone_20',CcJ,BUd,BUX,BWS,BUf,Bay,BUT,BUa]]],['2333',ApX+' +k=1'+ArM+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 19',Clg,BUd,BUX,BWX,BUf,BbR,BUT,CVy,[B,K,'2333']]],[[U,'Xian_1980_Gauss_Kruger_zone_19',CcJ,BUd,BUX,BWX,BUf,BbR,BUT,BUa]]],['2332',ApW+' +k=1'+AsP+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 18',Clg,BUd,BUX,BWK,BUf,BbQ,BUT,CVy,[B,K,'2332']]],[[U,'Xian_1980_Gauss_Kruger_zone_18',CcJ,BUd,BUX,BWK,BUf,BbQ,BUT,BUa]]],['2331',Apc+' +k=1'+AwT+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 17',Clg,BUd,BUX,BWf,BUf,Bcf,BUT,CVy,[B,K,'2331']]],[[U,'Xian_1980_Gauss_Kruger_zone_17',CcJ,BUd,BUX,BWf,BUf,Bcf,BUT,BUa]]],['2330',Apb+' +k=1'+AwS+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 16',Clg,BUd,BUX,BWk,BUf,BbP,BUT,CVy,[B,K,'2330']]],[[U,'Xian_1980_Gauss_Kruger_zone_16',CcJ,BUd,BUX,BWk,BUf,BbP,BUT,BUa]]],['2329',Apa+' +k=1'+ArP+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 15',Clg,BUd,BUX,BXK,BUf,BbO,BUT,CVy,[B,K,'2329']]],[[U,'Xian_1980_Gauss_Kruger_zone_15',CcJ,BUd,BUX,BXK,BUf,BbO,BUT,BUa]]],['2328',ApZ+' +k=1'+ArO+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 14',Clg,BUd,BUX,BWz,BUf,Bad,BUT,CVy,[B,K,'2328']]],[[U,'Xian_1980_Gauss_Kruger_zone_14',CcJ,BUd,BUX,BWz,BUf,Bad,BUT,BUa]]],['2327',ApY+' +k=1'+ArN+Aya,[[U,'Xian'+Bp+' /'+AW+' zone 13',Clg,BUd,BUX,BWs,BUf,Bax,BUT,CVy,[B,K,'2327']]],[[U,'Xian_1980_Gauss_Kruger_zone_13',CcJ,BUd,BUX,BWs,BUf,Bax,BUT,BUa]]],['2326',l+AaP+AaQ+' +k=1 +x_0=836694.05 +y_0=819069.8'+BP+jv+q+a,[[U,'Hong Kong'+Bp+op+TN,Cqv,BUd,CIB,CIA,BUf,ByE,CFP,CVy,[B,K,'2326']]],[[U,'Hong_Kong_1980_Grid_System',[S,'GCS_Hong Kong'+Bp,[V,AbU,BUs],BUU,BUW],BUd,CIB,CIA,BUf,ByE,CFP,BUa]]],['2325',AtF+' +k=1'+BSu,[[U,ij+' / TM45',Clm,BUd,BUX,BWe,BUf,BUc,BUT,CVy,[B,K,'2325']]],[[U,'ED50_TM45',Ccc,BUd,BUX,BWe,BUf,BUc,BUT,BUa]]],['23240',AnK+Cw+vc+q+a,[[U,AcG+' / UTM zone 40N',Cof,BUd,BUX,BXz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23240']]],[[U,'Fahud_UTM_zone_40N',CjA,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['2324',AyC+' +k=1'+BSu,[[U,ij+' / TM42',Clm,BUd,BUX,BdJ,BUf,BUc,BUT,CVy,[B,K,'2324']]],[[U,'ED50_TM42',Ccc,BUd,BUX,BdJ,BUf,BUc,BUT,BUa]]],['23239',BNW+vc+q+a,[[U,AcG+' / UTM zone 39N',Cof,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23239']]],[[U,'Fahud_UTM_zone_39N',CjA,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['2323',AsG+' +k=1'+BSu,[[U,ij+' / TM39',Clm,BUd,BUX,BWn,BUf,BUc,BUT,CVy,[B,K,'2323']]],[[U,'ED50_TM39',Ccc,BUd,BUX,BWn,BUf,BUc,BUT,BUa]]],['2322',AtL+' +k=1'+BSu,[[U,ij+' / TM36',Clm,BUd,BUX,BdS,BUf,BUc,BUT,CVy,[B,K,'2322']]],[[U,'ED50_TM36',Ccc,BUd,BUX,BdS,BUf,BUc,BUT,BUa]]],['2321',Aqn+' +k=1'+BSu,[[U,ij+' / TM33',Clm,BUd,BUX,BWg,BUf,BUc,BUT,CVy,[B,K,'2321']]],[[U,'ED50_TM33',Ccc,BUd,BUX,BWg,BUf,BUc,BUT,BUa]]],['2320',ArX+' +k=1'+BSu,[[U,ij+' / TM30',Clm,BUd,BUX,BYz,BUf,BUc,BUT,CVy,[B,K,'2320']]],[[U,'ED50_TM30',Ccc,BUd,BUX,BYz,BUf,BUc,BUT,BUa]]],['2319',Apz+' +k=1'+BSu,[[U,ij+' / TM27',Clm,BUd,BUX,BWP,BUf,BUc,BUT,CVy,[B,K,'2319']]],[[U,'ED50_TM27',Ccc,BUd,BUX,BWP,BUf,BUc,BUT,BUa]]],['2318',AU+' +lat_1=17 +lat_2=33 +lat_0=25.08951'+AXM+Ajh+BLY,[[U,'Ain el Abd / Aramco'+PW,CmU,BVG,[A,W,pb],[A,Y,HA],CFO,BkL,BUy,BUT,CVy,BUj,BUm,[B,K,'2318']]],[[U,'Ain_el_Abd_Aramco_Lambert',CdR,BVD,[A,W,pb],[A,Y,HA],CFO,BkL,BUy,BUT,BUa]]],['2317',AU+' +lat_1=9 +lat_2=3 +lat_0=6'+AEv+Anu+BKc,[[U,ca+' / ICN'+tj,CmD,BVG,CQZ,[A,Y,SI],[A,C,kG],Bhb,BWa,BVg,CVy,BUl,BUk,[B,K,'2317']]],[[U,'PSAD56_ICN_Regional',CdD,BVD,CQZ,[A,Y,SI],[A,C,kG],Bhb,BWa,BVg,BUa]]],['2316',Aku+Aka+PN+q+a,[[U,'Campo'+TS+' / UTM zone 20S',CmK,BUd,BUX,BWY,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2316']]],[[U,'Campo_Inchauspe_UTM_zone_20S',Cdq,BUd,BUX,BWY,BUg,BUc,BUo,BUa]]],['2315',AlG+Aka+PN+q+a,[[U,'Campo'+TS+' / UTM zone 19S',CmK,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2315']]],[[U,'Campo_Inchauspe_UTM_zone_19S',Cdq,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['2314',SE+Aaf+AWv+' +x_0=86501.46392052001 +y_0=65379.0134283'+Arw+iQ+rt+a,[[U,AUk+' 1903 /'+" "+AUk+op+' (ftCla)',CoK,Bgy,CHQ,CHP,CHC,CHB,CYB,BUj,BUm,[B,K,'2314']]],[[U,'Trinidad_1903_Trinidad_Grid_ftCla',ChB,Bgx,CHQ,CHP,CHC,CHB,BqE,Bal]]],['2313',AmO+BJc,[[U,AGX+' / UTM zone 33N',CsV,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2313']]],[[U,'Kousseri_UTM_zone_33N',[S,'GCS_Kousseri',CaZ,BUU,BUW],BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['2312',AmO+BJc,[[U,Aay+' / UTM zone 33N',CsU,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2312']]],[[U,'Garoua_UTM_zone_33N',[S,'GCS_Garoua',CbS,BUU,BUW],BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['2311',AjX+' +lon_0=6'+AlL+Ajx+q+a,[[U,'WGS 84 / TM 6 NE',ClU,BUd,BUX,Blt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2311']]],[[U,'WGS_84_TM_6_NE',Cbp,BUd,BUX,Blt,BUg,BUc,BUT,BUa]]],['2310',Asl+BLz,[[U,'WGS 84 / TM 132 SE',ClU,BUd,BUX,BaU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2310']]],[[U,'WGS_84_TM_132_SE',Cbp,BUd,BUX,BaU,BUg,BUc,BUo,BUa]]],['23095',AjX+' +lon_0=5'+BHH+Anm+a,[[U,ij+' / TM 5 NE',Clm,BUd,BUX,[A,E,WW],BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23095']]],[[U,'ED50_TM_5_NE',Ccc,BUd,BUX,[A,E,WW],BUg,BUc,BUT,BUa]]],['23090',AjX+ci+BHH+Anm+a,[[U,ij+' / TM 0 N',Clm,BUd,BUX,BYA,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23090']]],[[U,'ED50_TM_0_N',Ccc,BUd,BUX,BYA,BUg,BUc,BUT,BUa]]],['2309',AjX+' +lon_0=116'+BLz,[[U,'WGS 84 / TM 116 SE',ClU,BUd,BUX,CBA,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2309']]],[[U,'WGS_84_TM_116_SE',Cbp,BUd,BUX,CBA,BUg,BUc,BUo,BUa]]],['2308',AjX+' +lon_0=109'+BIZ+BAu+q+a,[[U,eD+' / TM 109 SE',CnG,BUd,BUX,CPv,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2308']]],[[U,'Batavia_TM_109_SE',CfS,BUd,BUX,CPv,BUg,BUc,BUo,BUa]]],['23038',AmA+BDH,[[U,ij+' / UTM zone 38N',Clm,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23038']]],[[U,'ED50_UTM_zone_38N',Ccc,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['23037',AmP+BDH,[[U,ij+' / UTM zone 37N',Clm,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23037']]],[[U,'ED50_UTM_zone_37N',Ccc,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['23036',AnF+BDH,[[U,ij+' / UTM zone 36N',Clm,BUd,BUX,BWg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23036']]],[[U,'ED50_UTM_zone_36N',Ccc,BUd,BUX,BWg,BUg,BUc,BUT,BUa]]],['23035',Amc+BDH,[[U,ij+' / UTM zone 35N',Clm,BUd,BUX,BWP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23035']]],[[U,'ED50_UTM_zone_35N',Ccc,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['23034',Anl+BDH,[[U,ij+' / UTM zone 34N',Clm,BUd,BUX,BWR,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23034']]],[[U,'ED50_UTM_zone_34N',Ccc,BUd,BUX,BWR,BUg,BUc,BUT,BUa]]],['23033',AmO+BDH,[[U,ij+' / UTM zone 33N',Clm,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23033']]],[[U,'ED50_UTM_zone_33N',Ccc,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['23031',Amw+BDH,[[U,ij+' / UTM zone 31N',Clm,BUd,BUX,BXt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23031']]],[[U,'ED50_UTM_zone_31N',Ccc,BUd,BUX,BXt,BUg,BUc,BUT,BUa]]],['23030',AmR+BDH,[[U,ij+' / UTM zone 30N',Clm,BUd,BUX,Bak,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23030']]],[[U,'ED50_UTM_zone_30N',Ccc,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['23029',AmJ+BDH,[[U,ij+' / UTM zone 29N',Clm,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23029']]],[[U,'ED50_UTM_zone_29N',Ccc,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['23028',Aly+BDH,[[U,ij+' / UTM zone 28N',Clm,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'23028']]],[[U,'ED50_UTM_zone_28N',Ccc,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['22994',AoV+ck+' +k=1'+VV+AXQ+aO+cy+q+a,[[U,'Egypt 1907 / Extended Purple Belt',Cmx,BUd,BXX,BWP,BUf,BWl,BuK,CVy,BUj,BUm,[B,K,'22994']]],[[U,'Egypt_1907_Extended_Purple_Belt',CfB,BUd,BXX,BWP,BUf,BWl,BuK,BUa]]],['22993',AoV+ck+' +k=1'+VV+fR+aO+cy+q+a,[[U,'Egypt 1907 / Purple Belt',Cmx,BUd,BXX,BWP,BUf,BWl,Bae,CVy,BUj,BUm,[B,K,'22993']]],[[U,'Egypt_1907_Purple_Belt',CfB,BUd,BXX,BWP,BUf,BWl,Bae,BUa]]],['22992',AoV+AIc+' +k=1 +x_0=615000 +y_0=810000'+aO+cy+q+a,[[U,'Egypt 1907 / Red Belt',Cmx,BUd,BXX,Bed,BUf,CAI,CAH,CVy,BUj,BUm,[B,K,'22992']]],[[U,'Egypt_1907_Red_Belt',CfB,BUd,BXX,Bed,BUf,CAI,CAH,BUa]]],['22991',AoV+' +lon_0=35 +k=1'+GW+' +y_0=1100000'+aO+cy+q+a,[[U,'Egypt 1907 / Blue Belt',Cmx,BUd,BXX,[A,E,QY],BUf,BVl,CGE,CVy,BUj,BUm,[B,K,'22991']]],[[U,'Egypt_1907_Blue_Belt',CfB,BUd,BXX,[A,E,QY],BUf,BVl,CGE,BUa]]],['2295',BHq+AmY+BRw,[[U,AXA+' / MTM Nova Scotia zone 5',Cmv,BUd,BUX,Bnv,BUt,BYv,BUT,CVy,BUj,BUm,[B,K,'2295']]],[[U,'ATS77_MTM_Nova_Scotia_zone_5',Cej,BUd,BUX,Bnv,BUt,BYv,BUT,BUa]]],['2294',BHp+Alz+BRw,[[U,AXA+' / MTM Nova Scotia zone 4',Cmv,BUd,BUX,Bnu,BUt,BYJ,BUT,CVy,BUj,BUm,[B,K,'2294']]],[[U,'ATS77_MTM_Nova_Scotia_zone_4',Cej,BUd,BUX,Bnu,BUt,BYJ,BUT,BUa]]],['2290',ZQ+' +lat_0=47.25'+AIg+ATc+VV+hh+BRw,[[U,AXA+' / Prince Edward Isl.'+RQ+' (ATS77)',Cmv,Bpn,Byl,BWY,BoG,BWl,Baa,CVy,BcL,BcK,[B,K,'2290']]],[[U,'ATS77_Prince_Edward_Isl_Stereographic_ATS77',Cej,Bpm,Byl,BWY,BoG,BWl,Baa,BUa]]],['2289',BGe+AkO,[[U,Bx+' /'+cp+' South'+DE,ClV,BVG,BjK,BjJ,Bde,BWb,BVj,BUT,CVz,BUl,BUk,[B,K,'2289']]],[[U,'NAD83_Wisconsin_South_ftUS',Cbn,BVD,BjK,BjJ,Bde,BWb,BVj,BUT,BUr]]],['2288',BGf+AkO,[[U,Bx+' /'+BBd+DE,ClV,BVG,Bdi,BjS,BYM,BWb,BVj,BUT,CVz,BUl,BUk,[B,K,'2288']]],[[U,'NAD83_Wisconsin_Central_ftUS',Cbn,BVD,Bdi,BjS,BYM,BWb,BVj,BUT,BUr]]],['2287',BGd+AkO,[[U,Bx+' /'+BBe+DE,ClV,BVG,BjI,BjH,Bgc,BWb,BVj,BUT,CVz,BUl,BUk,[B,K,'2287']]],[[U,'NAD83_Wisconsin_North_ftUS',Cbn,BVD,BjI,BjH,Bgc,BWb,BVj,BUT,BUr]]],['2286',BRV+AnX,[[U,Bx+' /'+kE+' South'+DE,ClV,BVG,BjC,BjB,BgZ,BWB,BXa,BUT,CVz,BUl,BUk,[B,K,'2286']]],[[U,'NAD83_Washington_South_ftUS',Cbn,BVD,BjC,BjB,BgZ,BWB,BXa,BUT,BUr]]],['2285',BRT+AnX,[[U,Bx+' /'+BBc+DE,ClV,BVG,BaE,BjA,BZA,BgY,BXa,BUT,CVz,BUl,BUk,[B,K,'2285']]],[[U,'NAD83_Washington_North_ftUS',Cbn,BVD,BaE,BjA,BZA,BgY,BXa,BUT,BUr]]],['2284',BRR+AkO,[[U,Bx+' /'+eI+' South'+DE,ClV,BVG,BZr,BgX,BXr,BZe,Biz,Bbv,CVz,BUl,BUk,[B,K,'2284']]],[[U,'NAD83_Virginia_South_ftUS',Cbn,BVD,BZr,BgX,BXr,BZe,Biz,Bbv,BUr]]],['2283',BRP+AnX,[[U,Bx+' /'+BIY,ClV,BVG,Biy,Bix,BXq,BZe,Biz,Biw,CVz,BUl,BUk,[B,K,'2283']]],[[U,'NAD83_Virginia_North_ftUS',Cbn,BVD,Biy,Bix,BXq,BZe,Biz,Biw,BUr]]],['2282',Ash+AsO+AGv+BGh,[[U,Bx+' / Utah South'+rv,ClV,BVG,Bcd,Bcc,BWJ,BWm,Bec,Bwj,CWY,BUl,BUk,[B,K,'2282']]],[[U,'NAD83_Utah_South_ft',Cbn,BVD,Bcd,Bcc,BWJ,BWm,Bec,Bwj,BXN]]],['2281',Asb+AsO+AGw+BGh,[[U,Bx+' / Utah'+AsN,ClV,BVG,Bca,BcZ,BYl,BWm,Bec,Bwg,CWY,BUl,BUk,[B,K,'2281']]],[[U,'NAD83_Utah_Central_ft',Cbn,BVD,Bca,BcZ,BYl,BWm,Bec,Bwg,BXN]]],['2280',Asc+AsO+ACe+BGh,[[U,Bx+' / Utah'+ApU,ClV,BVG,BZD,Bcb,Bby,BWm,Bec,Bwi,CWY,BUl,BUk,[B,K,'2280']]],[[U,'NAD83_Utah_North_ft',Cbn,BVD,BZD,Bcb,Bby,BWm,Bec,Bwi,BXN]]],['2279',BIe+Lf+vz+AnX,[[U,Bx+' / Texas South'+DE,ClV,BVG,BcY,BcX,Bdd,BXp,BZP,Bsa,CVz,BUl,BUk,[B,K,'2279']]],[[U,'NAD83_Texas_South_ftUS',Cbn,BVD,BcY,BcX,Bdd,BXp,BZP,Bsa,BUr]]],['22780',ZQ+' +lat_0=34.2 +lon_0=39.15 +k=0.9995341'+Ajh+Akc+cY+q+a,[[U,'Deir ez Zor / Levant'+RQ,CnN,Bpn,CPI,[A,E,jI],ByD,BUy,BUT,CVy,BUl,BUk,[B,K,'22780']]],[[U,'Deir_ez_Zor_Levant_Stereographic',CfR,Bpm,CPI,[A,E,jI],ByD,BUy,BUT,BUa]]],['2278',BRL+AnX,[[U,Bx+' / Texas South'+Akp,ClV,BVG,Biv,Biu,BgU,BXU,BVj,Bsb,CVz,BUl,BUk,[B,K,'2278']]],[[U,'NAD83_Texas_South_Central_ftUS',Cbn,BVD,Biv,Biu,BgU,BXU,BVj,Bsb,BUr]]],['22770',AU+' +lat_1=34.65 +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256'+GW+Aqz+Mc+cY+q+a,[[U,'Deir ez Zor / Syria'+PW,CnN,BWW,CHA,ByC,ByB,BVl,BZw,CVy,BUl,BUk,[B,K,'22770']]],[[U,'Deir_ez_Zor_Syria_Lambert',CfR,BVD,CHA,ByC,ByB,BVl,BZw,BUa,CHn]]],['2277',BTQ+AkO,[[U,Bx+' / Texas'+Akp,ClV,BVG,Bin,Bim,Bda,BZd,Bbu,Blk,CVz,BUl,BUk,[B,K,'2277']]],[[U,'NAD83_Texas_Central_ftUS',Cbn,BVD,Bin,Bim,Bda,BZd,Bbu,Blk,BUr]]],['2276',BRJ+AnX,[[U,Bx+' / Texas'+BBb+DE,ClV,BVG,Bit,Bis,BgS,BXp,BVj,Biw,CVz,BUl,BUk,[B,K,'2276']]],[[U,'NAD83_Texas_North_Central_ftUS',Cbn,BVD,Bit,Bis,BgS,BXp,BVj,Biw,BUr]]],['2275',BTS+AkO,[[U,Bx+' / Texas'+Akg,ClV,BVG,Bir,Biq,BgR,BgQ,BXZ,Bbv,CVz,BUl,BUk,[B,K,'2275']]],[[U,'NAD83_Texas_North_ftUS',Cbn,BVD,Bir,Biq,BgR,BgQ,BXZ,Bbv,BUr]]],['2274',BGa+AkO,[[U,Bx+' /'+AGm+DE,ClV,BVG,Bil,Bik,BZq,Bcg,BVj,BUT,CVz,BUl,BUk,[B,K,'2274']]],[[U,'NAD83_Tennessee_ftUS',Cbn,BVD,Bil,Bik,BZq,Bcg,BVj,BUT,BUr]]],['2273',BGX+AoT,[[U,Bx+' / South'+pa+rv,ClV,BVG,Bif,Bie,BgN,BVm,BVW,BUT,CWY,BUl,BUk,[B,K,'2273']]],[[U,'NAD83_South_Carolina_ft',Cbn,BVD,Bif,Bie,BgN,BVm,BVW,BUT,BXN]]],['2272',BGW+AkO,[[U,Bx+' /'+eG+' South'+DE,ClV,BVG,BgL,BgK,BXi,BZb,BVj,BUT,CVz,BUl,BUk,[B,K,'2272']]],[[U,'NAD83_Pennsylvania_South_ftUS',Cbn,BVD,BgL,BgK,BXi,BZb,BVj,BUT,BUr]]],['2271',BFe+AkO,[[U,Bx+' /'+BBa+DE,ClV,BVG,Bic,Bib,BZp,BZb,BVj,BUT,CVz,BUl,BUk,[B,K,'2271']]],[[U,'NAD83_Pennsylvania_North_ftUS',Cbn,BVD,Bic,Bib,BZp,BZb,BVj,BUT,BUr]]],['22700',AU+' +lat_1=34.65 +lat_0=34.65 +lon_0=37.35 +k_0=0.9996256'+GW+Aqz+Mc+cY+q+a,[[U,'Deir ez Zor / Levant Zone',CnN,BWW,CHA,ByC,ByB,BVl,BZw,CVy,BUl,BUk,[B,K,'22700']]],[[U,'Deir_ez_Zor_Levant_Zone',CfR,BVD,CHA,ByC,ByB,BVl,BZw,BUa,CHn]]],['2270',BSc+AoT,[[U,Bx+' / Oregon South'+rv,ClV,BVG,Bdm,Bdl,BWi,BWB,Bok,BUT,CWY,BUl,BUk,[B,K,'2270']]],[[U,'NAD83_Oregon_South_ft',Cbn,BVD,Bdm,Bdl,BWi,BWB,Bok,BUT,BXN]]],['2269',BSa+AoT,[[U,Bx+' / Oregon'+ApU,ClV,BVG,Bdk,Bdj,BYN,BWB,Boj,BUT,CWY,BUl,BUk,[B,K,'2269']]],[[U,'NAD83_Oregon_North_ft',Cbn,BVD,Bdk,Bdj,BYN,BWB,Boj,BUT,BXN]]],['2268',BFc+AkO,[[U,Bx+' /'+AGg+' South'+DE,ClV,BVG,Bia,BiZ,BgJ,BXh,BVj,BUT,CVz,BUl,BUk,[B,K,'2268']]],[[U,'NAD83_Oklahoma_South_ftUS',Cbn,BVD,Bia,BiZ,BgJ,BXh,BVj,BUT,BUr]]],['2267',BFM+AkO,[[U,Bx+' /'+ArE+DE,ClV,BVG,BgI,BiY,BgH,BXh,BVj,BUT,CVz,BUl,BUk,[B,K,'2267']]],[[U,'NAD83_Oklahoma_North_ftUS',Cbn,BVD,BgI,BiY,BgH,BXh,BVj,BUT,BUr]]],['2266',BRE+AoT,[[U,Bx+' /'+QM+' Dakota South'+rv,ClV,BVG,BiT,BiS,BbM,BZa,Bbt,BUT,CWY,BUl,BUk,[B,K,'2266']]],[[U,'NAD83_North_Dakota_South_ft',Cbn,BVD,BiT,BiS,BbM,BZa,Bbt,BUT,BXN]]],['2265',BRC+AoT,[[U,Bx+' /'+QM+' Dakota'+ApU,ClV,BVG,BaE,BiR,BZA,BZa,Bbt,BUT,CWY,BUl,BUk,[B,K,'2265']]],[[U,'NAD83_North_Dakota_North_ft',Cbn,BVD,BaE,BiR,BZA,BZa,Bbt,BUT,BXN]]],['2264',BRA+AnX,[[U,Bx+' /'+BBZ+DE,ClV,BVG,BiQ,BiP,BgG,BdZ,BVW,BUT,CVz,BUl,BUk,[B,K,'2264']]],[[U,'NAD83_North_Carolina_ftUS',Cbn,BVD,BiQ,BiP,BgG,BdZ,BVW,BUT,BUr]]],['2263',BAa+yX+BBM,[[U,Bx+' / New York Long'+AsM,ClV,BVG,BgE,BgD,BZp,BgC,BZP,BUT,CVz,BUl,BUk,[B,K,'2263']]],[[U,'NAD83_New_York_Long_Island_ftUS',Cbn,BVD,BgE,BgD,BZp,BgC,BZP,BUT,BUr]]],['2262',BQy+AkO,[[U,Bx+' / New York West'+DE,ClV,BUd,BXM,BgF,BWF,BsX,BUT,CVz,BUl,BUk,[B,K,'2262']]],[[U,'NAD83_New_York_West_ftUS',Cbn,BUd,BXM,BgF,BWF,BsX,BUT,BUr]]],['2261',BQw+AkO,[[U,Bx+' / New York'+Akp,ClV,BUd,BXM,BgB,BWF,Bwf,BUT,CVz,BUl,BUk,[B,K,'2261']]],[[U,'NAD83_New_York_Central_ftUS',Cbn,BUd,BXM,BgB,BWF,Bwf,BUT,BUr]]],['2260',BSC,[[U,Bx+' / New York East'+DE,ClV,BUd,BZo,BaD,BUt,BiO,BUT,CVz,BUl,BUk,[B,K,'2260']]],[[U,'NAD83_New_York_East_ftUS',Cbn,BUd,BZo,BaD,BUt,BiO,BUT,BUr]]],['2259',BQu+AkO,[[U,Bx+' / New Mexico West'+DE,ClV,BUd,BWA,BgA,Bfz,BsW,BUT,CVz,BUl,BUk,[B,K,'2259']]],[[U,'NAD83_New_Mexico_West_ftUS',Cbn,BUd,BWA,BgA,Bfz,BsW,BUT,BUr]]],['2258',Awm+BJP,[[U,Bx+' / New Mexico'+Akp,ClV,BUd,BWA,Bfx,BUt,BXa,BUT,CVz,BUl,BUk,[B,K,'2258']]],[[U,'NAD83_New_Mexico_Central_ftUS',Cbn,BUd,BWA,Bfx,BUt,BXa,BUT,BUr]]],['2257',BGn+AkO,[[U,Bx+' / New Mexico East'+DE,ClV,BUd,BWA,Bfy,BcW,BsU,BUT,CVz,BUl,BUk,[B,K,'2257']]],[[U,'NAD83_New_Mexico_East_ftUS',Cbn,BUd,BWA,Bfy,BcW,BsU,BUT,BUr]]],['2256',BQm+BGh,[[U,Bx+' / Montana'+rv,ClV,BVG,BaG,BiN,BiM,BcV,Bbt,BUT,CWY,BUl,BUk,[B,K,'2256']]],[[U,'NAD83_Montana_ft',Cbn,BVD,BaG,BiN,BiM,BcV,Bbt,BUT,BXN]]],['2255',BAV+BJN,[[U,Bx+' /'+cu+' West'+DE,ClV,BUd,BaC,BcU,BWh,Bbu,BUT,CVz,BUl,BUk,[B,K,'2255']]],[[U,'NAD83_Mississippi_West_ftUS',Cbn,BUd,BaC,BcU,BWh,Bbu,BUT,BUr]]],['2254',BAT+BBM,[[U,Bx+' /'+cu+' East'+DE,ClV,BUd,BaC,Bfs,BWh,BZP,BUT,CVz,BUl,BUk,[B,K,'2254']]],[[U,'NAD83_Mississippi_East_ftUS',Cbn,BUd,BaC,Bfs,BWh,BZP,BUT,BUr]]],['2253',BTN+AoT,[[U,Bx+' /'+iV+' South'+rv,ClV,BVG,Bdh,BiF,BYb,BaB,BsL,BUT,CWY,BUl,BUk,[B,K,'2253']]],[[U,'NAD83_Michigan_South_ft',Cbn,BVD,Bdh,BiF,BYb,BaB,BsL,BUT,BXN]]],['22525',Any+BIx+q+a,[[U,jx+' Alegre'+pX+' / UTM zone 25S',Cmi,BUd,BUX,BZx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22525']]],[[U,'Corrego_Alegre_1970_72_UTM_zone_25S',CeH,BUd,BUX,BZx,BUg,BUc,BUo,BUa]]],['22524',AoC+BIx+q+a,[[U,jx+' Alegre'+pX+' / UTM zone 24S',Cmi,BUd,BUX,BYx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22524']]],[[U,'Corrego_Alegre_1970_72_UTM_zone_24S',CeH,BUd,BUX,BYx,BUg,BUc,BUo,BUa]]],['22523',BJy+ZM+q+a,[[U,jx+' Alegre'+pX+' / UTM zone 23S',Cmi,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22523']]],[[U,'Corrego_Alegre_1970_72_UTM_zone_23S',CeH,BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['22522',BJx+ZM+q+a,[[U,jx+' Alegre'+pX+' / UTM zone 22S',Cmi,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22522']]],[[U,'Corrego_Alegre_1970_72_UTM_zone_22S',CeH,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['22521',BJw+ZM+q+a,[[U,jx+' Alegre'+pX+' / UTM zone 21S',Cmi,BUd,BUX,BWr,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22521']]],[[U,'Corrego_Alegre_1970_72_UTM_zone_21S',CeH,BUd,BUX,BWr,BUg,BUc,BUo,BUa]]],['2252',BTK+AoT,[[U,Bx+' /'+BDF+rv,ClV,BVG,BiB,BiA,Bhz,BaB,BsG,BUT,CWY,BUl,BUk,[B,K,'2252']]],[[U,'NAD83_Michigan_Central_ft',Cbn,BVD,BiB,BiA,Bhz,BaB,BsG,BUT,BXN]]],['2251',BTL+AoT,[[U,Bx+' /'+BDG+rv,ClV,BVG,BiE,BiD,BiC,BXS,BsI,BUT,CWY,BUl,BUk,[B,K,'2251']]],[[U,'NAD83_Michigan_North_ft',Cbn,BVD,BiE,BiD,BiC,BXS,BsI,BUT,BXN]]],['2250',BQW+AnX,[[U,Bx+' /'+BBW+DE,ClV,BVG,Bhx,Bhw,BZM,BbL,BXa,BUT,CVz,BUl,BUk,[B,K,'2250']]],[[U,'NAD83_Massachusetts_Island_ftUS',Cbn,BVD,Bhx,Bhw,BZM,BbL,BXa,BUT,BUr]]],['2249',BUR+AnX,[[U,Bx+' /'+ArD+DE,ClV,BVG,Bhy,Bfo,BZM,BZc,BXZ,BsF,CVz,BUl,BUk,[B,K,'2249']]],[[U,'NAD83_Massachusetts_Mainland_ftUS',Cbn,BVD,Bhy,Bfo,BZM,BZc,BXZ,BsF,BUr]]],['2248',BTJ+AkO,[[U,Bx+' /'+ASw+DE,ClV,BVG,Bhv,Bhu,BXq,Bbs,BsE,BUT,CVz,BUl,BUk,[B,K,'2248']]],[[U,'NAD83_Maryland_ftUS',Cbn,BVD,Bhv,Bhu,BXq,Bbs,BsE,BUT,BUr]]],['2247',BTI+AkO,[[U,Bx+' /'+or+' South'+DE,ClV,BVG,Bhn,Bhm,BXr,BZZ,BXa,BXY,CVz,BUl,BUk,[B,K,'2247']]],[[U,'NAD83_Kentucky_South_ftUS',Cbn,BVD,Bhn,Bhm,BXr,BZZ,BXa,BXY,BUr]]],['2246',BQJ+AnX,[[U,Bx+' /'+BBT+DE,ClV,BVG,BZr,Bfl,BXf,Bfk,BXa,BUT,CVz,BUl,BUk,[B,K,'2246']]],[[U,'NAD83_Kentucky_North_ftUS',Cbn,BVD,BZr,Bfl,BXf,Bfk,BXa,BUT,BUr]]],['2243',BPc+AkO,[[U,Bx+' / Idaho West'+DE,ClV,BUd,BWi,BfY,BWx,Brx,BUT,CVz,BUl,BUk,[B,K,'2243']]],[[U,'NAD83_Idaho_West_ftUS',Cbn,BUd,BWi,BfY,BWx,Brx,BUT,BUr]]],['2242',Avr+BJP,[[U,Bx+' / Idaho'+Akp,ClV,BUd,BWi,Bbq,BZX,BXa,BUT,CVz,BUl,BUk,[B,K,'2242']]],[[U,'NAD83_Idaho_Central_ftUS',Cbn,BUd,BWi,Bbq,BZX,BXa,BUT,BUr]]],['2241',Avs+BBI,[[U,Bx+' / Idaho East'+DE,ClV,BUd,BWi,BfX,BZX,BXZ,BUT,CVz,BUl,BUk,[B,K,'2241']]],[[U,'NAD83_Idaho_East_ftUS',Cbn,BUd,BWi,BfX,BZX,BXZ,BUT,BUr]]],['2240',Avp+BJN,[[U,Bx+' /'+Abp+' West'+DE,ClV,BUd,BXX,BfW,BUt,Bbu,BUT,CVz,BUl,BUk,[B,K,'2240']]],[[U,'NAD83_Georgia_West_ftUS',Cbn,BUd,BXX,BfW,BUt,Bbu,BUT,BUr]]],['22392',BHl+' +lon_0=9.9'+BNS+BNO+q+a,[[U,cs+' / Sud Tunisie',Cnj,BWW,Bnr,ByA,Bnq,BUc,BZw,CVy,BUl,BUk,[B,K,'22392']]],[[U,'Carthage_Sud_Tunisie',Cgd,BVD,Bnr,ByA,Bnq,BUc,BZw,BUa,Bxr]]],['22391',AU+' +lat_1=36'+ZE+' +lon_0=9.9'+AEO+Axs+Zx+q+a,[[U,cs+' / Nord Tunisie',Cnj,BWW,BXT,ByA,BrP,BUc,BZw,CVy,BUl,BUk,[B,K,'22391']]],[[U,'Carthage_Nord_Tunisie',Cgd,BVD,BXT,ByA,BrP,BUc,BZw,BUa,CHY]]],['2239',Avo+BBI,[[U,Bx+' /'+Abp+' East'+DE,ClV,BUd,BXX,BfV,BUt,BXZ,BUT,CVz,BUl,BUk,[B,K,'2239']]],[[U,'NAD83_Georgia_East_ftUS',Cbn,BUd,BXX,BfV,BUt,BXZ,BUT,BUr]]],['2238',BFH+AkO,[[U,Bx+' /'+BBS+DE,ClV,BVG,BfT,BfS,BfR,BfQ,BVj,BUT,CVz,BUl,BUk,[B,K,'2238']]],[[U,'NAD83_Florida_North_ftUS',Cbn,BVD,BfT,BfS,BfR,BfQ,BVj,BUT,BUr]]],['2237',Avn+BBI,[[U,Bx+' /'+tm+' West'+DE,ClV,BUd,BZW,BfU,BWj,BXZ,BUT,CVz,BUl,BUk,[B,K,'2237']]],[[U,'NAD83_Florida_West_ftUS',Cbn,BUd,BZW,BfU,BWj,BXZ,BUT,BUr]]],['2236',Avk+BBI,[[U,Bx+' /'+tm+' East'+DE,ClV,BUd,BZW,BVm,BWj,BXZ,BUT,CVz,BUl,BUk,[B,K,'2236']]],[[U,'NAD83_Florida_East_ftUS',Cbn,BUd,BZW,BVm,BWj,BXZ,BUT,BUr]]],['2235',Avf+BBI,[[U,Bx+' /'+ASx+DE,ClV,BUd,BWT,BfP,BfO,BXZ,BUT,CVz,BUl,BUk,[B,K,'2235']]],[[U,'NAD83_Delaware_ftUS',Cbn,BUd,BWT,BfP,BfO,BXZ,BUT,BUr]]],['2234',BUP+AnX,[[U,Bx+' /'+wI+DE,ClV,BVG,BfN,BfM,BfL,BfK,BWa,BWE,CVz,BUl,BUk,[B,K,'2234']]],[[U,'NAD83_Connecticut_ftUS',Cbn,BVD,BfN,BfM,BfL,BfK,BWa,BWE,BUr]]],['22332',Alu+BNO+q+a,[[U,cs+' / UTM zone 32N',Cnj,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'22332']]],[[U,'Carthage_UTM_zone_32N',Cgd,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['2233',BOu+AkO,[[U,Bx+' /'+nG+' South'+DE,ClV,BVG,BZV,BfJ,BWJ,BXR,BYY,BVg,CVz,BUl,BUk,[B,K,'2233']]],[[U,'NAD83_Colorado_South_ftUS',Cbn,BVD,BZV,BfJ,BWJ,BXR,BYY,BVg,BUr]]],['2232',BOb+AkO,[[U,Bx+' /'+BBQ+DE,ClV,BVG,BfI,BfH,BdT,BXR,BYY,BVg,CVz,BUl,BUk,[B,K,'2232']]],[[U,'NAD83_Colorado_Central_ftUS',Cbn,BVD,BfI,BfH,BdT,BXR,BYY,BVg,BUr]]],['2231',BOr+AkO,[[U,Bx+' /'+BBR+DE,ClV,BVG,Bhg,Bhf,BXi,BXR,BYY,BVg,CVz,BUl,BUk,[B,K,'2231']]],[[U,'NAD83_Colorado_North_ftUS',Cbn,BVD,Bhg,Bhf,BXi,BXR,BYY,BVg,BUr]]],['22300','',[[U,cs+WJ+' / Tunisia Mining'+op,CsP,[L,AUW],CFN,CGD,CPu,CPt,[Q,'kilometre','raw:1000',[B,K,'9036']],BUj,BUm,[B,K,'22300']]],[[U,'Carthage_Paris_Tunisia_Mining_Grid',[S,xn+WJ,CYW,Bea,Bcs],[L,AUW],CFN,CGD,CPu,CPt,[Q,'kilometre','raw:1000']]]],['2230',BOS+AnX,[[U,Bx+' /'+OB+' zone 6'+DE,ClV,BVG,BfG,BfF,BfE,BfD,BYG,BXY,CVz,BUl,BUk,[B,K,'2230']]],[[U,'NAD83_California_zone_6_ftUS',Cbn,BVD,BfG,BfF,BfE,BfD,BYG,BXY,BUr]]],['22293',Aqn+' +k=1'+BSF,[[U,py+' / Lo33',CmN,BZk,BUX,BWg,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'22293']]],[[U,'Cape_Lo33',CdS,BZk,BUX,BWg,BUf,BUy,BUT,BUa]]],['22291',BEr+' +k=1'+BSF,[[U,py+' / Lo31',CmN,BZk,BUX,Bed,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'22291']]],[[U,'Cape_Lo31',CdS,BZk,BUX,Bed,BUf,BUy,BUT,BUa]]],['2229',BOD+AnX,[[U,Bx+' /'+OB+' zone 5'+DE,ClV,BVG,BfC,BfB,BfA,BbN,BYG,BXY,CVz,BUl,BUk,[B,K,'2229']]],[[U,'NAD83_California_zone_5_ftUS',Cbn,BVD,BfC,BfB,BfA,BbN,BYG,BXY,BUr]]],['22289',AjX+' +lon_0=29 +k=1'+BSF,[[U,py+' / Lo29',CmN,BZk,BUX,Brb,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'22289']]],[[U,'Cape_Lo29',CdS,BZk,BUX,Brb,BUf,BUy,BUT,BUa]]],['22287',Apz+' +k=1'+BSF,[[U,py+' / Lo27',CmN,BZk,BUX,BWP,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'22287']]],[[U,'Cape_Lo27',CdS,BZk,BUX,BWP,BUf,BUy,BUT,BUa]]],['22285',BHD+' +k=1'+BSF,[[U,py+' / Lo25',CmN,BZk,BUX,BhW,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'22285']]],[[U,'Cape_Lo25',CdS,BZk,BUX,BhW,BUf,BUy,BUT,BUa]]],['22283',BHC+' +k=1'+BSF,[[U,py+' / Lo23',CmN,BZk,BUX,BkN,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'22283']]],[[U,'Cape_Lo23',CdS,BZk,BUX,BkN,BUf,BUy,BUT,BUa]]],['22281',ApT+' +k=1'+BSF,[[U,py+' / Lo21',CmN,BZk,BUX,BWR,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'22281']]],[[U,'Cape_Lo21',CdS,BZk,BUX,BWR,BUf,BUy,BUT,BUa]]],['2228',BOA+AnX,[[U,Bx+' /'+OB+' zone 4'+DE,ClV,BVG,Bez,Bey,Bex,Bew,BYG,BXY,CVz,BUl,BUk,[B,K,'2228']]],[[U,'NAD83_California_zone_4_ftUS',Cbn,BVD,Bez,Bey,Bex,Bew,BYG,BXY,BUr]]],['22279',BEp+' +k=1'+BSF,[[U,py+' / Lo19',CmN,BZk,BUX,BhV,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'22279']]],[[U,'Cape_Lo19',CdS,BZk,BUX,BhV,BUf,BUy,BUT,BUa]]],['22277',BHn+' +k=1'+BSF,[[U,py+' / Lo17',CmN,BZk,BUX,Blf,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'22277']]],[[U,'Cape_Lo17',CdS,BZk,BUX,Blf,BUf,BUy,BUT,BUa]]],['22275',ApP+' +k=1'+BSF,[[U,py+' / Lo15',CmN,BZk,BUX,BWH,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'22275']]],[[U,'Cape_Lo15',CdS,BZk,BUX,BWH,BUf,BUy,BUT,BUa]]],['2227',BNf+AnX,[[U,Bx+' /'+OB+' zone 3'+DE,ClV,BVG,BZV,Bev,Beu,BWB,BYG,BXY,CVz,BUl,BUk,[B,K,'2227']]],[[U,'NAD83_California_zone_3_ftUS',Cbn,BVD,BZV,Bev,Beu,BWB,BYG,BXY,BUr]]],['2226',BND+AkO,[[U,Bx+' /'+OB+' zone 2'+DE,ClV,BVG,Bet,Bes,BXq,BZU,BYG,BXY,CVz,BUl,BUk,[B,K,'2226']]],[[U,'NAD83_California_zone_2_ftUS',Cbn,BVD,Bet,Bes,BXq,BZU,BYG,BXY,BUr]]],['2225',BMx+AkO,[[U,Bx+' /'+OB+' zone 1'+DE,ClV,BVG,Ber,BZu,BXi,BZU,BYG,BXY,CVz,BUl,BUk,[B,K,'2225']]],[[U,'NAD83_California_zone_1_ftUS',Cbn,BVD,Ber,BZu,BXi,BZU,BYG,BXY,BUr]]],['2224',BGk+AoT,[[U,Bx+' /'+yH+' West'+rv,ClV,BUd,BWA,Bel,BWx,BWl,BUT,CWY,BUl,BUk,[B,K,'2224']]],[[U,'NAD83_Arizona_West_ft',Cbn,BUd,BWA,Bel,BWx,BWl,BUT,BXN]]],['22235',Amc+BIw+BCp+a,[[U,py+' / UTM zone 35S',CmN,BUd,BUX,BWP,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22235']]],[[U,'Cape_UTM_zone_35S',CdS,BUd,BUX,BWP,BUg,BUc,BUo,BUa]]],['22234',Anl+BIw+BCp+a,[[U,py+' / UTM zone 34S',CmN,BUd,BUX,BWR,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22234']]],[[U,'Cape_UTM_zone_34S',CdS,BUd,BUX,BWR,BUg,BUc,BUo,BUa]]],['2223',BGi+AoT,[[U,Bx+' /'+BBP+rv,ClV,BUd,BWA,Bej,BUt,BWl,BUT,CWY,BUl,BUk,[B,K,'2223']]],[[U,'NAD83_Arizona_Central_ft',Cbn,BUd,BWA,Bej,BUt,BWl,BUT,BXN]]],['2222',BGj+AoT,[[U,Bx+' /'+yH+' East'+rv,ClV,BUd,BWA,Bek,BUt,BWl,BUT,CWY,BUl,BUk,[B,K,'2222']]],[[U,'NAD83_Arizona_East_ft',Cbn,BUd,BWA,Bek,BUt,BWl,BUT,BXN]]],['2220',Aku+BRw,[[U,AXA+' / UTM zone 20N',Cmv,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2220']]],[[U,'ATS77_UTM_zone_20N',Cej,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['22197',BNd+' +k=1'+ApC+BLX,[[U,'Campo'+TS+' /'+Yj+' 7',CmK,BUd,BVX,BdM,BUf,BbK,BUT,CVy,[B,K,'22197']]],[[U,'Campo_Inchauspe_Argentina_7',Cdq,BUd,BVX,BdM,BUf,BbK,BUT,BUa]]],['22196',AnU+' +lon_0=-57 +k=1'+ArU+BLX,[[U,'Campo'+TS+' /'+Yj+' 6',CmK,BUd,BVX,BWr,BUf,BdL,BUT,CVy,[B,K,'22196']]],[[U,'Campo_Inchauspe_Argentina_6',Cdq,BUd,BVX,BWr,BUf,BdL,BUT,BUa]]],['22195',BJs+' +k=1'+AmY+BLX,[[U,'Campo'+TS+' /'+Yj+' 5',CmK,BUd,BVX,Bog,BUf,BYv,BUT,CVy,[B,K,'22195']]],[[U,'Campo_Inchauspe_Argentina_5',Cdq,BUd,BVX,Bog,BUf,BYv,BUT,BUa]]],['22194',BJr+' +k=1'+Alz+BLX,[[U,'Campo'+TS+' /'+Yj+' 4',CmK,BUd,BVX,BWY,BUf,BYJ,BUT,CVy,[B,K,'22194']]],[[U,'Campo_Inchauspe_Argentina_4',Cdq,BUd,BVX,BWY,BUf,BYJ,BUT,BUa]]],['22193',BJq+' +k=1'+Amo+BLX,[[U,'Campo'+TS+' /'+Yj+' 3',CmK,BUd,BVX,Bhb,BUf,BXO,BUT,CVy,[B,K,'22193']]],[[U,'Campo_Inchauspe_Argentina_3',Cdq,BUd,BVX,Bhb,BUf,BXO,BUT,BUa]]],['22192',BHe+' +k=1'+AmF+BLX,[[U,'Campo'+TS+' /'+Yj+' 2',CmK,BUd,BVX,BWZ,BUf,BXy,BUT,CVy,[B,K,'22192']]],[[U,'Campo_Inchauspe_Argentina_2',Cdq,BUd,BVX,BWZ,BUf,BXy,BUT,BUa]]],['22191',BJp+' +k=1'+Ald+BLX,[[U,'Campo'+TS+' /'+Yj+' 1',CmK,BUd,BVX,BoF,BUf,BWL,BUT,CVy,[B,K,'22191']]],[[U,'Campo_Inchauspe_Argentina_1',Cdq,BUd,BVX,BoF,BUf,BWL,BUT,BUa]]],['2219',AlG+BRw,[[U,AXA+' / UTM zone 19N',Cmv,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2219']]],[[U,'ATS77_UTM_zone_19N',Cej,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['22187',BNd+' +k=1'+ApC+BAy,[[U,ch+' 94 /'+Yj+' 7',Cmb,BUd,BVX,BdM,BUf,BbK,BUT,CVy,[B,K,'22187']]],[[U,'POSGAR_94_Argentina_7',Cdu,BUd,BVX,BdM,BUf,BbK,BUT,BUa]]],['22186',AnU+' +lon_0=-57 +k=1'+ArU+BAy,[[U,ch+' 94 /'+Yj+' 6',Cmb,BUd,BVX,BWr,BUf,BdL,BUT,CVy,[B,K,'22186']]],[[U,'POSGAR_94_Argentina_6',Cdu,BUd,BVX,BWr,BUf,BdL,BUT,BUa]]],['22185',BJs+' +k=1'+AmY+BAy,[[U,ch+' 94 /'+Yj+' 5',Cmb,BUd,BVX,Bog,BUf,BYv,BUT,CVy,[B,K,'22185']]],[[U,'POSGAR_94_Argentina_5',Cdu,BUd,BVX,Bog,BUf,BYv,BUT,BUa]]],['22184',BJr+' +k=1'+Alz+BAy,[[U,ch+' 94 /'+Yj+' 4',Cmb,BUd,BVX,BWY,BUf,BYJ,BUT,CVy,[B,K,'22184']]],[[U,'POSGAR_94_Argentina_4',Cdu,BUd,BVX,BWY,BUf,BYJ,BUT,BUa]]],['22183',BJq+' +k=1'+Amo+BAy,[[U,ch+' 94 /'+Yj+' 3',Cmb,BUd,BVX,Bhb,BUf,BXO,BUT,CVy,[B,K,'22183']]],[[U,'POSGAR_94_Argentina_3',Cdu,BUd,BVX,Bhb,BUf,BXO,BUT,BUa]]],['22182',BHe+' +k=1'+AmF+BAy,[[U,ch+' 94 /'+Yj+' 2',Cmb,BUd,BVX,BWZ,BUf,BXy,BUT,CVy,[B,K,'22182']]],[[U,'POSGAR_94_Argentina_2',Cdu,BUd,BVX,BWZ,BUf,BXy,BUT,BUa]]],['22181',BJp+' +k=1'+Ald+BAy,[[U,ch+' 94 /'+Yj+' 1',Cmb,BUd,BVX,BoF,BUf,BWL,BUT,CVy,[B,K,'22181']]],[[U,'POSGAR_94_Argentina_1',Cdu,BUd,BVX,BoF,BUf,BWL,BUT,BUa]]],['22177',BNd+' +k=1'+ApC+j+c+q+a,[[U,ch+' 98 /'+Yj+' 7',Cma,BUd,BVX,BdM,BUf,BbK,BUT,CVy,[B,K,'22177']]],[[U,'POSGAR_98_Argentina_7',Cdt,BUd,BVX,BdM,BUf,BbK,BUT,BUa]]],['22176',AnU+' +lon_0=-57 +k=1'+ArU+j+c+q+a,[[U,ch+' 98 /'+Yj+' 6',Cma,BUd,BVX,BWr,BUf,BdL,BUT,CVy,[B,K,'22176']]],[[U,'POSGAR_98_Argentina_6',Cdt,BUd,BVX,BWr,BUf,BdL,BUT,BUa]]],['22175',BJs+' +k=1'+AmY+j+c+q+a,[[U,ch+' 98 /'+Yj+' 5',Cma,BUd,BVX,Bog,BUf,BYv,BUT,CVy,[B,K,'22175']]],[[U,'POSGAR_98_Argentina_5',Cdt,BUd,BVX,Bog,BUf,BYv,BUT,BUa]]],['22174',BJr+' +k=1'+Alz+j+c+q+a,[[U,ch+' 98 /'+Yj+' 4',Cma,BUd,BVX,BWY,BUf,BYJ,BUT,CVy,[B,K,'22174']]],[[U,'POSGAR_98_Argentina_4',Cdt,BUd,BVX,BWY,BUf,BYJ,BUT,BUa]]],['22173',BJq+' +k=1'+Amo+j+c+q+a,[[U,ch+' 98 /'+Yj+' 3',Cma,BUd,BVX,Bhb,BUf,BXO,BUT,CVy,[B,K,'22173']]],[[U,'POSGAR_98_Argentina_3',Cdt,BUd,BVX,Bhb,BUf,BXO,BUT,BUa]]],['22172',BHe+' +k=1'+BIN+c+q+a,[[U,ch+' 98 /'+Yj+' 2',Cma,BUd,BVX,BWZ,BUf,BXy,BUT,CVy,[B,K,'22172']]],[[U,'POSGAR_98_Argentina_2',Cdt,BUd,BVX,BWZ,BUf,BXy,BUT,BUa]]],['22171',BJp+' +k=1'+BMk+c+q+a,[[U,ch+' 98 /'+Yj+' 1',Cma,BUd,BVX,BoF,BUf,BWL,BUT,CVy,[B,K,'22171']]],[[U,'POSGAR_98_Argentina_1',Cdt,BUd,BVX,BoF,BUf,BWL,BUT,BUa]]],['2217',Amp+BP+tf+q+a,[[U,'Qornoq 1927 / UTM zone 23N',Cny,BUd,BUX,BYg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2217']]],[[U,'Qornoq_1927_UTM_zone_23N',Chk,BUd,BUX,BYg,BUg,BUc,BUT,BUa]]],['2216',Alb+BP+tf+q+a,[[U,'Qornoq 1927 / UTM zone 22N',Cny,BUd,BUX,BXm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2216']]],[[U,'Qornoq_1927_UTM_zone_22N',Chk,BUd,BUX,BXm,BUg,BUc,BUT,BUa]]],['2215',Alu+Akc+AEp+q+a,[[U,'Manoca 1962 / UTM zone 32N',CrB,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2215']]],[[U,'Manoca_1962_UTM_zone_32N',[S,'GCS_Manoca 1962',CZx,BUU,BUW],BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['2213',ArX+AlL+BRq,[[U,ED+' / TM 30 NE',Cld,BUd,BUX,BYz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2213']]],[[U,'ETRS89_TM_30_NE',CcG,BUd,BUX,BYz,BUg,BUc,BUT,BUa]]],['2212',AtF+' +k=1'+ArP+BDH,[[U,ij+' /'+Ajc+' zone 15',Clm,BUd,BUX,BWe,BUf,BbO,BUT,CVy,[B,K,'2212']]],[[U,'ED50_3_degree_Gauss_Kruger_zone_15',Ccc,BUd,BUX,BWe,BUf,BbO,BUT,BUa]]],['2211',AyC+' +k=1'+ArO+BDH,[[U,ij+' /'+Ajc+' zone 14',Clm,BUd,BUX,BdJ,BUf,Bad,BUT,CVy,[B,K,'2211']]],[[U,'ED50_3_degree_Gauss_Kruger_zone_14',Ccc,BUd,BUX,BdJ,BUf,Bad,BUT,BUa]]],['2210',AsG+' +k=1'+ArN+BDH,[[U,ij+' /'+Ajc+' zone 13',Clm,BUd,BUX,BWn,BUf,Bax,BUT,CVy,[B,K,'2210']]],[[U,'ED50_3_degree_Gauss_Kruger_zone_13',Ccc,BUd,BUX,BWn,BUf,Bax,BUT,BUa]]],['22092',AqA+AlL+AnC+ZI+q+a,[[U,fw+' / TM 12 SE',Cni,BUd,BUX,BYZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22092']]],[[U,'Camacupa_TM_12_SE',Cfs,BUd,BUX,BYZ,BUg,BUc,BUo,BUa]]],['22091',AjX+' +lon_0=11.5'+AlL+AnC+ZI+q+a,[[U,fw+' / TM 11.30 SE',Cni,BUd,BUX,Bun,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22091']]],[[U,'Camacupa_TM_11_30_SE',Cfs,BUd,BUX,Bun,BUg,BUc,BUo,BUa]]],['2209',AtL+' +k=1'+BDX+BDH,[[U,ij+' /'+Ajc+' zone 12',Clm,BUd,BUX,BdS,BUf,Bgi,BUT,CVy,[B,K,'2209']]],[[U,'ED50_3_degree_Gauss_Kruger_zone_12',Ccc,BUd,BUX,BdS,BUf,Bgi,BUT,BUa]]],['2208',Aqn+' +k=1'+BDW+BDH,[[U,ij+' /'+Ajc+' zone 11',Clm,BUd,BUX,BWg,BUf,Bdn,BUT,CVy,[B,K,'2208']]],[[U,'ED50_3_degree_Gauss_Kruger_zone_11',Ccc,BUd,BUX,BWg,BUf,Bdn,BUT,BUa]]],['2207',ArX+' +k=1'+BBh+BDH,[[U,ij+' /'+Ajc+' zone 10',Clm,BUd,BUX,BYz,BUf,Bhd,BUT,CVy,[B,K,'2207']]],[[U,'ED50_3_degree_Gauss_Kruger_zone_10',Ccc,BUd,BUX,BYz,BUf,Bhd,BUT,BUa]]],['2206',Apz+' +k=1'+AwU+BDH,[[U,ij+' /'+Ajc+' zone 9',Clm,BUd,BUX,BWP,BUf,Bha,BUT,CVy,[B,K,'2206']]],[[U,'ED50_3_degree_Gauss_Kruger_zone_9',Ccc,BUd,BUX,BWP,BUf,Bha,BUT,BUa]]],['2205',BQI+j+c+q+a,[[U,Bx+' /'+BBT,ClV,BVG,BZr,Bfl,BXf,Bfk,BUc,BUT,CVy,BUl,BUk,[B,K,'2205']]],[[U,'NAD83_Kentucky_North',Cbn,BVD,BZr,Bfl,BXf,Bfk,BUc,BUT,BUa]]],['2204',AU+' +lat_1=35.25 +lat_2=36.41666666666666 +lat_0=34.66666666666666'+ry+CW+ACd+Alk,[[U,Dg+' /'+AGm,ClZ,BVG,[A,W,YL],[A,Y,JZ],[A,C,ARE],Bcg,BVW,BXV,CVz,BUl,BUk,[B,K,'2204']]],[[U,'NAD27_Tennessee',Cbw,BVD,[A,W,YL],[A,Y,JZ],[A,C,ARE],Bcg,BVW,BXV,BUr]]],['22033',AmO+BDE+ZI+q+a,[[U,fw+' / UTM zone 33S',Cni,BUd,BUX,BWH,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22033']]],[[U,'Camacupa_UTM_zone_33S',Cfs,BUd,BUX,BWH,BUg,BUc,BUo,BUa]]],['22032',Alu+BDE+ZI+q+a,[[U,fw+' / UTM zone 32S',Cni,BUd,BUX,BWO,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'22032']]],[[U,'Camacupa_UTM_zone_32S',Cfs,BUd,BUX,BWO,BUg,BUc,BUo,BUa]]],['2203',BUA,[[U,AUl+' / UTM zone 20N',Cnx,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2203']]],[[U,'REGVEN_UTM_zone_20N',Cgz,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2202',BTz,[[U,AUl+' / UTM zone 19N',Cnx,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2202']]],[[U,'REGVEN_UTM_zone_19N',Cgz,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['2201',BTy,[[U,AUl+' / UTM zone 18N',Cnx,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2201']]],[[U,'REGVEN_UTM_zone_18N',Cgz,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['2200',ZQ+hf+' +lon_0=-66.5'+ATc+GW+QS+BRw,[[U,AXA+' / New Brunswick'+RQ+' (ATS77)',Cmv,Bpn,BbU,Buo,BoG,BVl,BWw,CVy,[B,K,'2200']]],[[U,'ATS77_New_Brunswick_Stereographic_ATS77',Cej,Bpm,BbU,Buo,BoG,BVl,BWw,BUa]]],['2198',ApP+' +k=1'+BIs+c+q+a,[[U,ED+' / Kp2000 Bornholm',Cld,BUd,BUX,BWH,BUf,BdV,BUT,CVy,BUj,BUm,[B,K,'2198']]],[[U,'ETRS89_Kp2000_Bornholm',CcG,BUd,BUX,BWH,BUf,BdV,BUT,BUa]]],['2197',AqA+AqU+BRq,[[U,ED+' / Kp2000 Zealand',Cld,BUd,BUX,BYZ,BWh,BUc,BUT,CVy,BUj,BUm,[B,K,'2197']]],[[U,'ETRS89_Kp2000_Zealand',CcG,BUd,BUX,BYZ,BWh,BUc,BUT,BUa]]],['2196',AjX+' +lon_0=9.5'+Aqb+BRq,[[U,ED+' / Kp2000 Jutland',Cld,BUd,BUX,CAg,BWh,BVP,BUT,CVy,BUj,BUm,[B,K,'2196']]],[[U,'ETRS89_Kp2000_Jutland',CcG,BUd,BUX,CAg,BWh,BVP,BUT,BUa]]],['2195',AV+' +zone=2'+BEd,[[U,Aj+' / UTM zone 2S',ClX,BUd,BUX,BYV,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2195']]],[[U,'NAD83_HARN_UTM_zone_2S',Cbs,BUd,BUX,BYV,BUg,BUc,BUo,BUa]]],['2190',BJM+ANs+q+a,[[U,BPv+' / UTM zone 26N',CsT,BUd,BUX,BaV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2190']]],[[U,'Azores_Oriental_1940_UTM_zone_26N',[S,AMQ+BCg,[V,ADr,BUs],BUU,BUW],BUd,BUX,BaV,BUg,BUc,BUT,BUa]]],['21899',l+pS+' +lon_0=-68.08091666666667 +k=1'+BIu+q+a,[[U,AmU+' /'+AcL+' East',CnA,BUd,BrK,[A,E,ALa],BUf,BWa,BVg,CVy,[B,K,'21899']]],[[U,'Bogota_1975_Colombia_East',CfH,BUd,BrK,[A,E,ALa],BUf,BWa,BVg,BUa]]],['21898',l+pS+' +lon_0=-71.08091666666667 +k=1'+BIu+q+a,[[U,AmU+' /'+AcL+' East'+Gh+' zone',CnA,BUd,BrK,[A,E,ALb],BUf,BWa,BVg,CVy,[B,K,'21898']]],[[U,'Bogota_1975_Colombia_East_Central_zone',CfH,BUd,BrK,[A,E,ALb],BUf,BWa,BVg,BUa]]],['21897',l+pS+' +lon_0=-74.08091666666667 +k=1'+BIu+q+a,[[U,AmU+' /'+AcL+" "+AUY+' zone',CnA,BUd,BrK,[A,E,kh],BUf,BWa,BVg,CVy,[B,K,'21897']]],[[U,'Bogota_1975_Colombia_Bogota_zone',CfH,BUd,BrK,[A,E,kh],BUf,BWa,BVg,BUa]]],['21896',l+pS+' +lon_0=-77.08091666666667 +k=1'+BIu+q+a,[[U,AmU+' /'+AcL+' West zone',CnA,BUd,BrK,[A,E,ALc],BUf,BWa,BVg,CVy,[B,K,'21896']]],[[U,'Bogota_1975_Colombia_West_zone',CfH,BUd,BrK,[A,E,ALc],BUf,BWa,BVg,BUa]]],['2189',BJM+AKM+q+a,[[U,BAt+' 1948 / UTM zone 26N',CrO,BUd,BUX,BaV,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2189']]],[[U,'Azores_Central_1948_UTM_zone_26N',[S,AMQ+Gh+' 1948',[V,AEX,BUs],BUU,BUW],BUd,BUX,BaV,BUg,BUc,BUT,BUa]]],['2188',Any+BP+AKN+q+a,[[U,BGU+' 1939 / UTM zone 25N',CrN,BUd,BUX,BZx,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2188']]],[[U,'Azores_Occidental_1939_UTM_zone_25N',[S,AMQ+AcV+' 1939',[V,ABq,BUs],BUU,BUW],BUd,BUX,BZx,BUg,BUc,BUT,BUa]]],['21818',AlJ+BCl+q+a,[[U,AmU+' / UTM zone 18N',CnA,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'21818']]],[[U,'Bogota_1975_UTM_zone_18N',CfH,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['2180',BEp+' +k=0.9993'+Ay+' +y_0=-5300000'+j+c+q+a,[[U,ED+' / Poland CS92',Cld,BUd,BUX,BhV,CGz,BUc,CFM,CVy,[B,K,'2180']]],[[U,'ETRS89_Poland_CS92',CcG,BUd,BUX,BhV,CGz,BUc,CFM,BUa]]],['2179',ArK+Agi+AwR+j+c+q+a,[[U,ED+' / Poland CS2000 zone 8',Cld,BUd,BUX,BYU,BrJ,BhY,BUT,CVy,[B,K,'2179']]],[[U,'ETRS89_Poland_CS2000_zone_8',CcG,BUd,BUX,BYU,BrJ,BhY,BUT,BUa]]],['21782',BGS+AAb+' +k_0=1'+Ajh+CJ+Zs+q+a,[[U,AIU+' / LV03C-G',Coc,BlU,Bpo,BvD,BmY,Bxh,BUf,BUy,BUT,CVy,BvC,BvB,[B,K,'21782']]],[[U,'CH1903_LV03C_G',Cit,BlU,Bpo,BvD,BmY,BUf,BUy,BUT,BUa]]],['21780',BGS+ci+' +k_0=1'+Ajh+CJ+Zs+' +pm=bern'+q+a,[[U,'Bern 1898 (Bern) / LV03C',Cpn,BlU,Bpo,BxG,BmY,Bxh,BUf,BUy,BUT,CVy,BvC,BvB,[B,K,'21780']]],[[U,'Bern_1898_Bern_LV03C',[S,'GCS_Bern 1898 (Bern)',CaX,CQf,BUW],BlU,Bpo,BxG,BmY,BUf,BUy,BUT,BUa]]],['2178',ApT+Agi+ApC+j+c+q+a,[[U,ED+' / Poland CS2000 zone 7',Cld,BUd,BUX,BWR,BrJ,BbK,BUT,CVy,[B,K,'2178']]],[[U,'ETRS89_Poland_CS2000_zone_7',CcG,BUd,BUX,BWR,BrJ,BbK,BUT,BUa]]],['2177',BEs+Agi+ArU+j+c+q+a,[[U,ED+' / Poland CS2000 zone 6',Cld,BUd,BUX,Bef,BrJ,BdL,BUT,CVy,[B,K,'2177']]],[[U,'ETRS89_Poland_CS2000_zone_6',CcG,BUd,BUX,Bef,BrJ,BdL,BUT,BUa]]],['2176',ApP+Agi+AmY+j+c+q+a,[[U,ED+' / Poland CS2000 zone 5',Cld,BUd,BUX,BWH,BrJ,BYv,BUT,CVy,[B,K,'2176']]],[[U,'ETRS89_Poland_CS2000_zone_5',CcG,BUd,BUX,BWH,BrJ,BYv,BUT,BUa]]],['2175',AjX+' +lon_0=18.95833333333333 +k=0.999983 +x_0=237000 +y_0=-4700000'+BCx,[[U,Akd+' / Poland zone V',Clq,BUd,BUX,[A,E,ARF],CFL,CGy,CFK,CVy,[B,K,'2175']]],[[U,'Pulkovo_1942_58_Poland_zone_V',Ccf,BUd,BUX,[A,E,ARF],CFL,CGy,CFK,BUa]]],['2174',ZQ+' +lat_0=51.67083333333333 +lon_0=16.67222222222222'+Afu+' +x_0=3703000 +y_0=5627000'+BCx,[[U,Akd+' / Poland zone IV',Clq,Bpn,[A,C,ARG],[A,E,ARH],Bli,CGC,CGB,CVy,[B,K,'2174']]],[[U,'Pulkovo_1942_58_Poland_zone_IV',Ccf,Bpm,[A,C,ARG],[A,E,ARH],Bli,CGC,CGB,BUa]]],['2173',ZQ+' +lat_0=53.58333333333334 +lon_0=17.00833333333333'+Afu+' +x_0=3501000 +y_0=5999000'+BCx,[[U,Akd+' / Poland zone III',Clq,Bpn,[A,C,ARI],[A,E,ARJ],Bli,CGA,CFz,CVy,[B,K,'2173']]],[[U,'Pulkovo_1942_58_Poland_zone_III',Ccf,Bpm,[A,C,ARI],[A,E,ARJ],Bli,CGA,CFz,BUa]]],['2172',ZQ+' +lat_0=53.00194444444445 +lon_0=21.50277777777778'+Afu+' +x_0=4603000 +y_0=5806000'+BCx,[[U,Akd+' / Poland zone II',Clq,Bpn,[A,C,ARK],[A,E,ARL],Bli,CFy,CFx,CVy,[B,K,'2172']]],[[U,'Pulkovo_1942_58_Poland_zone_II',Ccf,Bpm,[A,C,ARK],[A,E,ARL],Bli,CFy,CFx,BUa]]],['2169',l+' +lat_0=49.83333333333334'+Aam+' +k=1'+yV+UO+BP+lq+q+a,[[U,AbG+' 1930 / Gauss',CrM,BUd,[A,C,RJ],CHH,BUf,Bgh,BXV,CVy,[B,K,'2169']]],[[U,'Luxembourg_1930_Gauss',[S,'GCS_Luxembourg 1930',[V,AYX,BUs],BUU,BUW],BUd,[A,C,RJ],CHH,BUf,Bgh,BXV,BUa]]],['2165',AjX+' +lon_0=-5'+AlL+Anq+ew+q+a,[[U,AcO+' 1987 / TM 5 NW',CnR,BUd,BUX,But,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2165']]],[[U,'Abidjan_1987_TM_5_NW',CfO,BUd,BUX,But,BUg,BUc,BUT,BUa]]],['2164',AjX+' +lon_0=-5'+AlL+Anq+ig+q+a,[[U,AcP+' 1965 / TM 5 NW',CnQ,BUd,BUX,But,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2164']]],[[U,'Locodjo_1965_TM_5_NW',CfN,BUd,BUX,But,BUg,BUc,BUT,BUa]]],['2163',dn+fq+Ql+Ajh+' +a=6370997 +b=6370997'+q+a,[[U,'US'+QV+' Atlas Equal Area',CoR,BeA,CQA,Buv,BUy,BUT,CVy,BUl,BUk,[B,K,'2163']]],[[U,'US_National_Atlas_Equal_Area',[S,gI+' datum based upon the'+" "+BHY,[V,AEY,CQe],BUU,BUW],BeA,BZE,BXb,BUy,BUT,BUa]]],['2162',AmJ+Cw+xt+q+a,[[U,'Sierra Leone 1968 / UTM zone 29N',Cnn,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2162']]],[[U,'Sierra_Leone_1968_UTM_zone_29N',Chj,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['2161',Aly+Cw+xt+q+a,[[U,'Sierra Leone 1968 / UTM zone 28N',Cnn,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2161']]],[[U,'Sierra_Leone_1968_UTM_zone_28N',Chj,BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['2160',l+Aao+' +lon_0=-12 +k=1 +x_0=243839.7681452071 +y_0=182879.8261089053'+Arq+vg+a,[[U,'Sierra Leone'+IA+' / New War Office'+op,Cnr,BUd,CGx,Bur,BUf,BXP,BkO,CYA,BUj,BUm,[B,K,'2160']]],[[U,'Sierra_Leone_1924_New_War_Office_Grid',CiG,BUd,CGx,Bur,BUf,BXP,BkO,Bni]]],['2159',l+Aao+' +lon_0=-12 +k=1 +x_0=152399.8550907544'+BQ+Arq+vg+a,[[U,'Sierra Leone'+IA+' / New Colony'+op,Cnr,BUd,CGx,Bur,BUf,BUc,BUT,CYA,BUj,BUm,[B,K,'2159']]],[[U,'Sierra_Leone_1924_New_Colony_Grid',CiG,BUd,CGx,Bur,BUf,BUc,BUT,Bni]]],['2158',AmJ+j+c+q+a,[[U,tF+' / UTM zone 29N',CpM,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2158']]],[[U,'IRENET95_UTM_zone_29N',CiT,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['2157',l+Afy+' +lon_0=-8 +k=0.99982'+Cj+tH+j+c+q+a,[[U,tF+' / Irish'+AEt+" "+aU,CpM,BUd,BuL,Bpl,CFw,BVY,Boc,CVy,BUj,BUm,[B,K,'2157']]],[[U,'IRENET95_Irish_Transverse_Mercator',CiT,BUd,BuL,Bpl,CFw,BVY,Boc,BUa]]],['21500',AU+pP+pQ+eW+ci+Oz+' +y_0=5400000'+BP+' +pm=brussels'+q+a,[[U,'Belge 1950'+AIy+' / Belge'+PW+' 50',Cqd,BVG,BrZ,BrY,Bcw,BYA,BXc,CFv,CVy,BUl,BUk,[B,K,'21500']]],[[U,'Belge_1950_Brussels_Belge_Lambert_50',[S,'GCS_Belge 1950'+AIy,CbM,[T,AUr,ACt],BUW],BVD,BrZ,BrY,Bcw,BYA,BXc,CFv,BUa]]],['21463',Ape+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 135E',Clh,BUd,BUX,BWd,BUf,BUc,BUT,CVy,[B,K,'21463']]],[[U,'Beijing_1954_Gauss_Kruger_CM_135E',CcK,BUd,BUX,BWd,BUf,BUc,BUT,BUa]]],['21462',Apd+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 129E',Clh,BUd,BUX,BWQ,BUf,BUc,BUT,CVy,[B,K,'21462']]],[[U,'Beijing_1954_Gauss_Kruger_CM_129E',CcK,BUd,BUX,BWQ,BUf,BUc,BUT,BUa]]],['21461',ApF+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 123E',Clh,BUd,BUX,BWU,BUf,BUc,BUT,CVy,[B,K,'21461']]],[[U,'Beijing_1954_Gauss_Kruger_CM_123E',CcK,BUd,BUX,BWU,BUf,BUc,BUT,BUa]]],['21460',ApE+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 117E',Clh,BUd,BUX,BWS,BUf,BUc,BUT,CVy,[B,K,'21460']]],[[U,'Beijing_1954_Gauss_Kruger_CM_117E',CcK,BUd,BUX,BWS,BUf,BUc,BUT,BUa]]],['21459',ApX+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 111E',Clh,BUd,BUX,BWX,BUf,BUc,BUT,CVy,[B,K,'21459']]],[[U,'Beijing_1954_Gauss_Kruger_CM_111E',CcK,BUd,BUX,BWX,BUf,BUc,BUT,BUa]]],['21458',ApW+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 105E',Clh,BUd,BUX,BWK,BUf,BUc,BUT,CVy,[B,K,'21458']]],[[U,'Beijing_1954_Gauss_Kruger_CM_105E',CcK,BUd,BUX,BWK,BUf,BUc,BUT,BUa]]],['21457',Apc+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 99E',Clh,BUd,BUX,BWf,BUf,BUc,BUT,CVy,[B,K,'21457']]],[[U,'Beijing_1954_Gauss_Kruger_CM_99E',CcK,BUd,BUX,BWf,BUf,BUc,BUT,BUa]]],['21456',Apb+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 93E',Clh,BUd,BUX,BWk,BUf,BUc,BUT,CVy,[B,K,'21456']]],[[U,'Beijing_1954_Gauss_Kruger_CM_93E',CcK,BUd,BUX,BWk,BUf,BUc,BUT,BUa]]],['21455',Apa+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 87E',Clh,BUd,BUX,BXK,BUf,BUc,BUT,CVy,[B,K,'21455']]],[[U,'Beijing_1954_Gauss_Kruger_CM_87E',CcK,BUd,BUX,BXK,BUf,BUc,BUT,BUa]]],['21454',ApZ+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 81E',Clh,BUd,BUX,BWz,BUf,BUc,BUT,CVy,[B,K,'21454']]],[[U,'Beijing_1954_Gauss_Kruger_CM_81E',CcK,BUd,BUX,BWz,BUf,BUc,BUT,BUa]]],['21453',ApY+' +k=1'+BJB,[[U,Ajv+' /'+AW+' CM 75E',Clh,BUd,BUX,BWs,BUf,BUc,BUT,CVy,[B,K,'21453']]],[[U,'Beijing_1954_Gauss_Kruger_CM_75E',CcK,BUd,BUX,BWs,BUf,BUc,BUT,BUa]]],['21423',Ape+' +k=1'+AsT+Ayp,[[U,Ajv+' /'+AW+' zone 23',Clh,BUd,BUX,BWd,BUf,BbT,BUT,CVy,[B,K,'21423']]],[[U,'Beijing_1954_Gauss_Kruger_zone_23',CcK,BUd,BUX,BWd,BUf,BbT,BUT,BUa]]],['21422',Apd+' +k=1'+AsS+Ayp,[[U,Ajv+' /'+AW+' zone 22',Clh,BUd,BUX,BWQ,BUf,Baz,BUT,CVy,[B,K,'21422']]],[[U,'Beijing_1954_Gauss_Kruger_zone_22',CcK,BUd,BUX,BWQ,BUf,Baz,BUT,BUa]]],['21421',ApF+' +k=1'+AsR+Ayp,[[U,Ajv+' /'+AW+' zone 21',Clh,BUd,BUX,BWU,BUf,BbS,BUT,CVy,[B,K,'21421']]],[[U,'Beijing_1954_Gauss_Kruger_zone_21',CcK,BUd,BUX,BWU,BUf,BbS,BUT,BUa]]],['21420',ApE+' +k=1'+AsQ+Ayp,[[U,Ajv+' /'+AW+' zone 20',Clh,BUd,BUX,BWS,BUf,Bay,BUT,CVy,[B,K,'21420']]],[[U,'Beijing_1954_Gauss_Kruger_zone_20',CcK,BUd,BUX,BWS,BUf,Bay,BUT,BUa]]],['21419',ApX+' +k=1'+ArM+Ayp,[[U,Ajv+' /'+AW+' zone 19',Clh,BUd,BUX,BWX,BUf,BbR,BUT,CVy,[B,K,'21419']]],[[U,'Beijing_1954_Gauss_Kruger_zone_19',CcK,BUd,BUX,BWX,BUf,BbR,BUT,BUa]]],['21418',ApW+' +k=1'+AsP+Ayp,[[U,Ajv+' /'+AW+' zone 18',Clh,BUd,BUX,BWK,BUf,BbQ,BUT,CVy,[B,K,'21418']]],[[U,'Beijing_1954_Gauss_Kruger_zone_18',CcK,BUd,BUX,BWK,BUf,BbQ,BUT,BUa]]],['21417',Apc+' +k=1'+AwT+Ayp,[[U,Ajv+' /'+AW+' zone 17',Clh,BUd,BUX,BWf,BUf,Bcf,BUT,CVy,[B,K,'21417']]],[[U,'Beijing_1954_Gauss_Kruger_zone_17',CcK,BUd,BUX,BWf,BUf,Bcf,BUT,BUa]]],['21416',Apb+' +k=1'+AwS+Ayp,[[U,Ajv+' /'+AW+' zone 16',Clh,BUd,BUX,BWk,BUf,BbP,BUT,CVy,[B,K,'21416']]],[[U,'Beijing_1954_Gauss_Kruger_zone_16',CcK,BUd,BUX,BWk,BUf,BbP,BUT,BUa]]],['21415',Apa+' +k=1'+ArP+Ayp,[[U,Ajv+' /'+AW+' zone 15',Clh,BUd,BUX,BXK,BUf,BbO,BUT,CVy,[B,K,'21415']]],[[U,'Beijing_1954_Gauss_Kruger_zone_15',CcK,BUd,BUX,BXK,BUf,BbO,BUT,BUa]]],['21414',ApZ+' +k=1'+ArO+Ayp,[[U,Ajv+' /'+AW+' zone 14',Clh,BUd,BUX,BWz,BUf,Bad,BUT,CVy,[B,K,'21414']]],[[U,'Beijing_1954_Gauss_Kruger_zone_14',CcK,BUd,BUX,BWz,BUf,Bad,BUT,BUa]]],['21413',ApY+' +k=1'+ArN+Ayp,[[U,Ajv+' /'+AW+' zone 13',Clh,BUd,BUX,BWs,BUf,Bax,BUT,CVy,[B,K,'21413']]],[[U,'Beijing_1954_Gauss_Kruger_zone_13',CcK,BUd,BUX,BWs,BUf,Bax,BUT,BUa]]],['2138',BRf+BGs+a,[[U,MZ+' / Quebec'+PW,CmH,BVG,BmB,Bbx,BZL,Bau,BUy,BUT,CVy,BUl,BUk,[B,K,'2138']]],[[U,'NAD27_CGQ77_Quebec_Lambert',CdL,BVD,BmB,Bbx,BZL,Bau,BUy,BUT,BUa]]],['2137',AjX+' +lon_0=-1'+BIU+Arq+ve+q+a,[[U,AcH+' / TM 1 NW',Coe,BUd,BUX,Buh,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2137']]],[[U,'Accra_TM_1_NW',Ciz,BUd,BUX,Buh,BUg,BUc,BUT,BUa]]],['2136',l+Aan+' +lon_0=-1'+ATG+' +x_0=274319.7391633579'+BQ+Arq+ve+vg+a,[[U,AcH+' / Ghana'+AoN,Coe,BUd,CHG,Buh,Bll,BdV,BUT,CYA,BUj,BUm,[B,K,'2136']]],[[U,'Accra_Ghana_National_Grid',Ciz,BUd,CHG,Buh,Bll,BdV,BUT,Bni]]],['2135',Ame+BEd,[[U,Gr+' / UTM zone 60S',Clj,BUd,BUX,BXo,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2135']]],[[U,'NZGD_2000_UTM_Zone_60S',CcR,BUd,BUX,BXo,BUg,BUc,BUo,BUa]]],['2134',AoK+BEd,[[U,Gr+' / UTM zone 59S',Clj,BUd,BUX,BXj,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2134']]],[[U,'NZGD_2000_UTM_Zone_59S',CcR,BUd,BUX,BXj,BUg,BUc,BUo,BUa]]],['2133',Aml+BEd,[[U,Gr+' / UTM zone 58S',Clj,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2133']]],[[U,'NZGD_2000_UTM_Zone_58S',CcR,BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['2132',l+' +lat_0=-46.6 +lon_0=168.3427777777778 +k=1'+BTm,[[U,Gr+' / Bluff 2000',Clj,BUd,CNf,[A,E,ARM],BUf,BVh,BWw,CVy,[B,K,'2132']]],[[U,'NZGD2000_Bluff_2000',CcR,BUd,CNf,[A,E,ARM],BUf,BVh,BWw,BUa]]],['2131',l+' +lat_0=-45.86138888888889 +lon_0=170.2825'+AEu+BTm,[[U,Gr+' /'+QM+' Taieri 2000',Clj,BUd,[A,C,ALd],CFJ,Bhe,BVh,BWw,CVy,[B,K,'2131']]],[[U,'NZGD2000_North_Taieri_2000',CcR,BUd,[A,C,ALd],CFJ,Bhe,BVh,BWw,BUa]]],['2130',l+' +lat_0=-45.81611111111111 +lon_0=170.6283333333333 +k=1'+BTm,[[U,Gr+' / Observation Point 2000',Clj,BUd,[A,C,ALe],[A,E,ARN],BUf,BVh,BWw,CVy,[B,K,'2130']]],[[U,'NZGD2000_Observation_Point_2000',CcR,BUd,[A,C,ALe],[A,E,ARN],BUf,BVh,BWw,BUa]]],['21292',l+' +lat_0=13.17638888888889 +lon_0=-59.55972222222222 +k=0.9999986 +x_0=30000 +y_0=75000'+Cw+lo+q+a,[[U,AXJ+' 1938 /'+" "+AXJ+AoN,CoI,BUd,[A,C,ARO],[A,E,ALf],Bxy,BtJ,CNe,CVy,BUj,BUm,[B,K,'21292']]],[[U,'Barbados_1938_Barbados_National_Grid',Cgy,BUd,[A,C,ARO],[A,E,ALf],Bxy,BtJ,CNe,BUa]]],['21291',BFA+lo+q+a,[[U,AXJ+' 1938 /'+" "+ASj+' West Indies'+op,CoI,BUd,BUX,BdN,BcJ,BVh,BUT,CVy,BUj,BUm,[B,K,'21291']]],[[U,'Barbados_1938_British_West_Indies_Grid',Cgy,BUd,BUX,BdN,BcJ,BVh,BUT,BUa]]],['2129',l+' +lat_0=-45.56361111111111 +lon_0=167.7386111111111 +k=1'+BTm,[[U,Gr+' / Mount York 2000',Clj,BUd,[A,C,ALg],[A,E,ARP],BUf,BVh,BWw,CVy,[B,K,'2129']]],[[U,'NZGD2000_Mount_York_2000',CcR,BUd,[A,C,ALg],[A,E,ARP],BUf,BVh,BWw,BUa]]],['2128',l+' +lat_0=-45.13277777777778 +lon_0=168.3986111111111 +k=1'+BTm,[[U,Gr+' / Mount Nicholas 2000',Clj,BUd,[A,C,ALh],[A,E,ARQ],BUf,BVh,BWw,CVy,[B,K,'2128']]],[[U,'NZGD2000_Mount_Nicholas_2000',CcR,BUd,[A,C,ALh],[A,E,ARQ],BUf,BVh,BWw,BUa]]],['2127',l+' +lat_0=-44.735 +lon_0=169.4675 +k=1'+BTm,[[U,Gr+' / Lindis Peak 2000',Clj,BUd,CFu,CFI,BUf,BVh,BWw,CVy,[B,K,'2127']]],[[U,'NZGD2000_Lindis_Peak_2000',CcR,BUd,CFu,CFI,BUf,BVh,BWw,BUa]]],['2126',l+' +lat_0=-44.40194444444445 +lon_0=171.0572222222222 +k=1'+BTm,[[U,Gr+' / Timaru 2000',Clj,BUd,[A,C,ALi],[A,E,ARR],BUf,BVh,BWw,CVy,[B,K,'2126']]],[[U,'NZGD2000_Timaru_2000',CcR,BUd,[A,C,ALi],[A,E,ARR],BUf,BVh,BWw,BUa]]],['2125',l+' +lat_0=-43.74861111111111 +lon_0=171.3605555555555 +k=1'+BTm,[[U,Gr+' / Gawler 2000',Clj,BUd,[A,C,ALj],[A,E,ARS],BUf,BVh,BWw,CVy,[B,K,'2125']]],[[U,'NZGD2000_Gawler_2000',CcR,BUd,[A,C,ALj],[A,E,ARS],BUf,BVh,BWw,BUa]]],['2124',l+' +lat_0=-43.59055555555556 +lon_0=172.7269444444445 +k=1'+BTm,[[U,Gr+' / Mount Pleasant 2000',Clj,BUd,[A,C,ALk],[A,E,ART],BUf,BVh,BWw,CVy,[B,K,'2124']]],[[U,'NZGD2000_Mount_Pleasant_2000',CcR,BUd,[A,C,ALk],[A,E,ART],BUf,BVh,BWw,BUa]]],['2123',l+' +lat_0=-43.97777777777778 +lon_0=168.6061111111111 +k=1'+BTm,[[U,Gr+' / Jacksons Bay 2000',Clj,BUd,[A,C,ALl],[A,E,ARU],BUf,BVh,BWw,CVy,[B,K,'2123']]],[[U,'NZGD2000_Jacksons_Bay_2000',CcR,BUd,[A,C,ALl],[A,E,ARU],BUf,BVh,BWw,BUa]]],['2122',l+' +lat_0=-43.11 +lon_0=170.2608333333333 +k=1'+BTm,[[U,Gr+' / Okarito 2000',Clj,BUd,CGw,[A,E,ARV],BUf,BVh,BWw,CVy,[B,K,'2122']]],[[U,'NZGD2000_Okarito_2000',CcR,BUd,CGw,[A,E,ARV],BUf,BVh,BWw,BUa]]],['2121',l+' +lat_0=-42.88611111111111 +lon_0=170.9797222222222 +k=1'+BTm,[[U,Gr+' / Hokitika 2000',Clj,BUd,[A,C,ALm],[A,E,ARW],BUf,BVh,BWw,CVy,[B,K,'2121']]],[[U,'NZGD2000_Hokitika_2000',CcR,BUd,[A,C,ALm],[A,E,ARW],BUf,BVh,BWw,BUa]]],['2120',l+' +lat_0=-41.54444444444444 +lon_0=173.8019444444444 +k=1'+BTm,[[U,Gr+' / Marlborough 2000',Clj,BUd,[A,C,ALn],[A,E,ARX],BUf,BVh,BWw,CVy,[B,K,'2120']]],[[U,'NZGD2000_Marlborough_2000',CcR,BUd,[A,C,ALn],[A,E,ARX],BUf,BVh,BWw,BUa]]],['2119',l+' +lat_0=-42.68888888888888 +lon_0=173.01 +k=1'+BTm,[[U,Gr+' / Amuri 2000',Clj,BUd,[A,C,ALo],CGv,BUf,BVh,BWw,CVy,[B,K,'2119']]],[[U,'NZGD2000_Amuri_2000',CcR,BUd,[A,C,ALo],CGv,BUf,BVh,BWw,BUa]]],['2118',l+' +lat_0=-42.33361111111111 +lon_0=171.5497222222222 +k=1'+BTm,[[U,Gr+' / Grey 2000',Clj,BUd,[A,C,ALp],[A,E,ARY],BUf,BVh,BWw,CVy,[B,K,'2118']]],[[U,'NZGD2000_Grey_2000',CcR,BUd,[A,C,ALp],[A,E,ARY],BUf,BVh,BWw,BUa]]],['2117',l+' +lat_0=-41.81055555555555 +lon_0=171.5811111111111 +k=1'+BTm,[[U,Gr+' / Buller 2000',Clj,BUd,[A,C,ALq],[A,E,ARZ],BUf,BVh,BWw,CVy,[B,K,'2117']]],[[U,'NZGD2000_Buller_2000',CcR,BUd,[A,C,ALq],[A,E,ARZ],BUf,BVh,BWw,BUa]]],['2116',l+' +lat_0=-41.28972222222222 +lon_0=172.1088888888889 +k=1'+BTm,[[U,Gr+' / Karamea 2000',Clj,BUd,[A,C,ALr],[A,E,ARa],BUf,BVh,BWw,CVy,[B,K,'2116']]],[[U,'NZGD2000_Karamea_2000',CcR,BUd,[A,C,ALr],[A,E,ARa],BUf,BVh,BWw,BUa]]],['21150',AnS+HN+BAu+q+a,[[U,eD+' / UTM zone 50S',CnG,BUd,BUX,BWS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'21150']]],[[U,'Batavia_UTM_zone_50S',CfS,BUd,BUX,BWS,BUg,BUc,BUo,BUa]]],['2115',l+' +lat_0=-41.27444444444444 +lon_0=173.2991666666667 +k=1'+BTm,[[U,Gr+' / Nelson 2000',Clj,BUd,[A,C,ALs],[A,E,ARb],BUf,BVh,BWw,CVy,[B,K,'2115']]],[[U,'NZGD2000_Nelson_2000',CcR,BUd,[A,C,ALs],[A,E,ARb],BUf,BVh,BWw,BUa]]],['21149',AnE+HN+BAu+q+a,[[U,eD+' / UTM zone 49S',CnG,BUd,BUX,BWX,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'21149']]],[[U,'Batavia_UTM_zone_49S',CfS,BUd,BUX,BWX,BUg,BUc,BUo,BUa]]],['21148',AnD+HN+BAu+q+a,[[U,eD+' / UTM zone 48S',CnG,BUd,BUX,BWK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'21148']]],[[U,'Batavia_UTM_zone_48S',CfS,BUd,BUX,BWK,BUg,BUc,BUo,BUa]]],['2114',l+' +lat_0=-40.71472222222223 +lon_0=172.6719444444444 +k=1'+BTm,[[U,Gr+' / Collingwood 2000',Clj,BUd,[A,C,ALt],[A,E,ARc],BUf,BVh,BWw,CVy,[B,K,'2114']]],[[U,'NZGD2000_Collingwood_2000',CcR,BUd,[A,C,ALt],[A,E,ARc],BUf,BVh,BWw,BUa]]],['2113',l+' +lat_0=-41.3011111111111 +lon_0=174.7763888888889 +k=1'+BTm,[[U,Gr+' / Wellington 2000',Clj,BUd,[A,C,ARd],[A,E,ARe],BUf,BVh,BWw,CVy,[B,K,'2113']]],[[U,'NZGD2000_Wellington_2000',CcR,BUd,[A,C,ARd],[A,E,ARe],BUf,BVh,BWw,BUa]]],['2112',l+' +lat_0=-40.92527777777777 +lon_0=175.6472222222222 +k=1'+BTm,[[U,Gr+' / Wairarapa 2000',Clj,BUd,[A,C,ALu],[A,E,ARf],BUf,BVh,BWw,CVy,[B,K,'2112']]],[[U,'NZGD2000_Wairarapa_2000',CcR,BUd,[A,C,ALu],[A,E,ARf],BUf,BVh,BWw,BUa]]],['2111',l+' +lat_0=-40.24194444444444 +lon_0=175.4880555555555 +k=1'+BTm,[[U,Gr+' / Wanganui 2000',Clj,BUd,[A,C,ALv],[A,E,ARg],BUf,BVh,BWw,CVy,[B,K,'2111']]],[[U,'NZGD2000_Wanganui_2000',CcR,BUd,[A,C,ALv],[A,E,ARg],BUf,BVh,BWw,BUa]]],['2110',l+' +lat_0=-39.51222222222222 +lon_0=175.64 +k=1'+BTm,[[U,Gr+' / Tuhirangi 2000',Clj,BUd,[A,C,ALw],CGu,BUf,BVh,BWw,CVy,[B,K,'2110']]],[[U,'NZGD2000_Tuhirangi_2000',CcR,BUd,[A,C,ALw],CGu,BUf,BVh,BWw,BUa]]],['21097',AmP+BCh+q+a,[[U,'Arc 1960 / UTM zone 37N',Cmf,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'21097']]],[[U,'Arc_1960_UTM_zone_37N',Cdx,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['21096',AnF+BCh+q+a,[[U,'Arc 1960 / UTM zone 36N',Cmf,BUd,BUX,BWg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'21096']]],[[U,'Arc_1960_UTM_zone_36N',Cdx,BUd,BUX,BWg,BUg,BUc,BUT,BUa]]],['21095',Amc+BCh+q+a,[[U,'Arc 1960 / UTM zone 35N',Cmf,BUd,BUX,BWP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'21095']]],[[U,'Arc_1960_UTM_zone_35N',Cdx,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['2109',l+' +lat_0=-39.13555555555556 +lon_0=174.2277777777778 +k=1'+BTm,[[U,Gr+' / Taranaki 2000',Clj,BUd,[A,C,ALx],[A,E,ARh],BUf,BVh,BWw,CVy,[B,K,'2109']]],[[U,'NZGD2000_Taranaki_2000',CcR,BUd,[A,C,ALx],[A,E,ARh],BUf,BVh,BWw,BUa]]],['2108',l+' +lat_0=-39.65083333333333 +lon_0=176.6736111111111 +k=1'+BTm,[[U,Gr+' / Hawkes Bay 2000',Clj,BUd,[A,C,ALy],[A,E,ARi],BUf,BVh,BWw,CVy,[B,K,'2108']]],[[U,'NZGD2000_Hawkes_Bay_2000',CcR,BUd,[A,C,ALy],[A,E,ARi],BUf,BVh,BWw,BUa]]],['2107',l+' +lat_0=-38.62444444444444 +lon_0=177.8855555555556 +k=1'+BTm,[[U,Gr+' / Poverty Bay 2000',Clj,BUd,[A,C,ALz],[A,E,ARj],BUf,BVh,BWw,CVy,[B,K,'2107']]],[[U,'NZGD2000_Poverty_Bay_2000',CcR,BUd,[A,C,ALz],[A,E,ARj],BUf,BVh,BWw,BUa]]],['2106',l+' +lat_0=-37.76111111111111 +lon_0=176.4661111111111 +k=1'+BTm,[[U,Gr+' / Bay of Plenty 2000',Clj,BUd,[A,C,AMA],[A,E,ARk],BUf,BVh,BWw,CVy,[B,K,'2106']]],[[U,'NZGD2000_Bay_of_Plenty_2000',CcR,BUd,[A,C,AMA],[A,E,ARk],BUf,BVh,BWw,BUa]]],['2105',l+' +lat_0=-36.87972222222222 +lon_0=174.7641666666667'+CB+BTm,[[U,Gr+' / Mount Eden 2000',Clj,BUd,[A,C,AMB],[A,E,ARl],BUt,BVh,BWw,CVy,[B,K,'2105']]],[[U,'NZGD2000_Mount_Eden_2000',CcR,BUd,[A,C,AMB],[A,E,ARl],BUt,BVh,BWw,BUa]]],['2104',AU+pT+pU+oF+' +k_0=1 +x_0=-17044 +y_0=-23139.97'+BNB,[[U,'Lake / Maracaibo La Rosa'+op,CnK,BWW,BrI,BrH,BUf,CGt,Bxx,CVy,BUl,BUk,[B,K,'2104']]],[[U,'Lake_Maracaibo_La_Rosa_Grid',Cfr,BVD,BrI,BrH,BUf,CGt,Bxx,BUa,CGs]]],['21037',AmP+BDE+Uv+q+a,[[U,'Arc 1960 / UTM zone 37S',Cmf,BUd,BUX,BWn,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'21037']]],[[U,'Arc_1960_UTM_zone_37S',Cdx,BUd,BUX,BWn,BUg,BUc,BUo,BUa]]],['21036',AnF+BDE+Uv+q+a,[[U,'Arc 1960 / UTM zone 36S',Cmf,BUd,BUX,BWg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'21036']]],[[U,'Arc_1960_UTM_zone_36S',Cdx,BUd,BUX,BWg,BUg,BUc,BUo,BUa]]],['21035',Amc+BDE+Uv+q+a,[[U,'Arc 1960 / UTM zone 35S',Cmf,BUd,BUX,BWP,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'21035']]],[[U,'Arc_1960_UTM_zone_35S',Cdx,BUd,BUX,BWP,BUg,BUc,BUo,BUa]]],['2103',AU+pT+pU+oF+' +k_0=1'+Ay+' +y_0=447315.028'+BNB,[[U,'Lake / Maracaibo'+op+' M3',CnK,BWW,BrI,BrH,BUf,BUc,[A,G,AjR],CVy,BUl,BUk,[B,K,'2103']]],[[U,'Lake_Maracaibo_Grid_M3',Cfr,BVD,BrI,BrH,BUf,BUc,[A,G,AjR],BUa,CGs]]],['2102',AU+pT+pU+oF+' +k_0=1'+Dp+' +y_0=147315.028'+BNB,[[U,'Lake / Maracaibo'+op,CnK,BWW,BrI,BrH,BUf,BVP,[A,G,AjS],CVy,BUl,BUk,[B,K,'2102']]],[[U,'Lake_Maracaibo_Grid',Cfr,BVD,BrI,BrH,BUf,BVP,[A,G,AjS],BUa,CGs]]],['2101',AU+pT+pU+oF+' +k_0=1'+Kw+' +y_0=-52684.972'+BNB,[[U,'Lake / Maracaibo'+op+' M1',CnK,BWW,BrI,BrH,BUf,BUy,[A,G,AjT],CVy,BUl,BUk,[B,K,'2101']]],[[U,'Lake_Maracaibo_Grid_M1',Cfr,BVD,BrI,BrH,BUf,BUy,[A,G,AjT],BUa,CGs]]],['2100',ArK+AlL+Aja+ADt+q+a,[[U,'GGRS87 / Greek'+op,Crm,BUd,BUX,BYU,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2100']]],[[U,'GGRS87_Greek_Grid',[S,'GCS_GGRS87',CaR,BUU,BUW],BUd,BUX,BYU,BUg,BUc,BUT,BUa]]],['2099',SE+' +lat_0=25.38236111111111 +lon_0=50.76138888888889'+NA+UO+aO+q+a,[[U,'Qatar 1948 / Qatar'+op,CrH,Bgy,[A,C,ARm],[A,E,ARn],BWV,BXV,CVy,BUj,BUm,[B,K,'2099']]],[[U,'Qatar_1948_Qatar_Grid',[S,'GCS_Qatar 1948',CaL,BUU,BUW],Bgx,[A,C,ARm],[A,E,ARn],BWV,BXV,BUa,Bal]]],['2098',BJo+' +k=1'+BHk,[[U,qy+' 1985 / West Belt',CmB,BUd,BWT,Blp,BUf,BVP,BWE,CVy,[B,K,'2098']]],[[U,'Korean_1985_West_Belt',Ccv,BUd,BWT,Blp,BUf,BVP,BWE,BUa]]],['2097',BHG+' +k=1'+BHk,[[U,qy+' 1985 /'+Gh+' Belt',CmB,BUd,BWT,Blq,BUf,BVP,BWE,CVy,[B,K,'2097']]],[[U,'Korean_1985_Central_Belt',Ccv,BUd,BWT,Blq,BUf,BVP,BWE,BUa]]],['2096',BNZ+' +k=1'+BHk,[[U,qy+' 1985 / East Belt',CmB,BUd,BWT,BWQ,BUf,BVP,BWE,CVy,[B,K,'2096']]],[[U,'Korean_1985_East_Belt',Ccv,BUd,BWT,BWQ,BUf,BVP,BWE,BUa]]],['2095',BJL+ANu+q+a,[[U,Aaz+' / UTM zone 28N',CsS,BUd,BUX,BYE,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2095']]],[[U,'Bissau_UTM_zone_28N',[S,'GCS_Bissau',CbR,BUU,BUW],BUd,BUX,BYE,BUg,BUc,BUT,BUa]]],['2094',AjX+' +lon_0=106'+BIU+ArR,[[U,'WGS'+Xv+' / TM 106 NE',Clb,BUd,BUX,BpW,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2094']]],[[U,'WGS_72BE_TM_106_NE',CcC,BUd,BUX,BpW,BUg,BUc,BUT,BUa]]],['20936',AnF+BIw+gw+q+a,[[U,'Arc 1950 / UTM zone 36S',CnY,BUd,BUX,BWg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20936']]],[[U,'Arc_1950_UTM_zone_36S',Cfq,BUd,BUX,BWg,BUg,BUc,BUo,BUa]]],['20935',Amc+BIw+gw+q+a,[[U,'Arc 1950 / UTM zone 35S',CnY,BUd,BUX,BWP,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20935']]],[[U,'Arc_1950_UTM_zone_35S',Cfq,BUd,BUX,BWP,BUg,BUc,BUo,BUa]]],['20934',Anl+BIw+gw+q+a,[[U,'Arc 1950 / UTM zone 34S',CnY,BUd,BUX,BWR,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20934']]],[[U,'Arc_1950_UTM_zone_34S',Cfq,BUd,BUX,BWR,BUg,BUc,BUo,BUa]]],['2093',AjX+' +lon_0=106 +k=1'+Ajb+Am+cZ+q+a,[[U,'Hanoi 1972 / GK 106 NE',CnP,BUd,BUX,BpW,BUf,BUc,BUT,CVy,[B,K,'2093']]],[[U,'Hanoi_1972_GK_106_NE',Cfk,BUd,BUX,BpW,BUf,BUc,BUT,BUa]]],['2090',Alt+BAy,[[U,'Yemen NGN96 / UTM zone 39N',Cmw,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2090']]],[[U,'Yemen_NGN96_UTM_zone_39N',Ceb,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['2089',AmA+BAy,[[U,'Yemen NGN96 / UTM zone 38N',Cmw,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2089']]],[[U,'Yemen_NGN96_UTM_zone_38N',Ceb,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['2088',AjX+' +lon_0=11'+BIU+BNO+q+a,[[U,cs+' / TM 11 NE',Cnj,BUd,BUX,BrQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2088']]],[[U,'Carthage_TM_11_NE',Cgd,BUd,BUX,BrQ,BUg,BUc,BUT,BUa]]],['2087',AqA+BHH+BHc,[[U,lf+' / TM 12 NE',CmF,BUd,BUX,BYZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2087']]],[[U,'ELD79_TM_12_NE',CdK,BUd,BUX,BYZ,BUg,BUc,BUT,BUa]]],['2084',AlG+Aka+xs+q+a,[[U,'Hito XVIII 1963 / UTM zone 19S',Cns,BUd,BUX,BWZ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'2084']]],[[U,'Hito_XVIII_1963_UTM_zone_19S',Cgu,BUd,BUX,BWZ,BUg,BUc,BUo,BUa]]],['2083',BHe+' +k=1'+AmF+BP+xs+q+a,[[U,'Hito XVIII 1963 /'+Yj+' 2',Cns,BUd,BVX,BWZ,BUf,BXy,BUT,CVy,[B,K,'2083']]],[[U,'Hito_XVIII_1963_Argentina_2',Cgu,BUd,BVX,BWZ,BUf,BXy,BUT,BUa]]],['20824',AoC+BNc+q+a,[[U,AIQ+' / UTM zone 24S',Cnc,BUd,BUX,BYx,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20824']]],[[U,'Aratu_UTM_zone_24S',CgC,BUd,BUX,BYx,BUg,BUc,BUo,BUa]]],['20823',BJy+Vy+q+a,[[U,AIQ+' / UTM zone 23S',Cnc,BUd,BUX,BYg,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20823']]],[[U,'Aratu_UTM_zone_23S',CgC,BUd,BUX,BYg,BUg,BUc,BUo,BUa]]],['20822',BJx+Vy+q+a,[[U,AIQ+' / UTM zone 22S',Cnc,BUd,BUX,BXm,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20822']]],[[U,'Aratu_UTM_zone_22S',CgC,BUd,BUX,BXm,BUg,BUc,BUo,BUa]]],['2082',BHe+' +k=1'+AmF+BP+AJq+q+a,[[U,'Pampa del'+AcY+' /'+Yj+' 2',Cqe,BUd,BVX,BWZ,BUf,BXy,BUT,CVy,[B,K,'2082']]],[[U,'Pampa_del_Castillo_Argentina_2',[S,'GCS_Pampa del'+AcY,[V,ASh,BUs],BUU,BUW],BUd,BVX,BWZ,BUf,BXy,BUT,BUa]]],['2081',BHe+' +k=1'+AmF+BNB,[[U,'Chos Malal 1914 /'+Yj+' 2',CqU,BUd,BVX,BWZ,BUf,BXy,BUT,CVy,[B,K,'2081']]],[[U,'Chos_Malal_1914_Argentina_2',[S,'GCS_Chos Malal 1914',[V,AYY,BUs],BUU,BUW],BUd,BVX,BWZ,BUf,BXy,BUT,BUa]]],['2080',Amc+AoO+q+a,[[U,lf+' / UTM zone 35N',CmF,BUd,BUX,BWP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2080']]],[[U,'ELD79_UTM_zone_35N',CdK,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['20791',l+Na+' +lon_0=1 +k=1'+Ajh+BP+VH+' +pm=lisbon'+q+a,[[U,BEL+' / Portuguese'+op,Col,BUd,Bat,CPs,BUf,BUy,BUT,CVy,BUl,BUk,[B,K,'20791']]],[[U,'Lisbon_Lisbon_Portuguese_Grid',CiF,BUd,Bat,CPs,BUf,BUy,BUT,BUa]]],['20790',l+Na+' +lon_0=1 +k=1'+Dp+eM+BP+VH+' +pm=lisbon'+q+a,[[U,BEL+' / Portuguese'+AoN,Col,BUd,Bat,CPs,BUf,BVP,BZw,CVy,BUl,BUk,[B,K,'20790']]],[[U,'Lisbon_Lisbon_Portuguese_National_Grid',CiF,BUd,Bat,CPs,BUf,BVP,BZw,BUa]]],['2079',Anl+AoO+q+a,[[U,lf+' / UTM zone 34N',CmF,BUd,BUX,BWR,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2079']]],[[U,'ELD79_UTM_zone_34N',CdK,BUd,BUX,BWR,BUg,BUc,BUT,BUa]]],['2078',AmO+AoO+q+a,[[U,lf+' / UTM zone 33N',CmF,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2078']]],[[U,'ELD79_UTM_zone_33N',CdK,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['2077',Alu+AoO+q+a,[[U,lf+' / UTM zone 32N',CmF,BUd,BUX,BWO,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2077']]],[[U,'ELD79_UTM_zone_32N',CdK,BUd,BUX,BWO,BUg,BUc,BUT,BUa]]],['2076',BHD+BEW,[[U,lf+' / Libya zone 13',CmF,BUd,BUX,BhW,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'2076']]],[[U,'ELD79_Libya_zone_13',CdK,BUd,BUX,BhW,BUt,BVP,BUT,BUa]]],['2075',BHC+BEW,[[U,lf+' / Libya zone 12',CmF,BUd,BUX,BkN,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'2075']]],[[U,'ELD79_Libya_zone_12',CdK,BUd,BUX,BkN,BUt,BVP,BUT,BUa]]],['2074',ApT+BEW,[[U,lf+' / Libya zone 11',CmF,BUd,BUX,BWR,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'2074']]],[[U,'ELD79_Libya_zone_11',CdK,BUd,BUX,BWR,BUt,BVP,BUT,BUa]]],['2073',BEp+BEW,[[U,lf+' / Libya zone 10',CmF,BUd,BUX,BhV,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'2073']]],[[U,'ELD79_Libya_zone_10',CdK,BUd,BUX,BhV,BUt,BVP,BUT,BUa]]],['2072',BHn+BEW,[[U,lf+' / Libya zone 9',CmF,BUd,BUX,Blf,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'2072']]],[[U,'ELD79_Libya_zone_9',CdK,BUd,BUX,Blf,BUt,BVP,BUT,BUa]]],['2071',ApP+BEW,[[U,lf+' / Libya zone 8',CmF,BUd,BUX,BWH,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'2071']]],[[U,'ELD79_Libya_zone_8',CdK,BUd,BUX,BWH,BUt,BVP,BUT,BUa]]],['2070',AjX+' +lon_0=13'+BEW,[[U,lf+' / Libya zone 7',CmF,BUd,BUX,BpS,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'2070']]],[[U,'ELD79_Libya_zone_7',CdK,BUd,BUX,BpS,BUt,BVP,BUT,BUa]]],['2069',AjX+' +lon_0=11'+BEW,[[U,lf+' / Libya zone 6',CmF,BUd,BUX,BrQ,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'2069']]],[[U,'ELD79_Libya_zone_6',CdK,BUd,BUX,BrQ,BUt,BVP,BUT,BUa]]],['2068',Aqa+BEW,[[U,lf+' / Libya zone 5',CmF,BUd,BUX,BWO,BUt,BVP,BUT,CVy,BUl,BUk,[B,K,'2068']]],[[U,'ELD79_Libya_zone_5',CdK,BUd,BUX,BWO,BUt,BVP,BUT,BUa]]],['2067',BIT+ABr+q+a,[[U,AJu+' 1955 / UTM zone 20N',CrL,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2067']]],[[U,'Naparima_1955_UTM_zone_20N',[S,'GCS_Naparima 1955',[V,Adv,BUs],BUU,BUW],BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2066',SE+' +lat_0=11.25217861111111 +lon_0=-60.68600888888889 +x_0=37718.66159325 +y_0=36209.91512952'+Arw+Aag+a,[[U,'Mount Dillon / Tobago'+op,Cqo,Bgy,[A,C,ARo],[A,E,AMC],CGr,CGq,CaQ,BUj,BUm,[B,K,'2066']]],[[U,'Mount_Dillon_Tobago_Grid',[S,'GCS_Mount Dillon',[V,AhH,BhF],BUU,BUW],Bgx,[A,C,ARo],[A,E,AMC],CGr,CGq,COB,Bal]]],['2065',BCc+' +lon_0=42.5'+BRv+BHs,[[U,AwD+' /'+" "+AGz,Con,BvH,Bpr,CAi,Bpq,Bpp,BUt,BUy,BUT,CVy,BYq,BYp,[B,K,'2065']]],[[U,'S_JTSK_Ferro_Krovak',Cjf,BvH,Bpr,CAi,Bpq,Bpp,BUt,BUy,BUT,BUa]]],['2062',AU+' +lat_1=40'+Xy+ci+' +k_0=0.9988085293'+Cj+AHM+' +a=6378298.3'+AFy+' +pm=madrid'+q+a,[[U,Aaw+' 1870'+AcS+' / Spain',Cqn,BWW,BXM,BYA,[A,N,Abo],BVY,BkO,CVy,BUl,BUk,[B,K,'2062']]],[[U,'Madrid_1870_Madrid_Spain',[S,'GCS_Madrid 1870'+AcS,CaI,[T,Aaw,kg],BUW],BVD,BXM,BYA,[A,N,Abo],BVY,BkO,BUa,[A,W,Gx]]]],['2061',Aoc+BP+bG+q+a,[[U,is+' / UTM zone 41N',Cng,BUd,BUX,BZN,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2061']]],[[U,'ED50_ED77_UTM_zone_41N',Cfp,BUd,BUX,BZN,BUg,BUc,BUT,BUa]]],['2060',AnK+BP+bG+q+a,[[U,is+' / UTM zone 40N',Cng,BUd,BUX,BXz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2060']]],[[U,'ED50_ED77_UTM_zone_40N',Cfp,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['2059',Alt+BP+bG+q+a,[[U,is+' / UTM zone 39N',Cng,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2059']]],[[U,'ED50_ED77_UTM_zone_39N',Cfp,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['2058',AmA+BP+bG+q+a,[[U,is+' / UTM zone 38N',Cng,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2058']]],[[U,'ED50_ED77_UTM_zone_38N',Cfp,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['2057',Qw+' +lat_0=27.51882880555555 +lonc=52.60353916666667 +alpha=0.5716611944444444 +k=0.999895934 +x_0=658377.437 +y_0=3044969.194 +gamma=0.5716611944444444'+BP+ABs+q+a,[[U,xm+' / Nakhl e Taqi',Cse,BlU,[A,BW,ARp],[A,BV,ARq],[A,IC,wm],[A,Eu,wm],[A,N,AfZ],[A,I,AjU],[A,G,Afa],CVy,BUj,BUm,[B,K,'2057']]],[[U,'Rassadiran_Nakhl_e_Taqi',[S,'GCS_Rassadiran',CaK,BUU,BUW],BlU,[A,BW,ARp],[A,BV,ARq],[A,IC,wm],[A,N,AfZ],[A,I,AjU],[A,G,Afa],BUa]]],['2055',Aqn+' +k=1'+BTv,[[U,GS+' / Lo33',CmW,BZk,BUX,BWg,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'2055']]],[[U,'Hartebeesthoek94_Lo33',Cdj,BZk,BUX,BWg,BUf,BUy,BUT,BUa]]],['2054',BEr+' +k=1'+BTv,[[U,GS+' / Lo31',CmW,BZk,BUX,Bed,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'2054']]],[[U,'Hartebeesthoek94_Lo31',Cdj,BZk,BUX,Bed,BUf,BUy,BUT,BUa]]],['20539',Alt+Am+vd+q+a,[[U,yT+' / UTM zone 39N',CpN,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20539']]],[[U,'Afgooye_UTM_zone_39N',Cih,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['20538',AmA+Am+vd+q+a,[[U,yT+' / UTM zone 38N',CpN,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20538']]],[[U,'Afgooye_UTM_zone_38N',Cih,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['2053',AjX+' +lon_0=29 +k=1'+BTv,[[U,GS+' / Lo29',CmW,BZk,BUX,Brb,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'2053']]],[[U,'Hartebeesthoek94_Lo29',Cdj,BZk,BUX,Brb,BUf,BUy,BUT,BUa]]],['2052',Apz+' +k=1'+BTv,[[U,GS+' / Lo27',CmW,BZk,BUX,BWP,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'2052']]],[[U,'Hartebeesthoek94_Lo27',Cdj,BZk,BUX,BWP,BUf,BUy,BUT,BUa]]],['2051',BHD+' +k=1'+BTv,[[U,GS+' / Lo25',CmW,BZk,BUX,BhW,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'2051']]],[[U,'Hartebeesthoek94_Lo25',Cdj,BZk,BUX,BhW,BUf,BUy,BUT,BUa]]],['2050',BHC+' +k=1'+BTv,[[U,GS+' / Lo23',CmW,BZk,BUX,BkN,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'2050']]],[[U,'Hartebeesthoek94_Lo23',Cdj,BZk,BUX,BkN,BUf,BUy,BUT,BUa]]],['20499',Alt+BLY,[[U,'Ain el Abd / Bahrain'+op,CmU,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20499']]],[[U,'Ain_el_Abd_Bahrain_Grid',CdR,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['2049',ApT+' +k=1'+BTv,[[U,GS+' / Lo21',CmW,BZk,BUX,BWR,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'2049']]],[[U,'Hartebeesthoek94_Lo21',Cdj,BZk,BUX,BWR,BUf,BUy,BUT,BUa]]],['2048',BEp+' +k=1'+BTv,[[U,GS+' / Lo19',CmW,BZk,BUX,BhV,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'2048']]],[[U,'Hartebeesthoek94_Lo19',Cdj,BZk,BUX,BhV,BUf,BUy,BUT,BUa]]],['2047',BHn+' +k=1'+BTv,[[U,GS+' / Lo17',CmW,BZk,BUX,Blf,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'2047']]],[[U,'Hartebeesthoek94_Lo17',Cdj,BZk,BUX,Blf,BUf,BUy,BUT,BUa]]],['2046',ApP+' +k=1'+BTv,[[U,GS+' / Lo15',CmW,BZk,BUX,BWH,BUf,BUy,BUT,CVy,BYp,BYq,[B,K,'2046']]],[[U,'Hartebeesthoek94_Lo15',Cdj,BZk,BUX,BWH,BUf,BUy,BUT,BUa]]],['2045',ApX+' +k=1'+ArM+Am+cZ+q+a,[[U,'Hanoi 1972 /'+AW+' zone 19',CnP,BUd,BUX,BWX,BUf,BbR,BUT,CVy,[B,K,'2045']]],[[U,'Hanoi_1972_Gauss_Kruger_zone_19',Cfk,BUd,BUX,BWX,BUf,BbR,BUT,BUa]]],['20440',AnK+BLY,[[U,'Ain el Abd / UTM zone 40N',CmU,BUd,BUX,BXz,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20440']]],[[U,'Ain_el_Abd_UTM_zone_40N',CdR,BUd,BUX,BXz,BUg,BUc,BUT,BUa]]],['2044',ApW+' +k=1'+AsP+Am+cZ+q+a,[[U,'Hanoi 1972 /'+AW+' zone 18',CnP,BUd,BUX,BWK,BUf,BbQ,BUT,CVy,[B,K,'2044']]],[[U,'Hanoi_1972_Gauss_Kruger_zone_18',Cfk,BUd,BUX,BWK,BUf,BbQ,BUT,BUa]]],['20439',Alt+BLY,[[U,'Ain el Abd / UTM zone 39N',CmU,BUd,BUX,BWt,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20439']]],[[U,'Ain_el_Abd_UTM_zone_39N',CdR,BUd,BUX,BWt,BUg,BUc,BUT,BUa]]],['20438',AmA+BLY,[[U,'Ain el Abd / UTM zone 38N',CmU,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20438']]],[[U,'Ain_el_Abd_UTM_zone_38N',CdR,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['20437',AmP+BLY,[[U,'Ain el Abd / UTM zone 37N',CmU,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20437']]],[[U,'Ain_el_Abd_UTM_zone_37N',CdR,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['20436',AnF+BLY,[[U,'Ain el Abd / UTM zone 36N',CmU,BUd,BUX,BWg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20436']]],[[U,'Ain_el_Abd_UTM_zone_36N',CdR,BUd,BUX,BWg,BUg,BUc,BUT,BUa]]],['2043',AmJ+Cw+ew+q+a,[[U,AcO+' 1987 / UTM zone 29N',CnR,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2043']]],[[U,'Abidjan_1987_UTM_zone_29N',CfO,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['2042',AmJ+Cw+ig+q+a,[[U,AcP+' 1965 / UTM zone 29N',CnQ,BUd,BUX,BYQ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2042']]],[[U,'Locodjo_1965_UTM_zone_29N',CfN,BUd,BUX,BYQ,BUg,BUc,BUT,BUa]]],['2041',AmR+Cw+ew+q+a,[[U,AcO+' 1987 / UTM zone 30N',CnR,BUd,BUX,Bak,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2041']]],[[U,'Abidjan_1987_UTM_zone_30N',CfO,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['2040',AmR+Cw+ig+q+a,[[U,AcP+' 1965 / UTM zone 30N',CnQ,BUd,BUX,Bak,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2040']]],[[U,'Locodjo_1965_UTM_zone_30N',CfN,BUd,BUX,Bak,BUg,BUc,BUT,BUa]]],['2039',l+AAc+AAd+' +k=1.0000067'+AYK+AdT+j+AUU+q+a,[[U,AbA+' / Israeli TM'+op,CsQ,BUd,BxL,BxK,BxJ,BxI,BxH,CVy,BUj,BUm,[B,K,'2039']]],[[U,'Israel_Israeli_TM_Grid',[S,'GCS_Israel',CbQ,BUU,BUW],BUd,BxL,BxK,BxJ,BxI,BxH,BUa]]],['20356',AoS+BSd,[[U,AMD+' / AMG zone 56',Cmh,BUd,BUX,BYu,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20356']]],[[U,'AGD84_AMG_zone_56',CeJ,BUd,BUX,BYu,BUg,BUc,BUo,BUa]]],['20355',Amg+BSd,[[U,AMD+' / AMG zone 55',Cmh,BUd,BUX,BYW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20355']]],[[U,'AGD84_AMG_zone_55',CeJ,BUd,BUX,BYW,BUg,BUc,BUo,BUa]]],['20354',AoI+BSd,[[U,AMD+' / AMG zone 54',Cmh,BUd,BUX,BYK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20354']]],[[U,'AGD84_AMG_zone_54',CeJ,BUd,BUX,BYK,BUg,BUc,BUo,BUa]]],['20353',AmT+BSd,[[U,AMD+' / AMG zone 53',Cmh,BUd,BUX,BWd,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20353']]],[[U,'AGD84_AMG_zone_53',CeJ,BUd,BUX,BWd,BUg,BUc,BUo,BUa]]],['20352',Ank+BSd,[[U,AMD+' / AMG zone 52',Cmh,BUd,BUX,BWQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20352']]],[[U,'AGD84_AMG_zone_52',CeJ,BUd,BUX,BWQ,BUg,BUc,BUo,BUa]]],['20351',AnJ+BSd,[[U,AMD+' / AMG zone 51',Cmh,BUd,BUX,BWU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20351']]],[[U,'AGD84_AMG_zone_51',CeJ,BUd,BUX,BWU,BUg,BUc,BUo,BUa]]],['20350',AnS+BSd,[[U,AMD+' / AMG zone 50',Cmh,BUd,BUX,BWS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20350']]],[[U,'AGD84_AMG_zone_50',CeJ,BUd,BUX,BWS,BUg,BUc,BUo,BUa]]],['2035',AlI+Atf,[[U,MZ+' / UTM zone 21N',CmH,BUd,BUX,BWr,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2035']]],[[U,'NAD27_CGQ77_UTM_zone_21N',CdL,BUd,BUX,BWr,BUg,BUc,BUT,BUa]]],['20349',AnE+BSd,[[U,AMD+' / AMG zone 49',Cmh,BUd,BUX,BWX,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20349']]],[[U,'AGD84_AMG_zone_49',CeJ,BUd,BUX,BWX,BUg,BUc,BUo,BUa]]],['2034',Aku+Atf,[[U,MZ+' / UTM zone 20N',CmH,BUd,BUX,BWY,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2034']]],[[U,'NAD27_CGQ77_UTM_zone_20N',CdL,BUd,BUX,BWY,BUg,BUc,BUT,BUa]]],['2033',AlG+Atf,[[U,MZ+' / UTM zone 19N',CmH,BUd,BUX,BWZ,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2033']]],[[U,'NAD27_CGQ77_UTM_zone_19N',CdL,BUd,BUX,BWZ,BUg,BUc,BUT,BUa]]],['2032',AlJ+Atf,[[U,MZ+' / UTM zone 18N',CmH,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2032']]],[[U,'NAD27_CGQ77_UTM_zone_18N',CdL,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['2031',AlW+Atf,[[U,MZ+' / UTM zone 17N',CmH,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2031']]],[[U,'NAD27_CGQ77_UTM_zone_17N',CdL,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['2030',AlJ+Atf,[[U,Qn+' / UTM zone 18N',CmG,BUd,BUX,BWo,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2030']]],[[U,'NAD27_76_UTM_zone_18N',CdJ,BUd,BUX,BWo,BUg,BUc,BUT,BUa]]],['2029',AlW+Atf,[[U,Qn+' / UTM zone 17N',CmG,BUd,BUX,BVm,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2029']]],[[U,'NAD27_76_UTM_zone_17N',CdJ,BUd,BUX,BVm,BUg,BUc,BUT,BUa]]],['2028',AnW+Atf,[[U,Qn+' / UTM zone 16N',CmG,BUd,BUX,BXS,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2028']]],[[U,'NAD27_76_UTM_zone_16N',CdJ,BUd,BUX,BXS,BUg,BUc,BUT,BUa]]],['2027',AnV+Atf,[[U,Qn+' / UTM zone 15N',CmG,BUd,BUX,BYT,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'2027']]],[[U,'NAD27_76_UTM_zone_15N',CdJ,BUd,BUX,BYT,BUg,BUc,BUT,BUa]]],['2026',AjX+yZ+BSD,[[U,Qn+' / MTM zone 17',CmG,BUd,BUX,BlA,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'2026']]],[[U,'NAD27_76_MTM_zone_17',CdJ,BUd,BUX,BlA,BUt,BVt,BUT,BUa]]],['20258',Aml+BJm,[[U,pt+' / AMG zone 58',CmM,BUd,BUX,BXW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20258']]],[[U,'AGD66_AMG_zone_58',CdU,BUd,BUX,BXW,BUg,BUc,BUo,BUa]]],['20257',Aos+BJm,[[U,pt+' / AMG zone 57',CmM,BUd,BUX,BZl,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20257']]],[[U,'AGD66_AMG_zone_57',CdU,BUd,BUX,BZl,BUg,BUc,BUo,BUa]]],['20256',AoS+BJm,[[U,pt+' / AMG zone 56',CmM,BUd,BUX,BYu,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20256']]],[[U,'AGD66_AMG_zone_56',CdU,BUd,BUX,BYu,BUg,BUc,BUo,BUa]]],['20255',Amg+BJm,[[U,pt+' / AMG zone 55',CmM,BUd,BUX,BYW,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20255']]],[[U,'AGD66_AMG_zone_55',CdU,BUd,BUX,BYW,BUg,BUc,BUo,BUa]]],['20254',AoI+BJm,[[U,pt+' / AMG zone 54',CmM,BUd,BUX,BYK,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20254']]],[[U,'AGD66_AMG_zone_54',CdU,BUd,BUX,BYK,BUg,BUc,BUo,BUa]]],['20253',AmT+BJm,[[U,pt+' / AMG zone 53',CmM,BUd,BUX,BWd,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20253']]],[[U,'AGD66_AMG_zone_53',CdU,BUd,BUX,BWd,BUg,BUc,BUo,BUa]]],['20252',Ank+BJm,[[U,pt+' / AMG zone 52',CmM,BUd,BUX,BWQ,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20252']]],[[U,'AGD66_AMG_zone_52',CdU,BUd,BUX,BWQ,BUg,BUc,BUo,BUa]]],['20251',AnJ+BJm,[[U,pt+' / AMG zone 51',CmM,BUd,BUX,BWU,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20251']]],[[U,'AGD66_AMG_zone_51',CdU,BUd,BUX,BWU,BUg,BUc,BUo,BUa]]],['20250',AnS+BJm,[[U,pt+' / AMG zone 50',CmM,BUd,BUX,BWS,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20250']]],[[U,'AGD66_AMG_zone_50',CdU,BUd,BUX,BWS,BUg,BUc,BUo,BUa]]],['2025',BHA+BSD,[[U,Qn+' / MTM zone 16',CmG,BUd,BUX,BYT,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'2025']]],[[U,'NAD27_76_MTM_zone_16',CdJ,BUd,BUX,BYT,BUt,BVt,BUT,BUa]]],['20249',AnE+BJm,[[U,pt+' / AMG zone 49',CmM,BUd,BUX,BWX,BUg,BUc,BUo,CVy,BUj,BUm,[B,K,'20249']]],[[U,'AGD66_AMG_zone_49',CdU,BUd,BUX,BWX,BUg,BUc,BUo,BUa]]],['2024',BGq+BSD,[[U,Qn+' / MTM zone 15',CmG,BUd,BUX,BWb,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'2024']]],[[U,'NAD27_76_MTM_zone_15',CdJ,BUd,BUX,BWb,BUt,BVt,BUT,BUa]]],['2023',BIV+BSD,[[U,Qn+' / MTM zone 14',CmG,BUd,BUX,BXS,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'2023']]],[[U,'NAD27_76_MTM_zone_14',CdJ,BUd,BUX,BXS,BUt,BVt,BUT,BUa]]],['2022',BNe+BSD,[[U,Qn+' / MTM zone 13',CmG,BUd,BUX,Bhh,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'2022']]],[[U,'NAD27_76_MTM_zone_13',CdJ,BUd,BUX,Bhh,BUt,BVt,BUT,BUa]]],['2021',BIW+BSD,[[U,Qn+' / MTM zone 12',CmG,BUd,BUX,BVm,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'2021']]],[[U,'NAD27_76_MTM_zone_12',CdJ,BUd,BUX,BVm,BUt,BVt,BUT,BUa]]],['2020',AjX+VA+BSD,[[U,Qn+' / MTM zone 11',CmG,BUd,BUX,BYk,BUt,BVt,BUT,CVy,BUj,BUm,[B,K,'2020']]],[[U,'NAD27_76_MTM_zone_11',CdJ,BUd,BUX,BYk,BUt,BVt,BUT,BUa]]],['2019',BNU+BSD,[[U,Qn+' / MTM zone 10',CmG,BUd,BUX,BZs,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2019']]],[[U,'NAD27_76_MTM_zone_10',CdJ,BUd,BUX,BZs,BUt,BVt,BUT,BUa]]],['2018',BJY+BKy,[[U,Qn+' / MTM zone 9',CmG,BUd,BUX,BrV,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2018']]],[[U,'NAD27_76_MTM_zone_9',CdJ,BUd,BUX,BrV,BUt,BVt,BUT,BUa]]],['2017',BJW+BKy,[[U,Qn+' / MTM zone 8',CmG,BUd,BUX,BrU,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2017']]],[[U,'NAD27_76_MTM_zone_8',CdJ,BUd,BUX,BrU,BUt,BVt,BUT,BUa]]],['2016',BNU+BSD,[[U,MZ+' / SCoPQ zone 10',CmH,BUd,BUX,BZs,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2016']]],[[U,'NAD27_CGQ77_SCoPQ_zone_10',CdL,BUd,BUX,BZs,BUt,BVt,BUT,BUa]]],['2015',BJY+BKy,[[U,MZ+' / SCoPQ zone 9',CmH,BUd,BUX,BrV,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2015']]],[[U,'NAD27_CGQ77_SCoPQ_zone_9',CdL,BUd,BUX,BrV,BUt,BVt,BUT,BUa]]],['2014',BJW+BKy,[[U,MZ+' / SCoPQ zone 8',CmH,BUd,BUX,BrU,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2014']]],[[U,'NAD27_CGQ77_SCoPQ_zone_8',CdL,BUd,BUX,BrU,BUt,BVt,BUT,BUa]]],['20138',AmA+Cw+cz+q+a,[[U,jp+' / UTM zone 38N',Cnh,BUd,BUX,BWe,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20138']]],[[U,'Adindan_UTM_zone_38N',Cfo,BUd,BUX,BWe,BUg,BUc,BUT,BUa]]],['20137',AmP+Cw+cz+q+a,[[U,jp+' / UTM zone 37N',Cnh,BUd,BUX,BWn,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20137']]],[[U,'Adindan_UTM_zone_37N',Cfo,BUd,BUX,BWn,BUg,BUc,BUT,BUa]]],['20136',AnF+Cw+cz+q+a,[[U,jp+' / UTM zone 36N',Cnh,BUd,BUX,BWg,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20136']]],[[U,'Adindan_UTM_zone_36N',Cfo,BUd,BUX,BWg,BUg,BUc,BUT,BUa]]],['20135',Amc+Cw+cz+q+a,[[U,jp+' / UTM zone 35N',Cnh,BUd,BUX,BWP,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'20135']]],[[U,'Adindan_UTM_zone_35N',Cfo,BUd,BUX,BWP,BUg,BUc,BUT,BUa]]],['2013',AjX+fS+BSD,[[U,MZ+' / SCoPQ zone 7',CmH,BUd,BUX,BbL,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2013']]],[[U,'NAD27_CGQ77_SCoPQ_zone_7',CdL,BUd,BUX,BbL,BUt,BVt,BUT,BUa]]],['2012',BJU+BKy,[[U,MZ+' / SCoPQ zone 6',CmH,BUd,BUX,BrT,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2012']]],[[U,'NAD27_CGQ77_SCoPQ_zone_6',CdL,BUd,BUX,BrT,BUt,BVt,BUT,BUa]]],['2011',BHq+BKy,[[U,MZ+' / SCoPQ zone 5',CmH,BUd,BUX,Bnv,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2011']]],[[U,'NAD27_CGQ77_SCoPQ_zone_5',CdL,BUd,BUX,Bnv,BUt,BVt,BUT,BUa]]],['2010',BHp+BKy,[[U,MZ+' / SCoPQ zone 4',CmH,BUd,BUX,Bnu,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2010']]],[[U,'NAD27_CGQ77_SCoPQ_zone_4',CdL,BUd,BUX,Bnu,BUt,BVt,BUT,BUa]]],['2009',BJQ+BKy,[[U,MZ+' / SCoPQ zone 3',CmH,BUd,BUX,BrS,BUt,BVt,BUT,CVy,BUl,BUk,[B,K,'2009']]],[[U,'NAD27_CGQ77_SCoPQ_zone_3',CdL,BUd,BUX,BrS,BUt,BVt,BUT,BUa]]],['2007',BFA+ABl+q+a,[[U,'St. Vincent 45 /'+" "+ASj+' West Indies'+op,Cpm,BUd,BUX,BdN,BcJ,BVh,BUT,CVy,BUj,BUm,[B,K,'2007']]],[[U,'St_Vincent_45_British_West_Indies_Grid',[S,'GCS_St. Vincent 1945',[V,AYV,BVV],BUU,BUW],BUd,BUX,BdN,BcJ,BVh,BUT,BUa]]],['2006',BFA+AKF+q+a,[[U,'St. Lucia 1955 /'+" "+ASj+' West Indies'+op,CqY,BUd,BUX,BdN,BcJ,BVh,BUT,CVy,BUj,BUm,[B,K,'2006']]],[[U,'St_Lucia_1955_British_West_Indies_Grid',[S,'GCS_St. Lucia 1955',[V,Adl,BVV],BUU,BUW],BUd,BUX,BdN,BcJ,BVh,BUT,BUa]]],['2005',BFA+AUS+q+a,[[U,'St. Kitts 1955 /'+" "+ASj+' West Indies'+op,CqX,BUd,BUX,BdN,BcJ,BVh,BUT,CVy,BUj,BUm,[B,K,'2005']]],[[U,'St_Kitts_1955_British_West_Indies_Grid',[S,'GCS_St. Kitts 1955',[V,Adm,BVV],BUU,BUW],BUd,BUX,BdN,BcJ,BVh,BUT,BUa]]],['2004',BFA+ANl+q+a,[[U,AbF+' 1958 /'+" "+ASj+' West Indies'+op,CrT,BUd,BUX,BdN,BcJ,BVh,BUT,CVy,BUj,BUm,[B,K,'2004']]],[[U,'Montserrat_1958_British_West_Indies_Grid',[S,'GCS_Montserrat 1958',[V,AYW,BVV],BUU,BUW],BUd,BUX,BdN,BcJ,BVh,BUT,BUa]]],['20032',BEV+' +k=1'+ArV+AqC,[[U,Ajf+' /'+AW+' zone 32',Cla,BUd,BUX,BYV,BUf,BcO,BUT,CVy,[B,K,'20032']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_32',Cby,BUd,BUX,BYV,BUf,BcO,BUT,BUa]]],['20031',AxL+' +k=1'+AqY+AqC,[[U,Ajf+' /'+AW+' zone 31',Cla,BUd,BUX,BYF,BUf,BaY,BUT,CVy,[B,K,'20031']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_31',Cby,BUd,BUX,BYF,BUf,BaY,BUT,BUa]]],['20030',BEU+' +k=1'+AsZ+AqC,[[U,Ajf+' /'+AW+' zone 30',Cla,BUd,BUX,BXo,BUf,BcN,BUT,CVy,[B,K,'20030']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_30',Cby,BUd,BUX,BXo,BUf,BcN,BUT,BUa]]],['2003',BFA+ANm+q+a,[[U,'Grenada 1953 /'+" "+ASj+' West Indies'+op,Cqu,BUd,BUX,BdN,BcJ,BVh,BUT,CVy,BUj,BUm,[B,K,'2003']]],[[U,'Grenada_1953_British_West_Indies_Grid',[S,'GCS_Grenada 1953',[V,Agy,BVV],BUU,BUW],BUd,BUX,BdN,BcJ,BVh,BUT,BUa]]],['20029',AxI+' +k=1'+AsY+AqC,[[U,Ajf+' /'+AW+' zone 29',Cla,BUd,BUX,BXj,BUf,Baq,BUT,CVy,[B,K,'20029']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_29',Cby,BUd,BUX,BXj,BUf,Baq,BUT,BUa]]],['20028',BGM+' +k=1'+AsX+AqC,[[U,Ajf+' /'+AW+' zone 28',Cla,BUd,BUX,BXW,BUf,Bbm,BUT,CVy,[B,K,'20028']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_28',Cby,BUd,BUX,BXW,BUf,Bbm,BUT,BUa]]],['20027',Axm+' +k=1'+AsW+AqC,[[U,Ajf+' /'+AW+' zone 27',Cla,BUd,BUX,BZl,BUf,Bbl,BUT,CVy,[B,K,'20027']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_27',Cby,BUd,BUX,BZl,BUf,Bbl,BUT,BUa]]],['20026',BGK+' +k=1'+AsV+AqC,[[U,Ajf+' /'+AW+' zone 26',Cla,BUd,BUX,BYu,BUf,Bbj,BUT,CVy,[B,K,'20026']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_26',Cby,BUd,BUX,BYu,BUf,Bbj,BUT,BUa]]],['20025',BGH+' +k=1'+AsU+AqC,[[U,Ajf+' /'+AW+' zone 25',Cla,BUd,BUX,BYW,BUf,Bbk,BUT,CVy,[B,K,'20025']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_25',Cby,BUd,BUX,BYW,BUf,Bbk,BUT,BUa]]],['20024',Axl+' +k=1'+BNR+AsK,[[U,Ajf+' /'+AW+' zone 24',Cla,BUd,BUX,BYK,BUf,Bgj,BUT,CVy,[B,K,'20024']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_24',Cby,BUd,BUX,BYK,BUf,Bgj,BUT,BUa]]],['20023',Ape+' +k=1'+AsT+AqC,[[U,Ajf+' /'+AW+' zone 23',Cla,BUd,BUX,BWd,BUf,BbT,BUT,CVy,[B,K,'20023']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_23',Cby,BUd,BUX,BWd,BUf,BbT,BUT,BUa]]],['20022',Apd+' +k=1'+AsS+AqC,[[U,Ajf+' /'+AW+' zone 22',Cla,BUd,BUX,BWQ,BUf,Baz,BUT,CVy,[B,K,'20022']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_22',Cby,BUd,BUX,BWQ,BUf,Baz,BUT,BUa]]],['20021',ApF+' +k=1'+AsR+AqC,[[U,Ajf+' /'+AW+' zone 21',Cla,BUd,BUX,BWU,BUf,BbS,BUT,CVy,[B,K,'20021']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_21',Cby,BUd,BUX,BWU,BUf,BbS,BUT,BUa]]],['20020',ApE+' +k=1'+AsQ+AqC,[[U,Ajf+' /'+AW+' zone 20',Cla,BUd,BUX,BWS,BUf,Bay,BUT,CVy,[B,K,'20020']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_20',Cby,BUd,BUX,BWS,BUf,Bay,BUT,BUa]]],['2002',BFA+ANn+q+a,[[U,'Dominica 1945 /'+" "+ASj+' West Indies'+op,Cqi,BUd,BUX,BdN,BcJ,BVh,BUT,CVy,BUj,BUm,[B,K,'2002']]],[[U,'Dominica_1945_British_West_Indies_Grid',[S,'GCS_Dominica 1945',[V,Ado,BVV],BUU,BUW],BUd,BUX,BdN,BcJ,BVh,BUT,BUa]]],['20019',ApX+' +k=1'+ArM+AqC,[[U,Ajf+' /'+AW+' zone 19',Cla,BUd,BUX,BWX,BUf,BbR,BUT,CVy,[B,K,'20019']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_19',Cby,BUd,BUX,BWX,BUf,BbR,BUT,BUa]]],['20018',ApW+' +k=1'+AsP+AqC,[[U,Ajf+' /'+AW+' zone 18',Cla,BUd,BUX,BWK,BUf,BbQ,BUT,CVy,[B,K,'20018']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_18',Cby,BUd,BUX,BWK,BUf,BbQ,BUT,BUa]]],['20017',Apc+' +k=1'+AwT+AqC,[[U,Ajf+' /'+AW+' zone 17',Cla,BUd,BUX,BWf,BUf,Bcf,BUT,CVy,[B,K,'20017']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_17',Cby,BUd,BUX,BWf,BUf,Bcf,BUT,BUa]]],['20016',Apb+' +k=1'+AwS+AqC,[[U,Ajf+' /'+AW+' zone 16',Cla,BUd,BUX,BWk,BUf,BbP,BUT,CVy,[B,K,'20016']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_16',Cby,BUd,BUX,BWk,BUf,BbP,BUT,BUa]]],['20015',Apa+' +k=1'+ArP+AqC,[[U,Ajf+' /'+AW+' zone 15',Cla,BUd,BUX,BXK,BUf,BbO,BUT,CVy,[B,K,'20015']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_15',Cby,BUd,BUX,BXK,BUf,BbO,BUT,BUa]]],['20014',ApZ+' +k=1'+ArO+AqC,[[U,Ajf+' /'+AW+' zone 14',Cla,BUd,BUX,BWz,BUf,Bad,BUT,CVy,[B,K,'20014']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_14',Cby,BUd,BUX,BWz,BUf,Bad,BUT,BUa]]],['20013',ApY+' +k=1'+ArN+AqC,[[U,Ajf+' /'+AW+' zone 13',Cla,BUd,BUX,BWs,BUf,Bax,BUT,CVy,[B,K,'20013']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_13',Cby,BUd,BUX,BWs,BUf,Bax,BUT,BUa]]],['20012',Axi+' +k=1'+BDX+AqC,[[U,Ajf+' /'+AW+' zone 12',Cla,BUd,BUX,BZh,BUf,Bgi,BUT,CVy,[B,K,'20012']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_12',Cby,BUd,BUX,BZh,BUf,Bgi,BUT,BUa]]],['20011',Axf+' +k=1'+BDW+AqC,[[U,Ajf+' /'+AW+' zone 11',Cla,BUd,BUX,BZN,BUf,Bdn,BUT,CVy,[B,K,'20011']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_11',Cby,BUd,BUX,BZN,BUf,Bdn,BUT,BUa]]],['20010',Axc+' +k=1'+BBh+AqC,[[U,Ajf+' /'+AW+' zone 10',Cla,BUd,BUX,BXz,BUf,Bhd,BUT,CVy,[B,K,'20010']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_10',Cby,BUd,BUX,BXz,BUf,Bhd,BUT,BUa]]],['2001',BFA+ANo+q+a,[[U,'Antigua 1943 /'+" "+ASj+' West Indies'+op,Cqt,BUd,BUX,BdN,BcJ,BVh,BUT,CVy,BUj,BUm,[B,K,'2001']]],[[U,'Antigua_1943_British_West_Indies_Grid',[S,'GCS_Antigua 1943',[V,Agz,BVV],BUU,BUW],BUd,BUX,BdN,BcJ,BVh,BUT,BUa]]],['20009',AuF+' +k=1'+AwU+AqC,[[U,Ajf+' /'+AW+' zone 9',Cla,BUd,BUX,BWt,BUf,Bha,BUT,CVy,[B,K,'20009']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_9',Cby,BUd,BUX,BWt,BUf,Bha,BUT,BUa]]],['20008',AtF+' +k=1'+AwR+AqC,[[U,Ajf+' /'+AW+' zone 8',Cla,BUd,BUX,BWe,BUf,BhY,BUT,CVy,[B,K,'20008']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_8',Cby,BUd,BUX,BWe,BUf,BhY,BUT,BUa]]],['20007',AsG+' +k=1'+ApC+AqC,[[U,Ajf+' /'+AW+' zone 7',Cla,BUd,BUX,BWn,BUf,BbK,BUT,CVy,[B,K,'20007']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_7',Cby,BUd,BUX,BWn,BUf,BbK,BUT,BUa]]],['20006',Aqn+' +k=1'+ArU+AqC,[[U,Ajf+' /'+AW+' zone 6',Cla,BUd,BUX,BWg,BUf,BdL,BUT,CVy,[B,K,'20006']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_6',Cby,BUd,BUX,BWg,BUf,BdL,BUT,BUa]]],['20005',Apz+' +k=1'+AmY+AqC,[[U,Ajf+' /'+AW+' zone 5',Cla,BUd,BUX,BWP,BUf,BYv,BUT,CVy,[B,K,'20005']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_5',Cby,BUd,BUX,BWP,BUf,BYv,BUT,BUa]]],['20004',ApT+' +k=1'+Alz+AqC,[[U,Ajf+' /'+AW+' zone 4',Cla,BUd,BUX,BWR,BUf,BYJ,BUT,CVy,[B,K,'20004']]],[[U,'Pulkovo_1995_Gauss_Kruger_zone_4',Cby,BUd,BUX,BWR,BUf,BYJ,BUT,BUa]]],['2000',AuD+AlC+BJc,[[U,'Anguilla 1957 /'+" "+ASj+' West Indies'+op,Cqh,BUd,BUX,BdN,BcJ,BVh,BUT,CVy,BUj,BUm,[B,K,'2000']]],[[U,'Anguilla_1957_British_West_Indies_Grid',[S,'GCS_Anguilla 1957',[V,Adp,BVV],BUU,BUW],BUd,BUX,BdN,BcJ,BVh,BUT,BUa]]],['3587',BQX+c+q+a,[[U,AL+' /'+BDF,ClW,BVG,BiB,BiA,Bhz,BaB,Bly,BUT,CVy,BUl,BUk,[B,K,'3587']]],[[U,'NAD83_NSRS2007_Michigan_Central',Cbq,BVD,BiB,BiA,Bhz,BaB,Bly,BUT,BUa]]],['32633',AmO+Akk,[[U,'WGS 84 / UTM zone 33N',ClU,BUd,BUX,BWH,BUg,BUc,BUT,CVy,BUj,BUm,[B,K,'32633']]],[[U,'WGS_1984_UTM_Zone_33N',Cbp,BUd,BUX,BWH,BUg,BUc,BUT,BUa]]],['4812',Asl+' +k=1'+AyW,[Csh],[Cpk]],['4404',AjX+' +lon_0=-159'+Axo,[Csj],[CpZ]],['4217',AxI+AyF,[Csi],[CpY]]]
.reduce((acc, item, i, arr) => {
  acc["EPSG:" + item[0]] = {
    proj4: item[1],
    wkt: wktcrs.unparse(item[2]).data,
    esriwkt: wktcrs.unparse(item[3]).data
  }
  return acc;
}, {});

},{"wkt-crs":27}],21:[function(require,module,exports){
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.proj4 = factory());
}(this, (function () { 'use strict';

    var globals = function(defs) {
      defs('EPSG:4326', "+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees");
      defs('EPSG:4269', "+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees");
      defs('EPSG:3857', "+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs");

      defs.WGS84 = defs['EPSG:4326'];
      defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857
      defs.GOOGLE = defs['EPSG:3857'];
      defs['EPSG:900913'] = defs['EPSG:3857'];
      defs['EPSG:102113'] = defs['EPSG:3857'];
    };

    var PJD_3PARAM = 1;
    var PJD_7PARAM = 2;
    var PJD_GRIDSHIFT = 3;
    var PJD_WGS84 = 4; // WGS84 or equivalent
    var PJD_NODATUM = 5; // WGS84 or equivalent
    var SRS_WGS84_SEMIMAJOR = 6378137.0;  // only used in grid shift transforms
    var SRS_WGS84_SEMIMINOR = 6356752.314;  // only used in grid shift transforms
    var SRS_WGS84_ESQUARED = 0.0066943799901413165; // only used in grid shift transforms
    var SEC_TO_RAD = 4.84813681109535993589914102357e-6;
    var HALF_PI = Math.PI/2;
    // ellipoid pj_set_ell.c
    var SIXTH = 0.1666666666666666667;
    /* 1/6 */
    var RA4 = 0.04722222222222222222;
    /* 17/360 */
    var RA6 = 0.02215608465608465608;
    var EPSLN = 1.0e-10;
    // you'd think you could use Number.EPSILON above but that makes
    // Mollweide get into an infinate loop.

    var D2R = 0.01745329251994329577;
    var R2D = 57.29577951308232088;
    var FORTPI = Math.PI/4;
    var TWO_PI = Math.PI * 2;
    // SPI is slightly greater than Math.PI, so values that exceed the -180..180
    // degree range by a tiny amount don't get wrapped. This prevents points that
    // have drifted from their original location along the 180th meridian (due to
    // floating point error) from changing their sign.
    var SPI = 3.14159265359;

    var exports$1 = {};
    exports$1.greenwich = 0.0; //"0dE",
    exports$1.lisbon = -9.131906111111; //"9d07'54.862\"W",
    exports$1.paris = 2.337229166667; //"2d20'14.025\"E",
    exports$1.bogota = -74.080916666667; //"74d04'51.3\"W",
    exports$1.madrid = -3.687938888889; //"3d41'16.58\"W",
    exports$1.rome = 12.452333333333; //"12d27'8.4\"E",
    exports$1.bern = 7.439583333333; //"7d26'22.5\"E",
    exports$1.jakarta = 106.807719444444; //"106d48'27.79\"E",
    exports$1.ferro = -17.666666666667; //"17d40'W",
    exports$1.brussels = 4.367975; //"4d22'4.71\"E",
    exports$1.stockholm = 18.058277777778; //"18d3'29.8\"E",
    exports$1.athens = 23.7163375; //"23d42'58.815\"E",
    exports$1.oslo = 10.722916666667; //"10d43'22.5\"E"

    var units = {
      ft: {to_meter: 0.3048},
      'us-ft': {to_meter: 1200 / 3937}
    };

    var ignoredChar = /[\s_\-\/\(\)]/g;
    function match(obj, key) {
      if (obj[key]) {
        return obj[key];
      }
      var keys = Object.keys(obj);
      var lkey = key.toLowerCase().replace(ignoredChar, '');
      var i = -1;
      var testkey, processedKey;
      while (++i < keys.length) {
        testkey = keys[i];
        processedKey = testkey.toLowerCase().replace(ignoredChar, '');
        if (processedKey === lkey) {
          return obj[testkey];
        }
      }
    }

    var parseProj = function(defData) {
      var self = {};
      var paramObj = defData.split('+').map(function(v) {
        return v.trim();
      }).filter(function(a) {
        return a;
      }).reduce(function(p, a) {
        var split = a.split('=');
        split.push(true);
        p[split[0].toLowerCase()] = split[1];
        return p;
      }, {});
      var paramName, paramVal, paramOutname;
      var params = {
        proj: 'projName',
        datum: 'datumCode',
        rf: function(v) {
          self.rf = parseFloat(v);
        },
        lat_0: function(v) {
          self.lat0 = v * D2R;
        },
        lat_1: function(v) {
          self.lat1 = v * D2R;
        },
        lat_2: function(v) {
          self.lat2 = v * D2R;
        },
        lat_ts: function(v) {
          self.lat_ts = v * D2R;
        },
        lon_0: function(v) {
          self.long0 = v * D2R;
        },
        lon_1: function(v) {
          self.long1 = v * D2R;
        },
        lon_2: function(v) {
          self.long2 = v * D2R;
        },
        alpha: function(v) {
          self.alpha = parseFloat(v) * D2R;
        },
        gamma: function(v) {
          self.rectified_grid_angle = parseFloat(v);
        },
        lonc: function(v) {
          self.longc = v * D2R;
        },
        x_0: function(v) {
          self.x0 = parseFloat(v);
        },
        y_0: function(v) {
          self.y0 = parseFloat(v);
        },
        k_0: function(v) {
          self.k0 = parseFloat(v);
        },
        k: function(v) {
          self.k0 = parseFloat(v);
        },
        a: function(v) {
          self.a = parseFloat(v);
        },
        b: function(v) {
          self.b = parseFloat(v);
        },
        r_a: function() {
          self.R_A = true;
        },
        zone: function(v) {
          self.zone = parseInt(v, 10);
        },
        south: function() {
          self.utmSouth = true;
        },
        towgs84: function(v) {
          self.datum_params = v.split(",").map(function(a) {
            return parseFloat(a);
          });
        },
        to_meter: function(v) {
          self.to_meter = parseFloat(v);
        },
        units: function(v) {
          self.units = v;
          var unit = match(units, v);
          if (unit) {
            self.to_meter = unit.to_meter;
          }
        },
        from_greenwich: function(v) {
          self.from_greenwich = v * D2R;
        },
        pm: function(v) {
          var pm = match(exports$1, v);
          self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;
        },
        nadgrids: function(v) {
          if (v === '@null') {
            self.datumCode = 'none';
          }
          else {
            self.nadgrids = v;
          }
        },
        axis: function(v) {
          var legalAxis = "ewnsud";
          if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {
            self.axis = v;
          }
        },
        approx: function() {
          self.approx = true;
        }
      };
      for (paramName in paramObj) {
        paramVal = paramObj[paramName];
        if (paramName in params) {
          paramOutname = params[paramName];
          if (typeof paramOutname === 'function') {
            paramOutname(paramVal);
          }
          else {
            self[paramOutname] = paramVal;
          }
        }
        else {
          self[paramName] = paramVal;
        }
      }
      if(typeof self.datumCode === 'string' && self.datumCode !== "WGS84"){
        self.datumCode = self.datumCode.toLowerCase();
      }
      return self;
    };

    var NEUTRAL = 1;
    var KEYWORD = 2;
    var NUMBER = 3;
    var QUOTED = 4;
    var AFTERQUOTE = 5;
    var ENDED = -1;
    var whitespace = /\s/;
    var latin = /[A-Za-z]/;
    var keyword = /[A-Za-z84]/;
    var endThings = /[,\]]/;
    var digets = /[\d\.E\-\+]/;
    // const ignoredChar = /[\s_\-\/\(\)]/g;
    function Parser(text) {
      if (typeof text !== 'string') {
        throw new Error('not a string');
      }
      this.text = text.trim();
      this.level = 0;
      this.place = 0;
      this.root = null;
      this.stack = [];
      this.currentObject = null;
      this.state = NEUTRAL;
    }
    Parser.prototype.readCharicter = function() {
      var char = this.text[this.place++];
      if (this.state !== QUOTED) {
        while (whitespace.test(char)) {
          if (this.place >= this.text.length) {
            return;
          }
          char = this.text[this.place++];
        }
      }
      switch (this.state) {
        case NEUTRAL:
          return this.neutral(char);
        case KEYWORD:
          return this.keyword(char)
        case QUOTED:
          return this.quoted(char);
        case AFTERQUOTE:
          return this.afterquote(char);
        case NUMBER:
          return this.number(char);
        case ENDED:
          return;
      }
    };
    Parser.prototype.afterquote = function(char) {
      if (char === '"') {
        this.word += '"';
        this.state = QUOTED;
        return;
      }
      if (endThings.test(char)) {
        this.word = this.word.trim();
        this.afterItem(char);
        return;
      }
      throw new Error('havn\'t handled "' +char + '" in afterquote yet, index ' + this.place);
    };
    Parser.prototype.afterItem = function(char) {
      if (char === ',') {
        if (this.word !== null) {
          this.currentObject.push(this.word);
        }
        this.word = null;
        this.state = NEUTRAL;
        return;
      }
      if (char === ']') {
        this.level--;
        if (this.word !== null) {
          this.currentObject.push(this.word);
          this.word = null;
        }
        this.state = NEUTRAL;
        this.currentObject = this.stack.pop();
        if (!this.currentObject) {
          this.state = ENDED;
        }

        return;
      }
    };
    Parser.prototype.number = function(char) {
      if (digets.test(char)) {
        this.word += char;
        return;
      }
      if (endThings.test(char)) {
        this.word = parseFloat(this.word);
        this.afterItem(char);
        return;
      }
      throw new Error('havn\'t handled "' +char + '" in number yet, index ' + this.place);
    };
    Parser.prototype.quoted = function(char) {
      if (char === '"') {
        this.state = AFTERQUOTE;
        return;
      }
      this.word += char;
      return;
    };
    Parser.prototype.keyword = function(char) {
      if (keyword.test(char)) {
        this.word += char;
        return;
      }
      if (char === '[') {
        var newObjects = [];
        newObjects.push(this.word);
        this.level++;
        if (this.root === null) {
          this.root = newObjects;
        } else {
          this.currentObject.push(newObjects);
        }
        this.stack.push(this.currentObject);
        this.currentObject = newObjects;
        this.state = NEUTRAL;
        return;
      }
      if (endThings.test(char)) {
        this.afterItem(char);
        return;
      }
      throw new Error('havn\'t handled "' +char + '" in keyword yet, index ' + this.place);
    };
    Parser.prototype.neutral = function(char) {
      if (latin.test(char)) {
        this.word = char;
        this.state = KEYWORD;
        return;
      }
      if (char === '"') {
        this.word = '';
        this.state = QUOTED;
        return;
      }
      if (digets.test(char)) {
        this.word = char;
        this.state = NUMBER;
        return;
      }
      if (endThings.test(char)) {
        this.afterItem(char);
        return;
      }
      throw new Error('havn\'t handled "' +char + '" in neutral yet, index ' + this.place);
    };
    Parser.prototype.output = function() {
      while (this.place < this.text.length) {
        this.readCharicter();
      }
      if (this.state === ENDED) {
        return this.root;
      }
      throw new Error('unable to parse string "' +this.text + '". State is ' + this.state);
    };

    function parseString(txt) {
      var parser = new Parser(txt);
      return parser.output();
    }

    function mapit(obj, key, value) {
      if (Array.isArray(key)) {
        value.unshift(key);
        key = null;
      }
      var thing = key ? {} : obj;

      var out = value.reduce(function(newObj, item) {
        sExpr(item, newObj);
        return newObj
      }, thing);
      if (key) {
        obj[key] = out;
      }
    }

    function sExpr(v, obj) {
      if (!Array.isArray(v)) {
        obj[v] = true;
        return;
      }
      var key = v.shift();
      if (key === 'PARAMETER') {
        key = v.shift();
      }
      if (v.length === 1) {
        if (Array.isArray(v[0])) {
          obj[key] = {};
          sExpr(v[0], obj[key]);
          return;
        }
        obj[key] = v[0];
        return;
      }
      if (!v.length) {
        obj[key] = true;
        return;
      }
      if (key === 'TOWGS84') {
        obj[key] = v;
        return;
      }
      if (key === 'AXIS') {
        if (!(key in obj)) {
          obj[key] = [];
        }
        obj[key].push(v);
        return;
      }
      if (!Array.isArray(key)) {
        obj[key] = {};
      }

      var i;
      switch (key) {
        case 'UNIT':
        case 'PRIMEM':
        case 'VERT_DATUM':
          obj[key] = {
            name: v[0].toLowerCase(),
            convert: v[1]
          };
          if (v.length === 3) {
            sExpr(v[2], obj[key]);
          }
          return;
        case 'SPHEROID':
        case 'ELLIPSOID':
          obj[key] = {
            name: v[0],
            a: v[1],
            rf: v[2]
          };
          if (v.length === 4) {
            sExpr(v[3], obj[key]);
          }
          return;
        case 'PROJECTEDCRS':
        case 'PROJCRS':
        case 'GEOGCS':
        case 'GEOCCS':
        case 'PROJCS':
        case 'LOCAL_CS':
        case 'GEODCRS':
        case 'GEODETICCRS':
        case 'GEODETICDATUM':
        case 'EDATUM':
        case 'ENGINEERINGDATUM':
        case 'VERT_CS':
        case 'VERTCRS':
        case 'VERTICALCRS':
        case 'COMPD_CS':
        case 'COMPOUNDCRS':
        case 'ENGINEERINGCRS':
        case 'ENGCRS':
        case 'FITTED_CS':
        case 'LOCAL_DATUM':
        case 'DATUM':
          v[0] = ['name', v[0]];
          mapit(obj, key, v);
          return;
        default:
          i = -1;
          while (++i < v.length) {
            if (!Array.isArray(v[i])) {
              return sExpr(v, obj[key]);
            }
          }
          return mapit(obj, key, v);
      }
    }

    var D2R$1 = 0.01745329251994329577;
    function rename(obj, params) {
      var outName = params[0];
      var inName = params[1];
      if (!(outName in obj) && (inName in obj)) {
        obj[outName] = obj[inName];
        if (params.length === 3) {
          obj[outName] = params[2](obj[outName]);
        }
      }
    }

    function d2r(input) {
      return input * D2R$1;
    }

    function cleanWKT(wkt) {
      if (wkt.type === 'GEOGCS') {
        wkt.projName = 'longlat';
      } else if (wkt.type === 'LOCAL_CS') {
        wkt.projName = 'identity';
        wkt.local = true;
      } else {
        if (typeof wkt.PROJECTION === 'object') {
          wkt.projName = Object.keys(wkt.PROJECTION)[0];
        } else {
          wkt.projName = wkt.PROJECTION;
        }
      }
      if (wkt.AXIS) {
        var axisOrder = '';
        for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {
          var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];
          if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {
            axisOrder += 'n';
          } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {
            axisOrder += 's';
          } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {
            axisOrder += 'e';
          } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {
            axisOrder += 'w';
          }
        }
        if (axisOrder.length === 2) {
          axisOrder += 'u';
        }
        if (axisOrder.length === 3) {
          wkt.axis = axisOrder;
        }
      }
      if (wkt.UNIT) {
        wkt.units = wkt.UNIT.name.toLowerCase();
        if (wkt.units === 'metre') {
          wkt.units = 'meter';
        }
        if (wkt.UNIT.convert) {
          if (wkt.type === 'GEOGCS') {
            if (wkt.DATUM && wkt.DATUM.SPHEROID) {
              wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;
            }
          } else {
            wkt.to_meter = wkt.UNIT.convert;
          }
        }
      }
      var geogcs = wkt.GEOGCS;
      if (wkt.type === 'GEOGCS') {
        geogcs = wkt;
      }
      if (geogcs) {
        //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){
        //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;
        //}
        if (geogcs.DATUM) {
          wkt.datumCode = geogcs.DATUM.name.toLowerCase();
        } else {
          wkt.datumCode = geogcs.name.toLowerCase();
        }
        if (wkt.datumCode.slice(0, 2) === 'd_') {
          wkt.datumCode = wkt.datumCode.slice(2);
        }
        if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {
          wkt.datumCode = 'nzgd49';
        }
        if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {
          if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {
            wkt.sphere = true;
          }
          wkt.datumCode = 'wgs84';
        }
        if (wkt.datumCode.slice(-6) === '_ferro') {
          wkt.datumCode = wkt.datumCode.slice(0, - 6);
        }
        if (wkt.datumCode.slice(-8) === '_jakarta') {
          wkt.datumCode = wkt.datumCode.slice(0, - 8);
        }
        if (~wkt.datumCode.indexOf('belge')) {
          wkt.datumCode = 'rnb72';
        }
        if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {
          wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\_18/, 'clrk');
          if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {
            wkt.ellps = 'intl';
          }

          wkt.a = geogcs.DATUM.SPHEROID.a;
          wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);
        }

        if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {
          wkt.datum_params = geogcs.DATUM.TOWGS84;
        }
        if (~wkt.datumCode.indexOf('osgb_1936')) {
          wkt.datumCode = 'osgb36';
        }
        if (~wkt.datumCode.indexOf('osni_1952')) {
          wkt.datumCode = 'osni52';
        }
        if (~wkt.datumCode.indexOf('tm65')
          || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {
          wkt.datumCode = 'ire65';
        }
        if (wkt.datumCode === 'ch1903+') {
          wkt.datumCode = 'ch1903';
        }
        if (~wkt.datumCode.indexOf('israel')) {
          wkt.datumCode = 'isr93';
        }
      }
      if (wkt.b && !isFinite(wkt.b)) {
        wkt.b = wkt.a;
      }

      function toMeter(input) {
        var ratio = wkt.to_meter || 1;
        return input * ratio;
      }
      var renamer = function(a) {
        return rename(wkt, a);
      };
      var list = [
        ['standard_parallel_1', 'Standard_Parallel_1'],
        ['standard_parallel_1', 'Latitude of 1st standard parallel'],
        ['standard_parallel_2', 'Standard_Parallel_2'],
        ['standard_parallel_2', 'Latitude of 2nd standard parallel'],
        ['false_easting', 'False_Easting'],
        ['false_easting', 'False easting'],
        ['false-easting', 'Easting at false origin'],
        ['false_northing', 'False_Northing'],
        ['false_northing', 'False northing'],
        ['false_northing', 'Northing at false origin'],
        ['central_meridian', 'Central_Meridian'],
        ['central_meridian', 'Longitude of natural origin'],
        ['central_meridian', 'Longitude of false origin'],
        ['latitude_of_origin', 'Latitude_Of_Origin'],
        ['latitude_of_origin', 'Central_Parallel'],
        ['latitude_of_origin', 'Latitude of natural origin'],
        ['latitude_of_origin', 'Latitude of false origin'],
        ['scale_factor', 'Scale_Factor'],
        ['k0', 'scale_factor'],
        ['latitude_of_center', 'Latitude_Of_Center'],
        ['latitude_of_center', 'Latitude_of_center'],
        ['lat0', 'latitude_of_center', d2r],
        ['longitude_of_center', 'Longitude_Of_Center'],
        ['longitude_of_center', 'Longitude_of_center'],
        ['longc', 'longitude_of_center', d2r],
        ['x0', 'false_easting', toMeter],
        ['y0', 'false_northing', toMeter],
        ['long0', 'central_meridian', d2r],
        ['lat0', 'latitude_of_origin', d2r],
        ['lat0', 'standard_parallel_1', d2r],
        ['lat1', 'standard_parallel_1', d2r],
        ['lat2', 'standard_parallel_2', d2r],
        ['azimuth', 'Azimuth'],
        ['alpha', 'azimuth', d2r],
        ['srsCode', 'name']
      ];
      list.forEach(renamer);
      if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {
        wkt.long0 = wkt.longc;
      }
      if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {
        wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);
        wkt.lat_ts = wkt.lat1;
      }
    }
    var wkt = function(wkt) {
      var lisp = parseString(wkt);
      var type = lisp.shift();
      var name = lisp.shift();
      lisp.unshift(['name', name]);
      lisp.unshift(['type', type]);
      var obj = {};
      sExpr(lisp, obj);
      cleanWKT(obj);
      return obj;
    };

    function defs(name) {
      /*global console*/
      var that = this;
      if (arguments.length === 2) {
        var def = arguments[1];
        if (typeof def === 'string') {
          if (def.charAt(0) === '+') {
            defs[name] = parseProj(arguments[1]);
          }
          else {
            defs[name] = wkt(arguments[1]);
          }
        } else {
          defs[name] = def;
        }
      }
      else if (arguments.length === 1) {
        if (Array.isArray(name)) {
          return name.map(function(v) {
            if (Array.isArray(v)) {
              defs.apply(that, v);
            }
            else {
              defs(v);
            }
          });
        }
        else if (typeof name === 'string') {
          if (name in defs) {
            return defs[name];
          }
        }
        else if ('EPSG' in name) {
          defs['EPSG:' + name.EPSG] = name;
        }
        else if ('ESRI' in name) {
          defs['ESRI:' + name.ESRI] = name;
        }
        else if ('IAU2000' in name) {
          defs['IAU2000:' + name.IAU2000] = name;
        }
        else {
          console.log(name);
        }
        return;
      }


    }
    globals(defs);

    function testObj(code){
      return typeof code === 'string';
    }
    function testDef(code){
      return code in defs;
    }
    var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS'];
    function testWKT(code){
      return codeWords.some(function (word) {
        return code.indexOf(word) > -1;
      });
    }
    var codes = ['3857', '900913', '3785', '102113'];
    function checkMercator(item) {
      var auth = match(item, 'authority');
      if (!auth) {
        return;
      }
      var code = match(auth, 'epsg');
      return code && codes.indexOf(code) > -1;
    }
    function checkProjStr(item) {
      var ext = match(item, 'extension');
      if (!ext) {
        return;
      }
      return match(ext, 'proj4');
    }
    function testProj(code){
      return code[0] === '+';
    }
    function parse(code){
      if (testObj(code)) {
        //check to see if this is a WKT string
        if (testDef(code)) {
          return defs[code];
        }
        if (testWKT(code)) {
          var out = wkt(code);
          // test of spetial case, due to this being a very common and often malformed
          if (checkMercator(out)) {
            return defs['EPSG:3857'];
          }
          var maybeProjStr = checkProjStr(out);
          if (maybeProjStr) {
            return parseProj(maybeProjStr);
          }
          return out;
        }
        if (testProj(code)) {
          return parseProj(code);
        }
      }else{
        return code;
      }
    }

    var extend = function(destination, source) {
      destination = destination || {};
      var value, property;
      if (!source) {
        return destination;
      }
      for (property in source) {
        value = source[property];
        if (value !== undefined) {
          destination[property] = value;
        }
      }
      return destination;
    };

    var msfnz = function(eccent, sinphi, cosphi) {
      var con = eccent * sinphi;
      return cosphi / (Math.sqrt(1 - con * con));
    };

    var sign = function(x) {
      return x<0 ? -1 : 1;
    };

    var adjust_lon = function(x) {
      return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));
    };

    var tsfnz = function(eccent, phi, sinphi) {
      var con = eccent * sinphi;
      var com = 0.5 * eccent;
      con = Math.pow(((1 - con) / (1 + con)), com);
      return (Math.tan(0.5 * (HALF_PI - phi)) / con);
    };

    var phi2z = function(eccent, ts) {
      var eccnth = 0.5 * eccent;
      var con, dphi;
      var phi = HALF_PI - 2 * Math.atan(ts);
      for (var i = 0; i <= 15; i++) {
        con = eccent * Math.sin(phi);
        dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;
        phi += dphi;
        if (Math.abs(dphi) <= 0.0000000001) {
          return phi;
        }
      }
      //console.log("phi2z has NoConvergence");
      return -9999;
    };

    function init() {
      var con = this.b / this.a;
      this.es = 1 - con * con;
      if(!('x0' in this)){
        this.x0 = 0;
      }
      if(!('y0' in this)){
        this.y0 = 0;
      }
      this.e = Math.sqrt(this.es);
      if (this.lat_ts) {
        if (this.sphere) {
          this.k0 = Math.cos(this.lat_ts);
        }
        else {
          this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
        }
      }
      else {
        if (!this.k0) {
          if (this.k) {
            this.k0 = this.k;
          }
          else {
            this.k0 = 1;
          }
        }
      }
    }

    /* Mercator forward equations--mapping lat,long to x,y
      --------------------------------------------------*/

    function forward(p) {
      var lon = p.x;
      var lat = p.y;
      // convert to radians
      if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {
        return null;
      }

      var x, y;
      if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {
        return null;
      }
      else {
        if (this.sphere) {
          x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);
          y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));
        }
        else {
          var sinphi = Math.sin(lat);
          var ts = tsfnz(this.e, lat, sinphi);
          x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);
          y = this.y0 - this.a * this.k0 * Math.log(ts);
        }
        p.x = x;
        p.y = y;
        return p;
      }
    }

    /* Mercator inverse equations--mapping x,y to lat/long
      --------------------------------------------------*/
    function inverse(p) {

      var x = p.x - this.x0;
      var y = p.y - this.y0;
      var lon, lat;

      if (this.sphere) {
        lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));
      }
      else {
        var ts = Math.exp(-y / (this.a * this.k0));
        lat = phi2z(this.e, ts);
        if (lat === -9999) {
          return null;
        }
      }
      lon = adjust_lon(this.long0 + x / (this.a * this.k0));

      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$1 = ["Mercator", "Popular Visualisation Pseudo Mercator", "Mercator_1SP", "Mercator_Auxiliary_Sphere", "merc"];
    var merc = {
      init: init,
      forward: forward,
      inverse: inverse,
      names: names$1
    };

    function init$1() {
      //no-op for longlat
    }

    function identity(pt) {
      return pt;
    }
    var names$2 = ["longlat", "identity"];
    var longlat = {
      init: init$1,
      forward: identity,
      inverse: identity,
      names: names$2
    };

    var projs = [merc, longlat];
    var names = {};
    var projStore = [];

    function add(proj, i) {
      var len = projStore.length;
      if (!proj.names) {
        console.log(i);
        return true;
      }
      projStore[len] = proj;
      proj.names.forEach(function(n) {
        names[n.toLowerCase()] = len;
      });
      return this;
    }

    function get(name) {
      if (!name) {
        return false;
      }
      var n = name.toLowerCase();
      if (typeof names[n] !== 'undefined' && projStore[names[n]]) {
        return projStore[names[n]];
      }
    }

    function start() {
      projs.forEach(add);
    }
    var projections = {
      start: start,
      add: add,
      get: get
    };

    var exports$2 = {};
    exports$2.MERIT = {
      a: 6378137.0,
      rf: 298.257,
      ellipseName: "MERIT 1983"
    };

    exports$2.SGS85 = {
      a: 6378136.0,
      rf: 298.257,
      ellipseName: "Soviet Geodetic System 85"
    };

    exports$2.GRS80 = {
      a: 6378137.0,
      rf: 298.257222101,
      ellipseName: "GRS 1980(IUGG, 1980)"
    };

    exports$2.IAU76 = {
      a: 6378140.0,
      rf: 298.257,
      ellipseName: "IAU 1976"
    };

    exports$2.airy = {
      a: 6377563.396,
      b: 6356256.910,
      ellipseName: "Airy 1830"
    };

    exports$2.APL4 = {
      a: 6378137,
      rf: 298.25,
      ellipseName: "Appl. Physics. 1965"
    };

    exports$2.NWL9D = {
      a: 6378145.0,
      rf: 298.25,
      ellipseName: "Naval Weapons Lab., 1965"
    };

    exports$2.mod_airy = {
      a: 6377340.189,
      b: 6356034.446,
      ellipseName: "Modified Airy"
    };

    exports$2.andrae = {
      a: 6377104.43,
      rf: 300.0,
      ellipseName: "Andrae 1876 (Den., Iclnd.)"
    };

    exports$2.aust_SA = {
      a: 6378160.0,
      rf: 298.25,
      ellipseName: "Australian Natl & S. Amer. 1969"
    };

    exports$2.GRS67 = {
      a: 6378160.0,
      rf: 298.2471674270,
      ellipseName: "GRS 67(IUGG 1967)"
    };

    exports$2.bessel = {
      a: 6377397.155,
      rf: 299.1528128,
      ellipseName: "Bessel 1841"
    };

    exports$2.bess_nam = {
      a: 6377483.865,
      rf: 299.1528128,
      ellipseName: "Bessel 1841 (Namibia)"
    };

    exports$2.clrk66 = {
      a: 6378206.4,
      b: 6356583.8,
      ellipseName: "Clarke 1866"
    };

    exports$2.clrk80 = {
      a: 6378249.145,
      rf: 293.4663,
      ellipseName: "Clarke 1880 mod."
    };

    exports$2.clrk58 = {
      a: 6378293.645208759,
      rf: 294.2606763692654,
      ellipseName: "Clarke 1858"
    };

    exports$2.CPM = {
      a: 6375738.7,
      rf: 334.29,
      ellipseName: "Comm. des Poids et Mesures 1799"
    };

    exports$2.delmbr = {
      a: 6376428.0,
      rf: 311.5,
      ellipseName: "Delambre 1810 (Belgium)"
    };

    exports$2.engelis = {
      a: 6378136.05,
      rf: 298.2566,
      ellipseName: "Engelis 1985"
    };

    exports$2.evrst30 = {
      a: 6377276.345,
      rf: 300.8017,
      ellipseName: "Everest 1830"
    };

    exports$2.evrst48 = {
      a: 6377304.063,
      rf: 300.8017,
      ellipseName: "Everest 1948"
    };

    exports$2.evrst56 = {
      a: 6377301.243,
      rf: 300.8017,
      ellipseName: "Everest 1956"
    };

    exports$2.evrst69 = {
      a: 6377295.664,
      rf: 300.8017,
      ellipseName: "Everest 1969"
    };

    exports$2.evrstSS = {
      a: 6377298.556,
      rf: 300.8017,
      ellipseName: "Everest (Sabah & Sarawak)"
    };

    exports$2.fschr60 = {
      a: 6378166.0,
      rf: 298.3,
      ellipseName: "Fischer (Mercury Datum) 1960"
    };

    exports$2.fschr60m = {
      a: 6378155.0,
      rf: 298.3,
      ellipseName: "Fischer 1960"
    };

    exports$2.fschr68 = {
      a: 6378150.0,
      rf: 298.3,
      ellipseName: "Fischer 1968"
    };

    exports$2.helmert = {
      a: 6378200.0,
      rf: 298.3,
      ellipseName: "Helmert 1906"
    };

    exports$2.hough = {
      a: 6378270.0,
      rf: 297.0,
      ellipseName: "Hough"
    };

    exports$2.intl = {
      a: 6378388.0,
      rf: 297.0,
      ellipseName: "International 1909 (Hayford)"
    };

    exports$2.kaula = {
      a: 6378163.0,
      rf: 298.24,
      ellipseName: "Kaula 1961"
    };

    exports$2.lerch = {
      a: 6378139.0,
      rf: 298.257,
      ellipseName: "Lerch 1979"
    };

    exports$2.mprts = {
      a: 6397300.0,
      rf: 191.0,
      ellipseName: "Maupertius 1738"
    };

    exports$2.new_intl = {
      a: 6378157.5,
      b: 6356772.2,
      ellipseName: "New International 1967"
    };

    exports$2.plessis = {
      a: 6376523.0,
      rf: 6355863.0,
      ellipseName: "Plessis 1817 (France)"
    };

    exports$2.krass = {
      a: 6378245.0,
      rf: 298.3,
      ellipseName: "Krassovsky, 1942"
    };

    exports$2.SEasia = {
      a: 6378155.0,
      b: 6356773.3205,
      ellipseName: "Southeast Asia"
    };

    exports$2.walbeck = {
      a: 6376896.0,
      b: 6355834.8467,
      ellipseName: "Walbeck"
    };

    exports$2.WGS60 = {
      a: 6378165.0,
      rf: 298.3,
      ellipseName: "WGS 60"
    };

    exports$2.WGS66 = {
      a: 6378145.0,
      rf: 298.25,
      ellipseName: "WGS 66"
    };

    exports$2.WGS7 = {
      a: 6378135.0,
      rf: 298.26,
      ellipseName: "WGS 72"
    };

    var WGS84 = exports$2.WGS84 = {
      a: 6378137.0,
      rf: 298.257223563,
      ellipseName: "WGS 84"
    };

    exports$2.sphere = {
      a: 6370997.0,
      b: 6370997.0,
      ellipseName: "Normal Sphere (r=6370997)"
    };

    function eccentricity(a, b, rf, R_A) {
      var a2 = a * a; // used in geocentric
      var b2 = b * b; // used in geocentric
      var es = (a2 - b2) / a2; // e ^ 2
      var e = 0;
      if (R_A) {
        a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));
        a2 = a * a;
        es = 0;
      } else {
        e = Math.sqrt(es); // eccentricity
      }
      var ep2 = (a2 - b2) / b2; // used in geocentric
      return {
        es: es,
        e: e,
        ep2: ep2
      };
    }
    function sphere(a, b, rf, ellps, sphere) {
      if (!a) { // do we have an ellipsoid?
        var ellipse = match(exports$2, ellps);
        if (!ellipse) {
          ellipse = WGS84;
        }
        a = ellipse.a;
        b = ellipse.b;
        rf = ellipse.rf;
      }

      if (rf && !b) {
        b = (1.0 - 1.0 / rf) * a;
      }
      if (rf === 0 || Math.abs(a - b) < EPSLN) {
        sphere = true;
        b = a;
      }
      return {
        a: a,
        b: b,
        rf: rf,
        sphere: sphere
      };
    }

    var exports$3 = {};
    exports$3.wgs84 = {
      towgs84: "0,0,0",
      ellipse: "WGS84",
      datumName: "WGS84"
    };

    exports$3.ch1903 = {
      towgs84: "674.374,15.056,405.346",
      ellipse: "bessel",
      datumName: "swiss"
    };

    exports$3.ggrs87 = {
      towgs84: "-199.87,74.79,246.62",
      ellipse: "GRS80",
      datumName: "Greek_Geodetic_Reference_System_1987"
    };

    exports$3.nad83 = {
      towgs84: "0,0,0",
      ellipse: "GRS80",
      datumName: "North_American_Datum_1983"
    };

    exports$3.nad27 = {
      nadgrids: "@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",
      ellipse: "clrk66",
      datumName: "North_American_Datum_1927"
    };

    exports$3.potsdam = {
      towgs84: "598.1,73.7,418.2,0.202,0.045,-2.455,6.7",
      ellipse: "bessel",
      datumName: "Potsdam Rauenberg 1950 DHDN"
    };

    exports$3.carthage = {
      towgs84: "-263.0,6.0,431.0",
      ellipse: "clark80",
      datumName: "Carthage 1934 Tunisia"
    };

    exports$3.hermannskogel = {
      towgs84: "577.326,90.129,463.919,5.137,1.474,5.297,2.4232",
      ellipse: "bessel",
      datumName: "Hermannskogel"
    };

    exports$3.osni52 = {
      towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
      ellipse: "airy",
      datumName: "Irish National"
    };

    exports$3.ire65 = {
      towgs84: "482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",
      ellipse: "mod_airy",
      datumName: "Ireland 1965"
    };

    exports$3.rassadiran = {
      towgs84: "-133.63,-157.5,-158.62",
      ellipse: "intl",
      datumName: "Rassadiran"
    };

    exports$3.nzgd49 = {
      towgs84: "59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",
      ellipse: "intl",
      datumName: "New Zealand Geodetic Datum 1949"
    };

    exports$3.osgb36 = {
      towgs84: "446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",
      ellipse: "airy",
      datumName: "Airy 1830"
    };

    exports$3.s_jtsk = {
      towgs84: "589,76,480",
      ellipse: 'bessel',
      datumName: 'S-JTSK (Ferro)'
    };

    exports$3.beduaram = {
      towgs84: '-106,-87,188',
      ellipse: 'clrk80',
      datumName: 'Beduaram'
    };

    exports$3.gunung_segara = {
      towgs84: '-403,684,41',
      ellipse: 'bessel',
      datumName: 'Gunung Segara Jakarta'
    };

    exports$3.rnb72 = {
      towgs84: "106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",
      ellipse: "intl",
      datumName: "Reseau National Belge 1972"
    };

    function datum(datumCode, datum_params, a, b, es, ep2, nadgrids) {
      var out = {};

      if (datumCode === undefined || datumCode === 'none') {
        out.datum_type = PJD_NODATUM;
      } else {
        out.datum_type = PJD_WGS84;
      }

      if (datum_params) {
        out.datum_params = datum_params.map(parseFloat);
        if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {
          out.datum_type = PJD_3PARAM;
        }
        if (out.datum_params.length > 3) {
          if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {
            out.datum_type = PJD_7PARAM;
            out.datum_params[3] *= SEC_TO_RAD;
            out.datum_params[4] *= SEC_TO_RAD;
            out.datum_params[5] *= SEC_TO_RAD;
            out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;
          }
        }
      }

      if (nadgrids) {
        out.datum_type = PJD_GRIDSHIFT;
        out.grids = nadgrids;
      }
      out.a = a; //datum object also uses these values
      out.b = b;
      out.es = es;
      out.ep2 = ep2;
      return out;
    }

    /**
     * Resources for details of NTv2 file formats:
     * - https://web.archive.org/web/20140127204822if_/http://www.mgs.gov.on.ca:80/stdprodconsume/groups/content/@mgs/@iandit/documents/resourcelist/stel02_047447.pdf
     * - http://mimaka.com/help/gs/html/004_NTV2%20Data%20Format.htm
     */

    var loadedNadgrids = {};

    /**
     * Load a binary NTv2 file (.gsb) to a key that can be used in a proj string like +nadgrids=<key>. Pass the NTv2 file
     * as an ArrayBuffer.
     */
    function nadgrid(key, data) {
      var view = new DataView(data);
      var isLittleEndian = detectLittleEndian(view);
      var header = readHeader(view, isLittleEndian);
      if (header.nSubgrids > 1) {
        console.log('Only single NTv2 subgrids are currently supported, subsequent sub grids are ignored');
      }
      var subgrids = readSubgrids(view, header, isLittleEndian);
      var nadgrid = {header: header, subgrids: subgrids};
      loadedNadgrids[key] = nadgrid;
      return nadgrid;
    }

    /**
     * Given a proj4 value for nadgrids, return an array of loaded grids
     */
    function getNadgrids(nadgrids) {
      // Format details: http://proj.maptools.org/gen_parms.html
      if (nadgrids === undefined) { return null; }
      var grids = nadgrids.split(',');
      return grids.map(parseNadgridString);
    }

    function parseNadgridString(value) {
      if (value.length === 0) {
        return null;
      }
      var optional = value[0] === '@';
      if (optional) {
        value = value.slice(1);
      }
      if (value === 'null') {
        return {name: 'null', mandatory: !optional, grid: null, isNull: true};
      }
      return {
        name: value,
        mandatory: !optional,
        grid: loadedNadgrids[value] || null,
        isNull: false
      };
    }

    function secondsToRadians(seconds) {
      return (seconds / 3600) * Math.PI / 180;
    }

    function detectLittleEndian(view) {
      var nFields = view.getInt32(8, false);
      if (nFields === 11) {
        return false;
      }
      nFields = view.getInt32(8, true);
      if (nFields !== 11) {
        console.warn('Failed to detect nadgrid endian-ness, defaulting to little-endian');
      }
      return true;
    }

    function readHeader(view, isLittleEndian) {
      return {
        nFields: view.getInt32(8, isLittleEndian),
        nSubgridFields: view.getInt32(24, isLittleEndian),
        nSubgrids: view.getInt32(40, isLittleEndian),
        shiftType: decodeString(view, 56, 56 + 8).trim(),
        fromSemiMajorAxis: view.getFloat64(120, isLittleEndian),
        fromSemiMinorAxis: view.getFloat64(136, isLittleEndian),
        toSemiMajorAxis: view.getFloat64(152, isLittleEndian),
        toSemiMinorAxis: view.getFloat64(168, isLittleEndian),
      };
    }

    function decodeString(view, start, end) {
      return String.fromCharCode.apply(null, new Uint8Array(view.buffer.slice(start, end)));
    }

    function readSubgrids(view, header, isLittleEndian) {
      var gridOffset = 176;
      var grids = [];
      for (var i = 0; i < header.nSubgrids; i++) {
        var subHeader = readGridHeader(view, gridOffset, isLittleEndian);
        var nodes = readGridNodes(view, gridOffset, subHeader, isLittleEndian);
        var lngColumnCount = Math.round(
          1 + (subHeader.upperLongitude - subHeader.lowerLongitude) / subHeader.longitudeInterval);
        var latColumnCount = Math.round(
          1 + (subHeader.upperLatitude - subHeader.lowerLatitude) / subHeader.latitudeInterval);
        // Proj4 operates on radians whereas the coordinates are in seconds in the grid
        grids.push({
          ll: [secondsToRadians(subHeader.lowerLongitude), secondsToRadians(subHeader.lowerLatitude)],
          del: [secondsToRadians(subHeader.longitudeInterval), secondsToRadians(subHeader.latitudeInterval)],
          lim: [lngColumnCount, latColumnCount],
          count: subHeader.gridNodeCount,
          cvs: mapNodes(nodes)
        });
      }
      return grids;
    }

    function mapNodes(nodes) {
      return nodes.map(function (r) {return [secondsToRadians(r.longitudeShift), secondsToRadians(r.latitudeShift)];});
    }

    function readGridHeader(view, offset, isLittleEndian) {
      return {
        name: decodeString(view, offset + 8, offset + 16).trim(),
        parent: decodeString(view, offset + 24, offset + 24 + 8).trim(),
        lowerLatitude: view.getFloat64(offset + 72, isLittleEndian),
        upperLatitude: view.getFloat64(offset + 88, isLittleEndian),
        lowerLongitude: view.getFloat64(offset + 104, isLittleEndian),
        upperLongitude: view.getFloat64(offset + 120, isLittleEndian),
        latitudeInterval: view.getFloat64(offset + 136, isLittleEndian),
        longitudeInterval: view.getFloat64(offset + 152, isLittleEndian),
        gridNodeCount: view.getInt32(offset + 168, isLittleEndian)
      };
    }

    function readGridNodes(view, offset, gridHeader, isLittleEndian) {
      var nodesOffset = offset + 176;
      var gridRecordLength = 16;
      var gridShiftRecords = [];
      for (var i = 0; i < gridHeader.gridNodeCount; i++) {
        var record = {
          latitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength, isLittleEndian),
          longitudeShift: view.getFloat32(nodesOffset + i * gridRecordLength + 4, isLittleEndian),
          latitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 8, isLittleEndian),
          longitudeAccuracy: view.getFloat32(nodesOffset + i * gridRecordLength + 12, isLittleEndian),
        };
        gridShiftRecords.push(record);
      }
      return gridShiftRecords;
    }

    function Projection(srsCode,callback) {
      if (!(this instanceof Projection)) {
        return new Projection(srsCode);
      }
      callback = callback || function(error){
        if(error){
          throw error;
        }
      };
      var json = parse(srsCode);
      if(typeof json !== 'object'){
        callback(srsCode);
        return;
      }
      var ourProj = Projection.projections.get(json.projName);
      if(!ourProj){
        callback(srsCode);
        return;
      }
      if (json.datumCode && json.datumCode !== 'none') {
        var datumDef = match(exports$3, json.datumCode);
        if (datumDef) {
          json.datum_params = json.datum_params || (datumDef.towgs84 ? datumDef.towgs84.split(',') : null);
          json.ellps = datumDef.ellipse;
          json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;
        }
      }
      json.k0 = json.k0 || 1.0;
      json.axis = json.axis || 'enu';
      json.ellps = json.ellps || 'wgs84';
      json.lat1 = json.lat1 || json.lat0; // Lambert_Conformal_Conic_1SP, for example, needs this

      var sphere_ = sphere(json.a, json.b, json.rf, json.ellps, json.sphere);
      var ecc = eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);
      var nadgrids = getNadgrids(json.nadgrids);
      var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2,
        nadgrids);

      extend(this, json); // transfer everything over from the projection because we don't know what we'll need
      extend(this, ourProj); // transfer all the methods from the projection

      // copy the 4 things over we calculated in deriveConstants.sphere
      this.a = sphere_.a;
      this.b = sphere_.b;
      this.rf = sphere_.rf;
      this.sphere = sphere_.sphere;

      // copy the 3 things we calculated in deriveConstants.eccentricity
      this.es = ecc.es;
      this.e = ecc.e;
      this.ep2 = ecc.ep2;

      // add in the datum object
      this.datum = datumObj;

      // init the projection
      this.init();

      // legecy callback from back in the day when it went to spatialreference.org
      callback(null, this);

    }
    Projection.projections = projections;
    Projection.projections.start();

    'use strict';
    function compareDatums(source, dest) {
      if (source.datum_type !== dest.datum_type) {
        return false; // false, datums are not equal
      } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {
        // the tolerance for es is to ensure that GRS80 and WGS84
        // are considered identical
        return false;
      } else if (source.datum_type === PJD_3PARAM) {
        return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);
      } else if (source.datum_type === PJD_7PARAM) {
        return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);
      } else {
        return true; // datums are equal
      }
    } // cs_compare_datums()

    /*
     * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates
     * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),
     * according to the current ellipsoid parameters.
     *
     *    Latitude  : Geodetic latitude in radians                     (input)
     *    Longitude : Geodetic longitude in radians                    (input)
     *    Height    : Geodetic height, in meters                       (input)
     *    X         : Calculated Geocentric X coordinate, in meters    (output)
     *    Y         : Calculated Geocentric Y coordinate, in meters    (output)
     *    Z         : Calculated Geocentric Z coordinate, in meters    (output)
     *
     */
    function geodeticToGeocentric(p, es, a) {
      var Longitude = p.x;
      var Latitude = p.y;
      var Height = p.z ? p.z : 0; //Z value not always supplied

      var Rn; /*  Earth radius at location  */
      var Sin_Lat; /*  Math.sin(Latitude)  */
      var Sin2_Lat; /*  Square of Math.sin(Latitude)  */
      var Cos_Lat; /*  Math.cos(Latitude)  */

      /*
       ** Don't blow up if Latitude is just a little out of the value
       ** range as it may just be a rounding issue.  Also removed longitude
       ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.
       */
      if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {
        Latitude = -HALF_PI;
      } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {
        Latitude = HALF_PI;
      } else if (Latitude < -HALF_PI) {
        /* Latitude out of range */
        //..reportError('geocent:lat out of range:' + Latitude);
        return { x: -Infinity, y: -Infinity, z: p.z };
      } else if (Latitude > HALF_PI) {
        /* Latitude out of range */
        return { x: Infinity, y: Infinity, z: p.z };
      }

      if (Longitude > Math.PI) {
        Longitude -= (2 * Math.PI);
      }
      Sin_Lat = Math.sin(Latitude);
      Cos_Lat = Math.cos(Latitude);
      Sin2_Lat = Sin_Lat * Sin_Lat;
      Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));
      return {
        x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),
        y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),
        z: ((Rn * (1 - es)) + Height) * Sin_Lat
      };
    } // cs_geodetic_to_geocentric()

    function geocentricToGeodetic(p, es, a, b) {
      /* local defintions and variables */
      /* end-criterium of loop, accuracy of sin(Latitude) */
      var genau = 1e-12;
      var genau2 = (genau * genau);
      var maxiter = 30;

      var P; /* distance between semi-minor axis and location */
      var RR; /* distance between center and location */
      var CT; /* sin of geocentric latitude */
      var ST; /* cos of geocentric latitude */
      var RX;
      var RK;
      var RN; /* Earth radius at location */
      var CPHI0; /* cos of start or old geodetic latitude in iterations */
      var SPHI0; /* sin of start or old geodetic latitude in iterations */
      var CPHI; /* cos of searched geodetic latitude */
      var SPHI; /* sin of searched geodetic latitude */
      var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */
      var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */

      var X = p.x;
      var Y = p.y;
      var Z = p.z ? p.z : 0.0; //Z value not always supplied
      var Longitude;
      var Latitude;
      var Height;

      P = Math.sqrt(X * X + Y * Y);
      RR = Math.sqrt(X * X + Y * Y + Z * Z);

      /*      special cases for latitude and longitude */
      if (P / a < genau) {

        /*  special case, if P=0. (X=0., Y=0.) */
        Longitude = 0.0;

        /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis
         *  of ellipsoid (=center of mass), Latitude becomes PI/2 */
        if (RR / a < genau) {
          Latitude = HALF_PI;
          Height = -b;
          return {
            x: p.x,
            y: p.y,
            z: p.z
          };
        }
      } else {
        /*  ellipsoidal (geodetic) longitude
         *  interval: -PI < Longitude <= +PI */
        Longitude = Math.atan2(Y, X);
      }

      /* --------------------------------------------------------------
       * Following iterative algorithm was developped by
       * "Institut for Erdmessung", University of Hannover, July 1988.
       * Internet: www.ife.uni-hannover.de
       * Iterative computation of CPHI,SPHI and Height.
       * Iteration of CPHI and SPHI to 10**-12 radian resp.
       * 2*10**-7 arcsec.
       * --------------------------------------------------------------
       */
      CT = Z / RR;
      ST = P / RR;
      RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);
      CPHI0 = ST * (1.0 - es) * RX;
      SPHI0 = CT * RX;
      iter = 0;

      /* loop to find sin(Latitude) resp. Latitude
       * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */
      do {
        iter++;
        RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);

        /*  ellipsoidal (geodetic) height */
        Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);

        RK = es * RN / (RN + Height);
        RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);
        CPHI = ST * (1.0 - RK) * RX;
        SPHI = CT * RX;
        SDPHI = SPHI * CPHI0 - CPHI * SPHI0;
        CPHI0 = CPHI;
        SPHI0 = SPHI;
      }
      while (SDPHI * SDPHI > genau2 && iter < maxiter);

      /*      ellipsoidal (geodetic) latitude */
      Latitude = Math.atan(SPHI / Math.abs(CPHI));
      return {
        x: Longitude,
        y: Latitude,
        z: Height
      };
    } // cs_geocentric_to_geodetic()

    /****************************************************************/
    // pj_geocentic_to_wgs84( p )
    //  p = point to transform in geocentric coordinates (x,y,z)


    /** point object, nothing fancy, just allows values to be
        passed back and forth by reference rather than by value.
        Other point classes may be used as long as they have
        x and y properties, which will get modified in the transform method.
    */
    function geocentricToWgs84(p, datum_type, datum_params) {

      if (datum_type === PJD_3PARAM) {
        // if( x[io] === HUGE_VAL )
        //    continue;
        return {
          x: p.x + datum_params[0],
          y: p.y + datum_params[1],
          z: p.z + datum_params[2],
        };
      } else if (datum_type === PJD_7PARAM) {
        var Dx_BF = datum_params[0];
        var Dy_BF = datum_params[1];
        var Dz_BF = datum_params[2];
        var Rx_BF = datum_params[3];
        var Ry_BF = datum_params[4];
        var Rz_BF = datum_params[5];
        var M_BF = datum_params[6];
        // if( x[io] === HUGE_VAL )
        //    continue;
        return {
          x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,
          y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,
          z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF
        };
      }
    } // cs_geocentric_to_wgs84

    /****************************************************************/
    // pj_geocentic_from_wgs84()
    //  coordinate system definition,
    //  point to transform in geocentric coordinates (x,y,z)
    function geocentricFromWgs84(p, datum_type, datum_params) {

      if (datum_type === PJD_3PARAM) {
        //if( x[io] === HUGE_VAL )
        //    continue;
        return {
          x: p.x - datum_params[0],
          y: p.y - datum_params[1],
          z: p.z - datum_params[2],
        };

      } else if (datum_type === PJD_7PARAM) {
        var Dx_BF = datum_params[0];
        var Dy_BF = datum_params[1];
        var Dz_BF = datum_params[2];
        var Rx_BF = datum_params[3];
        var Ry_BF = datum_params[4];
        var Rz_BF = datum_params[5];
        var M_BF = datum_params[6];
        var x_tmp = (p.x - Dx_BF) / M_BF;
        var y_tmp = (p.y - Dy_BF) / M_BF;
        var z_tmp = (p.z - Dz_BF) / M_BF;
        //if( x[io] === HUGE_VAL )
        //    continue;

        return {
          x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,
          y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,
          z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp
        };
      } //cs_geocentric_from_wgs84()
    }

    function checkParams(type) {
      return (type === PJD_3PARAM || type === PJD_7PARAM);
    }

    var datum_transform = function(source, dest, point) {
      // Short cut if the datums are identical.
      if (compareDatums(source, dest)) {
        return point; // in this case, zero is sucess,
        // whereas cs_compare_datums returns 1 to indicate TRUE
        // confusing, should fix this
      }

      // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest
      if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {
        return point;
      }

      // If this datum requires grid shifts, then apply it to geodetic coordinates.
      var source_a = source.a;
      var source_es = source.es;
      if (source.datum_type === PJD_GRIDSHIFT) {
        var gridShiftCode = applyGridShift(source, false, point);
        if (gridShiftCode !== 0) {
          return undefined;
        }
        source_a = SRS_WGS84_SEMIMAJOR;
        source_es = SRS_WGS84_ESQUARED;
      }

      var dest_a = dest.a;
      var dest_b = dest.b;
      var dest_es = dest.es;
      if (dest.datum_type === PJD_GRIDSHIFT) {
        dest_a = SRS_WGS84_SEMIMAJOR;
        dest_b = SRS_WGS84_SEMIMINOR;
        dest_es = SRS_WGS84_ESQUARED;
      }

      // Do we need to go through geocentric coordinates?
      if (source_es === dest_es && source_a === dest_a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {
        return point;
      }

      // Convert to geocentric coordinates.
      point = geodeticToGeocentric(point, source_es, source_a);
      // Convert between datums
      if (checkParams(source.datum_type)) {
        point = geocentricToWgs84(point, source.datum_type, source.datum_params);
      }
      if (checkParams(dest.datum_type)) {
        point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);
      }
      point = geocentricToGeodetic(point, dest_es, dest_a, dest_b);

      if (dest.datum_type === PJD_GRIDSHIFT) {
        var destGridShiftResult = applyGridShift(dest, true, point);
        if (destGridShiftResult !== 0) {
          return undefined;
        }
      }

      return point;
    };

    function applyGridShift(source, inverse, point) {
      if (source.grids === null || source.grids.length === 0) {
        console.log('Grid shift grids not found');
        return -1;
      }
      var input = {x: -point.x, y: point.y};
      var output = {x: Number.NaN, y: Number.NaN};
      var attemptedGrids = [];
      for (var i = 0; i < source.grids.length; i++) {
        var grid = source.grids[i];
        attemptedGrids.push(grid.name);
        if (grid.isNull) {
          output = input;
          break;
        }
        if (grid.grid === null) {
          if (grid.mandatory) {
            console.log("Unable to find mandatory grid '" + grid.name + "'");
            return -1;
          }
          continue;
        }
        var subgrid = grid.grid.subgrids[0];
        // skip tables that don't match our point at all
        var epsilon = (Math.abs(subgrid.del[1]) + Math.abs(subgrid.del[0])) / 10000.0;
        var minX = subgrid.ll[0] - epsilon;
        var minY = subgrid.ll[1] - epsilon;
        var maxX = subgrid.ll[0] + (subgrid.lim[0] - 1) * subgrid.del[0] + epsilon;
        var maxY = subgrid.ll[1] + (subgrid.lim[1] - 1) * subgrid.del[1] + epsilon;
        if (minY > input.y || minX > input.x || maxY < input.y || maxX < input.x ) {
          continue;
        }
        output = applySubgridShift(input, inverse, subgrid);
        if (!isNaN(output.x)) {
          break;
        }
      }
      if (isNaN(output.x)) {
        console.log("Failed to find a grid shift table for location '"+
          -input.x * R2D + " " + input.y * R2D + " tried: '" + attemptedGrids + "'");
        return -1;
      }
      point.x = -output.x;
      point.y = output.y;
      return 0;
    }

    function applySubgridShift(pin, inverse, ct) {
      var val = {x: Number.NaN, y: Number.NaN};
      if (isNaN(pin.x)) { return val; }
      var tb = {x: pin.x, y: pin.y};
      tb.x -= ct.ll[0];
      tb.y -= ct.ll[1];
      tb.x = adjust_lon(tb.x - Math.PI) + Math.PI;
      var t = nadInterpolate(tb, ct);
      if (inverse) {
        if (isNaN(t.x)) {
          return val;
        }
        t.x = tb.x - t.x;
        t.y = tb.y - t.y;
        var i = 9, tol = 1e-12;
        var dif, del;
        do {
          del = nadInterpolate(t, ct);
          if (isNaN(del.x)) {
            console.log("Inverse grid shift iteration failed, presumably at grid edge.  Using first approximation.");
            break;
          }
          dif = {x: tb.x - (del.x + t.x), y: tb.y - (del.y + t.y)};
          t.x += dif.x;
          t.y += dif.y;
        } while (i-- && Math.abs(dif.x) > tol && Math.abs(dif.y) > tol);
        if (i < 0) {
          console.log("Inverse grid shift iterator failed to converge.");
          return val;
        }
        val.x = adjust_lon(t.x + ct.ll[0]);
        val.y = t.y + ct.ll[1];
      } else {
        if (!isNaN(t.x)) {
          val.x = pin.x + t.x;
          val.y = pin.y + t.y;
        }
      }
      return val;
    }

    function nadInterpolate(pin, ct) {
      var t = {x: pin.x / ct.del[0], y: pin.y / ct.del[1]};
      var indx = {x: Math.floor(t.x), y: Math.floor(t.y)};
      var frct = {x: t.x - 1.0 * indx.x, y: t.y - 1.0 * indx.y};
      var val= {x: Number.NaN, y: Number.NaN};
      var inx;
      if (indx.x < 0 || indx.x >= ct.lim[0]) {
        return val;
      }
      if (indx.y < 0 || indx.y >= ct.lim[1]) {
        return val;
      }
      inx = (indx.y * ct.lim[0]) + indx.x;
      var f00 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};
      inx++;
      var f10= {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};
      inx += ct.lim[0];
      var f11 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};
      inx--;
      var f01 = {x: ct.cvs[inx][0], y: ct.cvs[inx][1]};
      var m11 = frct.x * frct.y, m10 = frct.x * (1.0 - frct.y),
        m00 = (1.0 - frct.x) * (1.0 - frct.y), m01 = (1.0 - frct.x) * frct.y;
      val.x = (m00 * f00.x + m10 * f10.x + m01 * f01.x + m11 * f11.x);
      val.y = (m00 * f00.y + m10 * f10.y + m01 * f01.y + m11 * f11.y);
      return val;
    }

    var adjust_axis = function(crs, denorm, point) {
      var xin = point.x,
        yin = point.y,
        zin = point.z || 0.0;
      var v, t, i;
      var out = {};
      for (i = 0; i < 3; i++) {
        if (denorm && i === 2 && point.z === undefined) {
          continue;
        }
        if (i === 0) {
          v = xin;
          if ("ew".indexOf(crs.axis[i]) !== -1) {
            t = 'x';
          } else {
            t = 'y';
          }

        }
        else if (i === 1) {
          v = yin;
          if ("ns".indexOf(crs.axis[i]) !== -1) {
            t = 'y';
          } else {
            t = 'x';
          }
        }
        else {
          v = zin;
          t = 'z';
        }
        switch (crs.axis[i]) {
        case 'e':
          out[t] = v;
          break;
        case 'w':
          out[t] = -v;
          break;
        case 'n':
          out[t] = v;
          break;
        case 's':
          out[t] = -v;
          break;
        case 'u':
          if (point[t] !== undefined) {
            out.z = v;
          }
          break;
        case 'd':
          if (point[t] !== undefined) {
            out.z = -v;
          }
          break;
        default:
          //console.log("ERROR: unknow axis ("+crs.axis[i]+") - check definition of "+crs.projName);
          return null;
        }
      }
      return out;
    };

    var toPoint = function (array){
      var out = {
        x: array[0],
        y: array[1]
      };
      if (array.length>2) {
        out.z = array[2];
      }
      if (array.length>3) {
        out.m = array[3];
      }
      return out;
    };

    var checkSanity = function (point) {
      checkCoord(point.x);
      checkCoord(point.y);
    };
    function checkCoord(num) {
      if (typeof Number.isFinite === 'function') {
        if (Number.isFinite(num)) {
          return;
        }
        throw new TypeError('coordinates must be finite numbers');
      }
      if (typeof num !== 'number' || num !== num || !isFinite(num)) {
        throw new TypeError('coordinates must be finite numbers');
      }
    }

    function checkNotWGS(source, dest) {
      return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');
    }

    function transform(source, dest, point, enforceAxis) {
      var wgs84;
      if (Array.isArray(point)) {
        point = toPoint(point);
      }
      checkSanity(point);
      // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84
      if (source.datum && dest.datum && checkNotWGS(source, dest)) {
        wgs84 = new Projection('WGS84');
        point = transform(source, wgs84, point, enforceAxis);
        source = wgs84;
      }
      // DGR, 2010/11/12
      if (enforceAxis && source.axis !== 'enu') {
        point = adjust_axis(source, false, point);
      }
      // Transform source points to long/lat, if they aren't already.
      if (source.projName === 'longlat') {
        point = {
          x: point.x * D2R,
          y: point.y * D2R,
          z: point.z || 0
        };
      } else {
        if (source.to_meter) {
          point = {
            x: point.x * source.to_meter,
            y: point.y * source.to_meter,
            z: point.z || 0
          };
        }
        point = source.inverse(point); // Convert Cartesian to longlat
        if (!point) {
          return;
        }
      }
      // Adjust for the prime meridian if necessary
      if (source.from_greenwich) {
        point.x += source.from_greenwich;
      }

      // Convert datums if needed, and if possible.
      point = datum_transform(source.datum, dest.datum, point);
      if (!point) {
        return;
      }

      // Adjust for the prime meridian if necessary
      if (dest.from_greenwich) {
        point = {
          x: point.x - dest.from_greenwich,
          y: point.y,
          z: point.z || 0
        };
      }

      if (dest.projName === 'longlat') {
        // convert radians to decimal degrees
        point = {
          x: point.x * R2D,
          y: point.y * R2D,
          z: point.z || 0
        };
      } else { // else project
        point = dest.forward(point);
        if (dest.to_meter) {
          point = {
            x: point.x / dest.to_meter,
            y: point.y / dest.to_meter,
            z: point.z || 0
          };
        }
      }

      // DGR, 2010/11/12
      if (enforceAxis && dest.axis !== 'enu') {
        return adjust_axis(dest, true, point);
      }

      return point;
    }

    var wgs84 = Projection('WGS84');

    function transformer(from, to, coords, enforceAxis) {
      var transformedArray, out, keys;
      if (Array.isArray(coords)) {
        transformedArray = transform(from, to, coords, enforceAxis) || {x: NaN, y: NaN};
        if (coords.length > 2) {
          if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {
            if (typeof transformedArray.z === 'number') {
              return [transformedArray.x, transformedArray.y, transformedArray.z].concat(coords.splice(3));
            } else {
              return [transformedArray.x, transformedArray.y, coords[2]].concat(coords.splice(3));
            }
          } else {
            return [transformedArray.x, transformedArray.y].concat(coords.splice(2));
          }
        } else {
          return [transformedArray.x, transformedArray.y];
        }
      } else {
        out = transform(from, to, coords, enforceAxis);
        keys = Object.keys(coords);
        if (keys.length === 2) {
          return out;
        }
        keys.forEach(function (key) {
          if ((typeof from.name !== 'undefined' && from.name === 'geocent') || (typeof to.name !== 'undefined' && to.name === 'geocent')) {
            if (key === 'x' || key === 'y' || key === 'z') {
              return;
            }
          } else {
            if (key === 'x' || key === 'y') {
              return;
            }
          }
          out[key] = coords[key];
        });
        return out;
      }
    }

    function checkProj(item) {
      if (item instanceof Projection) {
        return item;
      }
      if (item.oProj) {
        return item.oProj;
      }
      return Projection(item);
    }

    function proj4$1(fromProj, toProj, coord) {
      fromProj = checkProj(fromProj);
      var single = false;
      var obj;
      if (typeof toProj === 'undefined') {
        toProj = fromProj;
        fromProj = wgs84;
        single = true;
      } else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {
        coord = toProj;
        toProj = fromProj;
        fromProj = wgs84;
        single = true;
      }
      toProj = checkProj(toProj);
      if (coord) {
        return transformer(fromProj, toProj, coord);
      } else {
        obj = {
          forward: function (coords, enforceAxis) {
            return transformer(fromProj, toProj, coords, enforceAxis);
          },
          inverse: function (coords, enforceAxis) {
            return transformer(toProj, fromProj, coords, enforceAxis);
          }
        };
        if (single) {
          obj.oProj = toProj;
        }
        return obj;
      }
    }

    /**
     * UTM zones are grouped, and assigned to one of a group of 6
     * sets.
     *
     * {int} @private
     */
    var NUM_100K_SETS = 6;

    /**
     * The column letters (for easting) of the lower left value, per
     * set.
     *
     * {string} @private
     */
    var SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';

    /**
     * The row letters (for northing) of the lower left value, per
     * set.
     *
     * {string} @private
     */
    var SET_ORIGIN_ROW_LETTERS = 'AFAFAF';

    var A = 65; // A
    var I = 73; // I
    var O = 79; // O
    var V = 86; // V
    var Z = 90; // Z
    var mgrs = {
      forward: forward$1,
      inverse: inverse$1,
      toPoint: toPoint$1
    };
    /**
     * Conversion of lat/lon to MGRS.
     *
     * @param {object} ll Object literal with lat and lon properties on a
     *     WGS84 ellipsoid.
     * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for
     *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.
     * @return {string} the MGRS string for the given location and accuracy.
     */
    function forward$1(ll, accuracy) {
      accuracy = accuracy || 5; // default accuracy 1m
      return encode(LLtoUTM({
        lat: ll[1],
        lon: ll[0]
      }), accuracy);
    }

    /**
     * Conversion of MGRS to lat/lon.
     *
     * @param {string} mgrs MGRS string.
     * @return {array} An array with left (longitude), bottom (latitude), right
     *     (longitude) and top (latitude) values in WGS84, representing the
     *     bounding box for the provided MGRS reference.
     */
    function inverse$1(mgrs) {
      var bbox = UTMtoLL(decode(mgrs.toUpperCase()));
      if (bbox.lat && bbox.lon) {
        return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];
      }
      return [bbox.left, bbox.bottom, bbox.right, bbox.top];
    }

    function toPoint$1(mgrs) {
      var bbox = UTMtoLL(decode(mgrs.toUpperCase()));
      if (bbox.lat && bbox.lon) {
        return [bbox.lon, bbox.lat];
      }
      return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];
    }
    /**
     * Conversion from degrees to radians.
     *
     * @private
     * @param {number} deg the angle in degrees.
     * @return {number} the angle in radians.
     */
    function degToRad(deg) {
      return (deg * (Math.PI / 180.0));
    }

    /**
     * Conversion from radians to degrees.
     *
     * @private
     * @param {number} rad the angle in radians.
     * @return {number} the angle in degrees.
     */
    function radToDeg(rad) {
      return (180.0 * (rad / Math.PI));
    }

    /**
     * Converts a set of Longitude and Latitude co-ordinates to UTM
     * using the WGS84 ellipsoid.
     *
     * @private
     * @param {object} ll Object literal with lat and lon properties
     *     representing the WGS84 coordinate to be converted.
     * @return {object} Object literal containing the UTM value with easting,
     *     northing, zoneNumber and zoneLetter properties, and an optional
     *     accuracy property in digits. Returns null if the conversion failed.
     */
    function LLtoUTM(ll) {
      var Lat = ll.lat;
      var Long = ll.lon;
      var a = 6378137.0; //ellip.radius;
      var eccSquared = 0.00669438; //ellip.eccsq;
      var k0 = 0.9996;
      var LongOrigin;
      var eccPrimeSquared;
      var N, T, C, A, M;
      var LatRad = degToRad(Lat);
      var LongRad = degToRad(Long);
      var LongOriginRad;
      var ZoneNumber;
      // (int)
      ZoneNumber = Math.floor((Long + 180) / 6) + 1;

      //Make sure the longitude 180.00 is in Zone 60
      if (Long === 180) {
        ZoneNumber = 60;
      }

      // Special zone for Norway
      if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {
        ZoneNumber = 32;
      }

      // Special zones for Svalbard
      if (Lat >= 72.0 && Lat < 84.0) {
        if (Long >= 0.0 && Long < 9.0) {
          ZoneNumber = 31;
        }
        else if (Long >= 9.0 && Long < 21.0) {
          ZoneNumber = 33;
        }
        else if (Long >= 21.0 && Long < 33.0) {
          ZoneNumber = 35;
        }
        else if (Long >= 33.0 && Long < 42.0) {
          ZoneNumber = 37;
        }
      }

      LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin
      // in middle of
      // zone
      LongOriginRad = degToRad(LongOrigin);

      eccPrimeSquared = (eccSquared) / (1 - eccSquared);

      N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));
      T = Math.tan(LatRad) * Math.tan(LatRad);
      C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);
      A = Math.cos(LatRad) * (LongRad - LongOriginRad);

      M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));

      var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);

      var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));
      if (Lat < 0.0) {
        UTMNorthing += 10000000.0; //10000000 meter offset for
        // southern hemisphere
      }

      return {
        northing: Math.round(UTMNorthing),
        easting: Math.round(UTMEasting),
        zoneNumber: ZoneNumber,
        zoneLetter: getLetterDesignator(Lat)
      };
    }

    /**
     * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience
     * class where the Zone can be specified as a single string eg."60N" which
     * is then broken down into the ZoneNumber and ZoneLetter.
     *
     * @private
     * @param {object} utm An object literal with northing, easting, zoneNumber
     *     and zoneLetter properties. If an optional accuracy property is
     *     provided (in meters), a bounding box will be returned instead of
     *     latitude and longitude.
     * @return {object} An object literal containing either lat and lon values
     *     (if no accuracy was provided), or top, right, bottom and left values
     *     for the bounding box calculated according to the provided accuracy.
     *     Returns null if the conversion failed.
     */
    function UTMtoLL(utm) {

      var UTMNorthing = utm.northing;
      var UTMEasting = utm.easting;
      var zoneLetter = utm.zoneLetter;
      var zoneNumber = utm.zoneNumber;
      // check the ZoneNummber is valid
      if (zoneNumber < 0 || zoneNumber > 60) {
        return null;
      }

      var k0 = 0.9996;
      var a = 6378137.0; //ellip.radius;
      var eccSquared = 0.00669438; //ellip.eccsq;
      var eccPrimeSquared;
      var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));
      var N1, T1, C1, R1, D, M;
      var LongOrigin;
      var mu, phi1Rad;

      // remove 500,000 meter offset for longitude
      var x = UTMEasting - 500000.0;
      var y = UTMNorthing;

      // We must know somehow if we are in the Northern or Southern
      // hemisphere, this is the only time we use the letter So even
      // if the Zone letter isn't exactly correct it should indicate
      // the hemisphere correctly
      if (zoneLetter < 'N') {
        y -= 10000000.0; // remove 10,000,000 meter offset used
        // for southern hemisphere
      }

      // There are 60 zones with zone 1 being at West -180 to -174
      LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin
      // in middle of
      // zone

      eccPrimeSquared = (eccSquared) / (1 - eccSquared);

      M = y / k0;
      mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));

      phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);
      // double phi1 = ProjMath.radToDeg(phi1Rad);

      N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));
      T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);
      C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);
      R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);
      D = x / (N1 * k0);

      var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);
      lat = radToDeg(lat);

      var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);
      lon = LongOrigin + radToDeg(lon);

      var result;
      if (utm.accuracy) {
        var topRight = UTMtoLL({
          northing: utm.northing + utm.accuracy,
          easting: utm.easting + utm.accuracy,
          zoneLetter: utm.zoneLetter,
          zoneNumber: utm.zoneNumber
        });
        result = {
          top: topRight.lat,
          right: topRight.lon,
          bottom: lat,
          left: lon
        };
      }
      else {
        result = {
          lat: lat,
          lon: lon
        };
      }
      return result;
    }

    /**
     * Calculates the MGRS letter designator for the given latitude.
     *
     * @private
     * @param {number} lat The latitude in WGS84 to get the letter designator
     *     for.
     * @return {char} The letter designator.
     */
    function getLetterDesignator(lat) {
      //This is here as an error flag to show that the Latitude is
      //outside MGRS limits
      var LetterDesignator = 'Z';

      if ((84 >= lat) && (lat >= 72)) {
        LetterDesignator = 'X';
      }
      else if ((72 > lat) && (lat >= 64)) {
        LetterDesignator = 'W';
      }
      else if ((64 > lat) && (lat >= 56)) {
        LetterDesignator = 'V';
      }
      else if ((56 > lat) && (lat >= 48)) {
        LetterDesignator = 'U';
      }
      else if ((48 > lat) && (lat >= 40)) {
        LetterDesignator = 'T';
      }
      else if ((40 > lat) && (lat >= 32)) {
        LetterDesignator = 'S';
      }
      else if ((32 > lat) && (lat >= 24)) {
        LetterDesignator = 'R';
      }
      else if ((24 > lat) && (lat >= 16)) {
        LetterDesignator = 'Q';
      }
      else if ((16 > lat) && (lat >= 8)) {
        LetterDesignator = 'P';
      }
      else if ((8 > lat) && (lat >= 0)) {
        LetterDesignator = 'N';
      }
      else if ((0 > lat) && (lat >= -8)) {
        LetterDesignator = 'M';
      }
      else if ((-8 > lat) && (lat >= -16)) {
        LetterDesignator = 'L';
      }
      else if ((-16 > lat) && (lat >= -24)) {
        LetterDesignator = 'K';
      }
      else if ((-24 > lat) && (lat >= -32)) {
        LetterDesignator = 'J';
      }
      else if ((-32 > lat) && (lat >= -40)) {
        LetterDesignator = 'H';
      }
      else if ((-40 > lat) && (lat >= -48)) {
        LetterDesignator = 'G';
      }
      else if ((-48 > lat) && (lat >= -56)) {
        LetterDesignator = 'F';
      }
      else if ((-56 > lat) && (lat >= -64)) {
        LetterDesignator = 'E';
      }
      else if ((-64 > lat) && (lat >= -72)) {
        LetterDesignator = 'D';
      }
      else if ((-72 > lat) && (lat >= -80)) {
        LetterDesignator = 'C';
      }
      return LetterDesignator;
    }

    /**
     * Encodes a UTM location as MGRS string.
     *
     * @private
     * @param {object} utm An object literal with easting, northing,
     *     zoneLetter, zoneNumber
     * @param {number} accuracy Accuracy in digits (1-5).
     * @return {string} MGRS string for the given UTM location.
     */
    function encode(utm, accuracy) {
      // prepend with leading zeroes
      var seasting = "00000" + utm.easting,
        snorthing = "00000" + utm.northing;

      return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);
    }

    /**
     * Get the two letter 100k designator for a given UTM easting,
     * northing and zone number value.
     *
     * @private
     * @param {number} easting
     * @param {number} northing
     * @param {number} zoneNumber
     * @return the two letter 100k designator for the given UTM location.
     */
    function get100kID(easting, northing, zoneNumber) {
      var setParm = get100kSetForZone(zoneNumber);
      var setColumn = Math.floor(easting / 100000);
      var setRow = Math.floor(northing / 100000) % 20;
      return getLetter100kID(setColumn, setRow, setParm);
    }

    /**
     * Given a UTM zone number, figure out the MGRS 100K set it is in.
     *
     * @private
     * @param {number} i An UTM zone number.
     * @return {number} the 100k set the UTM zone is in.
     */
    function get100kSetForZone(i) {
      var setParm = i % NUM_100K_SETS;
      if (setParm === 0) {
        setParm = NUM_100K_SETS;
      }

      return setParm;
    }

    /**
     * Get the two-letter MGRS 100k designator given information
     * translated from the UTM northing, easting and zone number.
     *
     * @private
     * @param {number} column the column index as it relates to the MGRS
     *        100k set spreadsheet, created from the UTM easting.
     *        Values are 1-8.
     * @param {number} row the row index as it relates to the MGRS 100k set
     *        spreadsheet, created from the UTM northing value. Values
     *        are from 0-19.
     * @param {number} parm the set block, as it relates to the MGRS 100k set
     *        spreadsheet, created from the UTM zone. Values are from
     *        1-60.
     * @return two letter MGRS 100k code.
     */
    function getLetter100kID(column, row, parm) {
      // colOrigin and rowOrigin are the letters at the origin of the set
      var index = parm - 1;
      var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);
      var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);

      // colInt and rowInt are the letters to build to return
      var colInt = colOrigin + column - 1;
      var rowInt = rowOrigin + row;
      var rollover = false;

      if (colInt > Z) {
        colInt = colInt - Z + A - 1;
        rollover = true;
      }

      if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {
        colInt++;
      }

      if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {
        colInt++;

        if (colInt === I) {
          colInt++;
        }
      }

      if (colInt > Z) {
        colInt = colInt - Z + A - 1;
      }

      if (rowInt > V) {
        rowInt = rowInt - V + A - 1;
        rollover = true;
      }
      else {
        rollover = false;
      }

      if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {
        rowInt++;
      }

      if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {
        rowInt++;

        if (rowInt === I) {
          rowInt++;
        }
      }

      if (rowInt > V) {
        rowInt = rowInt - V + A - 1;
      }

      var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);
      return twoLetter;
    }

    /**
     * Decode the UTM parameters from a MGRS string.
     *
     * @private
     * @param {string} mgrsString an UPPERCASE coordinate string is expected.
     * @return {object} An object literal with easting, northing, zoneLetter,
     *     zoneNumber and accuracy (in meters) properties.
     */
    function decode(mgrsString) {

      if (mgrsString && mgrsString.length === 0) {
        throw ("MGRSPoint coverting from nothing");
      }

      var length = mgrsString.length;

      var hunK = null;
      var sb = "";
      var testChar;
      var i = 0;

      // get Zone number
      while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {
        if (i >= 2) {
          throw ("MGRSPoint bad conversion from: " + mgrsString);
        }
        sb += testChar;
        i++;
      }

      var zoneNumber = parseInt(sb, 10);

      if (i === 0 || i + 3 > length) {
        // A good MGRS string has to be 4-5 digits long,
        // ##AAA/#AAA at least.
        throw ("MGRSPoint bad conversion from: " + mgrsString);
      }

      var zoneLetter = mgrsString.charAt(i++);

      // Should we check the zone letter here? Why not.
      if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {
        throw ("MGRSPoint zone letter " + zoneLetter + " not handled: " + mgrsString);
      }

      hunK = mgrsString.substring(i, i += 2);

      var set = get100kSetForZone(zoneNumber);

      var east100k = getEastingFromChar(hunK.charAt(0), set);
      var north100k = getNorthingFromChar(hunK.charAt(1), set);

      // We have a bug where the northing may be 2000000 too low.
      // How
      // do we know when to roll over?

      while (north100k < getMinNorthing(zoneLetter)) {
        north100k += 2000000;
      }

      // calculate the char index for easting/northing separator
      var remainder = length - i;

      if (remainder % 2 !== 0) {
        throw ("MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters" + mgrsString);
      }

      var sep = remainder / 2;

      var sepEasting = 0.0;
      var sepNorthing = 0.0;
      var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;
      if (sep > 0) {
        accuracyBonus = 100000.0 / Math.pow(10, sep);
        sepEastingString = mgrsString.substring(i, i + sep);
        sepEasting = parseFloat(sepEastingString) * accuracyBonus;
        sepNorthingString = mgrsString.substring(i + sep);
        sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;
      }

      easting = sepEasting + east100k;
      northing = sepNorthing + north100k;

      return {
        easting: easting,
        northing: northing,
        zoneLetter: zoneLetter,
        zoneNumber: zoneNumber,
        accuracy: accuracyBonus
      };
    }

    /**
     * Given the first letter from a two-letter MGRS 100k zone, and given the
     * MGRS table set for the zone number, figure out the easting value that
     * should be added to the other, secondary easting value.
     *
     * @private
     * @param {char} e The first letter from a two-letter MGRS 100´k zone.
     * @param {number} set The MGRS table set for the zone number.
     * @return {number} The easting value for the given letter and set.
     */
    function getEastingFromChar(e, set) {
      // colOrigin is the letter at the origin of the set for the
      // column
      var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);
      var eastingValue = 100000.0;
      var rewindMarker = false;

      while (curCol !== e.charCodeAt(0)) {
        curCol++;
        if (curCol === I) {
          curCol++;
        }
        if (curCol === O) {
          curCol++;
        }
        if (curCol > Z) {
          if (rewindMarker) {
            throw ("Bad character: " + e);
          }
          curCol = A;
          rewindMarker = true;
        }
        eastingValue += 100000.0;
      }

      return eastingValue;
    }

    /**
     * Given the second letter from a two-letter MGRS 100k zone, and given the
     * MGRS table set for the zone number, figure out the northing value that
     * should be added to the other, secondary northing value. You have to
     * remember that Northings are determined from the equator, and the vertical
     * cycle of letters mean a 2000000 additional northing meters. This happens
     * approx. every 18 degrees of latitude. This method does *NOT* count any
     * additional northings. You have to figure out how many 2000000 meters need
     * to be added for the zone letter of the MGRS coordinate.
     *
     * @private
     * @param {char} n Second letter of the MGRS 100k zone
     * @param {number} set The MGRS table set number, which is dependent on the
     *     UTM zone number.
     * @return {number} The northing value for the given letter and set.
     */
    function getNorthingFromChar(n, set) {

      if (n > 'V') {
        throw ("MGRSPoint given invalid Northing " + n);
      }

      // rowOrigin is the letter at the origin of the set for the
      // column
      var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);
      var northingValue = 0.0;
      var rewindMarker = false;

      while (curRow !== n.charCodeAt(0)) {
        curRow++;
        if (curRow === I) {
          curRow++;
        }
        if (curRow === O) {
          curRow++;
        }
        // fixing a bug making whole application hang in this loop
        // when 'n' is a wrong character
        if (curRow > V) {
          if (rewindMarker) { // making sure that this loop ends
            throw ("Bad character: " + n);
          }
          curRow = A;
          rewindMarker = true;
        }
        northingValue += 100000.0;
      }

      return northingValue;
    }

    /**
     * The function getMinNorthing returns the minimum northing value of a MGRS
     * zone.
     *
     * Ported from Geotrans' c Lattitude_Band_Value structure table.
     *
     * @private
     * @param {char} zoneLetter The MGRS zone to get the min northing for.
     * @return {number}
     */
    function getMinNorthing(zoneLetter) {
      var northing;
      switch (zoneLetter) {
      case 'C':
        northing = 1100000.0;
        break;
      case 'D':
        northing = 2000000.0;
        break;
      case 'E':
        northing = 2800000.0;
        break;
      case 'F':
        northing = 3700000.0;
        break;
      case 'G':
        northing = 4600000.0;
        break;
      case 'H':
        northing = 5500000.0;
        break;
      case 'J':
        northing = 6400000.0;
        break;
      case 'K':
        northing = 7300000.0;
        break;
      case 'L':
        northing = 8200000.0;
        break;
      case 'M':
        northing = 9100000.0;
        break;
      case 'N':
        northing = 0.0;
        break;
      case 'P':
        northing = 800000.0;
        break;
      case 'Q':
        northing = 1700000.0;
        break;
      case 'R':
        northing = 2600000.0;
        break;
      case 'S':
        northing = 3500000.0;
        break;
      case 'T':
        northing = 4400000.0;
        break;
      case 'U':
        northing = 5300000.0;
        break;
      case 'V':
        northing = 6200000.0;
        break;
      case 'W':
        northing = 7000000.0;
        break;
      case 'X':
        northing = 7900000.0;
        break;
      default:
        northing = -1.0;
      }
      if (northing >= 0.0) {
        return northing;
      }
      else {
        throw ("Invalid zone letter: " + zoneLetter);
      }

    }

    function Point(x, y, z) {
      if (!(this instanceof Point)) {
        return new Point(x, y, z);
      }
      if (Array.isArray(x)) {
        this.x = x[0];
        this.y = x[1];
        this.z = x[2] || 0.0;
      } else if(typeof x === 'object') {
        this.x = x.x;
        this.y = x.y;
        this.z = x.z || 0.0;
      } else if (typeof x === 'string' && typeof y === 'undefined') {
        var coords = x.split(',');
        this.x = parseFloat(coords[0], 10);
        this.y = parseFloat(coords[1], 10);
        this.z = parseFloat(coords[2], 10) || 0.0;
      } else {
        this.x = x;
        this.y = y;
        this.z = z || 0.0;
      }
      console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');
    }

    Point.fromMGRS = function(mgrsStr) {
      return new Point(toPoint$1(mgrsStr));
    };
    Point.prototype.toMGRS = function(accuracy) {
      return forward$1([this.x, this.y], accuracy);
    };

    var C00 = 1;
    var C02 = 0.25;
    var C04 = 0.046875;
    var C06 = 0.01953125;
    var C08 = 0.01068115234375;
    var C22 = 0.75;
    var C44 = 0.46875;
    var C46 = 0.01302083333333333333;
    var C48 = 0.00712076822916666666;
    var C66 = 0.36458333333333333333;
    var C68 = 0.00569661458333333333;
    var C88 = 0.3076171875;

    var pj_enfn = function(es) {
      var en = [];
      en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));
      en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));
      var t = es * es;
      en[2] = t * (C44 - es * (C46 + es * C48));
      t *= es;
      en[3] = t * (C66 - es * C68);
      en[4] = t * es * C88;
      return en;
    };

    var pj_mlfn = function(phi, sphi, cphi, en) {
      cphi *= sphi;
      sphi *= sphi;
      return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));
    };

    var MAX_ITER = 20;

    var pj_inv_mlfn = function(arg, es, en) {
      var k = 1 / (1 - es);
      var phi = arg;
      for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */
        var s = Math.sin(phi);
        var t = 1 - es * s * s;
        //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;
        //phi -= t * (t * Math.sqrt(t)) * k;
        t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;
        phi -= t;
        if (Math.abs(t) < EPSLN) {
          return phi;
        }
      }
      //..reportError("cass:pj_inv_mlfn: Convergence error");
      return phi;
    };

    // Heavily based on this tmerc projection implementation
    // https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js

    function init$2() {
      this.x0 = this.x0 !== undefined ? this.x0 : 0;
      this.y0 = this.y0 !== undefined ? this.y0 : 0;
      this.long0 = this.long0 !== undefined ? this.long0 : 0;
      this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;

      if (this.es) {
        this.en = pj_enfn(this.es);
        this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);
      }
    }

    /**
        Transverse Mercator Forward  - long/lat to x/y
        long/lat in radians
      */
    function forward$2(p) {
      var lon = p.x;
      var lat = p.y;

      var delta_lon = adjust_lon(lon - this.long0);
      var con;
      var x, y;
      var sin_phi = Math.sin(lat);
      var cos_phi = Math.cos(lat);

      if (!this.es) {
        var b = cos_phi * Math.sin(delta_lon);

        if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {
          return (93);
        }
        else {
          x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;
          y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));
          b = Math.abs(y);

          if (b >= 1) {
            if ((b - 1) > EPSLN) {
              return (93);
            }
            else {
              y = 0;
            }
          }
          else {
            y = Math.acos(y);
          }

          if (lat < 0) {
            y = -y;
          }

          y = this.a * this.k0 * (y - this.lat0) + this.y0;
        }
      }
      else {
        var al = cos_phi * delta_lon;
        var als = Math.pow(al, 2);
        var c = this.ep2 * Math.pow(cos_phi, 2);
        var cs = Math.pow(c, 2);
        var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;
        var t = Math.pow(tq, 2);
        var ts = Math.pow(t, 2);
        con = 1 - this.es * Math.pow(sin_phi, 2);
        al = al / Math.sqrt(con);
        var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);

        x = this.a * (this.k0 * al * (1 +
          als / 6 * (1 - t + c +
          als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +
          als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +
          this.x0;

        y = this.a * (this.k0 * (ml - this.ml0 +
          sin_phi * delta_lon * al / 2 * (1 +
          als / 12 * (5 - t + 9 * c + 4 * cs +
          als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +
          als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +
          this.y0;
      }

      p.x = x;
      p.y = y;

      return p;
    }

    /**
        Transverse Mercator Inverse  -  x/y to long/lat
      */
    function inverse$2(p) {
      var con, phi;
      var lat, lon;
      var x = (p.x - this.x0) * (1 / this.a);
      var y = (p.y - this.y0) * (1 / this.a);

      if (!this.es) {
        var f = Math.exp(x / this.k0);
        var g = 0.5 * (f - 1 / f);
        var temp = this.lat0 + y / this.k0;
        var h = Math.cos(temp);
        con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));
        lat = Math.asin(con);

        if (y < 0) {
          lat = -lat;
        }

        if ((g === 0) && (h === 0)) {
          lon = 0;
        }
        else {
          lon = adjust_lon(Math.atan2(g, h) + this.long0);
        }
      }
      else { // ellipsoidal form
        con = this.ml0 + y / this.k0;
        phi = pj_inv_mlfn(con, this.es, this.en);

        if (Math.abs(phi) < HALF_PI) {
          var sin_phi = Math.sin(phi);
          var cos_phi = Math.cos(phi);
          var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;
          var c = this.ep2 * Math.pow(cos_phi, 2);
          var cs = Math.pow(c, 2);
          var t = Math.pow(tan_phi, 2);
          var ts = Math.pow(t, 2);
          con = 1 - this.es * Math.pow(sin_phi, 2);
          var d = x * Math.sqrt(con) / this.k0;
          var ds = Math.pow(d, 2);
          con = con * tan_phi;

          lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -
            ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -
            ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -
            ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));

          lon = adjust_lon(this.long0 + (d * (1 -
            ds / 6 * (1 + 2 * t + c -
            ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -
            ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));
        }
        else {
          lat = HALF_PI * sign(y);
          lon = 0;
        }
      }

      p.x = lon;
      p.y = lat;

      return p;
    }

    var names$3 = ["Fast_Transverse_Mercator", "Fast Transverse Mercator"];
    var tmerc = {
      init: init$2,
      forward: forward$2,
      inverse: inverse$2,
      names: names$3
    };

    var sinh = function(x) {
      var r = Math.exp(x);
      r = (r - 1 / r) / 2;
      return r;
    };

    var hypot = function(x, y) {
      x = Math.abs(x);
      y = Math.abs(y);
      var a = Math.max(x, y);
      var b = Math.min(x, y) / (a ? a : 1);

      return a * Math.sqrt(1 + Math.pow(b, 2));
    };

    var log1py = function(x) {
      var y = 1 + x;
      var z = y - 1;

      return z === 0 ? x : x * Math.log(y) / z;
    };

    var asinhy = function(x) {
      var y = Math.abs(x);
      y = log1py(y * (1 + y / (hypot(1, y) + 1)));

      return x < 0 ? -y : y;
    };

    var gatg = function(pp, B) {
      var cos_2B = 2 * Math.cos(2 * B);
      var i = pp.length - 1;
      var h1 = pp[i];
      var h2 = 0;
      var h;

      while (--i >= 0) {
        h = -h2 + cos_2B * h1 + pp[i];
        h2 = h1;
        h1 = h;
      }

      return (B + h * Math.sin(2 * B));
    };

    var clens = function(pp, arg_r) {
      var r = 2 * Math.cos(arg_r);
      var i = pp.length - 1;
      var hr1 = pp[i];
      var hr2 = 0;
      var hr;

      while (--i >= 0) {
        hr = -hr2 + r * hr1 + pp[i];
        hr2 = hr1;
        hr1 = hr;
      }

      return Math.sin(arg_r) * hr;
    };

    var cosh = function(x) {
      var r = Math.exp(x);
      r = (r + 1 / r) / 2;
      return r;
    };

    var clens_cmplx = function(pp, arg_r, arg_i) {
      var sin_arg_r = Math.sin(arg_r);
      var cos_arg_r = Math.cos(arg_r);
      var sinh_arg_i = sinh(arg_i);
      var cosh_arg_i = cosh(arg_i);
      var r = 2 * cos_arg_r * cosh_arg_i;
      var i = -2 * sin_arg_r * sinh_arg_i;
      var j = pp.length - 1;
      var hr = pp[j];
      var hi1 = 0;
      var hr1 = 0;
      var hi = 0;
      var hr2;
      var hi2;

      while (--j >= 0) {
        hr2 = hr1;
        hi2 = hi1;
        hr1 = hr;
        hi1 = hi;
        hr = -hr2 + r * hr1 - i * hi1 + pp[j];
        hi = -hi2 + i * hr1 + r * hi1;
      }

      r = sin_arg_r * cosh_arg_i;
      i = cos_arg_r * sinh_arg_i;

      return [r * hr - i * hi, r * hi + i * hr];
    };

    // Heavily based on this etmerc projection implementation
    // https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js

    function init$3() {
      if (!this.approx && (isNaN(this.es) || this.es <= 0)) {
        throw new Error('Incorrect elliptical usage. Try using the +approx option in the proj string, or PROJECTION["Fast_Transverse_Mercator"] in the WKT.');
      }
      if (this.approx) {
        // When '+approx' is set, use tmerc instead
        tmerc.init.apply(this);
        this.forward = tmerc.forward;
        this.inverse = tmerc.inverse;
      }

      this.x0 = this.x0 !== undefined ? this.x0 : 0;
      this.y0 = this.y0 !== undefined ? this.y0 : 0;
      this.long0 = this.long0 !== undefined ? this.long0 : 0;
      this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;

      this.cgb = [];
      this.cbg = [];
      this.utg = [];
      this.gtu = [];

      var f = this.es / (1 + Math.sqrt(1 - this.es));
      var n = f / (2 - f);
      var np = n;

      this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));
      this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));

      np = np * n;
      this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));
      this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));

      np = np * n;
      this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));
      this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));

      np = np * n;
      this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));
      this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));

      np = np * n;
      this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));
      this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));

      np = np * n;
      this.cgb[5] = np * (601676 / 22275);
      this.cbg[5] = np * (444337 / 155925);

      np = Math.pow(n, 2);
      this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));

      this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));
      this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));

      this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));
      this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));

      np = np * n;
      this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));
      this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));

      np = np * n;
      this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));
      this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));

      np = np * n;
      this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));
      this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));

      np = np * n;
      this.utg[5] = np * (-20648693 / 638668800);
      this.gtu[5] = np * (212378941 / 319334400);

      var Z = gatg(this.cbg, this.lat0);
      this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));
    }

    function forward$3(p) {
      var Ce = adjust_lon(p.x - this.long0);
      var Cn = p.y;

      Cn = gatg(this.cbg, Cn);
      var sin_Cn = Math.sin(Cn);
      var cos_Cn = Math.cos(Cn);
      var sin_Ce = Math.sin(Ce);
      var cos_Ce = Math.cos(Ce);

      Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);
      Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));
      Ce = asinhy(Math.tan(Ce));

      var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);

      Cn = Cn + tmp[0];
      Ce = Ce + tmp[1];

      var x;
      var y;

      if (Math.abs(Ce) <= 2.623395162778) {
        x = this.a * (this.Qn * Ce) + this.x0;
        y = this.a * (this.Qn * Cn + this.Zb) + this.y0;
      }
      else {
        x = Infinity;
        y = Infinity;
      }

      p.x = x;
      p.y = y;

      return p;
    }

    function inverse$3(p) {
      var Ce = (p.x - this.x0) * (1 / this.a);
      var Cn = (p.y - this.y0) * (1 / this.a);

      Cn = (Cn - this.Zb) / this.Qn;
      Ce = Ce / this.Qn;

      var lon;
      var lat;

      if (Math.abs(Ce) <= 2.623395162778) {
        var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);

        Cn = Cn + tmp[0];
        Ce = Ce + tmp[1];
        Ce = Math.atan(sinh(Ce));

        var sin_Cn = Math.sin(Cn);
        var cos_Cn = Math.cos(Cn);
        var sin_Ce = Math.sin(Ce);
        var cos_Ce = Math.cos(Ce);

        Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));
        Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);

        lon = adjust_lon(Ce + this.long0);
        lat = gatg(this.cgb, Cn);
      }
      else {
        lon = Infinity;
        lat = Infinity;
      }

      p.x = lon;
      p.y = lat;

      return p;
    }

    var names$4 = ["Extended_Transverse_Mercator", "Extended Transverse Mercator", "etmerc", "Transverse_Mercator", "Transverse Mercator", "tmerc"];
    var etmerc = {
      init: init$3,
      forward: forward$3,
      inverse: inverse$3,
      names: names$4
    };

    var adjust_zone = function(zone, lon) {
      if (zone === undefined) {
        zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;

        if (zone < 0) {
          return 0;
        } else if (zone > 60) {
          return 60;
        }
      }
      return zone;
    };

    var dependsOn = 'etmerc';
    function init$4() {
      var zone = adjust_zone(this.zone, this.long0);
      if (zone === undefined) {
        throw new Error('unknown utm zone');
      }
      this.lat0 = 0;
      this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;
      this.x0 = 500000;
      this.y0 = this.utmSouth ? 10000000 : 0;
      this.k0 = 0.9996;

      etmerc.init.apply(this);
      this.forward = etmerc.forward;
      this.inverse = etmerc.inverse;
    }

    var names$5 = ["Universal Transverse Mercator System", "utm"];
    var utm = {
      init: init$4,
      names: names$5,
      dependsOn: dependsOn
    };

    var srat = function(esinp, exp) {
      return (Math.pow((1 - esinp) / (1 + esinp), exp));
    };

    var MAX_ITER$1 = 20;
    function init$6() {
      var sphi = Math.sin(this.lat0);
      var cphi = Math.cos(this.lat0);
      cphi *= cphi;
      this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);
      this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));
      this.phic0 = Math.asin(sphi / this.C);
      this.ratexp = 0.5 * this.C * this.e;
      this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));
    }

    function forward$5(p) {
      var lon = p.x;
      var lat = p.y;

      p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;
      p.x = this.C * lon;
      return p;
    }

    function inverse$5(p) {
      var DEL_TOL = 1e-14;
      var lon = p.x / this.C;
      var lat = p.y;
      var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);
      for (var i = MAX_ITER$1; i > 0; --i) {
        lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;
        if (Math.abs(lat - p.y) < DEL_TOL) {
          break;
        }
        p.y = lat;
      }
      /* convergence failed */
      if (!i) {
        return null;
      }
      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$7 = ["gauss"];
    var gauss = {
      init: init$6,
      forward: forward$5,
      inverse: inverse$5,
      names: names$7
    };

    function init$5() {
      gauss.init.apply(this);
      if (!this.rc) {
        return;
      }
      this.sinc0 = Math.sin(this.phic0);
      this.cosc0 = Math.cos(this.phic0);
      this.R2 = 2 * this.rc;
      if (!this.title) {
        this.title = "Oblique Stereographic Alternative";
      }
    }

    function forward$4(p) {
      var sinc, cosc, cosl, k;
      p.x = adjust_lon(p.x - this.long0);
      gauss.forward.apply(this, [p]);
      sinc = Math.sin(p.y);
      cosc = Math.cos(p.y);
      cosl = Math.cos(p.x);
      k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);
      p.x = k * cosc * Math.sin(p.x);
      p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);
      p.x = this.a * p.x + this.x0;
      p.y = this.a * p.y + this.y0;
      return p;
    }

    function inverse$4(p) {
      var sinc, cosc, lon, lat, rho;
      p.x = (p.x - this.x0) / this.a;
      p.y = (p.y - this.y0) / this.a;

      p.x /= this.k0;
      p.y /= this.k0;
      if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {
        var c = 2 * Math.atan2(rho, this.R2);
        sinc = Math.sin(c);
        cosc = Math.cos(c);
        lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);
        lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);
      }
      else {
        lat = this.phic0;
        lon = 0;
      }

      p.x = lon;
      p.y = lat;
      gauss.inverse.apply(this, [p]);
      p.x = adjust_lon(p.x + this.long0);
      return p;
    }

    var names$6 = ["Stereographic_North_Pole", "Oblique_Stereographic", "Polar_Stereographic", "sterea","Oblique Stereographic Alternative","Double_Stereographic"];
    var sterea = {
      init: init$5,
      forward: forward$4,
      inverse: inverse$4,
      names: names$6
    };

    function ssfn_(phit, sinphi, eccen) {
      sinphi *= eccen;
      return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));
    }

    function init$7() {
      this.coslat0 = Math.cos(this.lat0);
      this.sinlat0 = Math.sin(this.lat0);
      if (this.sphere) {
        if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {
          this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));
        }
      }
      else {
        if (Math.abs(this.coslat0) <= EPSLN) {
          if (this.lat0 > 0) {
            //North pole
            //trace('stere:north pole');
            this.con = 1;
          }
          else {
            //South pole
            //trace('stere:south pole');
            this.con = -1;
          }
        }
        this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));
        if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {
          this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));
        }
        this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);
        this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;
        this.cosX0 = Math.cos(this.X0);
        this.sinX0 = Math.sin(this.X0);
      }
    }

    // Stereographic forward equations--mapping lat,long to x,y
    function forward$6(p) {
      var lon = p.x;
      var lat = p.y;
      var sinlat = Math.sin(lat);
      var coslat = Math.cos(lat);
      var A, X, sinX, cosX, ts, rh;
      var dlon = adjust_lon(lon - this.long0);

      if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {
        //case of the origine point
        //trace('stere:this is the origin point');
        p.x = NaN;
        p.y = NaN;
        return p;
      }
      if (this.sphere) {
        //trace('stere:sphere case');
        A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));
        p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;
        p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;
        return p;
      }
      else {
        X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;
        cosX = Math.cos(X);
        sinX = Math.sin(X);
        if (Math.abs(this.coslat0) <= EPSLN) {
          ts = tsfnz(this.e, lat * this.con, this.con * sinlat);
          rh = 2 * this.a * this.k0 * ts / this.cons;
          p.x = this.x0 + rh * Math.sin(lon - this.long0);
          p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);
          //trace(p.toString());
          return p;
        }
        else if (Math.abs(this.sinlat0) < EPSLN) {
          //Eq
          //trace('stere:equateur');
          A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));
          p.y = A * sinX;
        }
        else {
          //other case
          //trace('stere:normal case');
          A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));
          p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;
        }
        p.x = A * cosX * Math.sin(dlon) + this.x0;
      }
      //trace(p.toString());
      return p;
    }

    //* Stereographic inverse equations--mapping x,y to lat/long
    function inverse$6(p) {
      p.x -= this.x0;
      p.y -= this.y0;
      var lon, lat, ts, ce, Chi;
      var rh = Math.sqrt(p.x * p.x + p.y * p.y);
      if (this.sphere) {
        var c = 2 * Math.atan(rh / (2 * this.a * this.k0));
        lon = this.long0;
        lat = this.lat0;
        if (rh <= EPSLN) {
          p.x = lon;
          p.y = lat;
          return p;
        }
        lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);
        if (Math.abs(this.coslat0) < EPSLN) {
          if (this.lat0 > 0) {
            lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));
          }
          else {
            lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));
          }
        }
        else {
          lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      else {
        if (Math.abs(this.coslat0) <= EPSLN) {
          if (rh <= EPSLN) {
            lat = this.lat0;
            lon = this.long0;
            p.x = lon;
            p.y = lat;
            //trace(p.toString());
            return p;
          }
          p.x *= this.con;
          p.y *= this.con;
          ts = rh * this.cons / (2 * this.a * this.k0);
          lat = this.con * phi2z(this.e, ts);
          lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));
        }
        else {
          ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));
          lon = this.long0;
          if (rh <= EPSLN) {
            Chi = this.X0;
          }
          else {
            Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);
            lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));
          }
          lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));
        }
      }
      p.x = lon;
      p.y = lat;

      //trace(p.toString());
      return p;

    }

    var names$8 = ["stere", "Stereographic_South_Pole", "Polar Stereographic (variant B)"];
    var stere = {
      init: init$7,
      forward: forward$6,
      inverse: inverse$6,
      names: names$8,
      ssfn_: ssfn_
    };

    /*
      references:
        Formules et constantes pour le Calcul pour la
        projection cylindrique conforme à axe oblique et pour la transformation entre
        des systèmes de référence.
        http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf
      */

    function init$8() {
      var phy0 = this.lat0;
      this.lambda0 = this.long0;
      var sinPhy0 = Math.sin(phy0);
      var semiMajorAxis = this.a;
      var invF = this.rf;
      var flattening = 1 / invF;
      var e2 = 2 * flattening - Math.pow(flattening, 2);
      var e = this.e = Math.sqrt(e2);
      this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));
      this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));
      this.b0 = Math.asin(sinPhy0 / this.alpha);
      var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));
      var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));
      var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));
      this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;
    }

    function forward$7(p) {
      var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));
      var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));
      var S = -this.alpha * (Sa1 + Sa2) + this.K;

      // spheric latitude
      var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);

      // spheric longitude
      var I = this.alpha * (p.x - this.lambda0);

      // psoeudo equatorial rotation
      var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));

      var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));

      p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;
      p.x = this.R * rotI + this.x0;
      return p;
    }

    function inverse$7(p) {
      var Y = p.x - this.x0;
      var X = p.y - this.y0;

      var rotI = Y / this.R;
      var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);

      var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));
      var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));

      var lambda = this.lambda0 + I / this.alpha;

      var S = 0;
      var phy = b;
      var prevPhy = -1000;
      var iteration = 0;
      while (Math.abs(phy - prevPhy) > 0.0000001) {
        if (++iteration > 20) {
          //...reportError("omercFwdInfinity");
          return;
        }
        //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));
        S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));
        prevPhy = phy;
        phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;
      }

      p.x = lambda;
      p.y = phy;
      return p;
    }

    var names$9 = ["somerc"];
    var somerc = {
      init: init$8,
      forward: forward$7,
      inverse: inverse$7,
      names: names$9
    };

    var TOL = 1e-7;

    function isTypeA(P) {
      var typeAProjections = ['Hotine_Oblique_Mercator','Hotine_Oblique_Mercator_Azimuth_Natural_Origin'];
      var projectionName = typeof P.PROJECTION === "object" ? Object.keys(P.PROJECTION)[0] : P.PROJECTION;
      
      return 'no_uoff' in P || 'no_off' in P || typeAProjections.indexOf(projectionName) !== -1;
    }


    /* Initialize the Oblique Mercator  projection
        ------------------------------------------*/
    function init$9() {  
      var con, com, cosph0, D, F, H, L, sinph0, p, J, gamma = 0,
        gamma0, lamc = 0, lam1 = 0, lam2 = 0, phi1 = 0, phi2 = 0, alpha_c = 0;
      
      // only Type A uses the no_off or no_uoff property
      // https://github.com/OSGeo/proj.4/issues/104
      this.no_off = isTypeA(this);
      this.no_rot = 'no_rot' in this;
      
      var alp = false;
      if ("alpha" in this) {
        alp = true;
      }

      var gam = false;
      if ("rectified_grid_angle" in this) {
        gam = true;
      }

      if (alp) {
        alpha_c = this.alpha;
      }
      
      if (gam) {
        gamma = (this.rectified_grid_angle * D2R);
      }
      
      if (alp || gam) {
        lamc = this.longc;
      } else {
        lam1 = this.long1;
        phi1 = this.lat1;
        lam2 = this.long2;
        phi2 = this.lat2;
        
        if (Math.abs(phi1 - phi2) <= TOL || (con = Math.abs(phi1)) <= TOL ||
            Math.abs(con - HALF_PI) <= TOL || Math.abs(Math.abs(this.lat0) - HALF_PI) <= TOL ||
            Math.abs(Math.abs(phi2) - HALF_PI) <= TOL) {
          throw new Error();
        }
      }
      
      var one_es = 1.0 - this.es;
      com = Math.sqrt(one_es);
      
      if (Math.abs(this.lat0) > EPSLN) {
        sinph0 = Math.sin(this.lat0);
        cosph0 = Math.cos(this.lat0);
        con = 1 - this.es * sinph0 * sinph0;
        this.B = cosph0 * cosph0;
        this.B = Math.sqrt(1 + this.es * this.B * this.B / one_es);
        this.A = this.B * this.k0 * com / con;
        D = this.B * com / (cosph0 * Math.sqrt(con));
        F = D * D -1;
        
        if (F <= 0) {
          F = 0;
        } else {
          F = Math.sqrt(F);
          if (this.lat0 < 0) {
            F = -F;
          }
        }
        
        this.E = F += D;
        this.E *= Math.pow(tsfnz(this.e, this.lat0, sinph0), this.B);
      } else {
        this.B = 1 / com;
        this.A = this.k0;
        this.E = D = F = 1;
      }
      
      if (alp || gam) {
        if (alp) {
          gamma0 = Math.asin(Math.sin(alpha_c) / D);
          if (!gam) {
            gamma = alpha_c;
          }
        } else {
          gamma0 = gamma;
          alpha_c = Math.asin(D * Math.sin(gamma0));
        }
        this.lam0 = lamc - Math.asin(0.5 * (F - 1 / F) * Math.tan(gamma0)) / this.B;
      } else {
        H = Math.pow(tsfnz(this.e, phi1, Math.sin(phi1)), this.B);
        L = Math.pow(tsfnz(this.e, phi2, Math.sin(phi2)), this.B);
        F = this.E / H;
        p = (L - H) / (L + H);
        J = this.E * this.E;
        J = (J - L * H) / (J + L * H);
        con = lam1 - lam2;
        
        if (con < -Math.pi) {
          lam2 -=TWO_PI;
        } else if (con > Math.pi) {
          lam2 += TWO_PI;
        }
        
        this.lam0 = adjust_lon(0.5 * (lam1 + lam2) - Math.atan(J * Math.tan(0.5 * this.B * (lam1 - lam2)) / p) / this.B);
        gamma0 = Math.atan(2 * Math.sin(this.B * adjust_lon(lam1 - this.lam0)) / (F - 1 / F));
        gamma = alpha_c = Math.asin(D * Math.sin(gamma0));
      }
      
      this.singam = Math.sin(gamma0);
      this.cosgam = Math.cos(gamma0);
      this.sinrot = Math.sin(gamma);
      this.cosrot = Math.cos(gamma);
      
      this.rB = 1 / this.B;
      this.ArB = this.A * this.rB;
      this.BrA = 1 / this.ArB;
      if (this.no_off) {
        this.u_0 = 0;
      } else {
        this.u_0 = Math.abs(this.ArB * Math.atan(Math.sqrt(D * D - 1) / Math.cos(alpha_c)));
        
        if (this.lat0 < 0) {
          this.u_0 = - this.u_0;
        }  
      }
        
      F = 0.5 * gamma0;
      this.v_pole_n = this.ArB * Math.log(Math.tan(FORTPI - F));
      this.v_pole_s = this.ArB * Math.log(Math.tan(FORTPI + F));
    }


    /* Oblique Mercator forward equations--mapping lat,long to x,y
        ----------------------------------------------------------*/
    function forward$8(p) {
      var coords = {};
      var S, T, U, V, W, temp, u, v;
      p.x = p.x - this.lam0;
      
      if (Math.abs(Math.abs(p.y) - HALF_PI) > EPSLN) {
        W = this.E / Math.pow(tsfnz(this.e, p.y, Math.sin(p.y)), this.B);
        
        temp = 1 / W;
        S = 0.5 * (W - temp);
        T = 0.5 * (W + temp);
        V = Math.sin(this.B * p.x);
        U = (S * this.singam - V * this.cosgam) / T;
            
        if (Math.abs(Math.abs(U) - 1.0) < EPSLN) {
          throw new Error();
        }
        
        v = 0.5 * this.ArB * Math.log((1 - U)/(1 + U));
        temp = Math.cos(this.B * p.x);
        
        if (Math.abs(temp) < TOL) {
          u = this.A * p.x;
        } else {
          u = this.ArB * Math.atan2((S * this.cosgam + V * this.singam), temp);
        }    
      } else {
        v = p.y > 0 ? this.v_pole_n : this.v_pole_s;
        u = this.ArB * p.y;
      }
         
      if (this.no_rot) {
        coords.x = u;
        coords.y = v;
      } else {
        u -= this.u_0;
        coords.x = v * this.cosrot + u * this.sinrot;
        coords.y = u * this.cosrot - v * this.sinrot;
      }
      
      coords.x = (this.a * coords.x + this.x0);
      coords.y = (this.a * coords.y + this.y0);
      
      return coords;
    }

    function inverse$8(p) {
      var u, v, Qp, Sp, Tp, Vp, Up;
      var coords = {};
      
      p.x = (p.x - this.x0) * (1.0 / this.a);
      p.y = (p.y - this.y0) * (1.0 / this.a);

      if (this.no_rot) {
        v = p.y;
        u = p.x;
      } else {
        v = p.x * this.cosrot - p.y * this.sinrot;
        u = p.y * this.cosrot + p.x * this.sinrot + this.u_0;
      }
      
      Qp = Math.exp(-this.BrA * v);
      Sp = 0.5 * (Qp - 1 / Qp);
      Tp = 0.5 * (Qp + 1 / Qp);
      Vp = Math.sin(this.BrA * u);
      Up = (Vp * this.cosgam + Sp * this.singam) / Tp;
      
      if (Math.abs(Math.abs(Up) - 1) < EPSLN) {
        coords.x = 0;
        coords.y = Up < 0 ? -HALF_PI : HALF_PI;
      } else {
        coords.y = this.E / Math.sqrt((1 + Up) / (1 - Up));
        coords.y = phi2z(this.e, Math.pow(coords.y, 1 / this.B));
        
        if (coords.y === Infinity) {
          throw new Error();
        }
            
        coords.x = -this.rB * Math.atan2((Sp * this.cosgam - Vp * this.singam), Math.cos(this.BrA * u));
      }
      
      coords.x += this.lam0;
      
      return coords;
    }

    var names$10 = ["Hotine_Oblique_Mercator", "Hotine Oblique Mercator", "Hotine_Oblique_Mercator_Azimuth_Natural_Origin", "Hotine_Oblique_Mercator_Two_Point_Natural_Origin", "Hotine_Oblique_Mercator_Azimuth_Center", "Oblique_Mercator", "omerc"];
    var omerc = {
      init: init$9,
      forward: forward$8,
      inverse: inverse$8,
      names: names$10
    };

    function init$10() {
      
      //double lat0;                    /* the reference latitude               */
      //double long0;                   /* the reference longitude              */
      //double lat1;                    /* first standard parallel              */
      //double lat2;                    /* second standard parallel             */
      //double r_maj;                   /* major axis                           */
      //double r_min;                   /* minor axis                           */
      //double false_east;              /* x offset in meters                   */
      //double false_north;             /* y offset in meters                   */
      
      //the above value can be set with proj4.defs
      //example: proj4.defs("EPSG:2154","+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs");

      if (!this.lat2) {
        this.lat2 = this.lat1;
      } //if lat2 is not defined
      if (!this.k0) {
        this.k0 = 1;
      }
      this.x0 = this.x0 || 0;
      this.y0 = this.y0 || 0;
      // Standard Parallels cannot be equal and on opposite sides of the equator
      if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
        return;
      }

      var temp = this.b / this.a;
      this.e = Math.sqrt(1 - temp * temp);

      var sin1 = Math.sin(this.lat1);
      var cos1 = Math.cos(this.lat1);
      var ms1 = msfnz(this.e, sin1, cos1);
      var ts1 = tsfnz(this.e, this.lat1, sin1);

      var sin2 = Math.sin(this.lat2);
      var cos2 = Math.cos(this.lat2);
      var ms2 = msfnz(this.e, sin2, cos2);
      var ts2 = tsfnz(this.e, this.lat2, sin2);

      var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));

      if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
        this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);
      }
      else {
        this.ns = sin1;
      }
      if (isNaN(this.ns)) {
        this.ns = sin1;
      }
      this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));
      this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);
      if (!this.title) {
        this.title = "Lambert Conformal Conic";
      }
    }

    // Lambert Conformal conic forward equations--mapping lat,long to x,y
    // -----------------------------------------------------------------
    function forward$9(p) {

      var lon = p.x;
      var lat = p.y;

      // singular cases :
      if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {
        lat = sign(lat) * (HALF_PI - 2 * EPSLN);
      }

      var con = Math.abs(Math.abs(lat) - HALF_PI);
      var ts, rh1;
      if (con > EPSLN) {
        ts = tsfnz(this.e, lat, Math.sin(lat));
        rh1 = this.a * this.f0 * Math.pow(ts, this.ns);
      }
      else {
        con = lat * this.ns;
        if (con <= 0) {
          return null;
        }
        rh1 = 0;
      }
      var theta = this.ns * adjust_lon(lon - this.long0);
      p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;
      p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;

      return p;
    }

    // Lambert Conformal Conic inverse equations--mapping x,y to lat/long
    // -----------------------------------------------------------------
    function inverse$9(p) {

      var rh1, con, ts;
      var lat, lon;
      var x = (p.x - this.x0) / this.k0;
      var y = (this.rh - (p.y - this.y0) / this.k0);
      if (this.ns > 0) {
        rh1 = Math.sqrt(x * x + y * y);
        con = 1;
      }
      else {
        rh1 = -Math.sqrt(x * x + y * y);
        con = -1;
      }
      var theta = 0;
      if (rh1 !== 0) {
        theta = Math.atan2((con * x), (con * y));
      }
      if ((rh1 !== 0) || (this.ns > 0)) {
        con = 1 / this.ns;
        ts = Math.pow((rh1 / (this.a * this.f0)), con);
        lat = phi2z(this.e, ts);
        if (lat === -9999) {
          return null;
        }
      }
      else {
        lat = -HALF_PI;
      }
      lon = adjust_lon(theta / this.ns + this.long0);

      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$11 = [
      "Lambert Tangential Conformal Conic Projection",
      "Lambert_Conformal_Conic",
      "Lambert_Conformal_Conic_1SP",
      "Lambert_Conformal_Conic_2SP",
      "lcc",
      "Lambert Conic Conformal (1SP)",
      "Lambert Conic Conformal (2SP)"
    ];

    var lcc = {
      init: init$10,
      forward: forward$9,
      inverse: inverse$9,
      names: names$11
    };

    function init$11() {
      this.a = 6377397.155;
      this.es = 0.006674372230614;
      this.e = Math.sqrt(this.es);
      if (!this.lat0) {
        this.lat0 = 0.863937979737193;
      }
      if (!this.long0) {
        this.long0 = 0.7417649320975901 - 0.308341501185665;
      }
      /* if scale not set default to 0.9999 */
      if (!this.k0) {
        this.k0 = 0.9999;
      }
      this.s45 = 0.785398163397448; /* 45 */
      this.s90 = 2 * this.s45;
      this.fi0 = this.lat0;
      this.e2 = this.es;
      this.e = Math.sqrt(this.e2);
      this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));
      this.uq = 1.04216856380474;
      this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);
      this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);
      this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;
      this.k1 = this.k0;
      this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));
      this.s0 = 1.37008346281555;
      this.n = Math.sin(this.s0);
      this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);
      this.ad = this.s90 - this.uq;
    }

    /* ellipsoid */
    /* calculate xy from lat/lon */
    /* Constants, identical to inverse transform function */
    function forward$10(p) {
      var gfi, u, deltav, s, d, eps, ro;
      var lon = p.x;
      var lat = p.y;
      var delta_lon = adjust_lon(lon - this.long0);
      /* Transformation */
      gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));
      u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);
      deltav = -delta_lon * this.alfa;
      s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));
      d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));
      eps = this.n * d;
      ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);
      p.y = ro * Math.cos(eps) / 1;
      p.x = ro * Math.sin(eps) / 1;

      if (!this.czech) {
        p.y *= -1;
        p.x *= -1;
      }
      return (p);
    }

    /* calculate lat/lon from xy */
    function inverse$10(p) {
      var u, deltav, s, d, eps, ro, fi1;
      var ok;

      /* Transformation */
      /* revert y, x*/
      var tmp = p.x;
      p.x = p.y;
      p.y = tmp;
      if (!this.czech) {
        p.y *= -1;
        p.x *= -1;
      }
      ro = Math.sqrt(p.x * p.x + p.y * p.y);
      eps = Math.atan2(p.y, p.x);
      d = eps / Math.sin(this.s0);
      s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);
      u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));
      deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));
      p.x = this.long0 - deltav / this.alfa;
      fi1 = u;
      ok = 0;
      var iter = 0;
      do {
        p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);
        if (Math.abs(fi1 - p.y) < 0.0000000001) {
          ok = 1;
        }
        fi1 = p.y;
        iter += 1;
      } while (ok === 0 && iter < 15);
      if (iter >= 15) {
        return null;
      }

      return (p);
    }

    var names$12 = ["Krovak", "krovak"];
    var krovak = {
      init: init$11,
      forward: forward$10,
      inverse: inverse$10,
      names: names$12
    };

    var mlfn = function(e0, e1, e2, e3, phi) {
      return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));
    };

    var e0fn = function(x) {
      return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));
    };

    var e1fn = function(x) {
      return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));
    };

    var e2fn = function(x) {
      return (0.05859375 * x * x * (1 + 0.75 * x));
    };

    var e3fn = function(x) {
      return (x * x * x * (35 / 3072));
    };

    var gN = function(a, e, sinphi) {
      var temp = e * sinphi;
      return a / Math.sqrt(1 - temp * temp);
    };

    var adjust_lat = function(x) {
      return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));
    };

    var imlfn = function(ml, e0, e1, e2, e3) {
      var phi;
      var dphi;

      phi = ml / e0;
      for (var i = 0; i < 15; i++) {
        dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));
        phi += dphi;
        if (Math.abs(dphi) <= 0.0000000001) {
          return phi;
        }
      }

      //..reportError("IMLFN-CONV:Latitude failed to converge after 15 iterations");
      return NaN;
    };

    function init$12() {
      if (!this.sphere) {
        this.e0 = e0fn(this.es);
        this.e1 = e1fn(this.es);
        this.e2 = e2fn(this.es);
        this.e3 = e3fn(this.es);
        this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
      }
    }

    /* Cassini forward equations--mapping lat,long to x,y
      -----------------------------------------------------------------------*/
    function forward$11(p) {

      /* Forward equations
          -----------------*/
      var x, y;
      var lam = p.x;
      var phi = p.y;
      lam = adjust_lon(lam - this.long0);

      if (this.sphere) {
        x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));
        y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);
      }
      else {
        //ellipsoid
        var sinphi = Math.sin(phi);
        var cosphi = Math.cos(phi);
        var nl = gN(this.a, this.e, sinphi);
        var tl = Math.tan(phi) * Math.tan(phi);
        var al = lam * Math.cos(phi);
        var asq = al * al;
        var cl = this.es * cosphi * cosphi / (1 - this.es);
        var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);

        x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));
        y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);


      }

      p.x = x + this.x0;
      p.y = y + this.y0;
      return p;
    }

    /* Inverse equations
      -----------------*/
    function inverse$11(p) {
      p.x -= this.x0;
      p.y -= this.y0;
      var x = p.x / this.a;
      var y = p.y / this.a;
      var phi, lam;

      if (this.sphere) {
        var dd = y + this.lat0;
        phi = Math.asin(Math.sin(dd) * Math.cos(x));
        lam = Math.atan2(Math.tan(x), Math.cos(dd));
      }
      else {
        /* ellipsoid */
        var ml1 = this.ml0 / this.a + y;
        var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);
        if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {
          p.x = this.long0;
          p.y = HALF_PI;
          if (y < 0) {
            p.y *= -1;
          }
          return p;
        }
        var nl1 = gN(this.a, this.e, Math.sin(phi1));

        var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);
        var tl1 = Math.pow(Math.tan(phi1), 2);
        var dl = x * this.a / nl1;
        var dsq = dl * dl;
        phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);
        lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);

      }

      p.x = adjust_lon(lam + this.long0);
      p.y = adjust_lat(phi);
      return p;

    }

    var names$13 = ["Cassini", "Cassini_Soldner", "cass"];
    var cass = {
      init: init$12,
      forward: forward$11,
      inverse: inverse$11,
      names: names$13
    };

    var qsfnz = function(eccent, sinphi) {
      var con;
      if (eccent > 1.0e-7) {
        con = eccent * sinphi;
        return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));
      }
      else {
        return (2 * sinphi);
      }
    };

    /*
      reference
        "New Equal-Area Map Projections for Noncircular Regions", John P. Snyder,
        The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.
      */

    var S_POLE = 1;

    var N_POLE = 2;
    var EQUIT = 3;
    var OBLIQ = 4;

    /* Initialize the Lambert Azimuthal Equal Area projection
      ------------------------------------------------------*/
    function init$13() {
      var t = Math.abs(this.lat0);
      if (Math.abs(t - HALF_PI) < EPSLN) {
        this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;
      }
      else if (Math.abs(t) < EPSLN) {
        this.mode = this.EQUIT;
      }
      else {
        this.mode = this.OBLIQ;
      }
      if (this.es > 0) {
        var sinphi;

        this.qp = qsfnz(this.e, 1);
        this.mmf = 0.5 / (1 - this.es);
        this.apa = authset(this.es);
        switch (this.mode) {
        case this.N_POLE:
          this.dd = 1;
          break;
        case this.S_POLE:
          this.dd = 1;
          break;
        case this.EQUIT:
          this.rq = Math.sqrt(0.5 * this.qp);
          this.dd = 1 / this.rq;
          this.xmf = 1;
          this.ymf = 0.5 * this.qp;
          break;
        case this.OBLIQ:
          this.rq = Math.sqrt(0.5 * this.qp);
          sinphi = Math.sin(this.lat0);
          this.sinb1 = qsfnz(this.e, sinphi) / this.qp;
          this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);
          this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);
          this.ymf = (this.xmf = this.rq) / this.dd;
          this.xmf *= this.dd;
          break;
        }
      }
      else {
        if (this.mode === this.OBLIQ) {
          this.sinph0 = Math.sin(this.lat0);
          this.cosph0 = Math.cos(this.lat0);
        }
      }
    }

    /* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y
      -----------------------------------------------------------------------*/
    function forward$12(p) {

      /* Forward equations
          -----------------*/
      var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;
      var lam = p.x;
      var phi = p.y;

      lam = adjust_lon(lam - this.long0);
      if (this.sphere) {
        sinphi = Math.sin(phi);
        cosphi = Math.cos(phi);
        coslam = Math.cos(lam);
        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
          y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
          if (y <= EPSLN) {
            return null;
          }
          y = Math.sqrt(2 / y);
          x = y * cosphi * Math.sin(lam);
          y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
        }
        else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
          if (this.mode === this.N_POLE) {
            coslam = -coslam;
          }
          if (Math.abs(phi + this.lat0) < EPSLN) {
            return null;
          }
          y = FORTPI - phi * 0.5;
          y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));
          x = y * Math.sin(lam);
          y *= coslam;
        }
      }
      else {
        sinb = 0;
        cosb = 0;
        b = 0;
        coslam = Math.cos(lam);
        sinlam = Math.sin(lam);
        sinphi = Math.sin(phi);
        q = qsfnz(this.e, sinphi);
        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
          sinb = q / this.qp;
          cosb = Math.sqrt(1 - sinb * sinb);
        }
        switch (this.mode) {
        case this.OBLIQ:
          b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;
          break;
        case this.EQUIT:
          b = 1 + cosb * coslam;
          break;
        case this.N_POLE:
          b = HALF_PI + phi;
          q = this.qp - q;
          break;
        case this.S_POLE:
          b = phi - HALF_PI;
          q = this.qp + q;
          break;
        }
        if (Math.abs(b) < EPSLN) {
          return null;
        }
        switch (this.mode) {
        case this.OBLIQ:
        case this.EQUIT:
          b = Math.sqrt(2 / b);
          if (this.mode === this.OBLIQ) {
            y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);
          }
          else {
            y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;
          }
          x = this.xmf * b * cosb * sinlam;
          break;
        case this.N_POLE:
        case this.S_POLE:
          if (q >= 0) {
            x = (b = Math.sqrt(q)) * sinlam;
            y = coslam * ((this.mode === this.S_POLE) ? b : -b);
          }
          else {
            x = y = 0;
          }
          break;
        }
      }

      p.x = this.a * x + this.x0;
      p.y = this.a * y + this.y0;
      return p;
    }

    /* Inverse equations
      -----------------*/
    function inverse$12(p) {
      p.x -= this.x0;
      p.y -= this.y0;
      var x = p.x / this.a;
      var y = p.y / this.a;
      var lam, phi, cCe, sCe, q, rho, ab;
      if (this.sphere) {
        var cosz = 0,
          rh, sinz = 0;

        rh = Math.sqrt(x * x + y * y);
        phi = rh * 0.5;
        if (phi > 1) {
          return null;
        }
        phi = 2 * Math.asin(phi);
        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
          sinz = Math.sin(phi);
          cosz = Math.cos(phi);
        }
        switch (this.mode) {
        case this.EQUIT:
          phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);
          x *= sinz;
          y = cosz * rh;
          break;
        case this.OBLIQ:
          phi = (Math.abs(rh) <= EPSLN) ? this.lat0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);
          x *= sinz * this.cosph0;
          y = (cosz - Math.sin(phi) * this.sinph0) * rh;
          break;
        case this.N_POLE:
          y = -y;
          phi = HALF_PI - phi;
          break;
        case this.S_POLE:
          phi -= HALF_PI;
          break;
        }
        lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);
      }
      else {
        ab = 0;
        if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {
          x /= this.dd;
          y *= this.dd;
          rho = Math.sqrt(x * x + y * y);
          if (rho < EPSLN) {
            p.x = this.long0;
            p.y = this.lat0;
            return p;
          }
          sCe = 2 * Math.asin(0.5 * rho / this.rq);
          cCe = Math.cos(sCe);
          x *= (sCe = Math.sin(sCe));
          if (this.mode === this.OBLIQ) {
            ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;
            q = this.qp * ab;
            y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;
          }
          else {
            ab = y * sCe / rho;
            q = this.qp * ab;
            y = rho * cCe;
          }
        }
        else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {
          if (this.mode === this.N_POLE) {
            y = -y;
          }
          q = (x * x + y * y);
          if (!q) {
            p.x = this.long0;
            p.y = this.lat0;
            return p;
          }
          ab = 1 - q / this.qp;
          if (this.mode === this.S_POLE) {
            ab = -ab;
          }
        }
        lam = Math.atan2(x, y);
        phi = authlat(Math.asin(ab), this.apa);
      }

      p.x = adjust_lon(this.long0 + lam);
      p.y = phi;
      return p;
    }

    /* determine latitude from authalic latitude */
    var P00 = 0.33333333333333333333;

    var P01 = 0.17222222222222222222;
    var P02 = 0.10257936507936507936;
    var P10 = 0.06388888888888888888;
    var P11 = 0.06640211640211640211;
    var P20 = 0.01641501294219154443;

    function authset(es) {
      var t;
      var APA = [];
      APA[0] = es * P00;
      t = es * es;
      APA[0] += t * P01;
      APA[1] = t * P10;
      t *= es;
      APA[0] += t * P02;
      APA[1] += t * P11;
      APA[2] = t * P20;
      return APA;
    }

    function authlat(beta, APA) {
      var t = beta + beta;
      return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));
    }

    var names$14 = ["Lambert Azimuthal Equal Area", "Lambert_Azimuthal_Equal_Area", "laea"];
    var laea = {
      init: init$13,
      forward: forward$12,
      inverse: inverse$12,
      names: names$14,
      S_POLE: S_POLE,
      N_POLE: N_POLE,
      EQUIT: EQUIT,
      OBLIQ: OBLIQ
    };

    var asinz = function(x) {
      if (Math.abs(x) > 1) {
        x = (x > 1) ? 1 : -1;
      }
      return Math.asin(x);
    };

    function init$14() {

      if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
        return;
      }
      this.temp = this.b / this.a;
      this.es = 1 - Math.pow(this.temp, 2);
      this.e3 = Math.sqrt(this.es);

      this.sin_po = Math.sin(this.lat1);
      this.cos_po = Math.cos(this.lat1);
      this.t1 = this.sin_po;
      this.con = this.sin_po;
      this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);
      this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);

      this.sin_po = Math.sin(this.lat2);
      this.cos_po = Math.cos(this.lat2);
      this.t2 = this.sin_po;
      this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);
      this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);

      this.sin_po = Math.sin(this.lat0);
      this.cos_po = Math.cos(this.lat0);
      this.t3 = this.sin_po;
      this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);

      if (Math.abs(this.lat1 - this.lat2) > EPSLN) {
        this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);
      }
      else {
        this.ns0 = this.con;
      }
      this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;
      this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;
    }

    /* Albers Conical Equal Area forward equations--mapping lat,long to x,y
      -------------------------------------------------------------------*/
    function forward$13(p) {

      var lon = p.x;
      var lat = p.y;

      this.sin_phi = Math.sin(lat);
      this.cos_phi = Math.cos(lat);

      var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);
      var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;
      var theta = this.ns0 * adjust_lon(lon - this.long0);
      var x = rh1 * Math.sin(theta) + this.x0;
      var y = this.rh - rh1 * Math.cos(theta) + this.y0;

      p.x = x;
      p.y = y;
      return p;
    }

    function inverse$13(p) {
      var rh1, qs, con, theta, lon, lat;

      p.x -= this.x0;
      p.y = this.rh - p.y + this.y0;
      if (this.ns0 >= 0) {
        rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
        con = 1;
      }
      else {
        rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
        con = -1;
      }
      theta = 0;
      if (rh1 !== 0) {
        theta = Math.atan2(con * p.x, con * p.y);
      }
      con = rh1 * this.ns0 / this.a;
      if (this.sphere) {
        lat = Math.asin((this.c - con * con) / (2 * this.ns0));
      }
      else {
        qs = (this.c - con * con) / this.ns0;
        lat = this.phi1z(this.e3, qs);
      }

      lon = adjust_lon(theta / this.ns0 + this.long0);
      p.x = lon;
      p.y = lat;
      return p;
    }

    /* Function to compute phi1, the latitude for the inverse of the
       Albers Conical Equal-Area projection.
    -------------------------------------------*/
    function phi1z(eccent, qs) {
      var sinphi, cosphi, con, com, dphi;
      var phi = asinz(0.5 * qs);
      if (eccent < EPSLN) {
        return phi;
      }

      var eccnts = eccent * eccent;
      for (var i = 1; i <= 25; i++) {
        sinphi = Math.sin(phi);
        cosphi = Math.cos(phi);
        con = eccent * sinphi;
        com = 1 - con * con;
        dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
        phi = phi + dphi;
        if (Math.abs(dphi) <= 1e-7) {
          return phi;
        }
      }
      return null;
    }

    var names$15 = ["Albers_Conic_Equal_Area", "Albers", "aea"];
    var aea = {
      init: init$14,
      forward: forward$13,
      inverse: inverse$13,
      names: names$15,
      phi1z: phi1z
    };

    /*
      reference:
        Wolfram Mathworld "Gnomonic Projection"
        http://mathworld.wolfram.com/GnomonicProjection.html
        Accessed: 12th November 2009
      */
    function init$15() {

      /* Place parameters in static storage for common use
          -------------------------------------------------*/
      this.sin_p14 = Math.sin(this.lat0);
      this.cos_p14 = Math.cos(this.lat0);
      // Approximation for projecting points to the horizon (infinity)
      this.infinity_dist = 1000 * this.a;
      this.rc = 1;
    }

    /* Gnomonic forward equations--mapping lat,long to x,y
        ---------------------------------------------------*/
    function forward$14(p) {
      var sinphi, cosphi; /* sin and cos value        */
      var dlon; /* delta longitude value      */
      var coslon; /* cos of longitude        */
      var ksp; /* scale factor          */
      var g;
      var x, y;
      var lon = p.x;
      var lat = p.y;
      /* Forward equations
          -----------------*/
      dlon = adjust_lon(lon - this.long0);

      sinphi = Math.sin(lat);
      cosphi = Math.cos(lat);

      coslon = Math.cos(dlon);
      g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
      ksp = 1;
      if ((g > 0) || (Math.abs(g) <= EPSLN)) {
        x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;
        y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;
      }
      else {

        // Point is in the opposing hemisphere and is unprojectable
        // We still need to return a reasonable point, so we project
        // to infinity, on a bearing
        // equivalent to the northern hemisphere equivalent
        // This is a reasonable approximation for short shapes and lines that
        // straddle the horizon.

        x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);
        y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);

      }
      p.x = x;
      p.y = y;
      return p;
    }

    function inverse$14(p) {
      var rh; /* Rho */
      var sinc, cosc;
      var c;
      var lon, lat;

      /* Inverse equations
          -----------------*/
      p.x = (p.x - this.x0) / this.a;
      p.y = (p.y - this.y0) / this.a;

      p.x /= this.k0;
      p.y /= this.k0;

      if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {
        c = Math.atan2(rh, this.rc);
        sinc = Math.sin(c);
        cosc = Math.cos(c);

        lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);
        lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);
        lon = adjust_lon(this.long0 + lon);
      }
      else {
        lat = this.phic0;
        lon = 0;
      }

      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$16 = ["gnom"];
    var gnom = {
      init: init$15,
      forward: forward$14,
      inverse: inverse$14,
      names: names$16
    };

    var iqsfnz = function(eccent, q) {
      var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));
      if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {
        if (q < 0) {
          return (-1 * HALF_PI);
        }
        else {
          return HALF_PI;
        }
      }
      //var phi = 0.5* q/(1-eccent*eccent);
      var phi = Math.asin(0.5 * q);
      var dphi;
      var sin_phi;
      var cos_phi;
      var con;
      for (var i = 0; i < 30; i++) {
        sin_phi = Math.sin(phi);
        cos_phi = Math.cos(phi);
        con = eccent * sin_phi;
        dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));
        phi += dphi;
        if (Math.abs(dphi) <= 0.0000000001) {
          return phi;
        }
      }

      //console.log("IQSFN-CONV:Latitude failed to converge after 30 iterations");
      return NaN;
    };

    /*
      reference:
        "Cartographic Projection Procedures for the UNIX Environment-
        A User's Manual" by Gerald I. Evenden,
        USGS Open File Report 90-284and Release 4 Interim Reports (2003)
    */
    function init$16() {
      //no-op
      if (!this.sphere) {
        this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));
      }
    }

    /* Cylindrical Equal Area forward equations--mapping lat,long to x,y
        ------------------------------------------------------------*/
    function forward$15(p) {
      var lon = p.x;
      var lat = p.y;
      var x, y;
      /* Forward equations
          -----------------*/
      var dlon = adjust_lon(lon - this.long0);
      if (this.sphere) {
        x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);
        y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);
      }
      else {
        var qs = qsfnz(this.e, Math.sin(lat));
        x = this.x0 + this.a * this.k0 * dlon;
        y = this.y0 + this.a * qs * 0.5 / this.k0;
      }

      p.x = x;
      p.y = y;
      return p;
    }

    /* Cylindrical Equal Area inverse equations--mapping x,y to lat/long
        ------------------------------------------------------------*/
    function inverse$15(p) {
      p.x -= this.x0;
      p.y -= this.y0;
      var lon, lat;

      if (this.sphere) {
        lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));
        lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));
      }
      else {
        lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);
        lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));
      }

      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$17 = ["cea"];
    var cea = {
      init: init$16,
      forward: forward$15,
      inverse: inverse$15,
      names: names$17
    };

    function init$17() {

      this.x0 = this.x0 || 0;
      this.y0 = this.y0 || 0;
      this.lat0 = this.lat0 || 0;
      this.long0 = this.long0 || 0;
      this.lat_ts = this.lat_ts || 0;
      this.title = this.title || "Equidistant Cylindrical (Plate Carre)";

      this.rc = Math.cos(this.lat_ts);
    }

    // forward equations--mapping lat,long to x,y
    // -----------------------------------------------------------------
    function forward$16(p) {

      var lon = p.x;
      var lat = p.y;

      var dlon = adjust_lon(lon - this.long0);
      var dlat = adjust_lat(lat - this.lat0);
      p.x = this.x0 + (this.a * dlon * this.rc);
      p.y = this.y0 + (this.a * dlat);
      return p;
    }

    // inverse equations--mapping x,y to lat/long
    // -----------------------------------------------------------------
    function inverse$16(p) {

      var x = p.x;
      var y = p.y;

      p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));
      p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));
      return p;
    }

    var names$18 = ["Equirectangular", "Equidistant_Cylindrical", "eqc"];
    var eqc = {
      init: init$17,
      forward: forward$16,
      inverse: inverse$16,
      names: names$18
    };

    var MAX_ITER$2 = 20;

    function init$18() {
      /* Place parameters in static storage for common use
          -------------------------------------------------*/
      this.temp = this.b / this.a;
      this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles
      this.e = Math.sqrt(this.es);
      this.e0 = e0fn(this.es);
      this.e1 = e1fn(this.es);
      this.e2 = e2fn(this.es);
      this.e3 = e3fn(this.es);
      this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas
    }

    /* Polyconic forward equations--mapping lat,long to x,y
        ---------------------------------------------------*/
    function forward$17(p) {
      var lon = p.x;
      var lat = p.y;
      var x, y, el;
      var dlon = adjust_lon(lon - this.long0);
      el = dlon * Math.sin(lat);
      if (this.sphere) {
        if (Math.abs(lat) <= EPSLN) {
          x = this.a * dlon;
          y = -1 * this.a * this.lat0;
        }
        else {
          x = this.a * Math.sin(el) / Math.tan(lat);
          y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));
        }
      }
      else {
        if (Math.abs(lat) <= EPSLN) {
          x = this.a * dlon;
          y = -1 * this.ml0;
        }
        else {
          var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);
          x = nl * Math.sin(el);
          y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));
        }

      }
      p.x = x + this.x0;
      p.y = y + this.y0;
      return p;
    }

    /* Inverse equations
      -----------------*/
    function inverse$17(p) {
      var lon, lat, x, y, i;
      var al, bl;
      var phi, dphi;
      x = p.x - this.x0;
      y = p.y - this.y0;

      if (this.sphere) {
        if (Math.abs(y + this.a * this.lat0) <= EPSLN) {
          lon = adjust_lon(x / this.a + this.long0);
          lat = 0;
        }
        else {
          al = this.lat0 + y / this.a;
          bl = x * x / this.a / this.a + al * al;
          phi = al;
          var tanphi;
          for (i = MAX_ITER$2; i; --i) {
            tanphi = Math.tan(phi);
            dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);
            phi += dphi;
            if (Math.abs(dphi) <= EPSLN) {
              lat = phi;
              break;
            }
          }
          lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));
        }
      }
      else {
        if (Math.abs(y + this.ml0) <= EPSLN) {
          lat = 0;
          lon = adjust_lon(this.long0 + x / this.a);
        }
        else {

          al = (this.ml0 + y) / this.a;
          bl = x * x / this.a / this.a + al * al;
          phi = al;
          var cl, mln, mlnp, ma;
          var con;
          for (i = MAX_ITER$2; i; --i) {
            con = this.e * Math.sin(phi);
            cl = Math.sqrt(1 - con * con) * Math.tan(phi);
            mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);
            mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);
            ma = mln / this.a;
            dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);
            phi -= dphi;
            if (Math.abs(dphi) <= EPSLN) {
              lat = phi;
              break;
            }
          }

          //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);
          cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);
          lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));
        }
      }

      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$19 = ["Polyconic", "poly"];
    var poly = {
      init: init$18,
      forward: forward$17,
      inverse: inverse$17,
      names: names$19
    };

    /*
      reference
        Department of Land and Survey Technical Circular 1973/32
          http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf
        OSG Technical Report 4.1
          http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf
      */

    /**
     * iterations: Number of iterations to refine inverse transform.
     *     0 -> km accuracy
     *     1 -> m accuracy -- suitable for most mapping applications
     *     2 -> mm accuracy
     */


    function init$19() {
      this.A = [];
      this.A[1] = 0.6399175073;
      this.A[2] = -0.1358797613;
      this.A[3] = 0.063294409;
      this.A[4] = -0.02526853;
      this.A[5] = 0.0117879;
      this.A[6] = -0.0055161;
      this.A[7] = 0.0026906;
      this.A[8] = -0.001333;
      this.A[9] = 0.00067;
      this.A[10] = -0.00034;

      this.B_re = [];
      this.B_im = [];
      this.B_re[1] = 0.7557853228;
      this.B_im[1] = 0;
      this.B_re[2] = 0.249204646;
      this.B_im[2] = 0.003371507;
      this.B_re[3] = -0.001541739;
      this.B_im[3] = 0.041058560;
      this.B_re[4] = -0.10162907;
      this.B_im[4] = 0.01727609;
      this.B_re[5] = -0.26623489;
      this.B_im[5] = -0.36249218;
      this.B_re[6] = -0.6870983;
      this.B_im[6] = -1.1651967;

      this.C_re = [];
      this.C_im = [];
      this.C_re[1] = 1.3231270439;
      this.C_im[1] = 0;
      this.C_re[2] = -0.577245789;
      this.C_im[2] = -0.007809598;
      this.C_re[3] = 0.508307513;
      this.C_im[3] = -0.112208952;
      this.C_re[4] = -0.15094762;
      this.C_im[4] = 0.18200602;
      this.C_re[5] = 1.01418179;
      this.C_im[5] = 1.64497696;
      this.C_re[6] = 1.9660549;
      this.C_im[6] = 2.5127645;

      this.D = [];
      this.D[1] = 1.5627014243;
      this.D[2] = 0.5185406398;
      this.D[3] = -0.03333098;
      this.D[4] = -0.1052906;
      this.D[5] = -0.0368594;
      this.D[6] = 0.007317;
      this.D[7] = 0.01220;
      this.D[8] = 0.00394;
      this.D[9] = -0.0013;
    }

    /**
        New Zealand Map Grid Forward  - long/lat to x/y
        long/lat in radians
      */
    function forward$18(p) {
      var n;
      var lon = p.x;
      var lat = p.y;

      var delta_lat = lat - this.lat0;
      var delta_lon = lon - this.long0;

      // 1. Calculate d_phi and d_psi    ...                          // and d_lambda
      // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.
      var d_phi = delta_lat / SEC_TO_RAD * 1E-5;
      var d_lambda = delta_lon;
      var d_phi_n = 1; // d_phi^0

      var d_psi = 0;
      for (n = 1; n <= 10; n++) {
        d_phi_n = d_phi_n * d_phi;
        d_psi = d_psi + this.A[n] * d_phi_n;
      }

      // 2. Calculate theta
      var th_re = d_psi;
      var th_im = d_lambda;

      // 3. Calculate z
      var th_n_re = 1;
      var th_n_im = 0; // theta^0
      var th_n_re1;
      var th_n_im1;

      var z_re = 0;
      var z_im = 0;
      for (n = 1; n <= 6; n++) {
        th_n_re1 = th_n_re * th_re - th_n_im * th_im;
        th_n_im1 = th_n_im * th_re + th_n_re * th_im;
        th_n_re = th_n_re1;
        th_n_im = th_n_im1;
        z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;
        z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;
      }

      // 4. Calculate easting and northing
      p.x = (z_im * this.a) + this.x0;
      p.y = (z_re * this.a) + this.y0;

      return p;
    }

    /**
        New Zealand Map Grid Inverse  -  x/y to long/lat
      */
    function inverse$18(p) {
      var n;
      var x = p.x;
      var y = p.y;

      var delta_x = x - this.x0;
      var delta_y = y - this.y0;

      // 1. Calculate z
      var z_re = delta_y / this.a;
      var z_im = delta_x / this.a;

      // 2a. Calculate theta - first approximation gives km accuracy
      var z_n_re = 1;
      var z_n_im = 0; // z^0
      var z_n_re1;
      var z_n_im1;

      var th_re = 0;
      var th_im = 0;
      for (n = 1; n <= 6; n++) {
        z_n_re1 = z_n_re * z_re - z_n_im * z_im;
        z_n_im1 = z_n_im * z_re + z_n_re * z_im;
        z_n_re = z_n_re1;
        z_n_im = z_n_im1;
        th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;
        th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;
      }

      // 2b. Iterate to refine the accuracy of the calculation
      //        0 iterations gives km accuracy
      //        1 iteration gives m accuracy -- good enough for most mapping applications
      //        2 iterations bives mm accuracy
      for (var i = 0; i < this.iterations; i++) {
        var th_n_re = th_re;
        var th_n_im = th_im;
        var th_n_re1;
        var th_n_im1;

        var num_re = z_re;
        var num_im = z_im;
        for (n = 2; n <= 6; n++) {
          th_n_re1 = th_n_re * th_re - th_n_im * th_im;
          th_n_im1 = th_n_im * th_re + th_n_re * th_im;
          th_n_re = th_n_re1;
          th_n_im = th_n_im1;
          num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
          num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
        }

        th_n_re = 1;
        th_n_im = 0;
        var den_re = this.B_re[1];
        var den_im = this.B_im[1];
        for (n = 2; n <= 6; n++) {
          th_n_re1 = th_n_re * th_re - th_n_im * th_im;
          th_n_im1 = th_n_im * th_re + th_n_re * th_im;
          th_n_re = th_n_re1;
          th_n_im = th_n_im1;
          den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);
          den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);
        }

        // Complex division
        var den2 = den_re * den_re + den_im * den_im;
        th_re = (num_re * den_re + num_im * den_im) / den2;
        th_im = (num_im * den_re - num_re * den_im) / den2;
      }

      // 3. Calculate d_phi              ...                                    // and d_lambda
      var d_psi = th_re;
      var d_lambda = th_im;
      var d_psi_n = 1; // d_psi^0

      var d_phi = 0;
      for (n = 1; n <= 9; n++) {
        d_psi_n = d_psi_n * d_psi;
        d_phi = d_phi + this.D[n] * d_psi_n;
      }

      // 4. Calculate latitude and longitude
      // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.
      var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);
      var lon = this.long0 + d_lambda;

      p.x = lon;
      p.y = lat;

      return p;
    }

    var names$20 = ["New_Zealand_Map_Grid", "nzmg"];
    var nzmg = {
      init: init$19,
      forward: forward$18,
      inverse: inverse$18,
      names: names$20
    };

    /*
      reference
        "New Equal-Area Map Projections for Noncircular Regions", John P. Snyder,
        The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.
      */


    /* Initialize the Miller Cylindrical projection
      -------------------------------------------*/
    function init$20() {
      //no-op
    }

    /* Miller Cylindrical forward equations--mapping lat,long to x,y
        ------------------------------------------------------------*/
    function forward$19(p) {
      var lon = p.x;
      var lat = p.y;
      /* Forward equations
          -----------------*/
      var dlon = adjust_lon(lon - this.long0);
      var x = this.x0 + this.a * dlon;
      var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;

      p.x = x;
      p.y = y;
      return p;
    }

    /* Miller Cylindrical inverse equations--mapping x,y to lat/long
        ------------------------------------------------------------*/
    function inverse$19(p) {
      p.x -= this.x0;
      p.y -= this.y0;

      var lon = adjust_lon(this.long0 + p.x / this.a);
      var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);

      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$21 = ["Miller_Cylindrical", "mill"];
    var mill = {
      init: init$20,
      forward: forward$19,
      inverse: inverse$19,
      names: names$21
    };

    var MAX_ITER$3 = 20;
    function init$21() {
      /* Place parameters in static storage for common use
        -------------------------------------------------*/


      if (!this.sphere) {
        this.en = pj_enfn(this.es);
      }
      else {
        this.n = 1;
        this.m = 0;
        this.es = 0;
        this.C_y = Math.sqrt((this.m + 1) / this.n);
        this.C_x = this.C_y / (this.m + 1);
      }

    }

    /* Sinusoidal forward equations--mapping lat,long to x,y
      -----------------------------------------------------*/
    function forward$20(p) {
      var x, y;
      var lon = p.x;
      var lat = p.y;
      /* Forward equations
        -----------------*/
      lon = adjust_lon(lon - this.long0);

      if (this.sphere) {
        if (!this.m) {
          lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;
        }
        else {
          var k = this.n * Math.sin(lat);
          for (var i = MAX_ITER$3; i; --i) {
            var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));
            lat -= V;
            if (Math.abs(V) < EPSLN) {
              break;
            }
          }
        }
        x = this.a * this.C_x * lon * (this.m + Math.cos(lat));
        y = this.a * this.C_y * lat;

      }
      else {

        var s = Math.sin(lat);
        var c = Math.cos(lat);
        y = this.a * pj_mlfn(lat, s, c, this.en);
        x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);
      }

      p.x = x;
      p.y = y;
      return p;
    }

    function inverse$20(p) {
      var lat, temp, lon, s;

      p.x -= this.x0;
      lon = p.x / this.a;
      p.y -= this.y0;
      lat = p.y / this.a;

      if (this.sphere) {
        lat /= this.C_y;
        lon = lon / (this.C_x * (this.m + Math.cos(lat)));
        if (this.m) {
          lat = asinz((this.m * lat + Math.sin(lat)) / this.n);
        }
        else if (this.n !== 1) {
          lat = asinz(Math.sin(lat) / this.n);
        }
        lon = adjust_lon(lon + this.long0);
        lat = adjust_lat(lat);
      }
      else {
        lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);
        s = Math.abs(lat);
        if (s < HALF_PI) {
          s = Math.sin(lat);
          temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));
          //temp = this.long0 + p.x / (this.a * Math.cos(lat));
          lon = adjust_lon(temp);
        }
        else if ((s - EPSLN) < HALF_PI) {
          lon = this.long0;
        }
      }
      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$22 = ["Sinusoidal", "sinu"];
    var sinu = {
      init: init$21,
      forward: forward$20,
      inverse: inverse$20,
      names: names$22
    };

    function init$22() {}
    /* Mollweide forward equations--mapping lat,long to x,y
        ----------------------------------------------------*/
    function forward$21(p) {

      /* Forward equations
          -----------------*/
      var lon = p.x;
      var lat = p.y;

      var delta_lon = adjust_lon(lon - this.long0);
      var theta = lat;
      var con = Math.PI * Math.sin(lat);

      /* Iterate using the Newton-Raphson method to find theta
          -----------------------------------------------------*/
      while (true) {
        var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));
        theta += delta_theta;
        if (Math.abs(delta_theta) < EPSLN) {
          break;
        }
      }
      theta /= 2;

      /* If the latitude is 90 deg, force the x coordinate to be "0 + false easting"
           this is done here because of precision problems with "cos(theta)"
           --------------------------------------------------------------------------*/
      if (Math.PI / 2 - Math.abs(lat) < EPSLN) {
        delta_lon = 0;
      }
      var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;
      var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;

      p.x = x;
      p.y = y;
      return p;
    }

    function inverse$21(p) {
      var theta;
      var arg;

      /* Inverse equations
          -----------------*/
      p.x -= this.x0;
      p.y -= this.y0;
      arg = p.y / (1.4142135623731 * this.a);

      /* Because of division by zero problems, 'arg' can not be 1.  Therefore
           a number very close to one is used instead.
           -------------------------------------------------------------------*/
      if (Math.abs(arg) > 0.999999999999) {
        arg = 0.999999999999;
      }
      theta = Math.asin(arg);
      var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));
      if (lon < (-Math.PI)) {
        lon = -Math.PI;
      }
      if (lon > Math.PI) {
        lon = Math.PI;
      }
      arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;
      if (Math.abs(arg) > 1) {
        arg = 1;
      }
      var lat = Math.asin(arg);

      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$23 = ["Mollweide", "moll"];
    var moll = {
      init: init$22,
      forward: forward$21,
      inverse: inverse$21,
      names: names$23
    };

    function init$23() {

      /* Place parameters in static storage for common use
          -------------------------------------------------*/
      // Standard Parallels cannot be equal and on opposite sides of the equator
      if (Math.abs(this.lat1 + this.lat2) < EPSLN) {
        return;
      }
      this.lat2 = this.lat2 || this.lat1;
      this.temp = this.b / this.a;
      this.es = 1 - Math.pow(this.temp, 2);
      this.e = Math.sqrt(this.es);
      this.e0 = e0fn(this.es);
      this.e1 = e1fn(this.es);
      this.e2 = e2fn(this.es);
      this.e3 = e3fn(this.es);

      this.sinphi = Math.sin(this.lat1);
      this.cosphi = Math.cos(this.lat1);

      this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);
      this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);

      if (Math.abs(this.lat1 - this.lat2) < EPSLN) {
        this.ns = this.sinphi;
      }
      else {
        this.sinphi = Math.sin(this.lat2);
        this.cosphi = Math.cos(this.lat2);
        this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);
        this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);
        this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);
      }
      this.g = this.ml1 + this.ms1 / this.ns;
      this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);
      this.rh = this.a * (this.g - this.ml0);
    }

    /* Equidistant Conic forward equations--mapping lat,long to x,y
      -----------------------------------------------------------*/
    function forward$22(p) {
      var lon = p.x;
      var lat = p.y;
      var rh1;

      /* Forward equations
          -----------------*/
      if (this.sphere) {
        rh1 = this.a * (this.g - lat);
      }
      else {
        var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);
        rh1 = this.a * (this.g - ml);
      }
      var theta = this.ns * adjust_lon(lon - this.long0);
      var x = this.x0 + rh1 * Math.sin(theta);
      var y = this.y0 + this.rh - rh1 * Math.cos(theta);
      p.x = x;
      p.y = y;
      return p;
    }

    /* Inverse equations
      -----------------*/
    function inverse$22(p) {
      p.x -= this.x0;
      p.y = this.rh - p.y + this.y0;
      var con, rh1, lat, lon;
      if (this.ns >= 0) {
        rh1 = Math.sqrt(p.x * p.x + p.y * p.y);
        con = 1;
      }
      else {
        rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);
        con = -1;
      }
      var theta = 0;
      if (rh1 !== 0) {
        theta = Math.atan2(con * p.x, con * p.y);
      }

      if (this.sphere) {
        lon = adjust_lon(this.long0 + theta / this.ns);
        lat = adjust_lat(this.g - rh1 / this.a);
        p.x = lon;
        p.y = lat;
        return p;
      }
      else {
        var ml = this.g - rh1 / this.a;
        lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);
        lon = adjust_lon(this.long0 + theta / this.ns);
        p.x = lon;
        p.y = lat;
        return p;
      }

    }

    var names$24 = ["Equidistant_Conic", "eqdc"];
    var eqdc = {
      init: init$23,
      forward: forward$22,
      inverse: inverse$22,
      names: names$24
    };

    /* Initialize the Van Der Grinten projection
      ----------------------------------------*/
    function init$24() {
      //this.R = 6370997; //Radius of earth
      this.R = this.a;
    }

    function forward$23(p) {

      var lon = p.x;
      var lat = p.y;

      /* Forward equations
        -----------------*/
      var dlon = adjust_lon(lon - this.long0);
      var x, y;

      if (Math.abs(lat) <= EPSLN) {
        x = this.x0 + this.R * dlon;
        y = this.y0;
      }
      var theta = asinz(2 * Math.abs(lat / Math.PI));
      if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {
        x = this.x0;
        if (lat >= 0) {
          y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);
        }
        else {
          y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);
        }
        //  return(OK);
      }
      var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));
      var asq = al * al;
      var sinth = Math.sin(theta);
      var costh = Math.cos(theta);

      var g = costh / (sinth + costh - 1);
      var gsq = g * g;
      var m = g * (2 / sinth - 1);
      var msq = m * m;
      var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);
      if (dlon < 0) {
        con = -con;
      }
      x = this.x0 + con;
      //con = Math.abs(con / (Math.PI * this.R));
      var q = asq + g;
      con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);
      if (lat >= 0) {
        //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
        y = this.y0 + con;
      }
      else {
        //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);
        y = this.y0 - con;
      }
      p.x = x;
      p.y = y;
      return p;
    }

    /* Van Der Grinten inverse equations--mapping x,y to lat/long
      ---------------------------------------------------------*/
    function inverse$23(p) {
      var lon, lat;
      var xx, yy, xys, c1, c2, c3;
      var a1;
      var m1;
      var con;
      var th1;
      var d;

      /* inverse equations
        -----------------*/
      p.x -= this.x0;
      p.y -= this.y0;
      con = Math.PI * this.R;
      xx = p.x / con;
      yy = p.y / con;
      xys = xx * xx + yy * yy;
      c1 = -Math.abs(yy) * (1 + xys);
      c2 = c1 - 2 * yy * yy + xx * xx;
      c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;
      d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;
      a1 = (c1 - c2 * c2 / 3 / c3) / c3;
      m1 = 2 * Math.sqrt(-a1 / 3);
      con = ((3 * d) / a1) / m1;
      if (Math.abs(con) > 1) {
        if (con >= 0) {
          con = 1;
        }
        else {
          con = -1;
        }
      }
      th1 = Math.acos(con) / 3;
      if (p.y >= 0) {
        lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
      }
      else {
        lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;
      }

      if (Math.abs(xx) < EPSLN) {
        lon = this.long0;
      }
      else {
        lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);
      }

      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$25 = ["Van_der_Grinten_I", "VanDerGrinten", "vandg"];
    var vandg = {
      init: init$24,
      forward: forward$23,
      inverse: inverse$23,
      names: names$25
    };

    function init$25() {
      this.sin_p12 = Math.sin(this.lat0);
      this.cos_p12 = Math.cos(this.lat0);
    }

    function forward$24(p) {
      var lon = p.x;
      var lat = p.y;
      var sinphi = Math.sin(p.y);
      var cosphi = Math.cos(p.y);
      var dlon = adjust_lon(lon - this.long0);
      var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;
      if (this.sphere) {
        if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
          //North Pole case
          p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);
          p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);
          return p;
        }
        else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
          //South Pole case
          p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);
          p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);
          return p;
        }
        else {
          //default case
          cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);
          c = Math.acos(cos_c);
          kp = c ? c / Math.sin(c) : 1;
          p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);
          p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));
          return p;
        }
      }
      else {
        e0 = e0fn(this.es);
        e1 = e1fn(this.es);
        e2 = e2fn(this.es);
        e3 = e3fn(this.es);
        if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
          //North Pole case
          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
          Ml = this.a * mlfn(e0, e1, e2, e3, lat);
          p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);
          p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);
          return p;
        }
        else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
          //South Pole case
          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
          Ml = this.a * mlfn(e0, e1, e2, e3, lat);
          p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);
          p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);
          return p;
        }
        else {
          //Default case
          tanphi = sinphi / cosphi;
          Nl1 = gN(this.a, this.e, this.sin_p12);
          Nl = gN(this.a, this.e, sinphi);
          psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));
          Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));
          if (Az === 0) {
            s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
          }
          else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {
            s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));
          }
          else {
            s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));
          }
          G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);
          H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);
          GH = G * H;
          Hs = H * H;
          s2 = s * s;
          s3 = s2 * s;
          s4 = s3 * s;
          s5 = s4 * s;
          c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);
          p.x = this.x0 + c * Math.sin(Az);
          p.y = this.y0 + c * Math.cos(Az);
          return p;
        }
      }


    }

    function inverse$24(p) {
      p.x -= this.x0;
      p.y -= this.y0;
      var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F, sinpsi;
      if (this.sphere) {
        rh = Math.sqrt(p.x * p.x + p.y * p.y);
        if (rh > (2 * HALF_PI * this.a)) {
          return;
        }
        z = rh / this.a;

        sinz = Math.sin(z);
        cosz = Math.cos(z);

        lon = this.long0;
        if (Math.abs(rh) <= EPSLN) {
          lat = this.lat0;
        }
        else {
          lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);
          con = Math.abs(this.lat0) - HALF_PI;
          if (Math.abs(con) <= EPSLN) {
            if (this.lat0 >= 0) {
              lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));
            }
            else {
              lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));
            }
          }
          else {
            /*con = cosz - this.sin_p12 * Math.sin(lat);
            if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {
              //no-op, just keep the lon value as is
            } else {
              var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));
              lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));
            }*/
            lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));
          }
        }

        p.x = lon;
        p.y = lat;
        return p;
      }
      else {
        e0 = e0fn(this.es);
        e1 = e1fn(this.es);
        e2 = e2fn(this.es);
        e3 = e3fn(this.es);
        if (Math.abs(this.sin_p12 - 1) <= EPSLN) {
          //North pole case
          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
          rh = Math.sqrt(p.x * p.x + p.y * p.y);
          M = Mlp - rh;
          lat = imlfn(M / this.a, e0, e1, e2, e3);
          lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));
          p.x = lon;
          p.y = lat;
          return p;
        }
        else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {
          //South pole case
          Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);
          rh = Math.sqrt(p.x * p.x + p.y * p.y);
          M = rh - Mlp;

          lat = imlfn(M / this.a, e0, e1, e2, e3);
          lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));
          p.x = lon;
          p.y = lat;
          return p;
        }
        else {
          //default case
          rh = Math.sqrt(p.x * p.x + p.y * p.y);
          Az = Math.atan2(p.x, p.y);
          N1 = gN(this.a, this.e, this.sin_p12);
          cosAz = Math.cos(Az);
          tmp = this.e * this.cos_p12 * cosAz;
          A = -tmp * tmp / (1 - this.es);
          B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);
          D = rh / N1;
          Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;
          F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;
          psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);
          lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));
          sinpsi = Math.sin(psi);
          lat = Math.atan2((sinpsi - this.es * F * this.sin_p12) * Math.tan(psi), sinpsi * (1 - this.es));
          p.x = lon;
          p.y = lat;
          return p;
        }
      }

    }

    var names$26 = ["Azimuthal_Equidistant", "aeqd"];
    var aeqd = {
      init: init$25,
      forward: forward$24,
      inverse: inverse$24,
      names: names$26
    };

    function init$26() {
      //double temp;      /* temporary variable    */

      /* Place parameters in static storage for common use
          -------------------------------------------------*/
      this.sin_p14 = Math.sin(this.lat0);
      this.cos_p14 = Math.cos(this.lat0);
    }

    /* Orthographic forward equations--mapping lat,long to x,y
        ---------------------------------------------------*/
    function forward$25(p) {
      var sinphi, cosphi; /* sin and cos value        */
      var dlon; /* delta longitude value      */
      var coslon; /* cos of longitude        */
      var ksp; /* scale factor          */
      var g, x, y;
      var lon = p.x;
      var lat = p.y;
      /* Forward equations
          -----------------*/
      dlon = adjust_lon(lon - this.long0);

      sinphi = Math.sin(lat);
      cosphi = Math.cos(lat);

      coslon = Math.cos(dlon);
      g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;
      ksp = 1;
      if ((g > 0) || (Math.abs(g) <= EPSLN)) {
        x = this.a * ksp * cosphi * Math.sin(dlon);
        y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);
      }
      p.x = x;
      p.y = y;
      return p;
    }

    function inverse$25(p) {
      var rh; /* height above ellipsoid      */
      var z; /* angle          */
      var sinz, cosz; /* sin of z and cos of z      */
      var con;
      var lon, lat;
      /* Inverse equations
          -----------------*/
      p.x -= this.x0;
      p.y -= this.y0;
      rh = Math.sqrt(p.x * p.x + p.y * p.y);
      z = asinz(rh / this.a);

      sinz = Math.sin(z);
      cosz = Math.cos(z);

      lon = this.long0;
      if (Math.abs(rh) <= EPSLN) {
        lat = this.lat0;
        p.x = lon;
        p.y = lat;
        return p;
      }
      lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);
      con = Math.abs(this.lat0) - HALF_PI;
      if (Math.abs(con) <= EPSLN) {
        if (this.lat0 >= 0) {
          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));
        }
        else {
          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));
        }
        p.x = lon;
        p.y = lat;
        return p;
      }
      lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));
      p.x = lon;
      p.y = lat;
      return p;
    }

    var names$27 = ["ortho"];
    var ortho = {
      init: init$26,
      forward: forward$25,
      inverse: inverse$25,
      names: names$27
    };

    // QSC projection rewritten from the original PROJ4
    // https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c

    /* constants */
    var FACE_ENUM = {
        FRONT: 1,
        RIGHT: 2,
        BACK: 3,
        LEFT: 4,
        TOP: 5,
        BOTTOM: 6
    };

    var AREA_ENUM = {
        AREA_0: 1,
        AREA_1: 2,
        AREA_2: 3,
        AREA_3: 4
    };

    function init$27() {

      this.x0 = this.x0 || 0;
      this.y0 = this.y0 || 0;
      this.lat0 = this.lat0 || 0;
      this.long0 = this.long0 || 0;
      this.lat_ts = this.lat_ts || 0;
      this.title = this.title || "Quadrilateralized Spherical Cube";

      /* Determine the cube face from the center of projection. */
      if (this.lat0 >= HALF_PI - FORTPI / 2.0) {
        this.face = FACE_ENUM.TOP;
      } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {
        this.face = FACE_ENUM.BOTTOM;
      } else if (Math.abs(this.long0) <= FORTPI) {
        this.face = FACE_ENUM.FRONT;
      } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {
        this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;
      } else {
        this.face = FACE_ENUM.BACK;
      }

      /* Fill in useful values for the ellipsoid <-> sphere shift
       * described in [LK12]. */
      if (this.es !== 0) {
        this.one_minus_f = 1 - (this.a - this.b) / this.a;
        this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;
      }
    }

    // QSC forward equations--mapping lat,long to x,y
    // -----------------------------------------------------------------
    function forward$26(p) {
      var xy = {x: 0, y: 0};
      var lat, lon;
      var theta, phi;
      var t, mu;
      /* nu; */
      var area = {value: 0};

      // move lon according to projection's lon
      p.x -= this.long0;

      /* Convert the geodetic latitude to a geocentric latitude.
       * This corresponds to the shift from the ellipsoid to the sphere
       * described in [LK12]. */
      if (this.es !== 0) {//if (P->es != 0) {
        lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));
      } else {
        lat = p.y;
      }

      /* Convert the input lat, lon into theta, phi as used by QSC.
       * This depends on the cube face and the area on it.
       * For the top and bottom face, we can compute theta and phi
       * directly from phi, lam. For the other faces, we must use
       * unit sphere cartesian coordinates as an intermediate step. */
      lon = p.x; //lon = lp.lam;
      if (this.face === FACE_ENUM.TOP) {
        phi = HALF_PI - lat;
        if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
          area.value = AREA_ENUM.AREA_0;
          theta = lon - HALF_PI;
        } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {
          area.value = AREA_ENUM.AREA_1;
          theta = (lon > 0.0 ? lon - SPI : lon + SPI);
        } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {
          area.value = AREA_ENUM.AREA_2;
          theta = lon + HALF_PI;
        } else {
          area.value = AREA_ENUM.AREA_3;
          theta = lon;
        }
      } else if (this.face === FACE_ENUM.BOTTOM) {
        phi = HALF_PI + lat;
        if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {
          area.value = AREA_ENUM.AREA_0;
          theta = -lon + HALF_PI;
        } else if (lon < FORTPI && lon >= -FORTPI) {
          area.value = AREA_ENUM.AREA_1;
          theta = -lon;
        } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {
          area.value = AREA_ENUM.AREA_2;
          theta = -lon - HALF_PI;
        } else {
          area.value = AREA_ENUM.AREA_3;
          theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);
        }
      } else {
        var q, r, s;
        var sinlat, coslat;
        var sinlon, coslon;

        if (this.face === FACE_ENUM.RIGHT) {
          lon = qsc_shift_lon_origin(lon, +HALF_PI);
        } else if (this.face === FACE_ENUM.BACK) {
          lon = qsc_shift_lon_origin(lon, +SPI);
        } else if (this.face === FACE_ENUM.LEFT) {
          lon = qsc_shift_lon_origin(lon, -HALF_PI);
        }
        sinlat = Math.sin(lat);
        coslat = Math.cos(lat);
        sinlon = Math.sin(lon);
        coslon = Math.cos(lon);
        q = coslat * coslon;
        r = coslat * sinlon;
        s = sinlat;

        if (this.face === FACE_ENUM.FRONT) {
          phi = Math.acos(q);
          theta = qsc_fwd_equat_face_theta(phi, s, r, area);
        } else if (this.face === FACE_ENUM.RIGHT) {
          phi = Math.acos(r);
          theta = qsc_fwd_equat_face_theta(phi, s, -q, area);
        } else if (this.face === FACE_ENUM.BACK) {
          phi = Math.acos(-q);
          theta = qsc_fwd_equat_face_theta(phi, s, -r, area);
        } else if (this.face === FACE_ENUM.LEFT) {
          phi = Math.acos(-r);
          theta = qsc_fwd_equat_face_theta(phi, s, q, area);
        } else {
          /* Impossible */
          phi = theta = 0;
          area.value = AREA_ENUM.AREA_0;
        }
      }

      /* Compute mu and nu for the area of definition.
       * For mu, see Eq. (3-21) in [OL76], but note the typos:
       * compare with Eq. (3-14). For nu, see Eq. (3-38). */
      mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));
      t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));

      /* Apply the result to the real area. */
      if (area.value === AREA_ENUM.AREA_1) {
        mu += HALF_PI;
      } else if (area.value === AREA_ENUM.AREA_2) {
        mu += SPI;
      } else if (area.value === AREA_ENUM.AREA_3) {
        mu += 1.5 * SPI;
      }

      /* Now compute x, y from mu and nu */
      xy.x = t * Math.cos(mu);
      xy.y = t * Math.sin(mu);
      xy.x = xy.x * this.a + this.x0;
      xy.y = xy.y * this.a + this.y0;

      p.x = xy.x;
      p.y = xy.y;
      return p;
    }

    // QSC inverse equations--mapping x,y to lat/long
    // -----------------------------------------------------------------
    function inverse$26(p) {
      var lp = {lam: 0, phi: 0};
      var mu, nu, cosmu, tannu;
      var tantheta, theta, cosphi, phi;
      var t;
      var area = {value: 0};

      /* de-offset */
      p.x = (p.x - this.x0) / this.a;
      p.y = (p.y - this.y0) / this.a;

      /* Convert the input x, y to the mu and nu angles as used by QSC.
       * This depends on the area of the cube face. */
      nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));
      mu = Math.atan2(p.y, p.x);
      if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {
        area.value = AREA_ENUM.AREA_0;
      } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {
        area.value = AREA_ENUM.AREA_1;
        mu -= HALF_PI;
      } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {
        area.value = AREA_ENUM.AREA_2;
        mu = (mu < 0.0 ? mu + SPI : mu - SPI);
      } else {
        area.value = AREA_ENUM.AREA_3;
        mu += HALF_PI;
      }

      /* Compute phi and theta for the area of definition.
       * The inverse projection is not described in the original paper, but some
       * good hints can be found here (as of 2011-12-14):
       * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302
       * (search for "Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>") */
      t = (SPI / 12) * Math.tan(mu);
      tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));
      theta = Math.atan(tantheta);
      cosmu = Math.cos(mu);
      tannu = Math.tan(nu);
      cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));
      if (cosphi < -1) {
        cosphi = -1;
      } else if (cosphi > +1) {
        cosphi = +1;
      }

      /* Apply the result to the real area on the cube face.
       * For the top and bottom face, we can compute phi and lam directly.
       * For the other faces, we must use unit sphere cartesian coordinates
       * as an intermediate step. */
      if (this.face === FACE_ENUM.TOP) {
        phi = Math.acos(cosphi);
        lp.phi = HALF_PI - phi;
        if (area.value === AREA_ENUM.AREA_0) {
          lp.lam = theta + HALF_PI;
        } else if (area.value === AREA_ENUM.AREA_1) {
          lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);
        } else if (area.value === AREA_ENUM.AREA_2) {
          lp.lam = theta - HALF_PI;
        } else /* area.value == AREA_ENUM.AREA_3 */ {
          lp.lam = theta;
        }
      } else if (this.face === FACE_ENUM.BOTTOM) {
        phi = Math.acos(cosphi);
        lp.phi = phi - HALF_PI;
        if (area.value === AREA_ENUM.AREA_0) {
          lp.lam = -theta + HALF_PI;
        } else if (area.value === AREA_ENUM.AREA_1) {
          lp.lam = -theta;
        } else if (area.value === AREA_ENUM.AREA_2) {
          lp.lam = -theta - HALF_PI;
        } else /* area.value == AREA_ENUM.AREA_3 */ {
          lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);
        }
      } else {
        /* Compute phi and lam via cartesian unit sphere coordinates. */
        var q, r, s;
        q = cosphi;
        t = q * q;
        if (t >= 1) {
          s = 0;
        } else {
          s = Math.sqrt(1 - t) * Math.sin(theta);
        }
        t += s * s;
        if (t >= 1) {
          r = 0;
        } else {
          r = Math.sqrt(1 - t);
        }
        /* Rotate q,r,s into the correct area. */
        if (area.value === AREA_ENUM.AREA_1) {
          t = r;
          r = -s;
          s = t;
        } else if (area.value === AREA_ENUM.AREA_2) {
          r = -r;
          s = -s;
        } else if (area.value === AREA_ENUM.AREA_3) {
          t = r;
          r = s;
          s = -t;
        }
        /* Rotate q,r,s into the correct cube face. */
        if (this.face === FACE_ENUM.RIGHT) {
          t = q;
          q = -r;
          r = t;
        } else if (this.face === FACE_ENUM.BACK) {
          q = -q;
          r = -r;
        } else if (this.face === FACE_ENUM.LEFT) {
          t = q;
          q = r;
          r = -t;
        }
        /* Now compute phi and lam from the unit sphere coordinates. */
        lp.phi = Math.acos(-s) - HALF_PI;
        lp.lam = Math.atan2(r, q);
        if (this.face === FACE_ENUM.RIGHT) {
          lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);
        } else if (this.face === FACE_ENUM.BACK) {
          lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);
        } else if (this.face === FACE_ENUM.LEFT) {
          lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);
        }
      }

      /* Apply the shift from the sphere to the ellipsoid as described
       * in [LK12]. */
      if (this.es !== 0) {
        var invert_sign;
        var tanphi, xa;
        invert_sign = (lp.phi < 0 ? 1 : 0);
        tanphi = Math.tan(lp.phi);
        xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);
        lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));
        if (invert_sign) {
          lp.phi = -lp.phi;
        }
      }

      lp.lam += this.long0;
      p.x = lp.lam;
      p.y = lp.phi;
      return p;
    }

    /* Helper function for forward projection: compute the theta angle
     * and determine the area number. */
    function qsc_fwd_equat_face_theta(phi, y, x, area) {
      var theta;
      if (phi < EPSLN) {
        area.value = AREA_ENUM.AREA_0;
        theta = 0.0;
      } else {
        theta = Math.atan2(y, x);
        if (Math.abs(theta) <= FORTPI) {
          area.value = AREA_ENUM.AREA_0;
        } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {
          area.value = AREA_ENUM.AREA_1;
          theta -= HALF_PI;
        } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {
          area.value = AREA_ENUM.AREA_2;
          theta = (theta >= 0.0 ? theta - SPI : theta + SPI);
        } else {
          area.value = AREA_ENUM.AREA_3;
          theta += HALF_PI;
        }
      }
      return theta;
    }

    /* Helper function: shift the longitude. */
    function qsc_shift_lon_origin(lon, offset) {
      var slon = lon + offset;
      if (slon < -SPI) {
        slon += TWO_PI;
      } else if (slon > +SPI) {
        slon -= TWO_PI;
      }
      return slon;
    }

    var names$28 = ["Quadrilateralized Spherical Cube", "Quadrilateralized_Spherical_Cube", "qsc"];
    var qsc = {
      init: init$27,
      forward: forward$26,
      inverse: inverse$26,
      names: names$28
    };

    // Robinson projection
    // Based on https://github.com/OSGeo/proj.4/blob/master/src/PJ_robin.c
    // Polynomial coeficients from http://article.gmane.org/gmane.comp.gis.proj-4.devel/6039

    var COEFS_X = [
        [1.0000, 2.2199e-17, -7.15515e-05, 3.1103e-06],
        [0.9986, -0.000482243, -2.4897e-05, -1.3309e-06],
        [0.9954, -0.00083103, -4.48605e-05, -9.86701e-07],
        [0.9900, -0.00135364, -5.9661e-05, 3.6777e-06],
        [0.9822, -0.00167442, -4.49547e-06, -5.72411e-06],
        [0.9730, -0.00214868, -9.03571e-05, 1.8736e-08],
        [0.9600, -0.00305085, -9.00761e-05, 1.64917e-06],
        [0.9427, -0.00382792, -6.53386e-05, -2.6154e-06],
        [0.9216, -0.00467746, -0.00010457, 4.81243e-06],
        [0.8962, -0.00536223, -3.23831e-05, -5.43432e-06],
        [0.8679, -0.00609363, -0.000113898, 3.32484e-06],
        [0.8350, -0.00698325, -6.40253e-05, 9.34959e-07],
        [0.7986, -0.00755338, -5.00009e-05, 9.35324e-07],
        [0.7597, -0.00798324, -3.5971e-05, -2.27626e-06],
        [0.7186, -0.00851367, -7.01149e-05, -8.6303e-06],
        [0.6732, -0.00986209, -0.000199569, 1.91974e-05],
        [0.6213, -0.010418, 8.83923e-05, 6.24051e-06],
        [0.5722, -0.00906601, 0.000182, 6.24051e-06],
        [0.5322, -0.00677797, 0.000275608, 6.24051e-06]
    ];

    var COEFS_Y = [
        [-5.20417e-18, 0.0124, 1.21431e-18, -8.45284e-11],
        [0.0620, 0.0124, -1.26793e-09, 4.22642e-10],
        [0.1240, 0.0124, 5.07171e-09, -1.60604e-09],
        [0.1860, 0.0123999, -1.90189e-08, 6.00152e-09],
        [0.2480, 0.0124002, 7.10039e-08, -2.24e-08],
        [0.3100, 0.0123992, -2.64997e-07, 8.35986e-08],
        [0.3720, 0.0124029, 9.88983e-07, -3.11994e-07],
        [0.4340, 0.0123893, -3.69093e-06, -4.35621e-07],
        [0.4958, 0.0123198, -1.02252e-05, -3.45523e-07],
        [0.5571, 0.0121916, -1.54081e-05, -5.82288e-07],
        [0.6176, 0.0119938, -2.41424e-05, -5.25327e-07],
        [0.6769, 0.011713, -3.20223e-05, -5.16405e-07],
        [0.7346, 0.0113541, -3.97684e-05, -6.09052e-07],
        [0.7903, 0.0109107, -4.89042e-05, -1.04739e-06],
        [0.8435, 0.0103431, -6.4615e-05, -1.40374e-09],
        [0.8936, 0.00969686, -6.4636e-05, -8.547e-06],
        [0.9394, 0.00840947, -0.000192841, -4.2106e-06],
        [0.9761, 0.00616527, -0.000256, -4.2106e-06],
        [1.0000, 0.00328947, -0.000319159, -4.2106e-06]
    ];

    var FXC = 0.8487;
    var FYC = 1.3523;
    var C1 = R2D/5; // rad to 5-degree interval
    var RC1 = 1/C1;
    var NODES = 18;

    var poly3_val = function(coefs, x) {
        return coefs[0] + x * (coefs[1] + x * (coefs[2] + x * coefs[3]));
    };

    var poly3_der = function(coefs, x) {
        return coefs[1] + x * (2 * coefs[2] + x * 3 * coefs[3]);
    };

    function newton_rapshon(f_df, start, max_err, iters) {
        var x = start;
        for (; iters; --iters) {
            var upd = f_df(x);
            x -= upd;
            if (Math.abs(upd) < max_err) {
                break;
            }
        }
        return x;
    }

    function init$28() {
        this.x0 = this.x0 || 0;
        this.y0 = this.y0 || 0;
        this.long0 = this.long0 || 0;
        this.es = 0;
        this.title = this.title || "Robinson";
    }

    function forward$27(ll) {
        var lon = adjust_lon(ll.x - this.long0);

        var dphi = Math.abs(ll.y);
        var i = Math.floor(dphi * C1);
        if (i < 0) {
            i = 0;
        } else if (i >= NODES) {
            i = NODES - 1;
        }
        dphi = R2D * (dphi - RC1 * i);
        var xy = {
            x: poly3_val(COEFS_X[i], dphi) * lon,
            y: poly3_val(COEFS_Y[i], dphi)
        };
        if (ll.y < 0) {
            xy.y = -xy.y;
        }

        xy.x = xy.x * this.a * FXC + this.x0;
        xy.y = xy.y * this.a * FYC + this.y0;
        return xy;
    }

    function inverse$27(xy) {
        var ll = {
            x: (xy.x - this.x0) / (this.a * FXC),
            y: Math.abs(xy.y - this.y0) / (this.a * FYC)
        };

        if (ll.y >= 1) { // pathologic case
            ll.x /= COEFS_X[NODES][0];
            ll.y = xy.y < 0 ? -HALF_PI : HALF_PI;
        } else {
            // find table interval
            var i = Math.floor(ll.y * NODES);
            if (i < 0) {
                i = 0;
            } else if (i >= NODES) {
                i = NODES - 1;
            }
            for (;;) {
                if (COEFS_Y[i][0] > ll.y) {
                    --i;
                } else if (COEFS_Y[i+1][0] <= ll.y) {
                    ++i;
                } else {
                    break;
                }
            }
            // linear interpolation in 5 degree interval
            var coefs = COEFS_Y[i];
            var t = 5 * (ll.y - coefs[0]) / (COEFS_Y[i+1][0] - coefs[0]);
            // find t so that poly3_val(coefs, t) = ll.y
            t = newton_rapshon(function(x) {
                return (poly3_val(coefs, x) - ll.y) / poly3_der(coefs, x);
            }, t, EPSLN, 100);

            ll.x /= poly3_val(COEFS_X[i], t);
            ll.y = (5 * i + t) * D2R;
            if (xy.y < 0) {
                ll.y = -ll.y;
            }
        }

        ll.x = adjust_lon(ll.x + this.long0);
        return ll;
    }

    var names$29 = ["Robinson", "robin"];
    var robin = {
      init: init$28,
      forward: forward$27,
      inverse: inverse$27,
      names: names$29
    };

    function init$29() {
        this.name = 'geocent';

    }

    function forward$28(p) {
        var point = geodeticToGeocentric(p, this.es, this.a);
        return point;
    }

    function inverse$28(p) {
        var point = geocentricToGeodetic(p, this.es, this.a, this.b);
        return point;
    }

    var names$30 = ["Geocentric", 'geocentric', "geocent", "Geocent"];
    var geocent = {
        init: init$29,
        forward: forward$28,
        inverse: inverse$28,
        names: names$30
    };

    var mode = {
      N_POLE: 0,
      S_POLE: 1,
      EQUIT: 2,
      OBLIQ: 3
    };

    var params = {
      h:     { def: 100000, num: true },           // default is Karman line, no default in PROJ.7
      azi:   { def: 0, num: true, degrees: true }, // default is North
      tilt:  { def: 0, num: true, degrees: true }, // default is Nadir
      long0: { def: 0, num: true },                // default is Greenwich, conversion to rad is automatic
      lat0:  { def: 0, num: true }                 // default is Equator, conversion to rad is automatic
    };

    function init$30() {
      Object.keys(params).forEach(function (p) {
        if (typeof this[p] === "undefined") {
          this[p] = params[p].def;
        } else if (params[p].num && isNaN(this[p])) {
          throw new Error("Invalid parameter value, must be numeric " + p + " = " + this[p]);
        } else if (params[p].num) {
          this[p] = parseFloat(this[p]);
        }
        if (params[p].degrees) {
          this[p] = this[p] * D2R;
        }
      }.bind(this));

      if (Math.abs((Math.abs(this.lat0) - HALF_PI)) < EPSLN) {
        this.mode = this.lat0 < 0 ? mode.S_POLE : mode.N_POLE;
      } else if (Math.abs(this.lat0) < EPSLN) {
        this.mode = mode.EQUIT;
      } else {
        this.mode = mode.OBLIQ;
        this.sinph0 = Math.sin(this.lat0);
        this.cosph0 = Math.cos(this.lat0);
      }

      this.pn1 = this.h / this.a;  // Normalize relative to the Earth's radius

      if (this.pn1 <= 0 || this.pn1 > 1e10) {
        throw new Error("Invalid height");
      }
      
      this.p = 1 + this.pn1;
      this.rp = 1 / this.p;
      this.h1 = 1 / this.pn1;
      this.pfact = (this.p + 1) * this.h1;
      this.es = 0;

      var omega = this.tilt;
      var gamma = this.azi;
      this.cg = Math.cos(gamma);
      this.sg = Math.sin(gamma);
      this.cw = Math.cos(omega);
      this.sw = Math.sin(omega);
    }

    function forward$29(p) {
      p.x -= this.long0;
      var sinphi = Math.sin(p.y);
      var cosphi = Math.cos(p.y);
      var coslam = Math.cos(p.x);
      var x, y;
      switch (this.mode) {
        case mode.OBLIQ:
          y = this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;
          break;
        case mode.EQUIT:
          y = cosphi * coslam;
          break;
        case mode.S_POLE:
          y = -sinphi;
          break;
        case mode.N_POLE:
          y = sinphi;
          break;
      }
      y = this.pn1 / (this.p - y);
      x = y * cosphi * Math.sin(p.x);

      switch (this.mode) {
        case mode.OBLIQ:
          y *= this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;
          break;
        case mode.EQUIT:
          y *= sinphi;
          break;
        case mode.N_POLE:
          y *= -(cosphi * coslam);
          break;
        case mode.S_POLE:
          y *= cosphi * coslam;
          break;
      }

      // Tilt 
      var yt, ba;
      yt = y * this.cg + x * this.sg;
      ba = 1 / (yt * this.sw * this.h1 + this.cw);
      x = (x * this.cg - y * this.sg) * this.cw * ba;
      y = yt * ba;

      p.x = x * this.a;
      p.y = y * this.a;
      return p;
    }

    function inverse$29(p) {
      p.x /= this.a;
      p.y /= this.a;
      var r = { x: p.x, y: p.y };

      // Un-Tilt
      var bm, bq, yt;
      yt = 1 / (this.pn1 - p.y * this.sw);
      bm = this.pn1 * p.x * yt;
      bq = this.pn1 * p.y * this.cw * yt;
      p.x = bm * this.cg + bq * this.sg;
      p.y = bq * this.cg - bm * this.sg;

      var rh = hypot(p.x, p.y);
      if (Math.abs(rh) < EPSLN) {
        r.x = 0;
        r.y = p.y;
      } else {
        var cosz, sinz;
        sinz = 1 - rh * rh * this.pfact;
        sinz = (this.p - Math.sqrt(sinz)) / (this.pn1 / rh + rh / this.pn1);
        cosz = Math.sqrt(1 - sinz * sinz);
        switch (this.mode) {
          case mode.OBLIQ:
            r.y = Math.asin(cosz * this.sinph0 + p.y * sinz * this.cosph0 / rh);
            p.y = (cosz - this.sinph0 * Math.sin(r.y)) * rh;
            p.x *= sinz * this.cosph0;
            break;
          case mode.EQUIT:
            r.y = Math.asin(p.y * sinz / rh);
            p.y = cosz * rh;
            p.x *= sinz;
            break;
          case mode.N_POLE:
            r.y = Math.asin(cosz);
            p.y = -p.y;
            break;
          case mode.S_POLE:
            r.y = -Math.asin(cosz);
            break;
        }
        r.x = Math.atan2(p.x, p.y);
      }

      p.x = r.x + this.long0;
      p.y = r.y;
      return p;
    }

    var names$31 = ["Tilted_Perspective", "tpers"];
    var tpers = {
      init: init$30,
      forward: forward$29,
      inverse: inverse$29,
      names: names$31
    };

    function init$31() {
        this.flip_axis = (this.sweep === 'x' ? 1 : 0);
        this.h = Number(this.h);
        this.radius_g_1 = this.h / this.a;

        if (this.radius_g_1 <= 0 || this.radius_g_1 > 1e10) {
            throw new Error();
        }

        this.radius_g = 1.0 + this.radius_g_1;
        this.C = this.radius_g * this.radius_g - 1.0;

        if (this.es !== 0.0) {
            var one_es = 1.0 - this.es;
            var rone_es = 1 / one_es;

            this.radius_p = Math.sqrt(one_es);
            this.radius_p2 = one_es;
            this.radius_p_inv2 = rone_es;

            this.shape = 'ellipse'; // Use as a condition in the forward and inverse functions.
        } else {
            this.radius_p = 1.0;
            this.radius_p2 = 1.0;
            this.radius_p_inv2 = 1.0;

            this.shape = 'sphere';  // Use as a condition in the forward and inverse functions.
        }

        if (!this.title) {
            this.title = "Geostationary Satellite View";
        }
    }

    function forward$30(p) {
        var lon = p.x;
        var lat = p.y;
        var tmp, v_x, v_y, v_z;
        lon = lon - this.long0;

        if (this.shape === 'ellipse') {
            lat = Math.atan(this.radius_p2 * Math.tan(lat));
            var r = this.radius_p / hypot(this.radius_p * Math.cos(lat), Math.sin(lat));

            v_x = r * Math.cos(lon) * Math.cos(lat);
            v_y = r * Math.sin(lon) * Math.cos(lat);
            v_z = r * Math.sin(lat);

            if (((this.radius_g - v_x) * v_x - v_y * v_y - v_z * v_z * this.radius_p_inv2) < 0.0) {
                p.x = Number.NaN;
                p.y = Number.NaN;
                return p;
            }

            tmp = this.radius_g - v_x;
            if (this.flip_axis) {
                p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));
                p.y = this.radius_g_1 * Math.atan(v_z / tmp);
            } else {
                p.x = this.radius_g_1 * Math.atan(v_y / tmp);
                p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));
            }
        } else if (this.shape === 'sphere') {
            tmp = Math.cos(lat);
            v_x = Math.cos(lon) * tmp;
            v_y = Math.sin(lon) * tmp;
            v_z = Math.sin(lat);
            tmp = this.radius_g - v_x;

            if (this.flip_axis) {
                p.x = this.radius_g_1 * Math.atan(v_y / hypot(v_z, tmp));
                p.y = this.radius_g_1 * Math.atan(v_z / tmp);
            } else {
                p.x = this.radius_g_1 * Math.atan(v_y / tmp);
                p.y = this.radius_g_1 * Math.atan(v_z / hypot(v_y, tmp));
            }
        }
        p.x = p.x * this.a;
        p.y = p.y * this.a;
        return p;
    }

    function inverse$30(p) {
        var v_x = -1.0;
        var v_y = 0.0;
        var v_z = 0.0;
        var a, b, det, k;

        p.x = p.x / this.a;
        p.y = p.y / this.a;

        if (this.shape === 'ellipse') {
            if (this.flip_axis) {
                v_z = Math.tan(p.y / this.radius_g_1);
                v_y = Math.tan(p.x / this.radius_g_1) * hypot(1.0, v_z);
            } else {
                v_y = Math.tan(p.x / this.radius_g_1);
                v_z = Math.tan(p.y / this.radius_g_1) * hypot(1.0, v_y);
            }

            var v_zp = v_z / this.radius_p;
            a = v_y * v_y + v_zp * v_zp + v_x * v_x;
            b = 2 * this.radius_g * v_x;
            det = (b * b) - 4 * a * this.C;

            if (det < 0.0) {
                p.x = Number.NaN;
                p.y = Number.NaN;
                return p;
            }

            k = (-b - Math.sqrt(det)) / (2.0 * a);
            v_x = this.radius_g + k * v_x;
            v_y *= k;
            v_z *= k;

            p.x = Math.atan2(v_y, v_x);
            p.y = Math.atan(v_z * Math.cos(p.x) / v_x);
            p.y = Math.atan(this.radius_p_inv2 * Math.tan(p.y));
        } else if (this.shape === 'sphere') {
            if (this.flip_axis) {
                v_z = Math.tan(p.y / this.radius_g_1);
                v_y = Math.tan(p.x / this.radius_g_1) * Math.sqrt(1.0 + v_z * v_z);
            } else {
                v_y = Math.tan(p.x / this.radius_g_1);
                v_z = Math.tan(p.y / this.radius_g_1) * Math.sqrt(1.0 + v_y * v_y);
            }

            a = v_y * v_y + v_z * v_z + v_x * v_x;
            b = 2 * this.radius_g * v_x;
            det = (b * b) - 4 * a * this.C;
            if (det < 0.0) {
                p.x = Number.NaN;
                p.y = Number.NaN;
                return p;
            }

            k = (-b - Math.sqrt(det)) / (2.0 * a);
            v_x = this.radius_g + k * v_x;
            v_y *= k;
            v_z *= k;

            p.x = Math.atan2(v_y, v_x);
            p.y = Math.atan(v_z * Math.cos(p.x) / v_x);
        }
        p.x = p.x + this.long0;
        return p;
    }

    var names$32 = ["Geostationary Satellite View", "Geostationary_Satellite", "geos"];
    var geos = {
        init: init$31,
        forward: forward$30,
        inverse: inverse$30,
        names: names$32,
    };

    var includedProjections = function(proj4){
      proj4.Proj.projections.add(tmerc);
      proj4.Proj.projections.add(etmerc);
      proj4.Proj.projections.add(utm);
      proj4.Proj.projections.add(sterea);
      proj4.Proj.projections.add(stere);
      proj4.Proj.projections.add(somerc);
      proj4.Proj.projections.add(omerc);
      proj4.Proj.projections.add(lcc);
      proj4.Proj.projections.add(krovak);
      proj4.Proj.projections.add(cass);
      proj4.Proj.projections.add(laea);
      proj4.Proj.projections.add(aea);
      proj4.Proj.projections.add(gnom);
      proj4.Proj.projections.add(cea);
      proj4.Proj.projections.add(eqc);
      proj4.Proj.projections.add(poly);
      proj4.Proj.projections.add(nzmg);
      proj4.Proj.projections.add(mill);
      proj4.Proj.projections.add(sinu);
      proj4.Proj.projections.add(moll);
      proj4.Proj.projections.add(eqdc);
      proj4.Proj.projections.add(vandg);
      proj4.Proj.projections.add(aeqd);
      proj4.Proj.projections.add(ortho);
      proj4.Proj.projections.add(qsc);
      proj4.Proj.projections.add(robin);
      proj4.Proj.projections.add(geocent);
      proj4.Proj.projections.add(tpers);
      proj4.Proj.projections.add(geos);
    };

    proj4$1.defaultDatum = 'WGS84'; //default datum
    proj4$1.Proj = Projection;
    proj4$1.WGS84 = new proj4$1.Proj('WGS84');
    proj4$1.Point = Point;
    proj4$1.toPoint = toPoint;
    proj4$1.defs = defs;
    proj4$1.nadgrid = nadgrid;
    proj4$1.transform = transform;
    proj4$1.mgrs = mgrs;
    proj4$1.version = '2.8.0';
    includedProjections(proj4$1);

    return proj4$1;

})));

},{}],22:[function(require,module,exports){
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":11}],23:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":22}],24:[function(require,module,exports){
// This is free and unencumbered software released into the public domain.
// See LICENSE.md for more information.

module.exports = require("./lib/encoding.js");

},{"./lib/encoding.js":25}],25:[function(require,module,exports){
// This is free and unencumbered software released into the public domain.
// See LICENSE.md for more information.

/**
 * @fileoverview Global |this| required for resolving indexes in node.
 * @suppress {globalThis}
 */
(function(global) {
  'use strict';

  // If we're in node require encoding-indexes and attach it to the global.
  if (typeof module !== "undefined" && module.exports &&
    !global["encoding-indexes"]) {
      require("./encoding-indexes.js");
  }

  //
  // Utilities
  //

  /**
   * @param {number} a The number to test.
   * @param {number} min The minimum value in the range, inclusive.
   * @param {number} max The maximum value in the range, inclusive.
   * @return {boolean} True if a >= min and a <= max.
   */
  function inRange(a, min, max) {
    return min <= a && a <= max;
  }

  /**
   * @param {!Array.<*>} array The array to check.
   * @param {*} item The item to look for in the array.
   * @return {boolean} True if the item appears in the array.
   */
  function includes(array, item) {
    return array.indexOf(item) !== -1;
  }

  var floor = Math.floor;

  /**
   * @param {*} o
   * @return {Object}
   */
  function ToDictionary(o) {
    if (o === undefined) return {};
    if (o === Object(o)) return o;
    throw TypeError('Could not convert argument to dictionary');
  }

  /**
   * @param {string} string Input string of UTF-16 code units.
   * @return {!Array.<number>} Code points.
   */
  function stringToCodePoints(string) {
    // https://heycam.github.io/webidl/#dfn-obtain-unicode

    // 1. Let S be the DOMString value.
    var s = String(string);

    // 2. Let n be the length of S.
    var n = s.length;

    // 3. Initialize i to 0.
    var i = 0;

    // 4. Initialize U to be an empty sequence of Unicode characters.
    var u = [];

    // 5. While i < n:
    while (i < n) {

      // 1. Let c be the code unit in S at index i.
      var c = s.charCodeAt(i);

      // 2. Depending on the value of c:

      // c < 0xD800 or c > 0xDFFF
      if (c < 0xD800 || c > 0xDFFF) {
        // Append to U the Unicode character with code point c.
        u.push(c);
      }

      // 0xDC00 ≤ c ≤ 0xDFFF
      else if (0xDC00 <= c && c <= 0xDFFF) {
        // Append to U a U+FFFD REPLACEMENT CHARACTER.
        u.push(0xFFFD);
      }

      // 0xD800 ≤ c ≤ 0xDBFF
      else if (0xD800 <= c && c <= 0xDBFF) {
        // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT
        // CHARACTER.
        if (i === n - 1) {
          u.push(0xFFFD);
        }
        // 2. Otherwise, i < n−1:
        else {
          // 1. Let d be the code unit in S at index i+1.
          var d = s.charCodeAt(i + 1);

          // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:
          if (0xDC00 <= d && d <= 0xDFFF) {
            // 1. Let a be c & 0x3FF.
            var a = c & 0x3FF;

            // 2. Let b be d & 0x3FF.
            var b = d & 0x3FF;

            // 3. Append to U the Unicode character with code point
            // 2^16+2^10*a+b.
            u.push(0x10000 + (a << 10) + b);

            // 4. Set i to i+1.
            i += 1;
          }

          // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a
          // U+FFFD REPLACEMENT CHARACTER.
          else  {
            u.push(0xFFFD);
          }
        }
      }

      // 3. Set i to i+1.
      i += 1;
    }

    // 6. Return U.
    return u;
  }

  /**
   * @param {!Array.<number>} code_points Array of code points.
   * @return {string} string String of UTF-16 code units.
   */
  function codePointsToString(code_points) {
    var s = '';
    for (var i = 0; i < code_points.length; ++i) {
      var cp = code_points[i];
      if (cp <= 0xFFFF) {
        s += String.fromCharCode(cp);
      } else {
        cp -= 0x10000;
        s += String.fromCharCode((cp >> 10) + 0xD800,
                                 (cp & 0x3FF) + 0xDC00);
      }
    }
    return s;
  }


  //
  // Implementation of Encoding specification
  // https://encoding.spec.whatwg.org/
  //

  //
  // 4. Terminology
  //

  /**
   * An ASCII byte is a byte in the range 0x00 to 0x7F, inclusive.
   * @param {number} a The number to test.
   * @return {boolean} True if a is in the range 0x00 to 0x7F, inclusive.
   */
  function isASCIIByte(a) {
    return 0x00 <= a && a <= 0x7F;
  }

  /**
   * An ASCII code point is a code point in the range U+0000 to
   * U+007F, inclusive.
   */
  var isASCIICodePoint = isASCIIByte;


  /**
   * End-of-stream is a special token that signifies no more tokens
   * are in the stream.
   * @const
   */ var end_of_stream = -1;

  /**
   * A stream represents an ordered sequence of tokens.
   *
   * @constructor
   * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide
   * the stream.
   */
  function Stream(tokens) {
    /** @type {!Array.<number>} */
    this.tokens = [].slice.call(tokens);
    // Reversed as push/pop is more efficient than shift/unshift.
    this.tokens.reverse();
  }

  Stream.prototype = {
    /**
     * @return {boolean} True if end-of-stream has been hit.
     */
    endOfStream: function() {
      return !this.tokens.length;
    },

    /**
     * When a token is read from a stream, the first token in the
     * stream must be returned and subsequently removed, and
     * end-of-stream must be returned otherwise.
     *
     * @return {number} Get the next token from the stream, or
     * end_of_stream.
     */
     read: function() {
      if (!this.tokens.length)
        return end_of_stream;
       return this.tokens.pop();
     },

    /**
     * When one or more tokens are prepended to a stream, those tokens
     * must be inserted, in given order, before the first token in the
     * stream.
     *
     * @param {(number|!Array.<number>)} token The token(s) to prepend to the
     * stream.
     */
    prepend: function(token) {
      if (Array.isArray(token)) {
        var tokens = /**@type {!Array.<number>}*/(token);
        while (tokens.length)
          this.tokens.push(tokens.pop());
      } else {
        this.tokens.push(token);
      }
    },

    /**
     * When one or more tokens are pushed to a stream, those tokens
     * must be inserted, in given order, after the last token in the
     * stream.
     *
     * @param {(number|!Array.<number>)} token The tokens(s) to push to the
     * stream.
     */
    push: function(token) {
      if (Array.isArray(token)) {
        var tokens = /**@type {!Array.<number>}*/(token);
        while (tokens.length)
          this.tokens.unshift(tokens.shift());
      } else {
        this.tokens.unshift(token);
      }
    }
  };

  //
  // 5. Encodings
  //

  // 5.1 Encoders and decoders

  /** @const */
  var finished = -1;

  /**
   * @param {boolean} fatal If true, decoding errors raise an exception.
   * @param {number=} opt_code_point Override the standard fallback code point.
   * @return {number} The code point to insert on a decoding error.
   */
  function decoderError(fatal, opt_code_point) {
    if (fatal)
      throw TypeError('Decoder error');
    return opt_code_point || 0xFFFD;
  }

  /**
   * @param {number} code_point The code point that could not be encoded.
   * @return {number} Always throws, no value is actually returned.
   */
  function encoderError(code_point) {
    throw TypeError('The code point ' + code_point + ' could not be encoded.');
  }

  /** @interface */
  function Decoder() {}
  Decoder.prototype = {
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point, or |finished|.
     */
    handler: function(stream, bite) {}
  };

  /** @interface */
  function Encoder() {}
  Encoder.prototype = {
    /**
     * @param {Stream} stream The stream of code points being encoded.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.
     */
    handler: function(stream, code_point) {}
  };

  // 5.2 Names and labels

  // TODO: Define @typedef for Encoding: {name:string,labels:Array.<string>}
  // https://github.com/google/closure-compiler/issues/247

  /**
   * @param {string} label The encoding label.
   * @return {?{name:string,labels:Array.<string>}}
   */
  function getEncoding(label) {
    // 1. Remove any leading and trailing ASCII whitespace from label.
    label = String(label).trim().toLowerCase();

    // 2. If label is an ASCII case-insensitive match for any of the
    // labels listed in the table below, return the corresponding
    // encoding, and failure otherwise.
    if (Object.prototype.hasOwnProperty.call(label_to_encoding, label)) {
      return label_to_encoding[label];
    }
    return null;
  }

  /**
   * Encodings table: https://encoding.spec.whatwg.org/encodings.json
   * @const
   * @type {!Array.<{
   *          heading: string,
   *          encodings: Array.<{name:string,labels:Array.<string>}>
   *        }>}
   */
  var encodings = [
    {
      "encodings": [
        {
          "labels": [
            "unicode-1-1-utf-8",
            "utf-8",
            "utf8"
          ],
          "name": "UTF-8"
        }
      ],
      "heading": "The Encoding"
    },
    {
      "encodings": [
        {
          "labels": [
            "866",
            "cp866",
            "csibm866",
            "ibm866"
          ],
          "name": "IBM866"
        },
        {
          "labels": [
            "csisolatin2",
            "iso-8859-2",
            "iso-ir-101",
            "iso8859-2",
            "iso88592",
            "iso_8859-2",
            "iso_8859-2:1987",
            "l2",
            "latin2"
          ],
          "name": "ISO-8859-2"
        },
        {
          "labels": [
            "csisolatin3",
            "iso-8859-3",
            "iso-ir-109",
            "iso8859-3",
            "iso88593",
            "iso_8859-3",
            "iso_8859-3:1988",
            "l3",
            "latin3"
          ],
          "name": "ISO-8859-3"
        },
        {
          "labels": [
            "csisolatin4",
            "iso-8859-4",
            "iso-ir-110",
            "iso8859-4",
            "iso88594",
            "iso_8859-4",
            "iso_8859-4:1988",
            "l4",
            "latin4"
          ],
          "name": "ISO-8859-4"
        },
        {
          "labels": [
            "csisolatincyrillic",
            "cyrillic",
            "iso-8859-5",
            "iso-ir-144",
            "iso8859-5",
            "iso88595",
            "iso_8859-5",
            "iso_8859-5:1988"
          ],
          "name": "ISO-8859-5"
        },
        {
          "labels": [
            "arabic",
            "asmo-708",
            "csiso88596e",
            "csiso88596i",
            "csisolatinarabic",
            "ecma-114",
            "iso-8859-6",
            "iso-8859-6-e",
            "iso-8859-6-i",
            "iso-ir-127",
            "iso8859-6",
            "iso88596",
            "iso_8859-6",
            "iso_8859-6:1987"
          ],
          "name": "ISO-8859-6"
        },
        {
          "labels": [
            "csisolatingreek",
            "ecma-118",
            "elot_928",
            "greek",
            "greek8",
            "iso-8859-7",
            "iso-ir-126",
            "iso8859-7",
            "iso88597",
            "iso_8859-7",
            "iso_8859-7:1987",
            "sun_eu_greek"
          ],
          "name": "ISO-8859-7"
        },
        {
          "labels": [
            "csiso88598e",
            "csisolatinhebrew",
            "hebrew",
            "iso-8859-8",
            "iso-8859-8-e",
            "iso-ir-138",
            "iso8859-8",
            "iso88598",
            "iso_8859-8",
            "iso_8859-8:1988",
            "visual"
          ],
          "name": "ISO-8859-8"
        },
        {
          "labels": [
            "csiso88598i",
            "iso-8859-8-i",
            "logical"
          ],
          "name": "ISO-8859-8-I"
        },
        {
          "labels": [
            "csisolatin6",
            "iso-8859-10",
            "iso-ir-157",
            "iso8859-10",
            "iso885910",
            "l6",
            "latin6"
          ],
          "name": "ISO-8859-10"
        },
        {
          "labels": [
            "iso-8859-13",
            "iso8859-13",
            "iso885913"
          ],
          "name": "ISO-8859-13"
        },
        {
          "labels": [
            "iso-8859-14",
            "iso8859-14",
            "iso885914"
          ],
          "name": "ISO-8859-14"
        },
        {
          "labels": [
            "csisolatin9",
            "iso-8859-15",
            "iso8859-15",
            "iso885915",
            "iso_8859-15",
            "l9"
          ],
          "name": "ISO-8859-15"
        },
        {
          "labels": [
            "iso-8859-16"
          ],
          "name": "ISO-8859-16"
        },
        {
          "labels": [
            "cskoi8r",
            "koi",
            "koi8",
            "koi8-r",
            "koi8_r"
          ],
          "name": "KOI8-R"
        },
        {
          "labels": [
            "koi8-ru",
            "koi8-u"
          ],
          "name": "KOI8-U"
        },
        {
          "labels": [
            "csmacintosh",
            "mac",
            "macintosh",
            "x-mac-roman"
          ],
          "name": "macintosh"
        },
        {
          "labels": [
            "dos-874",
            "iso-8859-11",
            "iso8859-11",
            "iso885911",
            "tis-620",
            "windows-874"
          ],
          "name": "windows-874"
        },
        {
          "labels": [
            "cp1250",
            "windows-1250",
            "x-cp1250"
          ],
          "name": "windows-1250"
        },
        {
          "labels": [
            "cp1251",
            "windows-1251",
            "x-cp1251"
          ],
          "name": "windows-1251"
        },
        {
          "labels": [
            "ansi_x3.4-1968",
            "ascii",
            "cp1252",
            "cp819",
            "csisolatin1",
            "ibm819",
            "iso-8859-1",
            "iso-ir-100",
            "iso8859-1",
            "iso88591",
            "iso_8859-1",
            "iso_8859-1:1987",
            "l1",
            "latin1",
            "us-ascii",
            "windows-1252",
            "x-cp1252"
          ],
          "name": "windows-1252"
        },
        {
          "labels": [
            "cp1253",
            "windows-1253",
            "x-cp1253"
          ],
          "name": "windows-1253"
        },
        {
          "labels": [
            "cp1254",
            "csisolatin5",
            "iso-8859-9",
            "iso-ir-148",
            "iso8859-9",
            "iso88599",
            "iso_8859-9",
            "iso_8859-9:1989",
            "l5",
            "latin5",
            "windows-1254",
            "x-cp1254"
          ],
          "name": "windows-1254"
        },
        {
          "labels": [
            "cp1255",
            "windows-1255",
            "x-cp1255"
          ],
          "name": "windows-1255"
        },
        {
          "labels": [
            "cp1256",
            "windows-1256",
            "x-cp1256"
          ],
          "name": "windows-1256"
        },
        {
          "labels": [
            "cp1257",
            "windows-1257",
            "x-cp1257"
          ],
          "name": "windows-1257"
        },
        {
          "labels": [
            "cp1258",
            "windows-1258",
            "x-cp1258"
          ],
          "name": "windows-1258"
        },
        {
          "labels": [
            "x-mac-cyrillic",
            "x-mac-ukrainian"
          ],
          "name": "x-mac-cyrillic"
        }
      ],
      "heading": "Legacy single-byte encodings"
    },
    {
      "encodings": [
        {
          "labels": [
            "chinese",
            "csgb2312",
            "csiso58gb231280",
            "gb2312",
            "gb_2312",
            "gb_2312-80",
            "gbk",
            "iso-ir-58",
            "x-gbk"
          ],
          "name": "GBK"
        },
        {
          "labels": [
            "gb18030"
          ],
          "name": "gb18030"
        }
      ],
      "heading": "Legacy multi-byte Chinese (simplified) encodings"
    },
    {
      "encodings": [
        {
          "labels": [
            "big5",
            "big5-hkscs",
            "cn-big5",
            "csbig5",
            "x-x-big5"
          ],
          "name": "Big5"
        }
      ],
      "heading": "Legacy multi-byte Chinese (traditional) encodings"
    },
    {
      "encodings": [
        {
          "labels": [
            "cseucpkdfmtjapanese",
            "euc-jp",
            "x-euc-jp"
          ],
          "name": "EUC-JP"
        },
        {
          "labels": [
            "csiso2022jp",
            "iso-2022-jp"
          ],
          "name": "ISO-2022-JP"
        },
        {
          "labels": [
            "csshiftjis",
            "ms932",
            "ms_kanji",
            "shift-jis",
            "shift_jis",
            "sjis",
            "windows-31j",
            "x-sjis"
          ],
          "name": "Shift_JIS"
        }
      ],
      "heading": "Legacy multi-byte Japanese encodings"
    },
    {
      "encodings": [
        {
          "labels": [
            "cseuckr",
            "csksc56011987",
            "euc-kr",
            "iso-ir-149",
            "korean",
            "ks_c_5601-1987",
            "ks_c_5601-1989",
            "ksc5601",
            "ksc_5601",
            "windows-949"
          ],
          "name": "EUC-KR"
        }
      ],
      "heading": "Legacy multi-byte Korean encodings"
    },
    {
      "encodings": [
        {
          "labels": [
            "csiso2022kr",
            "hz-gb-2312",
            "iso-2022-cn",
            "iso-2022-cn-ext",
            "iso-2022-kr"
          ],
          "name": "replacement"
        },
        {
          "labels": [
            "utf-16be"
          ],
          "name": "UTF-16BE"
        },
        {
          "labels": [
            "utf-16",
            "utf-16le"
          ],
          "name": "UTF-16LE"
        },
        {
          "labels": [
            "x-user-defined"
          ],
          "name": "x-user-defined"
        }
      ],
      "heading": "Legacy miscellaneous encodings"
    }
  ];

  // Label to encoding registry.
  /** @type {Object.<string,{name:string,labels:Array.<string>}>} */
  var label_to_encoding = {};
  encodings.forEach(function(category) {
    category.encodings.forEach(function(encoding) {
      encoding.labels.forEach(function(label) {
        label_to_encoding[label] = encoding;
      });
    });
  });

  // Registry of of encoder/decoder factories, by encoding name.
  /** @type {Object.<string, function({fatal:boolean}): Encoder>} */
  var encoders = {};
  /** @type {Object.<string, function({fatal:boolean}): Decoder>} */
  var decoders = {};

  //
  // 6. Indexes
  //

  /**
   * @param {number} pointer The |pointer| to search for.
   * @param {(!Array.<?number>|undefined)} index The |index| to search within.
   * @return {?number} The code point corresponding to |pointer| in |index|,
   *     or null if |code point| is not in |index|.
   */
  function indexCodePointFor(pointer, index) {
    if (!index) return null;
    return index[pointer] || null;
  }

  /**
   * @param {number} code_point The |code point| to search for.
   * @param {!Array.<?number>} index The |index| to search within.
   * @return {?number} The first pointer corresponding to |code point| in
   *     |index|, or null if |code point| is not in |index|.
   */
  function indexPointerFor(code_point, index) {
    var pointer = index.indexOf(code_point);
    return pointer === -1 ? null : pointer;
  }

  /**
   * @param {string} name Name of the index.
   * @return {(!Array.<number>|!Array.<Array.<number>>)}
   *  */
  function index(name) {
    if (!('encoding-indexes' in global)) {
      throw Error("Indexes missing." +
                  " Did you forget to include encoding-indexes.js first?");
    }
    return global['encoding-indexes'][name];
  }

  /**
   * @param {number} pointer The |pointer| to search for in the gb18030 index.
   * @return {?number} The code point corresponding to |pointer| in |index|,
   *     or null if |code point| is not in the gb18030 index.
   */
  function indexGB18030RangesCodePointFor(pointer) {
    // 1. If pointer is greater than 39419 and less than 189000, or
    // pointer is greater than 1237575, return null.
    if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575))
      return null;

    // 2. If pointer is 7457, return code point U+E7C7.
    if (pointer === 7457) return 0xE7C7;

    // 3. Let offset be the last pointer in index gb18030 ranges that
    // is equal to or less than pointer and let code point offset be
    // its corresponding code point.
    var offset = 0;
    var code_point_offset = 0;
    var idx = index('gb18030-ranges');
    var i;
    for (i = 0; i < idx.length; ++i) {
      /** @type {!Array.<number>} */
      var entry = idx[i];
      if (entry[0] <= pointer) {
        offset = entry[0];
        code_point_offset = entry[1];
      } else {
        break;
      }
    }

    // 4. Return a code point whose value is code point offset +
    // pointer − offset.
    return code_point_offset + pointer - offset;
  }

  /**
   * @param {number} code_point The |code point| to locate in the gb18030 index.
   * @return {number} The first pointer corresponding to |code point| in the
   *     gb18030 index.
   */
  function indexGB18030RangesPointerFor(code_point) {
    // 1. If code point is U+E7C7, return pointer 7457.
    if (code_point === 0xE7C7) return 7457;

    // 2. Let offset be the last code point in index gb18030 ranges
    // that is equal to or less than code point and let pointer offset
    // be its corresponding pointer.
    var offset = 0;
    var pointer_offset = 0;
    var idx = index('gb18030-ranges');
    var i;
    for (i = 0; i < idx.length; ++i) {
      /** @type {!Array.<number>} */
      var entry = idx[i];
      if (entry[1] <= code_point) {
        offset = entry[1];
        pointer_offset = entry[0];
      } else {
        break;
      }
    }

    // 3. Return a pointer whose value is pointer offset + code point
    // − offset.
    return pointer_offset + code_point - offset;
  }

  /**
   * @param {number} code_point The |code_point| to search for in the Shift_JIS
   *     index.
   * @return {?number} The code point corresponding to |pointer| in |index|,
   *     or null if |code point| is not in the Shift_JIS index.
   */
  function indexShiftJISPointerFor(code_point) {
    // 1. Let index be index jis0208 excluding all entries whose
    // pointer is in the range 8272 to 8835, inclusive.
    shift_jis_index = shift_jis_index ||
      index('jis0208').map(function(code_point, pointer) {
        return inRange(pointer, 8272, 8835) ? null : code_point;
      });
    var index_ = shift_jis_index;

    // 2. Return the index pointer for code point in index.
    return index_.indexOf(code_point);
  }
  var shift_jis_index;

  /**
   * @param {number} code_point The |code_point| to search for in the big5
   *     index.
   * @return {?number} The code point corresponding to |pointer| in |index|,
   *     or null if |code point| is not in the big5 index.
   */
  function indexBig5PointerFor(code_point) {
    // 1. Let index be index Big5 excluding all entries whose pointer
    big5_index_no_hkscs = big5_index_no_hkscs ||
      index('big5').map(function(code_point, pointer) {
        return (pointer < (0xA1 - 0x81) * 157) ? null : code_point;
      });
    var index_ = big5_index_no_hkscs;

    // 2. If code point is U+2550, U+255E, U+2561, U+256A, U+5341, or
    // U+5345, return the last pointer corresponding to code point in
    // index.
    if (code_point === 0x2550 || code_point === 0x255E ||
        code_point === 0x2561 || code_point === 0x256A ||
        code_point === 0x5341 || code_point === 0x5345) {
      return index_.lastIndexOf(code_point);
    }

    // 3. Return the index pointer for code point in index.
    return indexPointerFor(code_point, index_);
  }
  var big5_index_no_hkscs;

  //
  // 8. API
  //

  /** @const */ var DEFAULT_ENCODING = 'utf-8';

  // 8.1 Interface TextDecoder

  /**
   * @constructor
   * @param {string=} label The label of the encoding;
   *     defaults to 'utf-8'.
   * @param {Object=} options
   */
  function TextDecoder(label, options) {
    // Web IDL conventions
    if (!(this instanceof TextDecoder))
      throw TypeError('Called as a function. Did you forget \'new\'?');
    label = label !== undefined ? String(label) : DEFAULT_ENCODING;
    options = ToDictionary(options);

    // A TextDecoder object has an associated encoding, decoder,
    // stream, ignore BOM flag (initially unset), BOM seen flag
    // (initially unset), error mode (initially replacement), and do
    // not flush flag (initially unset).

    /** @private */
    this._encoding = null;
    /** @private @type {?Decoder} */
    this._decoder = null;
    /** @private @type {boolean} */
    this._ignoreBOM = false;
    /** @private @type {boolean} */
    this._BOMseen = false;
    /** @private @type {string} */
    this._error_mode = 'replacement';
    /** @private @type {boolean} */
    this._do_not_flush = false;


    // 1. Let encoding be the result of getting an encoding from
    // label.
    var encoding = getEncoding(label);

    // 2. If encoding is failure or replacement, throw a RangeError.
    if (encoding === null || encoding.name === 'replacement')
      throw RangeError('Unknown encoding: ' + label);
    if (!decoders[encoding.name]) {
      throw Error('Decoder not present.' +
                  ' Did you forget to include encoding-indexes.js first?');
    }

    // 3. Let dec be a new TextDecoder object.
    var dec = this;

    // 4. Set dec's encoding to encoding.
    dec._encoding = encoding;

    // 5. If options's fatal member is true, set dec's error mode to
    // fatal.
    if (Boolean(options['fatal']))
      dec._error_mode = 'fatal';

    // 6. If options's ignoreBOM member is true, set dec's ignore BOM
    // flag.
    if (Boolean(options['ignoreBOM']))
      dec._ignoreBOM = true;

    // For pre-ES5 runtimes:
    if (!Object.defineProperty) {
      this.encoding = dec._encoding.name.toLowerCase();
      this.fatal = dec._error_mode === 'fatal';
      this.ignoreBOM = dec._ignoreBOM;
    }

    // 7. Return dec.
    return dec;
  }

  if (Object.defineProperty) {
    // The encoding attribute's getter must return encoding's name.
    Object.defineProperty(TextDecoder.prototype, 'encoding', {
      /** @this {TextDecoder} */
      get: function() { return this._encoding.name.toLowerCase(); }
    });

    // The fatal attribute's getter must return true if error mode
    // is fatal, and false otherwise.
    Object.defineProperty(TextDecoder.prototype, 'fatal', {
      /** @this {TextDecoder} */
      get: function() { return this._error_mode === 'fatal'; }
    });

    // The ignoreBOM attribute's getter must return true if ignore
    // BOM flag is set, and false otherwise.
    Object.defineProperty(TextDecoder.prototype, 'ignoreBOM', {
      /** @this {TextDecoder} */
      get: function() { return this._ignoreBOM; }
    });
  }

  /**
   * @param {BufferSource=} input The buffer of bytes to decode.
   * @param {Object=} options
   * @return {string} The decoded string.
   */
  TextDecoder.prototype.decode = function decode(input, options) {
    var bytes;
    if (typeof input === 'object' && input instanceof ArrayBuffer) {
      bytes = new Uint8Array(input);
    } else if (typeof input === 'object' && 'buffer' in input &&
               input.buffer instanceof ArrayBuffer) {
      bytes = new Uint8Array(input.buffer,
                             input.byteOffset,
                             input.byteLength);
    } else {
      bytes = new Uint8Array(0);
    }

    options = ToDictionary(options);

    // 1. If the do not flush flag is unset, set decoder to a new
    // encoding's decoder, set stream to a new stream, and unset the
    // BOM seen flag.
    if (!this._do_not_flush) {
      this._decoder = decoders[this._encoding.name]({
        fatal: this._error_mode === 'fatal'});
      this._BOMseen = false;
    }

    // 2. If options's stream is true, set the do not flush flag, and
    // unset the do not flush flag otherwise.
    this._do_not_flush = Boolean(options['stream']);

    // 3. If input is given, push a copy of input to stream.
    // TODO: Align with spec algorithm - maintain stream on instance.
    var input_stream = new Stream(bytes);

    // 4. Let output be a new stream.
    var output = [];

    /** @type {?(number|!Array.<number>)} */
    var result;

    // 5. While true:
    while (true) {
      // 1. Let token be the result of reading from stream.
      var token = input_stream.read();

      // 2. If token is end-of-stream and the do not flush flag is
      // set, return output, serialized.
      // TODO: Align with spec algorithm.
      if (token === end_of_stream)
        break;

      // 3. Otherwise, run these subsubsteps:

      // 1. Let result be the result of processing token for decoder,
      // stream, output, and error mode.
      result = this._decoder.handler(input_stream, token);

      // 2. If result is finished, return output, serialized.
      if (result === finished)
        break;

      if (result !== null) {
        if (Array.isArray(result))
          output.push.apply(output, /**@type {!Array.<number>}*/(result));
        else
          output.push(result);
      }

      // 3. Otherwise, if result is error, throw a TypeError.
      // (Thrown in handler)

      // 4. Otherwise, do nothing.
    }
    // TODO: Align with spec algorithm.
    if (!this._do_not_flush) {
      do {
        result = this._decoder.handler(input_stream, input_stream.read());
        if (result === finished)
          break;
        if (result === null)
          continue;
        if (Array.isArray(result))
          output.push.apply(output, /**@type {!Array.<number>}*/(result));
        else
          output.push(result);
      } while (!input_stream.endOfStream());
      this._decoder = null;
    }

    // A TextDecoder object also has an associated serialize stream
    // algorithm...
    /**
     * @param {!Array.<number>} stream
     * @return {string}
     * @this {TextDecoder}
     */
    function serializeStream(stream) {
      // 1. Let token be the result of reading from stream.
      // (Done in-place on array, rather than as a stream)

      // 2. If encoding is UTF-8, UTF-16BE, or UTF-16LE, and ignore
      // BOM flag and BOM seen flag are unset, run these subsubsteps:
      if (includes(['UTF-8', 'UTF-16LE', 'UTF-16BE'], this._encoding.name) &&
          !this._ignoreBOM && !this._BOMseen) {
        if (stream.length > 0 && stream[0] === 0xFEFF) {
          // 1. If token is U+FEFF, set BOM seen flag.
          this._BOMseen = true;
          stream.shift();
        } else if (stream.length > 0) {
          // 2. Otherwise, if token is not end-of-stream, set BOM seen
          // flag and append token to stream.
          this._BOMseen = true;
        } else {
          // 3. Otherwise, if token is not end-of-stream, append token
          // to output.
          // (no-op)
        }
      }
      // 4. Otherwise, return output.
      return codePointsToString(stream);
    }

    return serializeStream.call(this, output);
  };

  // 8.2 Interface TextEncoder

  /**
   * @constructor
   * @param {string=} label The label of the encoding. NONSTANDARD.
   * @param {Object=} options NONSTANDARD.
   */
  function TextEncoder(label, options) {
    // Web IDL conventions
    if (!(this instanceof TextEncoder))
      throw TypeError('Called as a function. Did you forget \'new\'?');
    options = ToDictionary(options);

    // A TextEncoder object has an associated encoding and encoder.

    /** @private */
    this._encoding = null;
    /** @private @type {?Encoder} */
    this._encoder = null;

    // Non-standard
    /** @private @type {boolean} */
    this._do_not_flush = false;
    /** @private @type {string} */
    this._fatal = Boolean(options['fatal']) ? 'fatal' : 'replacement';

    // 1. Let enc be a new TextEncoder object.
    var enc = this;

    // 2. Set enc's encoding to UTF-8's encoder.
    if (Boolean(options['NONSTANDARD_allowLegacyEncoding'])) {
      // NONSTANDARD behavior.
      label = label !== undefined ? String(label) : DEFAULT_ENCODING;
      var encoding = getEncoding(label);
      if (encoding === null || encoding.name === 'replacement')
        throw RangeError('Unknown encoding: ' + label);
      if (!encoders[encoding.name]) {
        throw Error('Encoder not present.' +
                    ' Did you forget to include encoding-indexes.js first?');
      }
      enc._encoding = encoding;
    } else {
      // Standard behavior.
      enc._encoding = getEncoding('utf-8');

      if (label !== undefined && 'console' in global) {
        console.warn('TextEncoder constructor called with encoding label, '
                     + 'which is ignored.');
      }
    }

    // For pre-ES5 runtimes:
    if (!Object.defineProperty)
      this.encoding = enc._encoding.name.toLowerCase();

    // 3. Return enc.
    return enc;
  }

  if (Object.defineProperty) {
    // The encoding attribute's getter must return encoding's name.
    Object.defineProperty(TextEncoder.prototype, 'encoding', {
      /** @this {TextEncoder} */
      get: function() { return this._encoding.name.toLowerCase(); }
    });
  }

  /**
   * @param {string=} opt_string The string to encode.
   * @param {Object=} options
   * @return {!Uint8Array} Encoded bytes, as a Uint8Array.
   */
  TextEncoder.prototype.encode = function encode(opt_string, options) {
    opt_string = opt_string === undefined ? '' : String(opt_string);
    options = ToDictionary(options);

    // NOTE: This option is nonstandard. None of the encodings
    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful when
    // the input is a USVString so streaming is not necessary.
    if (!this._do_not_flush)
      this._encoder = encoders[this._encoding.name]({
        fatal: this._fatal === 'fatal'});
    this._do_not_flush = Boolean(options['stream']);

    // 1. Convert input to a stream.
    var input = new Stream(stringToCodePoints(opt_string));

    // 2. Let output be a new stream
    var output = [];

    /** @type {?(number|!Array.<number>)} */
    var result;
    // 3. While true, run these substeps:
    while (true) {
      // 1. Let token be the result of reading from input.
      var token = input.read();
      if (token === end_of_stream)
        break;
      // 2. Let result be the result of processing token for encoder,
      // input, output.
      result = this._encoder.handler(input, token);
      if (result === finished)
        break;
      if (Array.isArray(result))
        output.push.apply(output, /**@type {!Array.<number>}*/(result));
      else
        output.push(result);
    }
    // TODO: Align with spec algorithm.
    if (!this._do_not_flush) {
      while (true) {
        result = this._encoder.handler(input, input.read());
        if (result === finished)
          break;
        if (Array.isArray(result))
          output.push.apply(output, /**@type {!Array.<number>}*/(result));
        else
          output.push(result);
      }
      this._encoder = null;
    }
    // 3. If result is finished, convert output into a byte sequence,
    // and then return a Uint8Array object wrapping an ArrayBuffer
    // containing output.
    return new Uint8Array(output);
  };


  //
  // 9. The encoding
  //

  // 9.1 utf-8

  // 9.1.1 utf-8 decoder
  /**
   * @constructor
   * @implements {Decoder}
   * @param {{fatal: boolean}} options
   */
  function UTF8Decoder(options) {
    var fatal = options.fatal;

    // utf-8's decoder's has an associated utf-8 code point, utf-8
    // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8
    // lower boundary (initially 0x80), and a utf-8 upper boundary
    // (initially 0xBF).
    var /** @type {number} */ utf8_code_point = 0,
        /** @type {number} */ utf8_bytes_seen = 0,
        /** @type {number} */ utf8_bytes_needed = 0,
        /** @type {number} */ utf8_lower_boundary = 0x80,
        /** @type {number} */ utf8_upper_boundary = 0xBF;

    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,
      // set utf-8 bytes needed to 0 and return error.
      if (bite === end_of_stream && utf8_bytes_needed !== 0) {
        utf8_bytes_needed = 0;
        return decoderError(fatal);
      }

      // 2. If byte is end-of-stream, return finished.
      if (bite === end_of_stream)
        return finished;

      // 3. If utf-8 bytes needed is 0, based on byte:
      if (utf8_bytes_needed === 0) {

        // 0x00 to 0x7F
        if (inRange(bite, 0x00, 0x7F)) {
          // Return a code point whose value is byte.
          return bite;
        }

        // 0xC2 to 0xDF
        else if (inRange(bite, 0xC2, 0xDF)) {
          // 1. Set utf-8 bytes needed to 1.
          utf8_bytes_needed = 1;

          // 2. Set UTF-8 code point to byte & 0x1F.
          utf8_code_point = bite & 0x1F;
        }

        // 0xE0 to 0xEF
        else if (inRange(bite, 0xE0, 0xEF)) {
          // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.
          if (bite === 0xE0)
            utf8_lower_boundary = 0xA0;
          // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.
          if (bite === 0xED)
            utf8_upper_boundary = 0x9F;
          // 3. Set utf-8 bytes needed to 2.
          utf8_bytes_needed = 2;
          // 4. Set UTF-8 code point to byte & 0xF.
          utf8_code_point = bite & 0xF;
        }

        // 0xF0 to 0xF4
        else if (inRange(bite, 0xF0, 0xF4)) {
          // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.
          if (bite === 0xF0)
            utf8_lower_boundary = 0x90;
          // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.
          if (bite === 0xF4)
            utf8_upper_boundary = 0x8F;
          // 3. Set utf-8 bytes needed to 3.
          utf8_bytes_needed = 3;
          // 4. Set UTF-8 code point to byte & 0x7.
          utf8_code_point = bite & 0x7;
        }

        // Otherwise
        else {
          // Return error.
          return decoderError(fatal);
        }

        // Return continue.
        return null;
      }

      // 4. If byte is not in the range utf-8 lower boundary to utf-8
      // upper boundary, inclusive, run these substeps:
      if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {

        // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8
        // bytes seen to 0, set utf-8 lower boundary to 0x80, and set
        // utf-8 upper boundary to 0xBF.
        utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;
        utf8_lower_boundary = 0x80;
        utf8_upper_boundary = 0xBF;

        // 2. Prepend byte to stream.
        stream.prepend(bite);

        // 3. Return error.
        return decoderError(fatal);
      }

      // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary
      // to 0xBF.
      utf8_lower_boundary = 0x80;
      utf8_upper_boundary = 0xBF;

      // 6. Set UTF-8 code point to (UTF-8 code point << 6) | (byte &
      // 0x3F)
      utf8_code_point = (utf8_code_point << 6) | (bite & 0x3F);

      // 7. Increase utf-8 bytes seen by one.
      utf8_bytes_seen += 1;

      // 8. If utf-8 bytes seen is not equal to utf-8 bytes needed,
      // continue.
      if (utf8_bytes_seen !== utf8_bytes_needed)
        return null;

      // 9. Let code point be utf-8 code point.
      var code_point = utf8_code_point;

      // 10. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes
      // seen to 0.
      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;

      // 11. Return a code point whose value is code point.
      return code_point;
    };
  }

  // 9.1.2 utf-8 encoder
  /**
   * @constructor
   * @implements {Encoder}
   * @param {{fatal: boolean}} options
   */
  function UTF8Encoder(options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1. If code point is end-of-stream, return finished.
      if (code_point === end_of_stream)
        return finished;

      // 2. If code point is an ASCII code point, return a byte whose
      // value is code point.
      if (isASCIICodePoint(code_point))
        return code_point;

      // 3. Set count and offset based on the range code point is in:
      var count, offset;
      // U+0080 to U+07FF, inclusive:
      if (inRange(code_point, 0x0080, 0x07FF)) {
        // 1 and 0xC0
        count = 1;
        offset = 0xC0;
      }
      // U+0800 to U+FFFF, inclusive:
      else if (inRange(code_point, 0x0800, 0xFFFF)) {
        // 2 and 0xE0
        count = 2;
        offset = 0xE0;
      }
      // U+10000 to U+10FFFF, inclusive:
      else if (inRange(code_point, 0x10000, 0x10FFFF)) {
        // 3 and 0xF0
        count = 3;
        offset = 0xF0;
      }

      // 4. Let bytes be a byte sequence whose first byte is (code
      // point >> (6 × count)) + offset.
      var bytes = [(code_point >> (6 * count)) + offset];

      // 5. Run these substeps while count is greater than 0:
      while (count > 0) {

        // 1. Set temp to code point >> (6 × (count − 1)).
        var temp = code_point >> (6 * (count - 1));

        // 2. Append to bytes 0x80 | (temp & 0x3F).
        bytes.push(0x80 | (temp & 0x3F));

        // 3. Decrease count by one.
        count -= 1;
      }

      // 6. Return bytes bytes, in order.
      return bytes;
    };
  }

  /** @param {{fatal: boolean}} options */
  encoders['UTF-8'] = function(options) {
    return new UTF8Encoder(options);
  };
  /** @param {{fatal: boolean}} options */
  decoders['UTF-8'] = function(options) {
    return new UTF8Decoder(options);
  };

  //
  // 10. Legacy single-byte encodings
  //

  // 10.1 single-byte decoder
  /**
   * @constructor
   * @implements {Decoder}
   * @param {!Array.<number>} index The encoding index.
   * @param {{fatal: boolean}} options
   */
  function SingleByteDecoder(index, options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // 1. If byte is end-of-stream, return finished.
      if (bite === end_of_stream)
        return finished;

      // 2. If byte is an ASCII byte, return a code point whose value
      // is byte.
      if (isASCIIByte(bite))
        return bite;

      // 3. Let code point be the index code point for byte − 0x80 in
      // index single-byte.
      var code_point = index[bite - 0x80];

      // 4. If code point is null, return error.
      if (code_point === null)
        return decoderError(fatal);

      // 5. Return a code point whose value is code point.
      return code_point;
    };
  }

  // 10.2 single-byte encoder
  /**
   * @constructor
   * @implements {Encoder}
   * @param {!Array.<?number>} index The encoding index.
   * @param {{fatal: boolean}} options
   */
  function SingleByteEncoder(index, options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1. If code point is end-of-stream, return finished.
      if (code_point === end_of_stream)
        return finished;

      // 2. If code point is an ASCII code point, return a byte whose
      // value is code point.
      if (isASCIICodePoint(code_point))
        return code_point;

      // 3. Let pointer be the index pointer for code point in index
      // single-byte.
      var pointer = indexPointerFor(code_point, index);

      // 4. If pointer is null, return error with code point.
      if (pointer === null)
        encoderError(code_point);

      // 5. Return a byte whose value is pointer + 0x80.
      return pointer + 0x80;
    };
  }

  (function() {
    if (!('encoding-indexes' in global))
      return;
    encodings.forEach(function(category) {
      if (category.heading !== 'Legacy single-byte encodings')
        return;
      category.encodings.forEach(function(encoding) {
        var name = encoding.name;
        var idx = index(name.toLowerCase());
        /** @param {{fatal: boolean}} options */
        decoders[name] = function(options) {
          return new SingleByteDecoder(idx, options);
        };
        /** @param {{fatal: boolean}} options */
        encoders[name] = function(options) {
          return new SingleByteEncoder(idx, options);
        };
      });
    });
  }());

  //
  // 11. Legacy multi-byte Chinese (simplified) encodings
  //

  // 11.1 gbk

  // 11.1.1 gbk decoder
  // gbk's decoder is gb18030's decoder.
  /** @param {{fatal: boolean}} options */
  decoders['GBK'] = function(options) {
    return new GB18030Decoder(options);
  };

  // 11.1.2 gbk encoder
  // gbk's encoder is gb18030's encoder with its gbk flag set.
  /** @param {{fatal: boolean}} options */
  encoders['GBK'] = function(options) {
    return new GB18030Encoder(options, true);
  };

  // 11.2 gb18030

  // 11.2.1 gb18030 decoder
  /**
   * @constructor
   * @implements {Decoder}
   * @param {{fatal: boolean}} options
   */
  function GB18030Decoder(options) {
    var fatal = options.fatal;
    // gb18030's decoder has an associated gb18030 first, gb18030
    // second, and gb18030 third (all initially 0x00).
    var /** @type {number} */ gb18030_first = 0x00,
        /** @type {number} */ gb18030_second = 0x00,
        /** @type {number} */ gb18030_third = 0x00;
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // 1. If byte is end-of-stream and gb18030 first, gb18030
      // second, and gb18030 third are 0x00, return finished.
      if (bite === end_of_stream && gb18030_first === 0x00 &&
          gb18030_second === 0x00 && gb18030_third === 0x00) {
        return finished;
      }
      // 2. If byte is end-of-stream, and gb18030 first, gb18030
      // second, or gb18030 third is not 0x00, set gb18030 first,
      // gb18030 second, and gb18030 third to 0x00, and return error.
      if (bite === end_of_stream &&
          (gb18030_first !== 0x00 || gb18030_second !== 0x00 ||
           gb18030_third !== 0x00)) {
        gb18030_first = 0x00;
        gb18030_second = 0x00;
        gb18030_third = 0x00;
        decoderError(fatal);
      }
      var code_point;
      // 3. If gb18030 third is not 0x00, run these substeps:
      if (gb18030_third !== 0x00) {
        // 1. Let code point be null.
        code_point = null;
        // 2. If byte is in the range 0x30 to 0x39, inclusive, set
        // code point to the index gb18030 ranges code point for
        // (((gb18030 first − 0x81) × 10 + gb18030 second − 0x30) ×
        // 126 + gb18030 third − 0x81) × 10 + byte − 0x30.
        if (inRange(bite, 0x30, 0x39)) {
          code_point = indexGB18030RangesCodePointFor(
              (((gb18030_first - 0x81) * 10 + gb18030_second - 0x30) * 126 +
               gb18030_third - 0x81) * 10 + bite - 0x30);
        }

        // 3. Let buffer be a byte sequence consisting of gb18030
        // second, gb18030 third, and byte, in order.
        var buffer = [gb18030_second, gb18030_third, bite];

        // 4. Set gb18030 first, gb18030 second, and gb18030 third to
        // 0x00.
        gb18030_first = 0x00;
        gb18030_second = 0x00;
        gb18030_third = 0x00;

        // 5. If code point is null, prepend buffer to stream and
        // return error.
        if (code_point === null) {
          stream.prepend(buffer);
          return decoderError(fatal);
        }

        // 6. Return a code point whose value is code point.
        return code_point;
      }

      // 4. If gb18030 second is not 0x00, run these substeps:
      if (gb18030_second !== 0x00) {

        // 1. If byte is in the range 0x81 to 0xFE, inclusive, set
        // gb18030 third to byte and return continue.
        if (inRange(bite, 0x81, 0xFE)) {
          gb18030_third = bite;
          return null;
        }

        // 2. Prepend gb18030 second followed by byte to stream, set
        // gb18030 first and gb18030 second to 0x00, and return error.
        stream.prepend([gb18030_second, bite]);
        gb18030_first = 0x00;
        gb18030_second = 0x00;
        return decoderError(fatal);
      }

      // 5. If gb18030 first is not 0x00, run these substeps:
      if (gb18030_first !== 0x00) {

        // 1. If byte is in the range 0x30 to 0x39, inclusive, set
        // gb18030 second to byte and return continue.
        if (inRange(bite, 0x30, 0x39)) {
          gb18030_second = bite;
          return null;
        }

        // 2. Let lead be gb18030 first, let pointer be null, and set
        // gb18030 first to 0x00.
        var lead = gb18030_first;
        var pointer = null;
        gb18030_first = 0x00;

        // 3. Let offset be 0x40 if byte is less than 0x7F and 0x41
        // otherwise.
        var offset = bite < 0x7F ? 0x40 : 0x41;

        // 4. If byte is in the range 0x40 to 0x7E, inclusive, or 0x80
        // to 0xFE, inclusive, set pointer to (lead − 0x81) × 190 +
        // (byte − offset).
        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFE))
          pointer = (lead - 0x81) * 190 + (bite - offset);

        // 5. Let code point be null if pointer is null and the index
        // code point for pointer in index gb18030 otherwise.
        code_point = pointer === null ? null :
            indexCodePointFor(pointer, index('gb18030'));

        // 6. If code point is null and byte is an ASCII byte, prepend
        // byte to stream.
        if (code_point === null && isASCIIByte(bite))
          stream.prepend(bite);

        // 7. If code point is null, return error.
        if (code_point === null)
          return decoderError(fatal);

        // 8. Return a code point whose value is code point.
        return code_point;
      }

      // 6. If byte is an ASCII byte, return a code point whose value
      // is byte.
      if (isASCIIByte(bite))
        return bite;

      // 7. If byte is 0x80, return code point U+20AC.
      if (bite === 0x80)
        return 0x20AC;

      // 8. If byte is in the range 0x81 to 0xFE, inclusive, set
      // gb18030 first to byte and return continue.
      if (inRange(bite, 0x81, 0xFE)) {
        gb18030_first = bite;
        return null;
      }

      // 9. Return error.
      return decoderError(fatal);
    };
  }

  // 11.2.2 gb18030 encoder
  /**
   * @constructor
   * @implements {Encoder}
   * @param {{fatal: boolean}} options
   * @param {boolean=} gbk_flag
   */
  function GB18030Encoder(options, gbk_flag) {
    var fatal = options.fatal;
    // gb18030's decoder has an associated gbk flag (initially unset).
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1. If code point is end-of-stream, return finished.
      if (code_point === end_of_stream)
        return finished;

      // 2. If code point is an ASCII code point, return a byte whose
      // value is code point.
      if (isASCIICodePoint(code_point))
        return code_point;

      // 3. If code point is U+E5E5, return error with code point.
      if (code_point === 0xE5E5)
        return encoderError(code_point);

      // 4. If the gbk flag is set and code point is U+20AC, return
      // byte 0x80.
      if (gbk_flag && code_point === 0x20AC)
        return 0x80;

      // 5. Let pointer be the index pointer for code point in index
      // gb18030.
      var pointer = indexPointerFor(code_point, index('gb18030'));

      // 6. If pointer is not null, run these substeps:
      if (pointer !== null) {

        // 1. Let lead be floor(pointer / 190) + 0x81.
        var lead = floor(pointer / 190) + 0x81;

        // 2. Let trail be pointer % 190.
        var trail = pointer % 190;

        // 3. Let offset be 0x40 if trail is less than 0x3F and 0x41 otherwise.
        var offset = trail < 0x3F ? 0x40 : 0x41;

        // 4. Return two bytes whose values are lead and trail + offset.
        return [lead, trail + offset];
      }

      // 7. If gbk flag is set, return error with code point.
      if (gbk_flag)
        return encoderError(code_point);

      // 8. Set pointer to the index gb18030 ranges pointer for code
      // point.
      pointer = indexGB18030RangesPointerFor(code_point);

      // 9. Let byte1 be floor(pointer / 10 / 126 / 10).
      var byte1 = floor(pointer / 10 / 126 / 10);

      // 10. Set pointer to pointer − byte1 × 10 × 126 × 10.
      pointer = pointer - byte1 * 10 * 126 * 10;

      // 11. Let byte2 be floor(pointer / 10 / 126).
      var byte2 = floor(pointer / 10 / 126);

      // 12. Set pointer to pointer − byte2 × 10 × 126.
      pointer = pointer - byte2 * 10 * 126;

      // 13. Let byte3 be floor(pointer / 10).
      var byte3 = floor(pointer / 10);

      // 14. Let byte4 be pointer − byte3 × 10.
      var byte4 = pointer - byte3 * 10;

      // 15. Return four bytes whose values are byte1 + 0x81, byte2 +
      // 0x30, byte3 + 0x81, byte4 + 0x30.
      return [byte1 + 0x81,
              byte2 + 0x30,
              byte3 + 0x81,
              byte4 + 0x30];
    };
  }

  /** @param {{fatal: boolean}} options */
  encoders['gb18030'] = function(options) {
    return new GB18030Encoder(options);
  };
  /** @param {{fatal: boolean}} options */
  decoders['gb18030'] = function(options) {
    return new GB18030Decoder(options);
  };


  //
  // 12. Legacy multi-byte Chinese (traditional) encodings
  //

  // 12.1 Big5

  // 12.1.1 Big5 decoder
  /**
   * @constructor
   * @implements {Decoder}
   * @param {{fatal: boolean}} options
   */
  function Big5Decoder(options) {
    var fatal = options.fatal;
    // Big5's decoder has an associated Big5 lead (initially 0x00).
    var /** @type {number} */ Big5_lead = 0x00;

    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // 1. If byte is end-of-stream and Big5 lead is not 0x00, set
      // Big5 lead to 0x00 and return error.
      if (bite === end_of_stream && Big5_lead !== 0x00) {
        Big5_lead = 0x00;
        return decoderError(fatal);
      }

      // 2. If byte is end-of-stream and Big5 lead is 0x00, return
      // finished.
      if (bite === end_of_stream && Big5_lead === 0x00)
        return finished;

      // 3. If Big5 lead is not 0x00, let lead be Big5 lead, let
      // pointer be null, set Big5 lead to 0x00, and then run these
      // substeps:
      if (Big5_lead !== 0x00) {
        var lead = Big5_lead;
        var pointer = null;
        Big5_lead = 0x00;

        // 1. Let offset be 0x40 if byte is less than 0x7F and 0x62
        // otherwise.
        var offset = bite < 0x7F ? 0x40 : 0x62;

        // 2. If byte is in the range 0x40 to 0x7E, inclusive, or 0xA1
        // to 0xFE, inclusive, set pointer to (lead − 0x81) × 157 +
        // (byte − offset).
        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0xA1, 0xFE))
          pointer = (lead - 0x81) * 157 + (bite - offset);

        // 3. If there is a row in the table below whose first column
        // is pointer, return the two code points listed in its second
        // column
        // Pointer | Code points
        // --------+--------------
        // 1133    | U+00CA U+0304
        // 1135    | U+00CA U+030C
        // 1164    | U+00EA U+0304
        // 1166    | U+00EA U+030C
        switch (pointer) {
          case 1133: return [0x00CA, 0x0304];
          case 1135: return [0x00CA, 0x030C];
          case 1164: return [0x00EA, 0x0304];
          case 1166: return [0x00EA, 0x030C];
        }

        // 4. Let code point be null if pointer is null and the index
        // code point for pointer in index Big5 otherwise.
        var code_point = (pointer === null) ? null :
            indexCodePointFor(pointer, index('big5'));

        // 5. If code point is null and byte is an ASCII byte, prepend
        // byte to stream.
        if (code_point === null && isASCIIByte(bite))
          stream.prepend(bite);

        // 6. If code point is null, return error.
        if (code_point === null)
          return decoderError(fatal);

        // 7. Return a code point whose value is code point.
        return code_point;
      }

      // 4. If byte is an ASCII byte, return a code point whose value
      // is byte.
      if (isASCIIByte(bite))
        return bite;

      // 5. If byte is in the range 0x81 to 0xFE, inclusive, set Big5
      // lead to byte and return continue.
      if (inRange(bite, 0x81, 0xFE)) {
        Big5_lead = bite;
        return null;
      }

      // 6. Return error.
      return decoderError(fatal);
    };
  }

  // 12.1.2 Big5 encoder
  /**
   * @constructor
   * @implements {Encoder}
   * @param {{fatal: boolean}} options
   */
  function Big5Encoder(options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1. If code point is end-of-stream, return finished.
      if (code_point === end_of_stream)
        return finished;

      // 2. If code point is an ASCII code point, return a byte whose
      // value is code point.
      if (isASCIICodePoint(code_point))
        return code_point;

      // 3. Let pointer be the index Big5 pointer for code point.
      var pointer = indexBig5PointerFor(code_point);

      // 4. If pointer is null, return error with code point.
      if (pointer === null)
        return encoderError(code_point);

      // 5. Let lead be floor(pointer / 157) + 0x81.
      var lead = floor(pointer / 157) + 0x81;

      // 6. If lead is less than 0xA1, return error with code point.
      if (lead < 0xA1)
        return encoderError(code_point);

      // 7. Let trail be pointer % 157.
      var trail = pointer % 157;

      // 8. Let offset be 0x40 if trail is less than 0x3F and 0x62
      // otherwise.
      var offset = trail < 0x3F ? 0x40 : 0x62;

      // Return two bytes whose values are lead and trail + offset.
      return [lead, trail + offset];
    };
  }

  /** @param {{fatal: boolean}} options */
  encoders['Big5'] = function(options) {
    return new Big5Encoder(options);
  };
  /** @param {{fatal: boolean}} options */
  decoders['Big5'] = function(options) {
    return new Big5Decoder(options);
  };


  //
  // 13. Legacy multi-byte Japanese encodings
  //

  // 13.1 euc-jp

  // 13.1.1 euc-jp decoder
  /**
   * @constructor
   * @implements {Decoder}
   * @param {{fatal: boolean}} options
   */
  function EUCJPDecoder(options) {
    var fatal = options.fatal;

    // euc-jp's decoder has an associated euc-jp jis0212 flag
    // (initially unset) and euc-jp lead (initially 0x00).
    var /** @type {boolean} */ eucjp_jis0212_flag = false,
        /** @type {number} */ eucjp_lead = 0x00;

    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // 1. If byte is end-of-stream and euc-jp lead is not 0x00, set
      // euc-jp lead to 0x00, and return error.
      if (bite === end_of_stream && eucjp_lead !== 0x00) {
        eucjp_lead = 0x00;
        return decoderError(fatal);
      }

      // 2. If byte is end-of-stream and euc-jp lead is 0x00, return
      // finished.
      if (bite === end_of_stream && eucjp_lead === 0x00)
        return finished;

      // 3. If euc-jp lead is 0x8E and byte is in the range 0xA1 to
      // 0xDF, inclusive, set euc-jp lead to 0x00 and return a code
      // point whose value is 0xFF61 − 0xA1 + byte.
      if (eucjp_lead === 0x8E && inRange(bite, 0xA1, 0xDF)) {
        eucjp_lead = 0x00;
        return 0xFF61 - 0xA1 + bite;
      }

      // 4. If euc-jp lead is 0x8F and byte is in the range 0xA1 to
      // 0xFE, inclusive, set the euc-jp jis0212 flag, set euc-jp lead
      // to byte, and return continue.
      if (eucjp_lead === 0x8F && inRange(bite, 0xA1, 0xFE)) {
        eucjp_jis0212_flag = true;
        eucjp_lead = bite;
        return null;
      }

      // 5. If euc-jp lead is not 0x00, let lead be euc-jp lead, set
      // euc-jp lead to 0x00, and run these substeps:
      if (eucjp_lead !== 0x00) {
        var lead = eucjp_lead;
        eucjp_lead = 0x00;

        // 1. Let code point be null.
        var code_point = null;

        // 2. If lead and byte are both in the range 0xA1 to 0xFE,
        // inclusive, set code point to the index code point for (lead
        // − 0xA1) × 94 + byte − 0xA1 in index jis0208 if the euc-jp
        // jis0212 flag is unset and in index jis0212 otherwise.
        if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {
          code_point = indexCodePointFor(
            (lead - 0xA1) * 94 + (bite - 0xA1),
            index(!eucjp_jis0212_flag ? 'jis0208' : 'jis0212'));
        }

        // 3. Unset the euc-jp jis0212 flag.
        eucjp_jis0212_flag = false;

        // 4. If byte is not in the range 0xA1 to 0xFE, inclusive,
        // prepend byte to stream.
        if (!inRange(bite, 0xA1, 0xFE))
          stream.prepend(bite);

        // 5. If code point is null, return error.
        if (code_point === null)
          return decoderError(fatal);

        // 6. Return a code point whose value is code point.
        return code_point;
      }

      // 6. If byte is an ASCII byte, return a code point whose value
      // is byte.
      if (isASCIIByte(bite))
        return bite;

      // 7. If byte is 0x8E, 0x8F, or in the range 0xA1 to 0xFE,
      // inclusive, set euc-jp lead to byte and return continue.
      if (bite === 0x8E || bite === 0x8F || inRange(bite, 0xA1, 0xFE)) {
        eucjp_lead = bite;
        return null;
      }

      // 8. Return error.
      return decoderError(fatal);
    };
  }

  // 13.1.2 euc-jp encoder
  /**
   * @constructor
   * @implements {Encoder}
   * @param {{fatal: boolean}} options
   */
  function EUCJPEncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1. If code point is end-of-stream, return finished.
      if (code_point === end_of_stream)
        return finished;

      // 2. If code point is an ASCII code point, return a byte whose
      // value is code point.
      if (isASCIICodePoint(code_point))
        return code_point;

      // 3. If code point is U+00A5, return byte 0x5C.
      if (code_point === 0x00A5)
        return 0x5C;

      // 4. If code point is U+203E, return byte 0x7E.
      if (code_point === 0x203E)
        return 0x7E;

      // 5. If code point is in the range U+FF61 to U+FF9F, inclusive,
      // return two bytes whose values are 0x8E and code point −
      // 0xFF61 + 0xA1.
      if (inRange(code_point, 0xFF61, 0xFF9F))
        return [0x8E, code_point - 0xFF61 + 0xA1];

      // 6. If code point is U+2212, set it to U+FF0D.
      if (code_point === 0x2212)
        code_point = 0xFF0D;

      // 7. Let pointer be the index pointer for code point in index
      // jis0208.
      var pointer = indexPointerFor(code_point, index('jis0208'));

      // 8. If pointer is null, return error with code point.
      if (pointer === null)
        return encoderError(code_point);

      // 9. Let lead be floor(pointer / 94) + 0xA1.
      var lead = floor(pointer / 94) + 0xA1;

      // 10. Let trail be pointer % 94 + 0xA1.
      var trail = pointer % 94 + 0xA1;

      // 11. Return two bytes whose values are lead and trail.
      return [lead, trail];
    };
  }

  /** @param {{fatal: boolean}} options */
  encoders['EUC-JP'] = function(options) {
    return new EUCJPEncoder(options);
  };
  /** @param {{fatal: boolean}} options */
  decoders['EUC-JP'] = function(options) {
    return new EUCJPDecoder(options);
  };

  // 13.2 iso-2022-jp

  // 13.2.1 iso-2022-jp decoder
  /**
   * @constructor
   * @implements {Decoder}
   * @param {{fatal: boolean}} options
   */
  function ISO2022JPDecoder(options) {
    var fatal = options.fatal;
    /** @enum */
    var states = {
      ASCII: 0,
      Roman: 1,
      Katakana: 2,
      LeadByte: 3,
      TrailByte: 4,
      EscapeStart: 5,
      Escape: 6
    };
    // iso-2022-jp's decoder has an associated iso-2022-jp decoder
    // state (initially ASCII), iso-2022-jp decoder output state
    // (initially ASCII), iso-2022-jp lead (initially 0x00), and
    // iso-2022-jp output flag (initially unset).
    var /** @type {number} */ iso2022jp_decoder_state = states.ASCII,
        /** @type {number} */ iso2022jp_decoder_output_state = states.ASCII,
        /** @type {number} */ iso2022jp_lead = 0x00,
        /** @type {boolean} */ iso2022jp_output_flag = false;
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // switching on iso-2022-jp decoder state:
      switch (iso2022jp_decoder_state) {
      default:
      case states.ASCII:
        // ASCII
        // Based on byte:

        // 0x1B
        if (bite === 0x1B) {
          // Set iso-2022-jp decoder state to escape start and return
          // continue.
          iso2022jp_decoder_state = states.EscapeStart;
          return null;
        }

        // 0x00 to 0x7F, excluding 0x0E, 0x0F, and 0x1B
        if (inRange(bite, 0x00, 0x7F) && bite !== 0x0E
            && bite !== 0x0F && bite !== 0x1B) {
          // Unset the iso-2022-jp output flag and return a code point
          // whose value is byte.
          iso2022jp_output_flag = false;
          return bite;
        }

        // end-of-stream
        if (bite === end_of_stream) {
          // Return finished.
          return finished;
        }

        // Otherwise
        // Unset the iso-2022-jp output flag and return error.
        iso2022jp_output_flag = false;
        return decoderError(fatal);

      case states.Roman:
        // Roman
        // Based on byte:

        // 0x1B
        if (bite === 0x1B) {
          // Set iso-2022-jp decoder state to escape start and return
          // continue.
          iso2022jp_decoder_state = states.EscapeStart;
          return null;
        }

        // 0x5C
        if (bite === 0x5C) {
          // Unset the iso-2022-jp output flag and return code point
          // U+00A5.
          iso2022jp_output_flag = false;
          return 0x00A5;
        }

        // 0x7E
        if (bite === 0x7E) {
          // Unset the iso-2022-jp output flag and return code point
          // U+203E.
          iso2022jp_output_flag = false;
          return 0x203E;
        }

        // 0x00 to 0x7F, excluding 0x0E, 0x0F, 0x1B, 0x5C, and 0x7E
        if (inRange(bite, 0x00, 0x7F) && bite !== 0x0E && bite !== 0x0F
            && bite !== 0x1B && bite !== 0x5C && bite !== 0x7E) {
          // Unset the iso-2022-jp output flag and return a code point
          // whose value is byte.
          iso2022jp_output_flag = false;
          return bite;
        }

        // end-of-stream
        if (bite === end_of_stream) {
          // Return finished.
          return finished;
        }

        // Otherwise
        // Unset the iso-2022-jp output flag and return error.
        iso2022jp_output_flag = false;
        return decoderError(fatal);

      case states.Katakana:
        // Katakana
        // Based on byte:

        // 0x1B
        if (bite === 0x1B) {
          // Set iso-2022-jp decoder state to escape start and return
          // continue.
          iso2022jp_decoder_state = states.EscapeStart;
          return null;
        }

        // 0x21 to 0x5F
        if (inRange(bite, 0x21, 0x5F)) {
          // Unset the iso-2022-jp output flag and return a code point
          // whose value is 0xFF61 − 0x21 + byte.
          iso2022jp_output_flag = false;
          return 0xFF61 - 0x21 + bite;
        }

        // end-of-stream
        if (bite === end_of_stream) {
          // Return finished.
          return finished;
        }

        // Otherwise
        // Unset the iso-2022-jp output flag and return error.
        iso2022jp_output_flag = false;
        return decoderError(fatal);

      case states.LeadByte:
        // Lead byte
        // Based on byte:

        // 0x1B
        if (bite === 0x1B) {
          // Set iso-2022-jp decoder state to escape start and return
          // continue.
          iso2022jp_decoder_state = states.EscapeStart;
          return null;
        }

        // 0x21 to 0x7E
        if (inRange(bite, 0x21, 0x7E)) {
          // Unset the iso-2022-jp output flag, set iso-2022-jp lead
          // to byte, iso-2022-jp decoder state to trail byte, and
          // return continue.
          iso2022jp_output_flag = false;
          iso2022jp_lead = bite;
          iso2022jp_decoder_state = states.TrailByte;
          return null;
        }

        // end-of-stream
        if (bite === end_of_stream) {
          // Return finished.
          return finished;
        }

        // Otherwise
        // Unset the iso-2022-jp output flag and return error.
        iso2022jp_output_flag = false;
        return decoderError(fatal);

      case states.TrailByte:
        // Trail byte
        // Based on byte:

        // 0x1B
        if (bite === 0x1B) {
          // Set iso-2022-jp decoder state to escape start and return
          // continue.
          iso2022jp_decoder_state = states.EscapeStart;
          return decoderError(fatal);
        }

        // 0x21 to 0x7E
        if (inRange(bite, 0x21, 0x7E)) {
          // 1. Set the iso-2022-jp decoder state to lead byte.
          iso2022jp_decoder_state = states.LeadByte;

          // 2. Let pointer be (iso-2022-jp lead − 0x21) × 94 + byte − 0x21.
          var pointer = (iso2022jp_lead - 0x21) * 94 + bite - 0x21;

          // 3. Let code point be the index code point for pointer in
          // index jis0208.
          var code_point = indexCodePointFor(pointer, index('jis0208'));

          // 4. If code point is null, return error.
          if (code_point === null)
            return decoderError(fatal);

          // 5. Return a code point whose value is code point.
          return code_point;
        }

        // end-of-stream
        if (bite === end_of_stream) {
          // Set the iso-2022-jp decoder state to lead byte, prepend
          // byte to stream, and return error.
          iso2022jp_decoder_state = states.LeadByte;
          stream.prepend(bite);
          return decoderError(fatal);
        }

        // Otherwise
        // Set iso-2022-jp decoder state to lead byte and return
        // error.
        iso2022jp_decoder_state = states.LeadByte;
        return decoderError(fatal);

      case states.EscapeStart:
        // Escape start

        // 1. If byte is either 0x24 or 0x28, set iso-2022-jp lead to
        // byte, iso-2022-jp decoder state to escape, and return
        // continue.
        if (bite === 0x24 || bite === 0x28) {
          iso2022jp_lead = bite;
          iso2022jp_decoder_state = states.Escape;
          return null;
        }

        // 2. Prepend byte to stream.
        stream.prepend(bite);

        // 3. Unset the iso-2022-jp output flag, set iso-2022-jp
        // decoder state to iso-2022-jp decoder output state, and
        // return error.
        iso2022jp_output_flag = false;
        iso2022jp_decoder_state = iso2022jp_decoder_output_state;
        return decoderError(fatal);

      case states.Escape:
        // Escape

        // 1. Let lead be iso-2022-jp lead and set iso-2022-jp lead to
        // 0x00.
        var lead = iso2022jp_lead;
        iso2022jp_lead = 0x00;

        // 2. Let state be null.
        var state = null;

        // 3. If lead is 0x28 and byte is 0x42, set state to ASCII.
        if (lead === 0x28 && bite === 0x42)
          state = states.ASCII;

        // 4. If lead is 0x28 and byte is 0x4A, set state to Roman.
        if (lead === 0x28 && bite === 0x4A)
          state = states.Roman;

        // 5. If lead is 0x28 and byte is 0x49, set state to Katakana.
        if (lead === 0x28 && bite === 0x49)
          state = states.Katakana;

        // 6. If lead is 0x24 and byte is either 0x40 or 0x42, set
        // state to lead byte.
        if (lead === 0x24 && (bite === 0x40 || bite === 0x42))
          state = states.LeadByte;

        // 7. If state is non-null, run these substeps:
        if (state !== null) {
          // 1. Set iso-2022-jp decoder state and iso-2022-jp decoder
          // output state to states.
          iso2022jp_decoder_state = iso2022jp_decoder_state = state;

          // 2. Let output flag be the iso-2022-jp output flag.
          var output_flag = iso2022jp_output_flag;

          // 3. Set the iso-2022-jp output flag.
          iso2022jp_output_flag = true;

          // 4. Return continue, if output flag is unset, and error
          // otherwise.
          return !output_flag ? null : decoderError(fatal);
        }

        // 8. Prepend lead and byte to stream.
        stream.prepend([lead, bite]);

        // 9. Unset the iso-2022-jp output flag, set iso-2022-jp
        // decoder state to iso-2022-jp decoder output state and
        // return error.
        iso2022jp_output_flag = false;
        iso2022jp_decoder_state = iso2022jp_decoder_output_state;
        return decoderError(fatal);
      }
    };
  }

  // 13.2.2 iso-2022-jp encoder
  /**
   * @constructor
   * @implements {Encoder}
   * @param {{fatal: boolean}} options
   */
  function ISO2022JPEncoder(options) {
    var fatal = options.fatal;
    // iso-2022-jp's encoder has an associated iso-2022-jp encoder
    // state which is one of ASCII, Roman, and jis0208 (initially
    // ASCII).
    /** @enum */
    var states = {
      ASCII: 0,
      Roman: 1,
      jis0208: 2
    };
    var /** @type {number} */ iso2022jp_state = states.ASCII;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1. If code point is end-of-stream and iso-2022-jp encoder
      // state is not ASCII, prepend code point to stream, set
      // iso-2022-jp encoder state to ASCII, and return three bytes
      // 0x1B 0x28 0x42.
      if (code_point === end_of_stream &&
          iso2022jp_state !== states.ASCII) {
        stream.prepend(code_point);
        iso2022jp_state = states.ASCII;
        return [0x1B, 0x28, 0x42];
      }

      // 2. If code point is end-of-stream and iso-2022-jp encoder
      // state is ASCII, return finished.
      if (code_point === end_of_stream && iso2022jp_state === states.ASCII)
        return finished;

      // 3. If ISO-2022-JP encoder state is ASCII or Roman, and code
      // point is U+000E, U+000F, or U+001B, return error with U+FFFD.
      if ((iso2022jp_state === states.ASCII ||
           iso2022jp_state === states.Roman) &&
          (code_point === 0x000E || code_point === 0x000F ||
           code_point === 0x001B)) {
        return encoderError(0xFFFD);
      }

      // 4. If iso-2022-jp encoder state is ASCII and code point is an
      // ASCII code point, return a byte whose value is code point.
      if (iso2022jp_state === states.ASCII &&
          isASCIICodePoint(code_point))
        return code_point;

      // 5. If iso-2022-jp encoder state is Roman and code point is an
      // ASCII code point, excluding U+005C and U+007E, or is U+00A5
      // or U+203E, run these substeps:
      if (iso2022jp_state === states.Roman &&
          ((isASCIICodePoint(code_point) &&
           code_point !== 0x005C && code_point !== 0x007E) ||
          (code_point == 0x00A5 || code_point == 0x203E))) {

        // 1. If code point is an ASCII code point, return a byte
        // whose value is code point.
        if (isASCIICodePoint(code_point))
          return code_point;

        // 2. If code point is U+00A5, return byte 0x5C.
        if (code_point === 0x00A5)
          return 0x5C;

        // 3. If code point is U+203E, return byte 0x7E.
        if (code_point === 0x203E)
          return 0x7E;
      }

      // 6. If code point is an ASCII code point, and iso-2022-jp
      // encoder state is not ASCII, prepend code point to stream, set
      // iso-2022-jp encoder state to ASCII, and return three bytes
      // 0x1B 0x28 0x42.
      if (isASCIICodePoint(code_point) &&
          iso2022jp_state !== states.ASCII) {
        stream.prepend(code_point);
        iso2022jp_state = states.ASCII;
        return [0x1B, 0x28, 0x42];
      }

      // 7. If code point is either U+00A5 or U+203E, and iso-2022-jp
      // encoder state is not Roman, prepend code point to stream, set
      // iso-2022-jp encoder state to Roman, and return three bytes
      // 0x1B 0x28 0x4A.
      if ((code_point === 0x00A5 || code_point === 0x203E) &&
          iso2022jp_state !== states.Roman) {
        stream.prepend(code_point);
        iso2022jp_state = states.Roman;
        return [0x1B, 0x28, 0x4A];
      }

      // 8. If code point is U+2212, set it to U+FF0D.
      if (code_point === 0x2212)
        code_point = 0xFF0D;

      // 9. Let pointer be the index pointer for code point in index
      // jis0208.
      var pointer = indexPointerFor(code_point, index('jis0208'));

      // 10. If pointer is null, return error with code point.
      if (pointer === null)
        return encoderError(code_point);

      // 11. If iso-2022-jp encoder state is not jis0208, prepend code
      // point to stream, set iso-2022-jp encoder state to jis0208,
      // and return three bytes 0x1B 0x24 0x42.
      if (iso2022jp_state !== states.jis0208) {
        stream.prepend(code_point);
        iso2022jp_state = states.jis0208;
        return [0x1B, 0x24, 0x42];
      }

      // 12. Let lead be floor(pointer / 94) + 0x21.
      var lead = floor(pointer / 94) + 0x21;

      // 13. Let trail be pointer % 94 + 0x21.
      var trail = pointer % 94 + 0x21;

      // 14. Return two bytes whose values are lead and trail.
      return [lead, trail];
    };
  }

  /** @param {{fatal: boolean}} options */
  encoders['ISO-2022-JP'] = function(options) {
    return new ISO2022JPEncoder(options);
  };
  /** @param {{fatal: boolean}} options */
  decoders['ISO-2022-JP'] = function(options) {
    return new ISO2022JPDecoder(options);
  };

  // 13.3 Shift_JIS

  // 13.3.1 Shift_JIS decoder
  /**
   * @constructor
   * @implements {Decoder}
   * @param {{fatal: boolean}} options
   */
  function ShiftJISDecoder(options) {
    var fatal = options.fatal;
    // Shift_JIS's decoder has an associated Shift_JIS lead (initially
    // 0x00).
    var /** @type {number} */ Shift_JIS_lead = 0x00;
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // 1. If byte is end-of-stream and Shift_JIS lead is not 0x00,
      // set Shift_JIS lead to 0x00 and return error.
      if (bite === end_of_stream && Shift_JIS_lead !== 0x00) {
        Shift_JIS_lead = 0x00;
        return decoderError(fatal);
      }

      // 2. If byte is end-of-stream and Shift_JIS lead is 0x00,
      // return finished.
      if (bite === end_of_stream && Shift_JIS_lead === 0x00)
        return finished;

      // 3. If Shift_JIS lead is not 0x00, let lead be Shift_JIS lead,
      // let pointer be null, set Shift_JIS lead to 0x00, and then run
      // these substeps:
      if (Shift_JIS_lead !== 0x00) {
        var lead = Shift_JIS_lead;
        var pointer = null;
        Shift_JIS_lead = 0x00;

        // 1. Let offset be 0x40, if byte is less than 0x7F, and 0x41
        // otherwise.
        var offset = (bite < 0x7F) ? 0x40 : 0x41;

        // 2. Let lead offset be 0x81, if lead is less than 0xA0, and
        // 0xC1 otherwise.
        var lead_offset = (lead < 0xA0) ? 0x81 : 0xC1;

        // 3. If byte is in the range 0x40 to 0x7E, inclusive, or 0x80
        // to 0xFC, inclusive, set pointer to (lead − lead offset) ×
        // 188 + byte − offset.
        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFC))
          pointer = (lead - lead_offset) * 188 + bite - offset;

        // 4. If pointer is in the range 8836 to 10715, inclusive,
        // return a code point whose value is 0xE000 − 8836 + pointer.
        if (inRange(pointer, 8836, 10715))
          return 0xE000 - 8836 + pointer;

        // 5. Let code point be null, if pointer is null, and the
        // index code point for pointer in index jis0208 otherwise.
        var code_point = (pointer === null) ? null :
              indexCodePointFor(pointer, index('jis0208'));

        // 6. If code point is null and byte is an ASCII byte, prepend
        // byte to stream.
        if (code_point === null && isASCIIByte(bite))
          stream.prepend(bite);

        // 7. If code point is null, return error.
        if (code_point === null)
          return decoderError(fatal);

        // 8. Return a code point whose value is code point.
        return code_point;
      }

      // 4. If byte is an ASCII byte or 0x80, return a code point
      // whose value is byte.
      if (isASCIIByte(bite) || bite === 0x80)
        return bite;

      // 5. If byte is in the range 0xA1 to 0xDF, inclusive, return a
      // code point whose value is 0xFF61 − 0xA1 + byte.
      if (inRange(bite, 0xA1, 0xDF))
        return 0xFF61 - 0xA1 + bite;

      // 6. If byte is in the range 0x81 to 0x9F, inclusive, or 0xE0
      // to 0xFC, inclusive, set Shift_JIS lead to byte and return
      // continue.
      if (inRange(bite, 0x81, 0x9F) || inRange(bite, 0xE0, 0xFC)) {
        Shift_JIS_lead = bite;
        return null;
      }

      // 7. Return error.
      return decoderError(fatal);
    };
  }

  // 13.3.2 Shift_JIS encoder
  /**
   * @constructor
   * @implements {Encoder}
   * @param {{fatal: boolean}} options
   */
  function ShiftJISEncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1. If code point is end-of-stream, return finished.
      if (code_point === end_of_stream)
        return finished;

      // 2. If code point is an ASCII code point or U+0080, return a
      // byte whose value is code point.
      if (isASCIICodePoint(code_point) || code_point === 0x0080)
        return code_point;

      // 3. If code point is U+00A5, return byte 0x5C.
      if (code_point === 0x00A5)
        return 0x5C;

      // 4. If code point is U+203E, return byte 0x7E.
      if (code_point === 0x203E)
        return 0x7E;

      // 5. If code point is in the range U+FF61 to U+FF9F, inclusive,
      // return a byte whose value is code point − 0xFF61 + 0xA1.
      if (inRange(code_point, 0xFF61, 0xFF9F))
        return code_point - 0xFF61 + 0xA1;

      // 6. If code point is U+2212, set it to U+FF0D.
      if (code_point === 0x2212)
        code_point = 0xFF0D;

      // 7. Let pointer be the index Shift_JIS pointer for code point.
      var pointer = indexShiftJISPointerFor(code_point);

      // 8. If pointer is null, return error with code point.
      if (pointer === null)
        return encoderError(code_point);

      // 9. Let lead be floor(pointer / 188).
      var lead = floor(pointer / 188);

      // 10. Let lead offset be 0x81, if lead is less than 0x1F, and
      // 0xC1 otherwise.
      var lead_offset = (lead < 0x1F) ? 0x81 : 0xC1;

      // 11. Let trail be pointer % 188.
      var trail = pointer % 188;

      // 12. Let offset be 0x40, if trail is less than 0x3F, and 0x41
      // otherwise.
      var offset = (trail < 0x3F) ? 0x40 : 0x41;

      // 13. Return two bytes whose values are lead + lead offset and
      // trail + offset.
      return [lead + lead_offset, trail + offset];
    };
  }

  /** @param {{fatal: boolean}} options */
  encoders['Shift_JIS'] = function(options) {
    return new ShiftJISEncoder(options);
  };
  /** @param {{fatal: boolean}} options */
  decoders['Shift_JIS'] = function(options) {
    return new ShiftJISDecoder(options);
  };

  //
  // 14. Legacy multi-byte Korean encodings
  //

  // 14.1 euc-kr

  // 14.1.1 euc-kr decoder
  /**
   * @constructor
   * @implements {Decoder}
   * @param {{fatal: boolean}} options
   */
  function EUCKRDecoder(options) {
    var fatal = options.fatal;

    // euc-kr's decoder has an associated euc-kr lead (initially 0x00).
    var /** @type {number} */ euckr_lead = 0x00;
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // 1. If byte is end-of-stream and euc-kr lead is not 0x00, set
      // euc-kr lead to 0x00 and return error.
      if (bite === end_of_stream && euckr_lead !== 0) {
        euckr_lead = 0x00;
        return decoderError(fatal);
      }

      // 2. If byte is end-of-stream and euc-kr lead is 0x00, return
      // finished.
      if (bite === end_of_stream && euckr_lead === 0)
        return finished;

      // 3. If euc-kr lead is not 0x00, let lead be euc-kr lead, let
      // pointer be null, set euc-kr lead to 0x00, and then run these
      // substeps:
      if (euckr_lead !== 0x00) {
        var lead = euckr_lead;
        var pointer = null;
        euckr_lead = 0x00;

        // 1. If byte is in the range 0x41 to 0xFE, inclusive, set
        // pointer to (lead − 0x81) × 190 + (byte − 0x41).
        if (inRange(bite, 0x41, 0xFE))
          pointer = (lead - 0x81) * 190 + (bite - 0x41);

        // 2. Let code point be null, if pointer is null, and the
        // index code point for pointer in index euc-kr otherwise.
        var code_point = (pointer === null)
              ? null : indexCodePointFor(pointer, index('euc-kr'));

        // 3. If code point is null and byte is an ASCII byte, prepend
        // byte to stream.
        if (pointer === null && isASCIIByte(bite))
          stream.prepend(bite);

        // 4. If code point is null, return error.
        if (code_point === null)
          return decoderError(fatal);

        // 5. Return a code point whose value is code point.
        return code_point;
      }

      // 4. If byte is an ASCII byte, return a code point whose value
      // is byte.
      if (isASCIIByte(bite))
        return bite;

      // 5. If byte is in the range 0x81 to 0xFE, inclusive, set
      // euc-kr lead to byte and return continue.
      if (inRange(bite, 0x81, 0xFE)) {
        euckr_lead = bite;
        return null;
      }

      // 6. Return error.
      return decoderError(fatal);
    };
  }

  // 14.1.2 euc-kr encoder
  /**
   * @constructor
   * @implements {Encoder}
   * @param {{fatal: boolean}} options
   */
  function EUCKREncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1. If code point is end-of-stream, return finished.
      if (code_point === end_of_stream)
        return finished;

      // 2. If code point is an ASCII code point, return a byte whose
      // value is code point.
      if (isASCIICodePoint(code_point))
        return code_point;

      // 3. Let pointer be the index pointer for code point in index
      // euc-kr.
      var pointer = indexPointerFor(code_point, index('euc-kr'));

      // 4. If pointer is null, return error with code point.
      if (pointer === null)
        return encoderError(code_point);

      // 5. Let lead be floor(pointer / 190) + 0x81.
      var lead = floor(pointer / 190) + 0x81;

      // 6. Let trail be pointer % 190 + 0x41.
      var trail = (pointer % 190) + 0x41;

      // 7. Return two bytes whose values are lead and trail.
      return [lead, trail];
    };
  }

  /** @param {{fatal: boolean}} options */
  encoders['EUC-KR'] = function(options) {
    return new EUCKREncoder(options);
  };
  /** @param {{fatal: boolean}} options */
  decoders['EUC-KR'] = function(options) {
    return new EUCKRDecoder(options);
  };


  //
  // 15. Legacy miscellaneous encodings
  //

  // 15.1 replacement

  // Not needed - API throws RangeError

  // 15.2 Common infrastructure for utf-16be and utf-16le

  /**
   * @param {number} code_unit
   * @param {boolean} utf16be
   * @return {!Array.<number>} bytes
   */
  function convertCodeUnitToBytes(code_unit, utf16be) {
    // 1. Let byte1 be code unit >> 8.
    var byte1 = code_unit >> 8;

    // 2. Let byte2 be code unit & 0x00FF.
    var byte2 = code_unit & 0x00FF;

    // 3. Then return the bytes in order:
        // utf-16be flag is set: byte1, then byte2.
    if (utf16be)
      return [byte1, byte2];
    // utf-16be flag is unset: byte2, then byte1.
    return [byte2, byte1];
  }

  // 15.2.1 shared utf-16 decoder
  /**
   * @constructor
   * @implements {Decoder}
   * @param {boolean} utf16_be True if big-endian, false if little-endian.
   * @param {{fatal: boolean}} options
   */
  function UTF16Decoder(utf16_be, options) {
    var fatal = options.fatal;
    var /** @type {?number} */ utf16_lead_byte = null,
        /** @type {?number} */ utf16_lead_surrogate = null;
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // 1. If byte is end-of-stream and either utf-16 lead byte or
      // utf-16 lead surrogate is not null, set utf-16 lead byte and
      // utf-16 lead surrogate to null, and return error.
      if (bite === end_of_stream && (utf16_lead_byte !== null ||
                                utf16_lead_surrogate !== null)) {
        return decoderError(fatal);
      }

      // 2. If byte is end-of-stream and utf-16 lead byte and utf-16
      // lead surrogate are null, return finished.
      if (bite === end_of_stream && utf16_lead_byte === null &&
          utf16_lead_surrogate === null) {
        return finished;
      }

      // 3. If utf-16 lead byte is null, set utf-16 lead byte to byte
      // and return continue.
      if (utf16_lead_byte === null) {
        utf16_lead_byte = bite;
        return null;
      }

      // 4. Let code unit be the result of:
      var code_unit;
      if (utf16_be) {
        // utf-16be decoder flag is set
        //   (utf-16 lead byte << 8) + byte.
        code_unit = (utf16_lead_byte << 8) + bite;
      } else {
        // utf-16be decoder flag is unset
        //   (byte << 8) + utf-16 lead byte.
        code_unit = (bite << 8) + utf16_lead_byte;
      }
      // Then set utf-16 lead byte to null.
      utf16_lead_byte = null;

      // 5. If utf-16 lead surrogate is not null, let lead surrogate
      // be utf-16 lead surrogate, set utf-16 lead surrogate to null,
      // and then run these substeps:
      if (utf16_lead_surrogate !== null) {
        var lead_surrogate = utf16_lead_surrogate;
        utf16_lead_surrogate = null;

        // 1. If code unit is in the range U+DC00 to U+DFFF,
        // inclusive, return a code point whose value is 0x10000 +
        // ((lead surrogate − 0xD800) << 10) + (code unit − 0xDC00).
        if (inRange(code_unit, 0xDC00, 0xDFFF)) {
          return 0x10000 + (lead_surrogate - 0xD800) * 0x400 +
              (code_unit - 0xDC00);
        }

        // 2. Prepend the sequence resulting of converting code unit
        // to bytes using utf-16be decoder flag to stream and return
        // error.
        stream.prepend(convertCodeUnitToBytes(code_unit, utf16_be));
        return decoderError(fatal);
      }

      // 6. If code unit is in the range U+D800 to U+DBFF, inclusive,
      // set utf-16 lead surrogate to code unit and return continue.
      if (inRange(code_unit, 0xD800, 0xDBFF)) {
        utf16_lead_surrogate = code_unit;
        return null;
      }

      // 7. If code unit is in the range U+DC00 to U+DFFF, inclusive,
      // return error.
      if (inRange(code_unit, 0xDC00, 0xDFFF))
        return decoderError(fatal);

      // 8. Return code point code unit.
      return code_unit;
    };
  }

  // 15.2.2 shared utf-16 encoder
  /**
   * @constructor
   * @implements {Encoder}
   * @param {boolean} utf16_be True if big-endian, false if little-endian.
   * @param {{fatal: boolean}} options
   */
  function UTF16Encoder(utf16_be, options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1. If code point is end-of-stream, return finished.
      if (code_point === end_of_stream)
        return finished;

      // 2. If code point is in the range U+0000 to U+FFFF, inclusive,
      // return the sequence resulting of converting code point to
      // bytes using utf-16be encoder flag.
      if (inRange(code_point, 0x0000, 0xFFFF))
        return convertCodeUnitToBytes(code_point, utf16_be);

      // 3. Let lead be ((code point − 0x10000) >> 10) + 0xD800,
      // converted to bytes using utf-16be encoder flag.
      var lead = convertCodeUnitToBytes(
        ((code_point - 0x10000) >> 10) + 0xD800, utf16_be);

      // 4. Let trail be ((code point − 0x10000) & 0x3FF) + 0xDC00,
      // converted to bytes using utf-16be encoder flag.
      var trail = convertCodeUnitToBytes(
        ((code_point - 0x10000) & 0x3FF) + 0xDC00, utf16_be);

      // 5. Return a byte sequence of lead followed by trail.
      return lead.concat(trail);
    };
  }

  // 15.3 utf-16be
  // 15.3.1 utf-16be decoder
  /** @param {{fatal: boolean}} options */
  encoders['UTF-16BE'] = function(options) {
    return new UTF16Encoder(true, options);
  };
  // 15.3.2 utf-16be encoder
  /** @param {{fatal: boolean}} options */
  decoders['UTF-16BE'] = function(options) {
    return new UTF16Decoder(true, options);
  };

  // 15.4 utf-16le
  // 15.4.1 utf-16le decoder
  /** @param {{fatal: boolean}} options */
  encoders['UTF-16LE'] = function(options) {
    return new UTF16Encoder(false, options);
  };
  // 15.4.2 utf-16le encoder
  /** @param {{fatal: boolean}} options */
  decoders['UTF-16LE'] = function(options) {
    return new UTF16Decoder(false, options);
  };

  // 15.5 x-user-defined

  // 15.5.1 x-user-defined decoder
  /**
   * @constructor
   * @implements {Decoder}
   * @param {{fatal: boolean}} options
   */
  function XUserDefinedDecoder(options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream The stream of bytes being decoded.
     * @param {number} bite The next byte read from the stream.
     * @return {?(number|!Array.<number>)} The next code point(s)
     *     decoded, or null if not enough data exists in the input
     *     stream to decode a complete code point.
     */
    this.handler = function(stream, bite) {
      // 1. If byte is end-of-stream, return finished.
      if (bite === end_of_stream)
        return finished;

      // 2. If byte is an ASCII byte, return a code point whose value
      // is byte.
      if (isASCIIByte(bite))
        return bite;

      // 3. Return a code point whose value is 0xF780 + byte − 0x80.
      return 0xF780 + bite - 0x80;
    };
  }

  // 15.5.2 x-user-defined encoder
  /**
   * @constructor
   * @implements {Encoder}
   * @param {{fatal: boolean}} options
   */
  function XUserDefinedEncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {Stream} stream Input stream.
     * @param {number} code_point Next code point read from the stream.
     * @return {(number|!Array.<number>)} Byte(s) to emit.
     */
    this.handler = function(stream, code_point) {
      // 1.If code point is end-of-stream, return finished.
      if (code_point === end_of_stream)
        return finished;

      // 2. If code point is an ASCII code point, return a byte whose
      // value is code point.
      if (isASCIICodePoint(code_point))
        return code_point;

      // 3. If code point is in the range U+F780 to U+F7FF, inclusive,
      // return a byte whose value is code point − 0xF780 + 0x80.
      if (inRange(code_point, 0xF780, 0xF7FF))
        return code_point - 0xF780 + 0x80;

      // 4. Return error with code point.
      return encoderError(code_point);
    };
  }

  /** @param {{fatal: boolean}} options */
  encoders['x-user-defined'] = function(options) {
    return new XUserDefinedEncoder(options);
  };
  /** @param {{fatal: boolean}} options */
  decoders['x-user-defined'] = function(options) {
    return new XUserDefinedDecoder(options);
  };

  if (!global['TextEncoder'])
    global['TextEncoder'] = TextEncoder;
  if (!global['TextDecoder'])
    global['TextDecoder'] = TextDecoder;

  if (typeof module !== "undefined" && module.exports) {
    module.exports = {
      TextEncoder: global['TextEncoder'],
      TextDecoder: global['TextDecoder'],
      EncodingIndexes: global["encoding-indexes"]
    };
  }

// For strict environments where `this` inside the global scope
// is `undefined`, take a pure object instead
}(this || {}));

},{"./encoding-indexes.js":9}],26:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":19,"timers":26}],27:[function(require,module,exports){
function parse(wkt, options) {
  const raw = typeof options === "object" && options.raw === true;
  const debug = typeof options === "object" && options.debug === true;

  if (debug) console.log("[wktcrs] parse starting with\n", wkt);

  // move all keywords into first array item slot
  // from PARAM[12345, 67890] to ["PARAM", 12345, 67890]
  wkt = wkt.replace(/[A-Z][A-Z\d_]+\[/gi, function (match) {
    return '["' + match.substr(0, match.length - 1) + '",';
  });

  // wrap variables in strings
  // from [...,NORTH] to [...,"NORTH"]
  wkt = wkt.replace(/, ?([A-Z][A-Z\d_]+[,\]])/gi, function (match, p1) {
    const varname = p1.substr(0, p1.length - 1);
    return "," + '"' + (raw ? "raw:" : "") + varname + '"' + p1[p1.length - 1];
  });

  if (typeof options === "object" && options.raw === true) {
    // replace all numbers with strings
    wkt = wkt.replace(/, {0,2}(-?[\.\d]+)(?=,|\])/g, function (match, p1) {
      return "," + '"' + (raw ? "raw:" : "") + p1 + '"';
    });
  }

  // str should now be valid JSON
  if (debug) console.log("[wktcrs] json'd wkt: '" + wkt + "'");
  let data;
  try {
    data = JSON.parse(wkt);
  } catch (error) {
    console.error(`[wktcrs] failed to parse '${wkt}'`);
    throw error;
  }

  if (debug) console.log("[wktcrs] json parsed: '" + wkt + "'");

  function process(data, parent) {
    const kw = data[0];

    // after removing the first element with .shift()
    // data is now just an array of attributes

    data.forEach(function (it) {
      if (Array.isArray(it)) {
        process(it, data);
      }
    });

    const kwarr = "MULTIPLE_" + kw;

    if (kwarr in parent) {
      parent[kwarr].push(data);
    } else if (kw in parent) {
      parent[kwarr] = [parent[kw], data];
      delete parent[kw];
    } else {
      parent[kw] = data;
    }
    return parent;
  }

  const result = process(data, [data]);
  if (debug) console.log("[wktcrs] parse returning", result);

  return { data: result };
}

// convert JSON representation of Well-Known Text
// back to standard Well-Known Text
function unparse(wkt, options) {
  if (Array.isArray(wkt) && wkt.length == 1 && Array.isArray(wkt[0])) {
    wkt = wkt[0]; // ignore first extra wrapper array
  }

  const [kw, ...attrs] = wkt;
  const str =
    kw +
    "[" +
    attrs
      .map(attr => {
        if (Array.isArray(attr)) {
          return unparse(attr, options).data;
        } else if (typeof attr === "number") {
          return attr.toString();
        } else if (typeof attr === "string") {
          // can't automatically convert all caps to varibale
          // because EPSG is string in AUTHORITY["EPSG", ...]
          if (attr.startsWith("raw:")) {
            // convert "raw:NORTH" to NORTH
            return attr.replace("raw:", "");
          } else {
            return '"' + attr + '"';
          }
        } else {
          throw new Error('[wktcrs] unexpected attribute "' + attr + '"');
        }
      })
      .join(",") +
    "]";
  return { data: str };
}

const _module = { parse, unparse };
if (typeof define === "function")
  define(function () {
    return _module;
  });
if (typeof module === "object") module.exports = _module;
if (typeof window === "object") window.wktcrs = _module;
if (typeof self === "object") self.wktcrs = _module;

},{}],28:[function(require,module,exports){
'use strict';

var NEUTRAL = 1;
var KEYWORD = 2;
var NUMBER = 3;
var QUOTED = 4;
var AFTERQUOTE = 5;
var ENDED = -1;
var whitespace = /\s/;
var latin = /[A-Za-z]/;
var keyword = /[A-Za-z84_]/;
var endThings = /[,\]]/;
var digets = /[\d\.E\-\+]/;
// const ignoredChar = /[\s_\-\/\(\)]/g;
function Parser(text) {
  if (typeof text !== 'string') {
    throw new Error('not a string');
  }
  this.text = text.trim();
  this.level = 0;
  this.place = 0;
  this.root = null;
  this.stack = [];
  this.currentObject = null;
  this.state = NEUTRAL;
}
Parser.prototype.readCharicter = function() {
  var char = this.text[this.place++];
  if (this.state !== QUOTED) {
    while (whitespace.test(char)) {
      if (this.place >= this.text.length) {
        return;
      }
      char = this.text[this.place++];
    }
  }
  switch (this.state) {
    case NEUTRAL:
      return this.neutral(char);
    case KEYWORD:
      return this.keyword(char)
    case QUOTED:
      return this.quoted(char);
    case AFTERQUOTE:
      return this.afterquote(char);
    case NUMBER:
      return this.number(char);
    case ENDED:
      return;
  }
};
Parser.prototype.afterquote = function(char) {
  if (char === '"') {
    this.word += '"';
    this.state = QUOTED;
    return;
  }
  if (endThings.test(char)) {
    this.word = this.word.trim();
    this.afterItem(char);
    return;
  }
  throw new Error('havn\'t handled "' +char + '" in afterquote yet, index ' + this.place);
};
Parser.prototype.afterItem = function(char) {
  if (char === ',') {
    if (this.word !== null) {
      this.currentObject.push(this.word);
    }
    this.word = null;
    this.state = NEUTRAL;
    return;
  }
  if (char === ']') {
    this.level--;
    if (this.word !== null) {
      this.currentObject.push(this.word);
      this.word = null;
    }
    this.state = NEUTRAL;
    this.currentObject = this.stack.pop();
    if (!this.currentObject) {
      this.state = ENDED;
    }

    return;
  }
};
Parser.prototype.number = function(char) {
  if (digets.test(char)) {
    this.word += char;
    return;
  }
  if (endThings.test(char)) {
    this.word = parseFloat(this.word);
    this.afterItem(char);
    return;
  }
  throw new Error('havn\'t handled "' +char + '" in number yet, index ' + this.place);
};
Parser.prototype.quoted = function(char) {
  if (char === '"') {
    this.state = AFTERQUOTE;
    return;
  }
  this.word += char;
  return;
};
Parser.prototype.keyword = function(char) {
  if (keyword.test(char)) {
    this.word += char;
    return;
  }
  if (char === '[') {
    var newObjects = [];
    newObjects.push(this.word);
    this.level++;
    if (this.root === null) {
      this.root = newObjects;
    } else {
      this.currentObject.push(newObjects);
    }
    this.stack.push(this.currentObject);
    this.currentObject = newObjects;
    this.state = NEUTRAL;
    return;
  }
  if (endThings.test(char)) {
    this.afterItem(char);
    return;
  }
  throw new Error('havn\'t handled "' +char + '" in keyword yet, index ' + this.place);
};
Parser.prototype.neutral = function(char) {
  if (latin.test(char)) {
    this.word = char;
    this.state = KEYWORD;
    return;
  }
  if (char === '"') {
    this.word = '';
    this.state = QUOTED;
    return;
  }
  if (digets.test(char)) {
    this.word = char;
    this.state = NUMBER;
    return;
  }
  if (endThings.test(char)) {
    this.afterItem(char);
    return;
  }
  throw new Error('havn\'t handled "' +char + '" in neutral yet, index ' + this.place);
};
Parser.prototype.output = function() {
  while (this.place < this.text.length) {
    this.readCharicter();
  }
  if (this.state === ENDED) {
    return this.root;
  }
  throw new Error('unable to parse string "' +this.text + '". State is ' + this.state);
};

function parseString(txt) {
  var parser = new Parser(txt);
  return parser.output();
}

function mapit(obj, key, value) {
  if (Array.isArray(key)) {
    value.unshift(key);
    key = null;
  }
  var thing = key ? {} : obj;

  var out = value.reduce(function(newObj, item) {
    sExpr(item, newObj);
    return newObj
  }, thing);
  if (key) {
    obj[key] = out;
  }
}

function sExpr(v, obj) {
  if (!Array.isArray(v)) {
    obj[v] = true;
    return;
  }
  var key = v.shift();
  if (key === 'PARAMETER') {
    key = v.shift();
  }
  if (v.length === 1) {
    if (Array.isArray(v[0])) {
      obj[key] = {};
      sExpr(v[0], obj[key]);
      return;
    }
    obj[key] = v[0];
    return;
  }
  if (!v.length) {
    obj[key] = true;
    return;
  }
  if (key === 'TOWGS84') {
    obj[key] = v;
    return;
  }
  if (key === 'AXIS') {
    if (!(key in obj)) {
      obj[key] = [];
    }
    obj[key].push(v);
    return;
  }
  if (!Array.isArray(key)) {
    obj[key] = {};
  }

  var i;
  switch (key) {
    case 'UNIT':
    case 'PRIMEM':
    case 'VERT_DATUM':
      obj[key] = {
        name: v[0].toLowerCase(),
        convert: v[1]
      };
      if (v.length === 3) {
        sExpr(v[2], obj[key]);
      }
      return;
    case 'SPHEROID':
    case 'ELLIPSOID':
      obj[key] = {
        name: v[0],
        a: v[1],
        rf: v[2]
      };
      if (v.length === 4) {
        sExpr(v[3], obj[key]);
      }
      return;
    case 'PROJECTEDCRS':
    case 'PROJCRS':
    case 'GEOGCS':
    case 'GEOCCS':
    case 'PROJCS':
    case 'LOCAL_CS':
    case 'GEODCRS':
    case 'GEODETICCRS':
    case 'GEODETICDATUM':
    case 'EDATUM':
    case 'ENGINEERINGDATUM':
    case 'VERT_CS':
    case 'VERTCRS':
    case 'VERTICALCRS':
    case 'COMPD_CS':
    case 'COMPOUNDCRS':
    case 'ENGINEERINGCRS':
    case 'ENGCRS':
    case 'FITTED_CS':
    case 'LOCAL_DATUM':
    case 'DATUM':
      v[0] = ['name', v[0]];
      mapit(obj, key, v);
      return;
    default:
      i = -1;
      while (++i < v.length) {
        if (!Array.isArray(v[i])) {
          return sExpr(v, obj[key]);
        }
      }
      return mapit(obj, key, v);
  }
}

var D2R = 0.01745329251994329577;
function rename(obj, params) {
  var outName = params[0];
  var inName = params[1];
  if (!(outName in obj) && (inName in obj)) {
    obj[outName] = obj[inName];
    if (params.length === 3) {
      obj[outName] = params[2](obj[outName]);
    }
  }
}

function d2r(input) {
  return input * D2R;
}

function cleanWKT(wkt) {
  if (wkt.type === 'GEOGCS') {
    wkt.projName = 'longlat';
  } else if (wkt.type === 'LOCAL_CS') {
    wkt.projName = 'identity';
    wkt.local = true;
  } else {
    if (typeof wkt.PROJECTION === 'object') {
      wkt.projName = Object.keys(wkt.PROJECTION)[0];
    } else {
      wkt.projName = wkt.PROJECTION;
    }
  }
  if (wkt.AXIS) {
    var axisOrder = '';
    for (var i = 0, ii = wkt.AXIS.length; i < ii; ++i) {
      var axis = [wkt.AXIS[i][0].toLowerCase(), wkt.AXIS[i][1].toLowerCase()];
      if (axis[0].indexOf('north') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'north')) {
        axisOrder += 'n';
      } else if (axis[0].indexOf('south') !== -1 || ((axis[0] === 'y' || axis[0] === 'lat') && axis[1] === 'south')) {
        axisOrder += 's';
      } else if (axis[0].indexOf('east') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'east')) {
        axisOrder += 'e';
      } else if (axis[0].indexOf('west') !== -1 || ((axis[0] === 'x' || axis[0] === 'lon') && axis[1] === 'west')) {
        axisOrder += 'w';
      }
    }
    if (axisOrder.length === 2) {
      axisOrder += 'u';
    }
    if (axisOrder.length === 3) {
      wkt.axis = axisOrder;
    }
  }
  if (wkt.UNIT) {
    wkt.units = wkt.UNIT.name.toLowerCase();
    if (wkt.units === 'metre') {
      wkt.units = 'meter';
    }
    if (wkt.UNIT.convert) {
      if (wkt.type === 'GEOGCS') {
        if (wkt.DATUM && wkt.DATUM.SPHEROID) {
          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;
        }
      } else {
        wkt.to_meter = wkt.UNIT.convert;
      }
    }
  }
  var geogcs = wkt.GEOGCS;
  if (wkt.type === 'GEOGCS') {
    geogcs = wkt;
  }
  if (geogcs) {
    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){
    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;
    //}
    if (geogcs.DATUM) {
      wkt.datumCode = geogcs.DATUM.name.toLowerCase();
    } else {
      wkt.datumCode = geogcs.name.toLowerCase();
    }
    if (wkt.datumCode.slice(0, 2) === 'd_') {
      wkt.datumCode = wkt.datumCode.slice(2);
    }
    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {
      wkt.datumCode = 'nzgd49';
    }
    if (wkt.datumCode === 'wgs_1984' || wkt.datumCode === 'world_geodetic_system_1984') {
      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {
        wkt.sphere = true;
      }
      wkt.datumCode = 'wgs84';
    }
    if (wkt.datumCode.slice(-6) === '_ferro') {
      wkt.datumCode = wkt.datumCode.slice(0, - 6);
    }
    if (wkt.datumCode.slice(-8) === '_jakarta') {
      wkt.datumCode = wkt.datumCode.slice(0, - 8);
    }
    if (~wkt.datumCode.indexOf('belge')) {
      wkt.datumCode = 'rnb72';
    }
    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {
      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\_18/, 'clrk');
      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {
        wkt.ellps = 'intl';
      }

      wkt.a = geogcs.DATUM.SPHEROID.a;
      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);
    }

    if (geogcs.DATUM && geogcs.DATUM.TOWGS84) {
      wkt.datum_params = geogcs.DATUM.TOWGS84;
    }
    if (~wkt.datumCode.indexOf('osgb_1936')) {
      wkt.datumCode = 'osgb36';
    }
    if (~wkt.datumCode.indexOf('osni_1952')) {
      wkt.datumCode = 'osni52';
    }
    if (~wkt.datumCode.indexOf('tm65')
      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {
      wkt.datumCode = 'ire65';
    }
    if (wkt.datumCode === 'ch1903+') {
      wkt.datumCode = 'ch1903';
    }
    if (~wkt.datumCode.indexOf('israel')) {
      wkt.datumCode = 'isr93';
    }
  }
  if (wkt.b && !isFinite(wkt.b)) {
    wkt.b = wkt.a;
  }

  function toMeter(input) {
    var ratio = wkt.to_meter || 1;
    return input * ratio;
  }
  var renamer = function(a) {
    return rename(wkt, a);
  };
  var list = [
    ['standard_parallel_1', 'Standard_Parallel_1'],
    ['standard_parallel_1', 'Latitude of 1st standard parallel'],
    ['standard_parallel_2', 'Standard_Parallel_2'],
    ['standard_parallel_2', 'Latitude of 2nd standard parallel'],
    ['false_easting', 'False_Easting'],
    ['false_easting', 'False easting'],
    ['false-easting', 'Easting at false origin'],
    ['false_northing', 'False_Northing'],
    ['false_northing', 'False northing'],
    ['false_northing', 'Northing at false origin'],
    ['central_meridian', 'Central_Meridian'],
    ['central_meridian', 'Longitude of natural origin'],
    ['central_meridian', 'Longitude of false origin'],
    ['latitude_of_origin', 'Latitude_Of_Origin'],
    ['latitude_of_origin', 'Central_Parallel'],
    ['latitude_of_origin', 'Latitude of natural origin'],
    ['latitude_of_origin', 'Latitude of false origin'],
    ['scale_factor', 'Scale_Factor'],
    ['k0', 'scale_factor'],
    ['latitude_of_center', 'Latitude_Of_Center'],
    ['latitude_of_center', 'Latitude_of_center'],
    ['lat0', 'latitude_of_center', d2r],
    ['longitude_of_center', 'Longitude_Of_Center'],
    ['longitude_of_center', 'Longitude_of_center'],
    ['longc', 'longitude_of_center', d2r],
    ['x0', 'false_easting', toMeter],
    ['y0', 'false_northing', toMeter],
    ['long0', 'central_meridian', d2r],
    ['lat0', 'latitude_of_origin', d2r],
    ['lat0', 'standard_parallel_1', d2r],
    ['lat1', 'standard_parallel_1', d2r],
    ['lat2', 'standard_parallel_2', d2r],
    ['azimuth', 'Azimuth'],
    ['alpha', 'azimuth', d2r],
    ['srsCode', 'name']
  ];
  list.forEach(renamer);
  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {
    wkt.long0 = wkt.longc;
  }
  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {
    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);
    wkt.lat_ts = wkt.lat1;
  }
}
var index = function(wkt) {
  var lisp = parseString(wkt);
  var type = lisp.shift();
  var name = lisp.shift();
  lisp.unshift(['name', name]);
  lisp.unshift(['type', type]);
  var obj = {};
  sExpr(lisp, obj);
  cleanWKT(obj);
  return obj;
};

module.exports = index;

},{}],29:[function(require,module,exports){
(function (global){(function (){
'use strict';
let proj4 = require('proj4');
if (proj4.default) {
  proj4 = proj4.default;
}
const { unzip, JSZip } = require('./unzip');
const binaryAjax = require('./binaryajax');
const parseShp = require('./parseShp');
const parseDbf = require('parsedbf');
const Promise = require('lie');
const Cache = require('lru-cache');
const Buffer = require('buffer').Buffer;
const URL = global.URL;
const wktParser = require('wkt-parser');
const projData = require('proj-data');
const esriEpsg = require('./esriEpsg');
const fs = require('fs');
const clientReadFile = require('./clientReadFile');

const cache = new Cache({
  max: 20
});

function toBuffer(b) {
  if (!b) {
    throw new Error('forgot to pass buffer');
  }
  if (Buffer.isBuffer(b)) {
    return b;
  }
  if (b instanceof global.ArrayBuffer) {
    return Buffer.from(b);
  }
  if (b.buffer instanceof global.ArrayBuffer) {
    if (b.BYTES_PER_ELEMENT === 1) {
      return Buffer.from(b);
    }
    return Buffer.from(b.buffer);
  }
}

function shp(base, whiteList, options) {
  if (typeof base === 'string' && cache.has(base)) {
    return Promise.resolve(cache.get(base));
  }
  return shp.getShapefile(base, whiteList, options).then(function (resp) {
    if (typeof base === 'string') {
      cache.set(base, resp);
    }
    return resp;
  });
}
shp.combine = function ([shp, dbf]) {
  const out = {};
  out.type = 'FeatureCollection';
  out.features = [];
  let i = 0;
  const len = shp.length;
  if (!dbf) {
    dbf = [];
  }
  while (i < len) {
    out.features.push({
      type: 'Feature',
      geometry: shp[i],
      properties: dbf[i] || {}
    });
    i++;
  }
  return out;
};
shp.parseZip = async function (buffer, whiteList, options) {
  let key;
  buffer = toBuffer(buffer);
  const zip = await unzip(buffer);
  const names = [];
  whiteList = whiteList || [];
  for (key in zip) {
    if (key.indexOf('__MACOSX') !== -1) {
      continue;
    }
    if (key.slice(-3).toLowerCase() === 'shp') {
      /* if (key.split('.').pop().toLowerCase() === 'shp') { */
      names.push(key.slice(0, -4));
      zip[key.slice(0, -3) + key.slice(-3).toLowerCase()] = zip[key];
    } else if (key.slice(-3).toLowerCase() === 'prj') {
      /* zip[key.slice(0, -3) + key.slice(-3).toLowerCase()] = proj4(zip[key]);    */
      let fromProj = zip[key];
      const esriPrjObj = wktParser(fromProj);
      const epsg = esriEpsg(esriPrjObj.name);

      if (epsg) {
        const prjObj = projData['EPSG:' + epsg];
        if (prjObj) {
          fromProj = prjObj.proj4;
        }
      }

      let destProj = null;
      if (options && options.epsg) {
        const prjObj = projData['EPSG:' + options.epsg];
        if (prjObj) {
          destProj = prjObj.proj4;
        }
      }

      if (destProj) {
        zip[key.slice(0, -3) + key.slice(-3).toLowerCase()] = proj4(destProj, fromProj);
      } else {
        zip[key.slice(0, -3) + key.slice(-3).toLowerCase()] = proj4(fromProj);
      }
    } else if (key.slice(-4).toLowerCase() === 'json' || whiteList.indexOf(key.split('.').pop()) > -1) {
      names.push(key.slice(0, -3) + key.slice(-3).toLowerCase());
    } else if (key.slice(-3).toLowerCase() === 'dbf' || key.slice(-3).toLowerCase() === 'cpg') {
      zip[key.slice(0, -3) + key.slice(-3).toLowerCase()] = zip[key];
    }
  }
  if (!names.length) {
    throw new Error('no layers founds');
  }
  const geojson = names.map(function (name) {
    let parsed, dbf;
    const lastDotIdx = name.lastIndexOf('.');
    if (lastDotIdx > -1 && name.slice(lastDotIdx).indexOf('json') > -1) {
      parsed = JSON.parse(zip[name]);
      parsed.fileName = name.slice(0, lastDotIdx);
    } else if (whiteList.indexOf(name.slice(lastDotIdx + 1)) > -1) {
      parsed = zip[name];
      parsed.fileName = name;
    } else {
      if (zip[name + '.dbf']) {
        let encoding = zip[name + '.cpg'];
        if (!encoding) {
          encoding = 'gb2312';
        }
        dbf = parseDbf(zip[name + '.dbf'], encoding);
      }
      parsed = shp.combine([parseShp(zip[name + '.shp'], zip[name + '.prj']), dbf]);
      parsed.fileName = name;
    }
    return parsed;
  });
  if (geojson.length === 1) {
    return geojson[0];
  } else {
    return geojson;
  }
};

async function getZip(base, whiteList, options) {
  const a = await binaryAjax(base);
  return shp.parseZip(a, whiteList, options);
}
const handleShp = async (base, options) => {
  const args = await Promise.all([
    binaryAjax(base, 'shp'),
    binaryAjax(base, 'prj')
  ]);
  let prj = false;
  try {
    if (args[1]) {
      // prj = proj4(args[1]);

      let fromProj;
      let destProj;

      const esriPrjObj = wktParser(args[1]);
      const epsg = esriEpsg(esriPrjObj.name);

      if (epsg) {
        const prjObj = projData['EPSG:' + epsg];
        if (prjObj) {
          fromProj = prjObj.proj4;
        }
      }

      if (options && options.epsg) {
        const prjObj = projData['EPSG:' + options.epsg];
        if (prjObj) {
          destProj = prjObj.proj4;
        }
      }

      if (destProj) {
        prj = proj4(destProj, fromProj);
      } else {
        prj = proj4(fromProj);
      }
    }
  } catch (e) {
    prj = false;
  }
  return parseShp(args[0], prj);
};
const handleDbf = async (base) => {
  const [dbf, cpg] = await Promise.all([
    binaryAjax(base, 'dbf'),
    binaryAjax(base, 'cpg')
  ]);
  if (!dbf) {
    return;
  }
  return parseDbf(dbf, cpg);
};
const checkSuffix = (base, suffix) => {
  const url = new URL(base);
  return url.pathname.slice(-4).toLowerCase() === suffix;
};
shp.getShapefile = async function (base, whiteList, options) {
  if (typeof base !== 'string') {
    return shp.parseZip(base);
  }
  if (checkSuffix(base, '.zip')) {
    return getZip(base, whiteList, options);
  }
  const results = await Promise.all([
    handleShp(base, options),
    handleDbf(base)
  ]);
  return shp.combine(results);
};
shp.parseShp = function (shp, prj) {
  shp = toBuffer(shp);
  if (Buffer.isBuffer(prj)) {
    prj = prj.toString();
  }
  if (typeof prj === 'string') {
    try {
      prj = proj4(prj);
    } catch (e) {
      prj = false;
    }
  }
  return parseShp(shp, prj);
};
shp.parseDbf = function (dbf, cpg) {
  dbf = toBuffer(dbf);
  return parseDbf(dbf, cpg);
};
shp.fromLocalFile = async function (filePath, options) {
  if (filePath.length >= 4 && filePath.endsWith('.shp')) {
    filePath = filePath.substring(0, filePath.length - 4);
  }

  let shpBuffer;
  let dbfBuffer;
  let fromProj;

  try {
    shpBuffer = fs.readFileSync(filePath + '.shp');
    dbfBuffer = fs.readFileSync(filePath + '.dbf');
    fromProj = fs.readFileSync(filePath + '.prj').toString();
  } catch (err) {
    console.error(err);
  }

  const esriPrjObj = wktParser(fromProj);
  const epsg = esriEpsg(esriPrjObj.name);

  if (epsg) {
    const prjObj = projData['EPSG:' + epsg];
    if (prjObj) {
      fromProj = prjObj.proj4;
    }
  }

  let destProj = null;
  if (options && options.epsg) {
    const prjObj = projData['EPSG:' + options.epsg];
    if (prjObj) {
      destProj = prjObj.proj4;
    }
  }

  let prj = null;
  if (destProj) {
    prj = proj4(destProj, fromProj);
  } else {
    prj = proj4(fromProj);
  }

  const reuslt = shp.combine([shp.parseShp(shpBuffer, prj), shp.parseDbf(dbfBuffer, options.cpg)]);

  return reuslt;
};
shp.fromClientFile = async function (shpFile, dbfFile, prjFile, options) {
  let shpBuffer;
  let dbfBuffer;
  let fromProj;

  try {
    shpBuffer = await clientReadFile(shpFile);
    dbfBuffer = await clientReadFile(dbfFile, null, options.cpg);
    fromProj = await clientReadFile(prjFile, 'text');
  } catch (err) {
    console.error(err);
  }

  const esriPrjObj = wktParser(fromProj);
  const epsg = esriEpsg(esriPrjObj.name);

  if (epsg) {
    const prjObj = projData['EPSG:' + epsg];
    if (prjObj) {
      fromProj = prjObj.proj4;
    }
  }

  let destProj = null;
  if (options && options.epsg) {
    const prjObj = projData['EPSG:' + options.epsg];
    if (prjObj) {
      destProj = prjObj.proj4;
    }
  }

  let prj = null;
  if (destProj) {
    prj = proj4(destProj, fromProj);
  } else {
    prj = proj4(fromProj);
  }

  const reuslt = shp.combine([shp.parseShp(shpBuffer, prj), shp.parseDbf(dbfBuffer, options.cpg)]);

  return reuslt;
};
shp.jsZip = JSZip;
shp.proj4 = proj4;
shp.esriEpsg = esriEpsg;

module.exports = shp;

}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./binaryajax":2,"./clientReadFile":3,"./esriEpsg":5,"./parseShp":6,"./unzip":7,"buffer":11,"fs":10,"lie":15,"lru-cache":16,"parsedbf":18,"proj-data":20,"proj4":21,"wkt-parser":28}]},{},[29])(29)
});
